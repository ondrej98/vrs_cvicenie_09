
vrs_cvicenie_09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007484  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08007618  08007618  00017618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007aa8  08007aa8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007aa8  08007aa8  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007aa8  08007aa8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007aa8  08007aa8  00017aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007aac  08007aac  00017aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000080  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000025c  2000025c  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f418  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029f6  00000000  00000000  0002f624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000968  00000000  00000000  00032020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000840  00000000  00000000  00032988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000199f3  00000000  00000000  000331c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009d22  00000000  00000000  0004cbbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007ddfe  00000000  00000000  000568dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000d46db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000386c  00000000  00000000  000d4730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080075fc 	.word	0x080075fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080075fc 	.word	0x080075fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	683a      	ldr	r2, [r7, #0]
 8000c56:	619a      	str	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	683a      	ldr	r2, [r7, #0]
 8000c72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <resetSegments>:
extern DisplayDigitData_ DisplayDigit_0;
extern DisplayDigitData_ DisplayDigit_1;
extern DisplayDigitData_ DisplayDigit_2;
extern DisplayDigitData_ DisplayDigit_3;
static uint8_t indexer = 0;
void resetSegments(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	SEGMENT_A_OFF;
 8000c84:	2102      	movs	r1, #2
 8000c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8a:	f7ff ffdd 	bl	8000c48 <LL_GPIO_SetOutputPin>
	SEGMENT_B_OFF;
 8000c8e:	2101      	movs	r1, #1
 8000c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c94:	f7ff ffd8 	bl	8000c48 <LL_GPIO_SetOutputPin>
	SEGMENT_C_OFF;
 8000c98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca0:	f7ff ffd2 	bl	8000c48 <LL_GPIO_SetOutputPin>
	SEGMENT_D_OFF;
 8000ca4:	2120      	movs	r1, #32
 8000ca6:	480c      	ldr	r0, [pc, #48]	; (8000cd8 <resetSegments+0x58>)
 8000ca8:	f7ff ffce 	bl	8000c48 <LL_GPIO_SetOutputPin>
	SEGMENT_E_OFF;
 8000cac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb4:	f7ff ffc8 	bl	8000c48 <LL_GPIO_SetOutputPin>
	SEGMENT_F_OFF;
 8000cb8:	2108      	movs	r1, #8
 8000cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cbe:	f7ff ffc3 	bl	8000c48 <LL_GPIO_SetOutputPin>
	SEGMENT_G_OFF;
 8000cc2:	2110      	movs	r1, #16
 8000cc4:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <resetSegments+0x58>)
 8000cc6:	f7ff ffbf 	bl	8000c48 <LL_GPIO_SetOutputPin>
	SEGMENT_DP_OFF;
 8000cca:	2102      	movs	r1, #2
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <resetSegments+0x58>)
 8000cce:	f7ff ffbb 	bl	8000c48 <LL_GPIO_SetOutputPin>
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	48000400 	.word	0x48000400

08000cdc <resetDigits>:
	SEGMENT_F_ON;
	SEGMENT_G_ON;
	SEGMENT_DP_ON;
}

void resetDigits(void) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	DIGIT_0_OFF;
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	480d      	ldr	r0, [pc, #52]	; (8000d18 <resetDigits+0x3c>)
 8000ce4:	f7ff ffbe 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	DIGIT_1_OFF;
 8000ce8:	2110      	movs	r1, #16
 8000cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cee:	f7ff ffb9 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	DIGIT_2_OFF;
 8000cf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfa:	f7ff ffb3 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	DIGIT_3_OFF;
 8000cfe:	2104      	movs	r1, #4
 8000d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d04:	f7ff ffae 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	DIGIT_TIME_OFF;
 8000d08:	2180      	movs	r1, #128	; 0x80
 8000d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0e:	f7ff ffa9 	bl	8000c64 <LL_GPIO_ResetOutputPin>
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	48000400 	.word	0x48000400

08000d1c <segmentsOn>:
	DIGIT_2_ON;
	DIGIT_3_ON;
	DIGIT_TIME_ON;
}

void segmentsOn(uint8_t index, SegmentDigitStruct digitStruct) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	e883 0006 	stmia.w	r3, {r1, r2}
 8000d28:	4603      	mov	r3, r0
 8000d2a:	73fb      	strb	r3, [r7, #15]
//	resetSegments();
	if (digitStruct.sA)
 8000d2c:	793b      	ldrb	r3, [r7, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d005      	beq.n	8000d3e <segmentsOn+0x22>
		SEGMENT_A_ON;
 8000d32:	2102      	movs	r1, #2
 8000d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d38:	f7ff ff94 	bl	8000c64 <LL_GPIO_ResetOutputPin>
 8000d3c:	e004      	b.n	8000d48 <segmentsOn+0x2c>
	else SEGMENT_A_OFF;
 8000d3e:	2102      	movs	r1, #2
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d44:	f7ff ff80 	bl	8000c48 <LL_GPIO_SetOutputPin>
	if (digitStruct.sB)
 8000d48:	797b      	ldrb	r3, [r7, #5]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d005      	beq.n	8000d5a <segmentsOn+0x3e>
		SEGMENT_B_ON;
 8000d4e:	2101      	movs	r1, #1
 8000d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d54:	f7ff ff86 	bl	8000c64 <LL_GPIO_ResetOutputPin>
 8000d58:	e004      	b.n	8000d64 <segmentsOn+0x48>
	else SEGMENT_B_OFF;
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d60:	f7ff ff72 	bl	8000c48 <LL_GPIO_SetOutputPin>
	if (digitStruct.sC)
 8000d64:	79bb      	ldrb	r3, [r7, #6]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d006      	beq.n	8000d78 <segmentsOn+0x5c>
		SEGMENT_C_ON;
 8000d6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d72:	f7ff ff77 	bl	8000c64 <LL_GPIO_ResetOutputPin>
 8000d76:	e005      	b.n	8000d84 <segmentsOn+0x68>
	else SEGMENT_C_OFF;
 8000d78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d80:	f7ff ff62 	bl	8000c48 <LL_GPIO_SetOutputPin>
	if (digitStruct.sD)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d004      	beq.n	8000d94 <segmentsOn+0x78>
		SEGMENT_D_ON;
 8000d8a:	2120      	movs	r1, #32
 8000d8c:	4833      	ldr	r0, [pc, #204]	; (8000e5c <segmentsOn+0x140>)
 8000d8e:	f7ff ff69 	bl	8000c64 <LL_GPIO_ResetOutputPin>
 8000d92:	e003      	b.n	8000d9c <segmentsOn+0x80>
	else SEGMENT_D_OFF;
 8000d94:	2120      	movs	r1, #32
 8000d96:	4831      	ldr	r0, [pc, #196]	; (8000e5c <segmentsOn+0x140>)
 8000d98:	f7ff ff56 	bl	8000c48 <LL_GPIO_SetOutputPin>
	if (digitStruct.sE)
 8000d9c:	7a3b      	ldrb	r3, [r7, #8]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d006      	beq.n	8000db0 <segmentsOn+0x94>
		SEGMENT_E_ON;
 8000da2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000daa:	f7ff ff5b 	bl	8000c64 <LL_GPIO_ResetOutputPin>
 8000dae:	e005      	b.n	8000dbc <segmentsOn+0xa0>
	else SEGMENT_E_OFF;
 8000db0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db8:	f7ff ff46 	bl	8000c48 <LL_GPIO_SetOutputPin>
	if (digitStruct.sF)
 8000dbc:	7a7b      	ldrb	r3, [r7, #9]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d005      	beq.n	8000dce <segmentsOn+0xb2>
		SEGMENT_F_ON;
 8000dc2:	2108      	movs	r1, #8
 8000dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc8:	f7ff ff4c 	bl	8000c64 <LL_GPIO_ResetOutputPin>
 8000dcc:	e004      	b.n	8000dd8 <segmentsOn+0xbc>
	else SEGMENT_F_OFF;
 8000dce:	2108      	movs	r1, #8
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd4:	f7ff ff38 	bl	8000c48 <LL_GPIO_SetOutputPin>
	if (digitStruct.sG)
 8000dd8:	7abb      	ldrb	r3, [r7, #10]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d004      	beq.n	8000de8 <segmentsOn+0xcc>
		SEGMENT_G_ON;
 8000dde:	2110      	movs	r1, #16
 8000de0:	481e      	ldr	r0, [pc, #120]	; (8000e5c <segmentsOn+0x140>)
 8000de2:	f7ff ff3f 	bl	8000c64 <LL_GPIO_ResetOutputPin>
 8000de6:	e003      	b.n	8000df0 <segmentsOn+0xd4>
	else SEGMENT_G_OFF;
 8000de8:	2110      	movs	r1, #16
 8000dea:	481c      	ldr	r0, [pc, #112]	; (8000e5c <segmentsOn+0x140>)
 8000dec:	f7ff ff2c 	bl	8000c48 <LL_GPIO_SetOutputPin>
	if (digitStruct.sDot)
 8000df0:	7afb      	ldrb	r3, [r7, #11]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d004      	beq.n	8000e00 <segmentsOn+0xe4>
		SEGMENT_DP_ON;
 8000df6:	2102      	movs	r1, #2
 8000df8:	4818      	ldr	r0, [pc, #96]	; (8000e5c <segmentsOn+0x140>)
 8000dfa:	f7ff ff33 	bl	8000c64 <LL_GPIO_ResetOutputPin>
 8000dfe:	e003      	b.n	8000e08 <segmentsOn+0xec>
	else SEGMENT_DP_OFF;
 8000e00:	2102      	movs	r1, #2
 8000e02:	4816      	ldr	r0, [pc, #88]	; (8000e5c <segmentsOn+0x140>)
 8000e04:	f7ff ff20 	bl	8000c48 <LL_GPIO_SetOutputPin>

	resetDigits();
 8000e08:	f7ff ff68 	bl	8000cdc <resetDigits>
	if (index == 0)
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d104      	bne.n	8000e1c <segmentsOn+0x100>
		DIGIT_0_ON;
 8000e12:	2101      	movs	r1, #1
 8000e14:	4811      	ldr	r0, [pc, #68]	; (8000e5c <segmentsOn+0x140>)
 8000e16:	f7ff ff17 	bl	8000c48 <LL_GPIO_SetOutputPin>
		DIGIT_1_ON;
	else if (index == 2)
		DIGIT_2_ON;
	else if (index == 3)
		DIGIT_3_ON;
}
 8000e1a:	e01a      	b.n	8000e52 <segmentsOn+0x136>
	else if (index == 1)
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d105      	bne.n	8000e2e <segmentsOn+0x112>
		DIGIT_1_ON;
 8000e22:	2110      	movs	r1, #16
 8000e24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e28:	f7ff ff0e 	bl	8000c48 <LL_GPIO_SetOutputPin>
}
 8000e2c:	e011      	b.n	8000e52 <segmentsOn+0x136>
	else if (index == 2)
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d106      	bne.n	8000e42 <segmentsOn+0x126>
		DIGIT_2_ON;
 8000e34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3c:	f7ff ff04 	bl	8000c48 <LL_GPIO_SetOutputPin>
}
 8000e40:	e007      	b.n	8000e52 <segmentsOn+0x136>
	else if (index == 3)
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d104      	bne.n	8000e52 <segmentsOn+0x136>
		DIGIT_3_ON;
 8000e48:	2104      	movs	r1, #4
 8000e4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4e:	f7ff fefb 	bl	8000c48 <LL_GPIO_SetOutputPin>
}
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	48000400 	.word	0x48000400

08000e60 <displayCharOnDigit>:

void displayCharOnDigit(DisplayDigitData_ digitData) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	80b8      	strh	r0, [r7, #4]
	SegmentDigitStruct digitStruct = GetSegmentDigit(digitData.chr);
 8000e68:	797a      	ldrb	r2, [r7, #5]
 8000e6a:	f107 0308 	add.w	r3, r7, #8
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 f879 	bl	8000f68 <GetSegmentDigit>
	segmentsOn(digitData.index, digitStruct);
 8000e76:	7938      	ldrb	r0, [r7, #4]
 8000e78:	f107 0308 	add.w	r3, r7, #8
 8000e7c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000e80:	f7ff ff4c 	bl	8000d1c <segmentsOn>
}
 8000e84:	bf00      	nop
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <updateDisplay>:
void updateDisplay(void) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0

	switch (indexer) {
 8000e90:	4b30      	ldr	r3, [pc, #192]	; (8000f54 <updateDisplay+0xc8>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b03      	cmp	r3, #3
 8000e96:	d80b      	bhi.n	8000eb0 <updateDisplay+0x24>
 8000e98:	a201      	add	r2, pc, #4	; (adr r2, 8000ea0 <updateDisplay+0x14>)
 8000e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e9e:	bf00      	nop
 8000ea0:	08000ec1 	.word	0x08000ec1
 8000ea4:	08000ee5 	.word	0x08000ee5
 8000ea8:	08000f09 	.word	0x08000f09
 8000eac:	08000f2d 	.word	0x08000f2d
	default:
		resetDigits();
 8000eb0:	f7ff ff14 	bl	8000cdc <resetDigits>
		resetSegments();
 8000eb4:	f7ff fee4 	bl	8000c80 <resetSegments>
		indexer = 0;
 8000eb8:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <updateDisplay+0xc8>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
		break;
 8000ebe:	e047      	b.n	8000f50 <updateDisplay+0xc4>
	case 0:
		displayCharOnDigit(DisplayDigit_0);
 8000ec0:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <updateDisplay+0xcc>)
 8000ec2:	781a      	ldrb	r2, [r3, #0]
 8000ec4:	785b      	ldrb	r3, [r3, #1]
 8000ec6:	021b      	lsls	r3, r3, #8
 8000ec8:	431a      	orrs	r2, r3
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f362 030f 	bfi	r3, r2, #0, #16
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ffc5 	bl	8000e60 <displayCharOnDigit>
		indexer++;
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <updateDisplay+0xc8>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	3301      	adds	r3, #1
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <updateDisplay+0xc8>)
 8000ee0:	701a      	strb	r2, [r3, #0]
		break;
 8000ee2:	e035      	b.n	8000f50 <updateDisplay+0xc4>
	case 1:
		displayCharOnDigit(DisplayDigit_1);
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <updateDisplay+0xd0>)
 8000ee6:	781a      	ldrb	r2, [r3, #0]
 8000ee8:	785b      	ldrb	r3, [r3, #1]
 8000eea:	021b      	lsls	r3, r3, #8
 8000eec:	431a      	orrs	r2, r3
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f362 030f 	bfi	r3, r2, #0, #16
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ffb3 	bl	8000e60 <displayCharOnDigit>
		indexer++;
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <updateDisplay+0xc8>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	3301      	adds	r3, #1
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <updateDisplay+0xc8>)
 8000f04:	701a      	strb	r2, [r3, #0]
		break;
 8000f06:	e023      	b.n	8000f50 <updateDisplay+0xc4>
	case 2:
		displayCharOnDigit(DisplayDigit_2);
 8000f08:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <updateDisplay+0xd4>)
 8000f0a:	781a      	ldrb	r2, [r3, #0]
 8000f0c:	785b      	ldrb	r3, [r3, #1]
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	431a      	orrs	r2, r3
 8000f12:	2300      	movs	r3, #0
 8000f14:	f362 030f 	bfi	r3, r2, #0, #16
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ffa1 	bl	8000e60 <displayCharOnDigit>
		indexer++;
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <updateDisplay+0xc8>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	3301      	adds	r3, #1
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <updateDisplay+0xc8>)
 8000f28:	701a      	strb	r2, [r3, #0]
		break;
 8000f2a:	e011      	b.n	8000f50 <updateDisplay+0xc4>
	case 3:
		displayCharOnDigit(DisplayDigit_3);
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <updateDisplay+0xd8>)
 8000f2e:	781a      	ldrb	r2, [r3, #0]
 8000f30:	785b      	ldrb	r3, [r3, #1]
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	431a      	orrs	r2, r3
 8000f36:	2300      	movs	r3, #0
 8000f38:	f362 030f 	bfi	r3, r2, #0, #16
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff8f 	bl	8000e60 <displayCharOnDigit>
		indexer++;
 8000f42:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <updateDisplay+0xc8>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	3301      	adds	r3, #1
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4b02      	ldr	r3, [pc, #8]	; (8000f54 <updateDisplay+0xc8>)
 8000f4c:	701a      	strb	r2, [r3, #0]
		break;
 8000f4e:	bf00      	nop

	}
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200001f8 	.word	0x200001f8
 8000f58:	20000218 	.word	0x20000218
 8000f5c:	20000210 	.word	0x20000210
 8000f60:	2000020c 	.word	0x2000020c
 8000f64:	20000214 	.word	0x20000214

08000f68 <GetSegmentDigit>:
		0x08, // _
		0x01, // -
		0x80, // .,
		};

SegmentDigitStruct GetSegmentDigit(uint8_t chr) {
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	70fb      	strb	r3, [r7, #3]
	SegmentDigitStruct result;
	if ((chr >= '0' && chr <= '9') || (chr >= 'A' && chr <= 'Z')
 8000f74:	78fb      	ldrb	r3, [r7, #3]
 8000f76:	2b2f      	cmp	r3, #47	; 0x2f
 8000f78:	d902      	bls.n	8000f80 <GetSegmentDigit+0x18>
 8000f7a:	78fb      	ldrb	r3, [r7, #3]
 8000f7c:	2b39      	cmp	r3, #57	; 0x39
 8000f7e:	d912      	bls.n	8000fa6 <GetSegmentDigit+0x3e>
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	2b40      	cmp	r3, #64	; 0x40
 8000f84:	d902      	bls.n	8000f8c <GetSegmentDigit+0x24>
 8000f86:	78fb      	ldrb	r3, [r7, #3]
 8000f88:	2b5a      	cmp	r3, #90	; 0x5a
 8000f8a:	d90c      	bls.n	8000fa6 <GetSegmentDigit+0x3e>
			|| chr == '_' || chr == '.' || chr == ',' || chr == '-') {
 8000f8c:	78fb      	ldrb	r3, [r7, #3]
 8000f8e:	2b5f      	cmp	r3, #95	; 0x5f
 8000f90:	d009      	beq.n	8000fa6 <GetSegmentDigit+0x3e>
 8000f92:	78fb      	ldrb	r3, [r7, #3]
 8000f94:	2b2e      	cmp	r3, #46	; 0x2e
 8000f96:	d006      	beq.n	8000fa6 <GetSegmentDigit+0x3e>
 8000f98:	78fb      	ldrb	r3, [r7, #3]
 8000f9a:	2b2c      	cmp	r3, #44	; 0x2c
 8000f9c:	d003      	beq.n	8000fa6 <GetSegmentDigit+0x3e>
 8000f9e:	78fb      	ldrb	r3, [r7, #3]
 8000fa0:	2b2d      	cmp	r3, #45	; 0x2d
 8000fa2:	f040 8086 	bne.w	80010b2 <GetSegmentDigit+0x14a>
		uint8_t fontChar = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	75fb      	strb	r3, [r7, #23]
		uint8_t index = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	75bb      	strb	r3, [r7, #22]
		if (chr >= '0' && chr <= '9') {
 8000fae:	78fb      	ldrb	r3, [r7, #3]
 8000fb0:	2b2f      	cmp	r3, #47	; 0x2f
 8000fb2:	d90a      	bls.n	8000fca <GetSegmentDigit+0x62>
 8000fb4:	78fb      	ldrb	r3, [r7, #3]
 8000fb6:	2b39      	cmp	r3, #57	; 0x39
 8000fb8:	d807      	bhi.n	8000fca <GetSegmentDigit+0x62>
			index = chr - '0';
 8000fba:	78fb      	ldrb	r3, [r7, #3]
 8000fbc:	3b30      	subs	r3, #48	; 0x30
 8000fbe:	75bb      	strb	r3, [r7, #22]
			fontChar = Font_Table[FONTS_DIGITS_START + index];
 8000fc0:	7dbb      	ldrb	r3, [r7, #22]
 8000fc2:	4a4a      	ldr	r2, [pc, #296]	; (80010ec <GetSegmentDigit+0x184>)
 8000fc4:	5cd3      	ldrb	r3, [r2, r3]
 8000fc6:	75fb      	strb	r3, [r7, #23]
 8000fc8:	e022      	b.n	8001010 <GetSegmentDigit+0xa8>
		} else if (chr >= 'A' && chr <= 'Z') {
 8000fca:	78fb      	ldrb	r3, [r7, #3]
 8000fcc:	2b40      	cmp	r3, #64	; 0x40
 8000fce:	d90b      	bls.n	8000fe8 <GetSegmentDigit+0x80>
 8000fd0:	78fb      	ldrb	r3, [r7, #3]
 8000fd2:	2b5a      	cmp	r3, #90	; 0x5a
 8000fd4:	d808      	bhi.n	8000fe8 <GetSegmentDigit+0x80>
			index = chr - 'A';
 8000fd6:	78fb      	ldrb	r3, [r7, #3]
 8000fd8:	3b41      	subs	r3, #65	; 0x41
 8000fda:	75bb      	strb	r3, [r7, #22]
			fontChar = Font_Table[FONTS_CHARS_START + index];
 8000fdc:	7dbb      	ldrb	r3, [r7, #22]
 8000fde:	330a      	adds	r3, #10
 8000fe0:	4a42      	ldr	r2, [pc, #264]	; (80010ec <GetSegmentDigit+0x184>)
 8000fe2:	5cd3      	ldrb	r3, [r2, r3]
 8000fe4:	75fb      	strb	r3, [r7, #23]
 8000fe6:	e013      	b.n	8001010 <GetSegmentDigit+0xa8>
		} else if (chr == '_') {
 8000fe8:	78fb      	ldrb	r3, [r7, #3]
 8000fea:	2b5f      	cmp	r3, #95	; 0x5f
 8000fec:	d102      	bne.n	8000ff4 <GetSegmentDigit+0x8c>
			fontChar = Font_Table[FONTS_UNDERSCORE];
 8000fee:	2308      	movs	r3, #8
 8000ff0:	75fb      	strb	r3, [r7, #23]
 8000ff2:	e00d      	b.n	8001010 <GetSegmentDigit+0xa8>
		}else if(chr == '-'){
 8000ff4:	78fb      	ldrb	r3, [r7, #3]
 8000ff6:	2b2d      	cmp	r3, #45	; 0x2d
 8000ff8:	d102      	bne.n	8001000 <GetSegmentDigit+0x98>
			fontChar = Font_Table[FONTS_MINUS];
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	75fb      	strb	r3, [r7, #23]
 8000ffe:	e007      	b.n	8001010 <GetSegmentDigit+0xa8>
		}else if(chr == '.' || chr == ','){
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	2b2e      	cmp	r3, #46	; 0x2e
 8001004:	d002      	beq.n	800100c <GetSegmentDigit+0xa4>
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	2b2c      	cmp	r3, #44	; 0x2c
 800100a:	d101      	bne.n	8001010 <GetSegmentDigit+0xa8>
			fontChar = Font_Table[FONTS_DOT];
 800100c:	2380      	movs	r3, #128	; 0x80
 800100e:	75fb      	strb	r3, [r7, #23]
		}
		result.sA = fontChar & ConverterValue_SegmentA ? true : false;
 8001010:	2240      	movs	r2, #64	; 0x40
 8001012:	7dfb      	ldrb	r3, [r7, #23]
 8001014:	4013      	ands	r3, r2
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	bf14      	ite	ne
 800101c:	2301      	movne	r3, #1
 800101e:	2300      	moveq	r3, #0
 8001020:	b2db      	uxtb	r3, r3
 8001022:	733b      	strb	r3, [r7, #12]
		result.sB = fontChar & ConverterValue_SegmentB ? true : false;
 8001024:	2220      	movs	r2, #32
 8001026:	7dfb      	ldrb	r3, [r7, #23]
 8001028:	4013      	ands	r3, r2
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	bf14      	ite	ne
 8001030:	2301      	movne	r3, #1
 8001032:	2300      	moveq	r3, #0
 8001034:	b2db      	uxtb	r3, r3
 8001036:	737b      	strb	r3, [r7, #13]
		result.sC = fontChar & ConverterValue_SegmentC ? true : false;
 8001038:	2210      	movs	r2, #16
 800103a:	7dfb      	ldrb	r3, [r7, #23]
 800103c:	4013      	ands	r3, r2
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	bf14      	ite	ne
 8001044:	2301      	movne	r3, #1
 8001046:	2300      	moveq	r3, #0
 8001048:	b2db      	uxtb	r3, r3
 800104a:	73bb      	strb	r3, [r7, #14]
		result.sD = fontChar & ConverterValue_SegmentD ? true : false;
 800104c:	2208      	movs	r2, #8
 800104e:	7dfb      	ldrb	r3, [r7, #23]
 8001050:	4013      	ands	r3, r2
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	bf14      	ite	ne
 8001058:	2301      	movne	r3, #1
 800105a:	2300      	moveq	r3, #0
 800105c:	b2db      	uxtb	r3, r3
 800105e:	73fb      	strb	r3, [r7, #15]
		result.sE = fontChar & ConverterValue_SegmentE ? true : false;
 8001060:	2204      	movs	r2, #4
 8001062:	7dfb      	ldrb	r3, [r7, #23]
 8001064:	4013      	ands	r3, r2
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	bf14      	ite	ne
 800106c:	2301      	movne	r3, #1
 800106e:	2300      	moveq	r3, #0
 8001070:	b2db      	uxtb	r3, r3
 8001072:	743b      	strb	r3, [r7, #16]
		result.sF = fontChar & ConverterValue_SegmentF ? true : false;
 8001074:	2202      	movs	r2, #2
 8001076:	7dfb      	ldrb	r3, [r7, #23]
 8001078:	4013      	ands	r3, r2
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	bf14      	ite	ne
 8001080:	2301      	movne	r3, #1
 8001082:	2300      	moveq	r3, #0
 8001084:	b2db      	uxtb	r3, r3
 8001086:	747b      	strb	r3, [r7, #17]
		result.sG = fontChar & ConverterValue_SegmentG ? true : false;
 8001088:	2201      	movs	r2, #1
 800108a:	7dfb      	ldrb	r3, [r7, #23]
 800108c:	4013      	ands	r3, r2
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	bf14      	ite	ne
 8001094:	2301      	movne	r3, #1
 8001096:	2300      	moveq	r3, #0
 8001098:	b2db      	uxtb	r3, r3
 800109a:	74bb      	strb	r3, [r7, #18]
		result.sDot = fontChar & ConverterValue_SegmentDot ? true : false;
 800109c:	2280      	movs	r2, #128	; 0x80
 800109e:	7dfb      	ldrb	r3, [r7, #23]
 80010a0:	4013      	ands	r3, r2
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bf14      	ite	ne
 80010a8:	2301      	movne	r3, #1
 80010aa:	2300      	moveq	r3, #0
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	74fb      	strb	r3, [r7, #19]
			|| chr == '_' || chr == '.' || chr == ',' || chr == '-') {
 80010b0:	e00f      	b.n	80010d2 <GetSegmentDigit+0x16a>
	}
	else{
		result.sA = true;
 80010b2:	2301      	movs	r3, #1
 80010b4:	733b      	strb	r3, [r7, #12]
		result.sB = true;
 80010b6:	2301      	movs	r3, #1
 80010b8:	737b      	strb	r3, [r7, #13]
		result.sC = true;
 80010ba:	2301      	movs	r3, #1
 80010bc:	73bb      	strb	r3, [r7, #14]
		result.sD = true;
 80010be:	2301      	movs	r3, #1
 80010c0:	73fb      	strb	r3, [r7, #15]
		result.sE = true;
 80010c2:	2301      	movs	r3, #1
 80010c4:	743b      	strb	r3, [r7, #16]
		result.sF = true;
 80010c6:	2301      	movs	r3, #1
 80010c8:	747b      	strb	r3, [r7, #17]
		result.sG = true;
 80010ca:	2301      	movs	r3, #1
 80010cc:	74bb      	strb	r3, [r7, #18]
		result.sDot = true;
 80010ce:	2301      	movs	r3, #1
 80010d0:	74fb      	strb	r3, [r7, #19]
	}
	return result;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	461a      	mov	r2, r3
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	cb03      	ldmia	r3!, {r0, r1}
 80010dc:	6010      	str	r0, [r2, #0]
 80010de:	6051      	str	r1, [r2, #4]
}
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	371c      	adds	r7, #28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	08007618 	.word	0x08007618

080010f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <__NVIC_GetPriorityGrouping+0x18>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	f003 0307 	and.w	r3, r3, #7
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	2b00      	cmp	r3, #0
 800111c:	db0b      	blt.n	8001136 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	f003 021f 	and.w	r2, r3, #31
 8001124:	4907      	ldr	r1, [pc, #28]	; (8001144 <__NVIC_EnableIRQ+0x38>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	095b      	lsrs	r3, r3, #5
 800112c:	2001      	movs	r0, #1
 800112e:	fa00 f202 	lsl.w	r2, r0, r2
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000e100 	.word	0xe000e100

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800120e:	695a      	ldr	r2, [r3, #20]
 8001210:	4907      	ldr	r1, [pc, #28]	; (8001230 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4313      	orrs	r3, r2
 8001216:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800121a:	695a      	ldr	r2, [r3, #20]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4013      	ands	r3, r2
 8001220:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001222:	68fb      	ldr	r3, [r7, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	40021000 	.word	0x40021000

08001234 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800123e:	4a13      	ldr	r2, [pc, #76]	; (800128c <LL_SYSCFG_SetEXTISource+0x58>)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	3302      	adds	r3, #2
 8001246:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	0c1b      	lsrs	r3, r3, #16
 800124e:	43db      	mvns	r3, r3
 8001250:	ea02 0103 	and.w	r1, r2, r3
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	0c1b      	lsrs	r3, r3, #16
 8001258:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	fa93 f3a3 	rbit	r3, r3
 8001260:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	fab3 f383 	clz	r3, r3
 8001268:	b2db      	uxtb	r3, r3
 800126a:	461a      	mov	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	fa03 f202 	lsl.w	r2, r3, r2
 8001272:	4806      	ldr	r0, [pc, #24]	; (800128c <LL_SYSCFG_SetEXTISource+0x58>)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	430a      	orrs	r2, r1
 800127a:	3302      	adds	r3, #2
 800127c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001280:	bf00      	nop
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	40010000 	.word	0x40010000

08001290 <LL_GPIO_SetPinMode>:
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa93 f3a3 	rbit	r3, r3
 80012aa:	613b      	str	r3, [r7, #16]
  return result;
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	fab3 f383 	clz	r3, r3
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2103      	movs	r1, #3
 80012b8:	fa01 f303 	lsl.w	r3, r1, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	401a      	ands	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	fa93 f3a3 	rbit	r3, r3
 80012ca:	61bb      	str	r3, [r7, #24]
  return result;
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	fab3 f383 	clz	r3, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	fa01 f303 	lsl.w	r3, r1, r3
 80012dc:	431a      	orrs	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	601a      	str	r2, [r3, #0]
}
 80012e2:	bf00      	nop
 80012e4:	3724      	adds	r7, #36	; 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <LL_GPIO_SetPinPull>:
{
 80012ee:	b480      	push	{r7}
 80012f0:	b089      	sub	sp, #36	; 0x24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	fa93 f3a3 	rbit	r3, r3
 8001308:	613b      	str	r3, [r7, #16]
  return result;
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	fab3 f383 	clz	r3, r3
 8001310:	b2db      	uxtb	r3, r3
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	2103      	movs	r1, #3
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	401a      	ands	r2, r3
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa93 f3a3 	rbit	r3, r3
 8001328:	61bb      	str	r3, [r7, #24]
  return result;
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	fab3 f383 	clz	r3, r3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	fa01 f303 	lsl.w	r3, r1, r3
 800133a:	431a      	orrs	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	60da      	str	r2, [r3, #12]
}
 8001340:	bf00      	nop
 8001342:	3724      	adds	r7, #36	; 0x24
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_GPIO_ResetOutputPin>:
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	; 0x28
 800136c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800136e:	f107 031c 	add.w	r3, r7, #28
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
 8001388:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 800138a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800138e:	f7ff ff39 	bl	8001204 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001392:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001396:	f7ff ff35 	bl	8001204 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800139a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800139e:	f7ff ff31 	bl	8001204 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, S_B_Pin|S_A_Pin|D_3_Pin|S_F_Pin
 80013a2:	f641 119f 	movw	r1, #6559	; 0x199f
 80013a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013aa:	f7ff ffcf 	bl	800134c <LL_GPIO_ResetOutputPin>
                          |D_1_Pin|D_T_Pin|S_C_Pin|S_E_Pin
                          |D_2_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, D_0_Pin|S_DP_Pin|S_G_Pin|S_D_Pin);
 80013ae:	2133      	movs	r1, #51	; 0x33
 80013b0:	4835      	ldr	r0, [pc, #212]	; (8001488 <MX_GPIO_Init+0x120>)
 80013b2:	f7ff ffcb 	bl	800134c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = S_B_Pin|S_A_Pin|D_3_Pin|S_F_Pin
 80013b6:	f641 139f 	movw	r3, #6559	; 0x199f
 80013ba:	607b      	str	r3, [r7, #4]
                          |D_1_Pin|D_T_Pin|S_C_Pin|S_E_Pin
                          |D_2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013bc:	2301      	movs	r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	4619      	mov	r1, r3
 80013d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d4:	f001 fd28 	bl	8002e28 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = D_0_Pin|S_DP_Pin|S_G_Pin|S_D_Pin;
 80013d8:	2333      	movs	r3, #51	; 0x33
 80013da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013dc:	2301      	movs	r3, #1
 80013de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	4619      	mov	r1, r3
 80013f0:	4825      	ldr	r0, [pc, #148]	; (8001488 <MX_GPIO_Init+0x120>)
 80013f2:	f001 fd19 	bl	8002e28 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80013f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013fc:	2302      	movs	r3, #2
 80013fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001400:	2303      	movs	r3, #3
 8001402:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800140c:	2307      	movs	r3, #7
 800140e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	4619      	mov	r1, r3
 8001414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001418:	f001 fd06 	bl	8002e28 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 800141c:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8001420:	2001      	movs	r0, #1
 8001422:	f7ff ff07 	bl	8001234 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(TLACIDLO_GPIO_Port, TLACIDLO_Pin, LL_GPIO_PULL_UP);
 8001426:	2201      	movs	r2, #1
 8001428:	2108      	movs	r1, #8
 800142a:	4817      	ldr	r0, [pc, #92]	; (8001488 <MX_GPIO_Init+0x120>)
 800142c:	f7ff ff5f 	bl	80012ee <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(TLACIDLO_GPIO_Port, TLACIDLO_Pin, LL_GPIO_MODE_INPUT);
 8001430:	2200      	movs	r2, #0
 8001432:	2108      	movs	r1, #8
 8001434:	4814      	ldr	r0, [pc, #80]	; (8001488 <MX_GPIO_Init+0x120>)
 8001436:	f7ff ff2b 	bl	8001290 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 800143a:	2308      	movs	r3, #8
 800143c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001442:	2301      	movs	r3, #1
 8001444:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001448:	2300      	movs	r3, #0
 800144a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800144e:	2301      	movs	r3, #1
 8001450:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4618      	mov	r0, r3
 800145a:	f001 faed 	bl	8002a38 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800145e:	f7ff fe47 	bl	80010f0 <__NVIC_GetPriorityGrouping>
 8001462:	4603      	mov	r3, r0
 8001464:	2200      	movs	r2, #0
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fe97 	bl	800119c <NVIC_EncodePriority>
 800146e:	4603      	mov	r3, r0
 8001470:	4619      	mov	r1, r3
 8001472:	2009      	movs	r0, #9
 8001474:	f7ff fe68 	bl	8001148 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 8001478:	2009      	movs	r0, #9
 800147a:	f7ff fe47 	bl	800110c <__NVIC_EnableIRQ>

}
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	; 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	48000400 	.word	0x48000400

0800148c <__NVIC_GetPriorityGrouping>:
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001490:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	0a1b      	lsrs	r3, r3, #8
 8001496:	f003 0307 	and.w	r3, r3, #7
}
 800149a:	4618      	mov	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_EnableIRQ>:
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	db0b      	blt.n	80014d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	f003 021f 	and.w	r2, r3, #31
 80014c0:	4907      	ldr	r1, [pc, #28]	; (80014e0 <__NVIC_EnableIRQ+0x38>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	095b      	lsrs	r3, r3, #5
 80014c8:	2001      	movs	r0, #1
 80014ca:	fa00 f202 	lsl.w	r2, r0, r2
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000e100 	.word	0xe000e100

080014e4 <__NVIC_SetPriority>:
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	6039      	str	r1, [r7, #0]
 80014ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	db0a      	blt.n	800150e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	490c      	ldr	r1, [pc, #48]	; (8001530 <__NVIC_SetPriority+0x4c>)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	0112      	lsls	r2, r2, #4
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	440b      	add	r3, r1
 8001508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800150c:	e00a      	b.n	8001524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4908      	ldr	r1, [pc, #32]	; (8001534 <__NVIC_SetPriority+0x50>)
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	3b04      	subs	r3, #4
 800151c:	0112      	lsls	r2, r2, #4
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	440b      	add	r3, r1
 8001522:	761a      	strb	r2, [r3, #24]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000e100 	.word	0xe000e100
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <NVIC_EncodePriority>:
{
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f1c3 0307 	rsb	r3, r3, #7
 8001552:	2b04      	cmp	r3, #4
 8001554:	bf28      	it	cs
 8001556:	2304      	movcs	r3, #4
 8001558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3304      	adds	r3, #4
 800155e:	2b06      	cmp	r3, #6
 8001560:	d902      	bls.n	8001568 <NVIC_EncodePriority+0x30>
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3b03      	subs	r3, #3
 8001566:	e000      	b.n	800156a <NVIC_EncodePriority+0x32>
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	f04f 32ff 	mov.w	r2, #4294967295
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43da      	mvns	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	401a      	ands	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001580:	f04f 31ff 	mov.w	r1, #4294967295
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	43d9      	mvns	r1, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	4313      	orrs	r3, r2
}
 8001592:	4618      	mov	r0, r3
 8001594:	3724      	adds	r7, #36	; 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f043 0201 	orr.w	r2, r3, #1
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	601a      	str	r2, [r3, #0]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	601a      	str	r2, [r3, #0]
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	601a      	str	r2, [r3, #0]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80015fe:	b480      	push	{r7}
 8001600:	b085      	sub	sp, #20
 8001602:	af00      	add	r7, sp, #0
 8001604:	60f8      	str	r0, [r7, #12]
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001612:	f023 0306 	bic.w	r3, r3, #6
 8001616:	68b9      	ldr	r1, [r7, #8]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	430a      	orrs	r2, r1
 800161c:	431a      	orrs	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	60da      	str	r2, [r3, #12]
}
 8001622:	bf00      	nop
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	60da      	str	r2, [r3, #12]
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f043 0204 	orr.w	r2, r3, #4
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	601a      	str	r2, [r3, #0]
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f023 0204 	bic.w	r2, r3, #4
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	601a      	str	r2, [r3, #0]
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d101      	bne.n	80016a6 <LL_I2C_IsActiveFlag_TXIS+0x18>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0320 	and.w	r3, r3, #32
 80016c4:	2b20      	cmp	r3, #32
 80016c6:	d101      	bne.n	80016cc <LL_I2C_IsActiveFlag_STOP+0x18>
 80016c8:	2301      	movs	r3, #1
 80016ca:	e000      	b.n	80016ce <LL_I2C_IsActiveFlag_STOP+0x1a>
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f043 0220 	orr.w	r2, r3, #32
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	61da      	str	r2, [r3, #28]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	605a      	str	r2, [r3, #4]
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
 8001728:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	0d5b      	lsrs	r3, r3, #21
 8001732:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <LL_I2C_HandleTransfer+0x48>)
 8001738:	430b      	orrs	r3, r1
 800173a:	43db      	mvns	r3, r3
 800173c:	401a      	ands	r2, r3
 800173e:	68b9      	ldr	r1, [r7, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4319      	orrs	r1, r3
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	041b      	lsls	r3, r3, #16
 8001748:	4319      	orrs	r1, r3
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	4319      	orrs	r1, r3
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	430b      	orrs	r3, r1
 8001752:	431a      	orrs	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	03ff7bff 	.word	0x03ff7bff

08001768 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001774:	78fa      	ldrb	r2, [r7, #3]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	629a      	str	r2, [r3, #40]	; 0x28
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <LL_AHB1_GRP1_EnableClock>:
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001792:	695a      	ldr	r2, [r3, #20]
 8001794:	4907      	ldr	r1, [pc, #28]	; (80017b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4313      	orrs	r3, r2
 800179a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800179e:	695a      	ldr	r2, [r3, #20]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4013      	ands	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	40021000 	.word	0x40021000

080017b8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017c2:	69da      	ldr	r2, [r3, #28]
 80017c4:	4907      	ldr	r1, [pc, #28]	; (80017e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017ce:	69da      	ldr	r2, [r3, #28]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4013      	ands	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017d6:	68fb      	ldr	r3, [r7, #12]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	40021000 	.word	0x40021000

080017e8 <MX_I2C1_Init>:
extern volatile uint8_t ubReceiveIndex;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08e      	sub	sp, #56	; 0x38
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80017ee:	f107 031c 	add.w	r3, r7, #28
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	611a      	str	r2, [r3, #16]
 80017fe:	615a      	str	r2, [r3, #20]
 8001800:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
 8001810:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001812:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001816:	f7ff ffb7 	bl	8001788 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800181a:	23c0      	movs	r3, #192	; 0xc0
 800181c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800181e:	2302      	movs	r3, #2
 8001820:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001822:	2303      	movs	r3, #3
 8001824:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001826:	2301      	movs	r3, #1
 8001828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800182a:	2301      	movs	r3, #1
 800182c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800182e:	2304      	movs	r3, #4
 8001830:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	4619      	mov	r1, r3
 8001836:	4821      	ldr	r0, [pc, #132]	; (80018bc <MX_I2C1_Init+0xd4>)
 8001838:	f001 faf6 	bl	8002e28 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800183c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001840:	f7ff ffba 	bl	80017b8 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001844:	f7ff fe22 	bl	800148c <__NVIC_GetPriorityGrouping>
 8001848:	4603      	mov	r3, r0
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fe72 	bl	8001538 <NVIC_EncodePriority>
 8001854:	4603      	mov	r3, r0
 8001856:	4619      	mov	r1, r3
 8001858:	201f      	movs	r0, #31
 800185a:	f7ff fe43 	bl	80014e4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800185e:	201f      	movs	r0, #31
 8001860:	f7ff fe22 	bl	80014a8 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001864:	4816      	ldr	r0, [pc, #88]	; (80018c0 <MX_I2C1_Init+0xd8>)
 8001866:	f7ff ff48 	bl	80016fa <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 800186a:	4815      	ldr	r0, [pc, #84]	; (80018c0 <MX_I2C1_Init+0xd8>)
 800186c:	f7ff fedf 	bl	800162e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001870:	4813      	ldr	r0, [pc, #76]	; (80018c0 <MX_I2C1_Init+0xd8>)
 8001872:	f7ff feb4 	bl	80015de <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001876:	4812      	ldr	r0, [pc, #72]	; (80018c0 <MX_I2C1_Init+0xd8>)
 8001878:	f7ff fea1 	bl	80015be <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8001880:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <MX_I2C1_Init+0xdc>)
 8001882:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 800188c:	2302      	movs	r3, #2
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001890:	2300      	movs	r3, #0
 8001892:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001894:	2300      	movs	r3, #0
 8001896:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001898:	f107 031c 	add.w	r3, r7, #28
 800189c:	4619      	mov	r1, r3
 800189e:	4808      	ldr	r0, [pc, #32]	; (80018c0 <MX_I2C1_Init+0xd8>)
 80018a0:	f001 fbd5 	bl	800304e <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2100      	movs	r1, #0
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_I2C1_Init+0xd8>)
 80018aa:	f7ff fea8 	bl	80015fe <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 80018ae:	4804      	ldr	r0, [pc, #16]	; (80018c0 <MX_I2C1_Init+0xd8>)
 80018b0:	f7ff fe75 	bl	800159e <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 80018b4:	bf00      	nop
 80018b6:	3738      	adds	r7, #56	; 0x38
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	48000400 	.word	0x48000400
 80018c0:	40005400 	.word	0x40005400
 80018c4:	2000090e 	.word	0x2000090e

080018c8 <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af02      	add	r7, sp, #8
 80018ce:	4604      	mov	r4, r0
 80018d0:	4608      	mov	r0, r1
 80018d2:	4611      	mov	r1, r2
 80018d4:	461a      	mov	r2, r3
 80018d6:	4623      	mov	r3, r4
 80018d8:	71fb      	strb	r3, [r7, #7]
 80018da:	4603      	mov	r3, r0
 80018dc:	71bb      	strb	r3, [r7, #6]
 80018de:	460b      	mov	r3, r1
 80018e0:	717b      	strb	r3, [r7, #5]
 80018e2:	4613      	mov	r3, r2
 80018e4:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 80018e6:	793b      	ldrb	r3, [r7, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 80018ec:	79bb      	ldrb	r3, [r7, #6]
 80018ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018f2:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80018f4:	7979      	ldrb	r1, [r7, #5]
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <i2c_master_write+0x80>)
 80018f8:	9301      	str	r3, [sp, #4]
 80018fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2302      	movs	r3, #2
 8001902:	2200      	movs	r2, #0
 8001904:	4811      	ldr	r0, [pc, #68]	; (800194c <i2c_master_write+0x84>)
 8001906:	f7ff ff09 	bl	800171c <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 800190a:	79bb      	ldrb	r3, [r7, #6]
 800190c:	4619      	mov	r1, r3
 800190e:	480f      	ldr	r0, [pc, #60]	; (800194c <i2c_master_write+0x84>)
 8001910:	f7ff ff2a 	bl	8001768 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001914:	e00a      	b.n	800192c <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001916:	480d      	ldr	r0, [pc, #52]	; (800194c <i2c_master_write+0x84>)
 8001918:	f7ff feb9 	bl	800168e <LL_I2C_IsActiveFlag_TXIS>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d004      	beq.n	800192c <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	4619      	mov	r1, r3
 8001926:	4809      	ldr	r0, [pc, #36]	; (800194c <i2c_master_write+0x84>)
 8001928:	f7ff ff1e 	bl	8001768 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800192c:	4807      	ldr	r0, [pc, #28]	; (800194c <i2c_master_write+0x84>)
 800192e:	f7ff fec1 	bl	80016b4 <LL_I2C_IsActiveFlag_STOP>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0ee      	beq.n	8001916 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001938:	4804      	ldr	r0, [pc, #16]	; (800194c <i2c_master_write+0x84>)
 800193a:	f7ff fece 	bl	80016da <LL_I2C_ClearFlag_STOP>
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	bd90      	pop	{r4, r7, pc}
 8001946:	bf00      	nop
 8001948:	80002000 	.word	0x80002000
 800194c:	40005400 	.word	0x40005400

08001950 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af02      	add	r7, sp, #8
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	4608      	mov	r0, r1
 800195a:	4611      	mov	r1, r2
 800195c:	461a      	mov	r2, r3
 800195e:	4603      	mov	r3, r0
 8001960:	70fb      	strb	r3, [r7, #3]
 8001962:	460b      	mov	r3, r1
 8001964:	70bb      	strb	r3, [r7, #2]
 8001966:	4613      	mov	r3, r2
 8001968:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 800196a:	4a30      	ldr	r2, [pc, #192]	; (8001a2c <i2c_master_read+0xdc>)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8001970:	7c3b      	ldrb	r3, [r7, #16]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8001976:	78bb      	ldrb	r3, [r7, #2]
 8001978:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800197c:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 800197e:	4b2c      	ldr	r3, [pc, #176]	; (8001a30 <i2c_master_read+0xe0>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8001984:	482b      	ldr	r0, [pc, #172]	; (8001a34 <i2c_master_read+0xe4>)
 8001986:	f7ff fe62 	bl	800164e <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 800198a:	7879      	ldrb	r1, [r7, #1]
 800198c:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <i2c_master_read+0xe8>)
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2301      	movs	r3, #1
 8001998:	2200      	movs	r2, #0
 800199a:	4826      	ldr	r0, [pc, #152]	; (8001a34 <i2c_master_read+0xe4>)
 800199c:	f7ff febe 	bl	800171c <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80019a0:	e00a      	b.n	80019b8 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 80019a2:	4824      	ldr	r0, [pc, #144]	; (8001a34 <i2c_master_read+0xe4>)
 80019a4:	f7ff fe73 	bl	800168e <LL_I2C_IsActiveFlag_TXIS>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d004      	beq.n	80019b8 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 80019ae:	78bb      	ldrb	r3, [r7, #2]
 80019b0:	4619      	mov	r1, r3
 80019b2:	4820      	ldr	r0, [pc, #128]	; (8001a34 <i2c_master_read+0xe4>)
 80019b4:	f7ff fed8 	bl	8001768 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80019b8:	481e      	ldr	r0, [pc, #120]	; (8001a34 <i2c_master_read+0xe4>)
 80019ba:	f7ff fe7b 	bl	80016b4 <LL_I2C_IsActiveFlag_STOP>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0ee      	beq.n	80019a2 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80019c4:	481b      	ldr	r0, [pc, #108]	; (8001a34 <i2c_master_read+0xe4>)
 80019c6:	f7ff fe88 	bl	80016da <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 80019ca:	bf00      	nop
 80019cc:	4819      	ldr	r0, [pc, #100]	; (8001a34 <i2c_master_read+0xe4>)
 80019ce:	f7ff fe71 	bl	80016b4 <LL_I2C_IsActiveFlag_STOP>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1f9      	bne.n	80019cc <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 80019d8:	7879      	ldrb	r1, [r7, #1]
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	4a17      	ldr	r2, [pc, #92]	; (8001a3c <i2c_master_read+0xec>)
 80019de:	9201      	str	r2, [sp, #4]
 80019e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019e4:	9200      	str	r2, [sp, #0]
 80019e6:	2200      	movs	r2, #0
 80019e8:	4812      	ldr	r0, [pc, #72]	; (8001a34 <i2c_master_read+0xe4>)
 80019ea:	f7ff fe97 	bl	800171c <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 80019ee:	bf00      	nop
 80019f0:	4810      	ldr	r0, [pc, #64]	; (8001a34 <i2c_master_read+0xe4>)
 80019f2:	f7ff fe5f 	bl	80016b4 <LL_I2C_IsActiveFlag_STOP>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f9      	beq.n	80019f0 <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 80019fc:	480d      	ldr	r0, [pc, #52]	; (8001a34 <i2c_master_read+0xe4>)
 80019fe:	f7ff fe6c 	bl	80016da <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8001a02:	480c      	ldr	r0, [pc, #48]	; (8001a34 <i2c_master_read+0xe4>)
 8001a04:	f7ff fe33 	bl	800166e <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <i2c_master_read+0xe4>)
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <i2c_master_read+0xe4>)
 8001a0e:	f043 0310 	orr.w	r3, r3, #16
 8001a12:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8001a14:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <i2c_master_read+0xf0>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <i2c_master_read+0xe0>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8001a20:	4b02      	ldr	r3, [pc, #8]	; (8001a2c <i2c_master_read+0xdc>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000220 	.word	0x20000220
 8001a30:	20000224 	.word	0x20000224
 8001a34:	40005400 	.word	0x40005400
 8001a38:	80002000 	.word	0x80002000
 8001a3c:	80002400 	.word	0x80002400
 8001a40:	2000021c 	.word	0x2000021c

08001a44 <__NVIC_SetPriorityGrouping>:
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a60:	4013      	ands	r3, r2
 8001a62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a76:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	60d3      	str	r3, [r2, #12]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <LL_RCC_HSI_Enable+0x1c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <LL_RCC_HSI_Enable+0x1c>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40021000 	.word	0x40021000

08001aac <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <LL_RCC_HSI_IsReady+0x20>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	bf0c      	ite	eq
 8001abc:	2301      	moveq	r3, #1
 8001abe:	2300      	movne	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	40021000 	.word	0x40021000

08001ad0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001ad8:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	4904      	ldr	r1, [pc, #16]	; (8001af8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	600b      	str	r3, [r1, #0]
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000

08001afc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <LL_RCC_SetSysClkSource+0x24>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f023 0203 	bic.w	r2, r3, #3
 8001b0c:	4904      	ldr	r1, [pc, #16]	; (8001b20 <LL_RCC_SetSysClkSource+0x24>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	40021000 	.word	0x40021000

08001b24 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b28:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <LL_RCC_GetSysClkSource+0x18>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 030c 	and.w	r3, r3, #12
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40021000 	.word	0x40021000

08001b40 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <LL_RCC_SetAHBPrescaler+0x24>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b50:	4904      	ldr	r1, [pc, #16]	; (8001b64 <LL_RCC_SetAHBPrescaler+0x24>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	40021000 	.word	0x40021000

08001b68 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b78:	4904      	ldr	r1, [pc, #16]	; (8001b8c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	604b      	str	r3, [r1, #4]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	40021000 	.word	0x40021000

08001b90 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ba0:	4904      	ldr	r1, [pc, #16]	; (8001bb4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <LL_RCC_SetI2CClockSource+0x2c>)
 8001bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	0e1b      	lsrs	r3, r3, #24
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	401a      	ands	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001bd2:	4904      	ldr	r1, [pc, #16]	; (8001be4 <LL_RCC_SetI2CClockSource+0x2c>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	40021000 	.word	0x40021000

08001be8 <LL_APB1_GRP1_EnableClock>:
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001bf2:	69da      	ldr	r2, [r3, #28]
 8001bf4:	4907      	ldr	r1, [pc, #28]	; (8001c14 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001bfe:	69da      	ldr	r2, [r3, #28]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4013      	ands	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c06:	68fb      	ldr	r3, [r7, #12]
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	40021000 	.word	0x40021000

08001c18 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c22:	699a      	ldr	r2, [r3, #24]
 8001c24:	4907      	ldr	r1, [pc, #28]	; (8001c44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c2e:	699a      	ldr	r2, [r3, #24]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4013      	ands	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c36:	68fb      	ldr	r3, [r7, #12]
}
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	40021000 	.word	0x40021000

08001c48 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <LL_FLASH_SetLatency+0x24>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f023 0207 	bic.w	r2, r3, #7
 8001c58:	4904      	ldr	r1, [pc, #16]	; (8001c6c <LL_FLASH_SetLatency+0x24>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	600b      	str	r3, [r1, #0]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	40022000 	.word	0x40022000

08001c70 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <LL_FLASH_GetLatency+0x18>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0307 	and.w	r3, r3, #7
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40022000 	.word	0x40022000

08001c8c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	DisplayDigit_0.index = 0;
 8001c92:	4b6b      	ldr	r3, [pc, #428]	; (8001e40 <main+0x1b4>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
	DisplayDigit_0.chr = 0;
 8001c98:	4b69      	ldr	r3, [pc, #420]	; (8001e40 <main+0x1b4>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	705a      	strb	r2, [r3, #1]
	DisplayDigit_1.index = 1;
 8001c9e:	4b69      	ldr	r3, [pc, #420]	; (8001e44 <main+0x1b8>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	701a      	strb	r2, [r3, #0]
	DisplayDigit_1.chr = 0;
 8001ca4:	4b67      	ldr	r3, [pc, #412]	; (8001e44 <main+0x1b8>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	705a      	strb	r2, [r3, #1]
	DisplayDigit_2.index = 2;
 8001caa:	4b67      	ldr	r3, [pc, #412]	; (8001e48 <main+0x1bc>)
 8001cac:	2202      	movs	r2, #2
 8001cae:	701a      	strb	r2, [r3, #0]
	DisplayDigit_2.chr = 0;
 8001cb0:	4b65      	ldr	r3, [pc, #404]	; (8001e48 <main+0x1bc>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	705a      	strb	r2, [r3, #1]
	DisplayDigit_3.index = 3;
 8001cb6:	4b65      	ldr	r3, [pc, #404]	; (8001e4c <main+0x1c0>)
 8001cb8:	2203      	movs	r2, #3
 8001cba:	701a      	strb	r2, [r3, #0]
	DisplayDigit_3.chr = 0;
 8001cbc:	4b63      	ldr	r3, [pc, #396]	; (8001e4c <main+0x1c0>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	705a      	strb	r2, [r3, #1]
	nextStringSequence = false;
 8001cc2:	4b63      	ldr	r3, [pc, #396]	; (8001e50 <main+0x1c4>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
	Direction_ direction = Direction_DownUp;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	75fb      	strb	r3, [r7, #23]
	end_of_read_flag = 0;
 8001ccc:	4b61      	ldr	r3, [pc, #388]	; (8001e54 <main+0x1c8>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
	ubReceiveIndex = 0;
 8001cd2:	4b61      	ldr	r3, [pc, #388]	; (8001e58 <main+0x1cc>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
	metOpt = MetricsOption_Temperature;
 8001cd8:	4b60      	ldr	r3, [pc, #384]	; (8001e5c <main+0x1d0>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
	metrics.temperature = -1;
 8001cde:	4b60      	ldr	r3, [pc, #384]	; (8001e60 <main+0x1d4>)
 8001ce0:	4a60      	ldr	r2, [pc, #384]	; (8001e64 <main+0x1d8>)
 8001ce2:	601a      	str	r2, [r3, #0]
	metrics.humidity = -1;
 8001ce4:	4b5e      	ldr	r3, [pc, #376]	; (8001e60 <main+0x1d4>)
 8001ce6:	4a5f      	ldr	r2, [pc, #380]	; (8001e64 <main+0x1d8>)
 8001ce8:	605a      	str	r2, [r3, #4]
	metrics.pressure = -1;
 8001cea:	4b5d      	ldr	r3, [pc, #372]	; (8001e60 <main+0x1d4>)
 8001cec:	4a5d      	ldr	r2, [pc, #372]	; (8001e64 <main+0x1d8>)
 8001cee:	609a      	str	r2, [r3, #8]
	metrics.altitude = -1;
 8001cf0:	4b5b      	ldr	r3, [pc, #364]	; (8001e60 <main+0x1d4>)
 8001cf2:	4a5c      	ldr	r2, [pc, #368]	; (8001e64 <main+0x1d8>)
 8001cf4:	60da      	str	r2, [r3, #12]

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f7ff ff8e 	bl	8001c18 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001cfc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001d00:	f7ff ff72 	bl	8001be8 <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d04:	2003      	movs	r0, #3
 8001d06:	f7ff fe9d 	bl	8001a44 <__NVIC_SetPriorityGrouping>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001d0a:	f000 f8b3 	bl	8001e74 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001d0e:	f7ff fb2b 	bl	8001368 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001d12:	f7ff fd69 	bl	80017e8 <MX_I2C1_Init>
	MX_TIM6_Init();
 8001d16:	f000 fcb5 	bl	8002684 <MX_TIM6_Init>
	MX_TIM7_Init();
 8001d1a:	f000 fcf3 	bl	8002704 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */
	lsm6ds0_init();
 8001d1e:	f001 fb0d 	bl	800333c <lsm6ds0_init>
	hts221_init();
 8001d22:	f001 fb85 	bl	8003430 <hts221_init>
	lps25hb_init();
 8001d26:	f001 fd7f 	bl	8003828 <lps25hb_init>
	uint8_t index = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	75bb      	strb	r3, [r7, #22]
	uint8_t string[STR_LEN] = { 0 };
 8001d2e:	2300      	movs	r3, #0
 8001d30:	603b      	str	r3, [r7, #0]
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
	uint8_t lenString = STR_LEN;
 8001d3e:	2314      	movs	r3, #20
 8001d40:	757b      	strb	r3, [r7, #21]
	setMetricsOption(string, metOpt, metrics);
 8001d42:	4b46      	ldr	r3, [pc, #280]	; (8001e5c <main+0x1d0>)
 8001d44:	781a      	ldrb	r2, [r3, #0]
 8001d46:	4b46      	ldr	r3, [pc, #280]	; (8001e60 <main+0x1d4>)
 8001d48:	ed93 6a00 	vldr	s12, [r3]
 8001d4c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d50:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d54:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d58:	463b      	mov	r3, r7
 8001d5a:	eeb0 0a46 	vmov.f32	s0, s12
 8001d5e:	eef0 0a66 	vmov.f32	s1, s13
 8001d62:	eeb0 1a47 	vmov.f32	s2, s14
 8001d66:	eef0 1a67 	vmov.f32	s3, s15
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 f8b7 	bl	8001ee0 <setMetricsOption>
	/*setString(string, TEMPERATURE_STR_TEXT, TEMPERATURE_STR_PROT, temperature,
			TEMPERATURE_MIN, TEMPERATURE_MAX);*/
	lenString = strlen((const char*) string);
 8001d72:	463b      	mov	r3, r7
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fa2b 	bl	80001d0 <strlen>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	757b      	strb	r3, [r7, #21]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (nextStringSequence) {
 8001d7e:	4b34      	ldr	r3, [pc, #208]	; (8001e50 <main+0x1c4>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0fb      	beq.n	8001d7e <main+0xf2>
			nextStringSequence = false;
 8001d86:	4b32      	ldr	r3, [pc, #200]	; (8001e50 <main+0x1c4>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
			/*hts221_get_humidity(&humidity);
			hts221_get_temperature(&temperature);
			lps25hb_get_pressure(&pressure);
			lps25hb_get_altitude(&altitude);*/
			hts221_get_humidity(&metrics.temperature);
 8001d8c:	4834      	ldr	r0, [pc, #208]	; (8001e60 <main+0x1d4>)
 8001d8e:	f001 fb9d 	bl	80034cc <hts221_get_humidity>
			hts221_get_humidity(&metrics.humidity);
 8001d92:	4835      	ldr	r0, [pc, #212]	; (8001e68 <main+0x1dc>)
 8001d94:	f001 fb9a 	bl	80034cc <hts221_get_humidity>
			lps25hb_get_pressure(&metrics.pressure);
 8001d98:	4834      	ldr	r0, [pc, #208]	; (8001e6c <main+0x1e0>)
 8001d9a:	f001 fcc3 	bl	8003724 <lps25hb_get_pressure>
			lps25hb_get_altitude(&metrics.altitude);
 8001d9e:	4834      	ldr	r0, [pc, #208]	; (8001e70 <main+0x1e4>)
 8001da0:	f001 fd02 	bl	80037a8 <lps25hb_get_altitude>
			/*setString(string, ALTITUDE_STR_TEXT, ALTITUDE_STR_PROT, altitude,
					ALTITUDE_MIN, ALTITUDE_MAX);*/
			setMetricsOption(string, metOpt, metrics);
 8001da4:	4b2d      	ldr	r3, [pc, #180]	; (8001e5c <main+0x1d0>)
 8001da6:	781a      	ldrb	r2, [r3, #0]
 8001da8:	4b2d      	ldr	r3, [pc, #180]	; (8001e60 <main+0x1d4>)
 8001daa:	ed93 6a00 	vldr	s12, [r3]
 8001dae:	edd3 6a01 	vldr	s13, [r3, #4]
 8001db2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001db6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dba:	463b      	mov	r3, r7
 8001dbc:	eeb0 0a46 	vmov.f32	s0, s12
 8001dc0:	eef0 0a66 	vmov.f32	s1, s13
 8001dc4:	eeb0 1a47 	vmov.f32	s2, s14
 8001dc8:	eef0 1a67 	vmov.f32	s3, s15
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f886 	bl	8001ee0 <setMetricsOption>
			lenString = strlen((const char*) string);
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe f9fa 	bl	80001d0 <strlen>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	757b      	strb	r3, [r7, #21]
			displayString(index, string, lenString);
 8001de0:	7d7a      	ldrb	r2, [r7, #21]
 8001de2:	4639      	mov	r1, r7
 8001de4:	7dbb      	ldrb	r3, [r7, #22]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 f946 	bl	8002078 <displayString>
			if (index + STR_DISP_LEN < lenString
 8001dec:	7dbb      	ldrb	r3, [r7, #22]
 8001dee:	1d1a      	adds	r2, r3, #4
 8001df0:	7d7b      	ldrb	r3, [r7, #21]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	da06      	bge.n	8001e04 <main+0x178>
					&& direction == Direction_DownUp) {
 8001df6:	7dfb      	ldrb	r3, [r7, #23]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d103      	bne.n	8001e04 <main+0x178>
				index++;
 8001dfc:	7dbb      	ldrb	r3, [r7, #22]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	75bb      	strb	r3, [r7, #22]
 8001e02:	e009      	b.n	8001e18 <main+0x18c>
			} else if (index + STR_DISP_LEN >= lenString
 8001e04:	7dbb      	ldrb	r3, [r7, #22]
 8001e06:	1d1a      	adds	r2, r3, #4
 8001e08:	7d7b      	ldrb	r3, [r7, #21]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	db04      	blt.n	8001e18 <main+0x18c>
					&& direction == Direction_DownUp) {
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <main+0x18c>
				direction = Direction_UpDown;
 8001e14:	2301      	movs	r3, #1
 8001e16:	75fb      	strb	r3, [r7, #23]
			}
			if (index > 0 && direction == Direction_UpDown) {
 8001e18:	7dbb      	ldrb	r3, [r7, #22]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d006      	beq.n	8001e2c <main+0x1a0>
 8001e1e:	7dfb      	ldrb	r3, [r7, #23]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d103      	bne.n	8001e2c <main+0x1a0>
				index--;
 8001e24:	7dbb      	ldrb	r3, [r7, #22]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	75bb      	strb	r3, [r7, #22]
 8001e2a:	e007      	b.n	8001e3c <main+0x1b0>
			} else if (index == 0 && direction == Direction_UpDown) {
 8001e2c:	7dbb      	ldrb	r3, [r7, #22]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1a5      	bne.n	8001d7e <main+0xf2>
 8001e32:	7dfb      	ldrb	r3, [r7, #23]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d1a2      	bne.n	8001d7e <main+0xf2>
				direction = Direction_DownUp;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	75fb      	strb	r3, [r7, #23]
		if (nextStringSequence) {
 8001e3c:	e79f      	b.n	8001d7e <main+0xf2>
 8001e3e:	bf00      	nop
 8001e40:	20000218 	.word	0x20000218
 8001e44:	20000210 	.word	0x20000210
 8001e48:	2000020c 	.word	0x2000020c
 8001e4c:	20000214 	.word	0x20000214
 8001e50:	20000228 	.word	0x20000228
 8001e54:	20000224 	.word	0x20000224
 8001e58:	2000021c 	.word	0x2000021c
 8001e5c:	20000208 	.word	0x20000208
 8001e60:	2000022c 	.word	0x2000022c
 8001e64:	bf800000 	.word	0xbf800000
 8001e68:	20000230 	.word	0x20000230
 8001e6c:	20000234 	.word	0x20000234
 8001e70:	20000238 	.word	0x20000238

08001e74 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f7ff fee5 	bl	8001c48 <LL_FLASH_SetLatency>
	while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0) {
 8001e7e:	bf00      	nop
 8001e80:	f7ff fef6 	bl	8001c70 <LL_FLASH_GetLatency>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1fa      	bne.n	8001e80 <SystemClock_Config+0xc>
	}
	LL_RCC_HSI_Enable();
 8001e8a:	f7ff fdff 	bl	8001a8c <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while (LL_RCC_HSI_IsReady() != 1) {
 8001e8e:	bf00      	nop
 8001e90:	f7ff fe0c 	bl	8001aac <LL_RCC_HSI_IsReady>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d1fa      	bne.n	8001e90 <SystemClock_Config+0x1c>

	}
	LL_RCC_HSI_SetCalibTrimming(16);
 8001e9a:	2010      	movs	r0, #16
 8001e9c:	f7ff fe18 	bl	8001ad0 <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f7ff fe4d 	bl	8001b40 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f7ff fe5e 	bl	8001b68 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001eac:	2000      	movs	r0, #0
 8001eae:	f7ff fe6f 	bl	8001b90 <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f7ff fe22 	bl	8001afc <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8001eb8:	bf00      	nop
 8001eba:	f7ff fe33 	bl	8001b24 <LL_RCC_GetSysClkSource>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1fa      	bne.n	8001eba <SystemClock_Config+0x46>

	}
	LL_Init1msTick(8000000);
 8001ec4:	4805      	ldr	r0, [pc, #20]	; (8001edc <SystemClock_Config+0x68>)
 8001ec6:	f001 f9c5 	bl	8003254 <LL_Init1msTick>
	LL_SetSystemCoreClock(8000000);
 8001eca:	4804      	ldr	r0, [pc, #16]	; (8001edc <SystemClock_Config+0x68>)
 8001ecc:	f001 f9f6 	bl	80032bc <LL_SetSystemCoreClock>
	LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001ed0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001ed4:	f7ff fe70 	bl	8001bb8 <LL_RCC_SetI2CClockSource>
}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	007a1200 	.word	0x007a1200

08001ee0 <setMetricsOption>:

/* USER CODE BEGIN 4 */
void setMetricsOption(uint8_t *str, MetricsOption_ metricsOption,
		MetricsStruct metricsStruct) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6178      	str	r0, [r7, #20]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	eeb0 6a40 	vmov.f32	s12, s0
 8001eee:	eef0 6a60 	vmov.f32	s13, s1
 8001ef2:	eeb0 7a41 	vmov.f32	s14, s2
 8001ef6:	eef0 7a61 	vmov.f32	s15, s3
 8001efa:	74fb      	strb	r3, [r7, #19]
 8001efc:	ed87 6a00 	vstr	s12, [r7]
 8001f00:	edc7 6a01 	vstr	s13, [r7, #4]
 8001f04:	ed87 7a02 	vstr	s14, [r7, #8]
 8001f08:	edc7 7a03 	vstr	s15, [r7, #12]
	switch (metricsOption) {
 8001f0c:	7cfb      	ldrb	r3, [r7, #19]
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d852      	bhi.n	8001fb8 <setMetricsOption+0xd8>
 8001f12:	a201      	add	r2, pc, #4	; (adr r2, 8001f18 <setMetricsOption+0x38>)
 8001f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f18:	08001f29 	.word	0x08001f29
 8001f1c:	08001f4d 	.word	0x08001f4d
 8001f20:	08001f71 	.word	0x08001f71
 8001f24:	08001f95 	.word	0x08001f95
	default: //Unknown
		break;
	case MetricsOption_Temperature:
		setString(str, TEMPERATURE_STR_TEXT, TEMPERATURE_STR_PROT,
 8001f28:	edd7 7a00 	vldr	s15, [r7]
 8001f2c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001fc4 <setMetricsOption+0xe4>
 8001f30:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001fc8 <setMetricsOption+0xe8>
 8001f34:	eeb0 1a66 	vmov.f32	s2, s13
 8001f38:	eef0 0a47 	vmov.f32	s1, s14
 8001f3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f40:	4a22      	ldr	r2, [pc, #136]	; (8001fcc <setMetricsOption+0xec>)
 8001f42:	4923      	ldr	r1, [pc, #140]	; (8001fd0 <setMetricsOption+0xf0>)
 8001f44:	6978      	ldr	r0, [r7, #20]
 8001f46:	f000 f85b 	bl	8002000 <setString>
				metricsStruct.temperature, TEMPERATURE_MIN, TEMPERATURE_MAX);
		break;
 8001f4a:	e036      	b.n	8001fba <setMetricsOption+0xda>
	case MetricsOption_Humidity:
		setString(str, HUMIDITY_STR_TEXT, HUMIDITY_STR_PROT,
 8001f4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f50:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001fd4 <setMetricsOption+0xf4>
 8001f54:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001fc8 <setMetricsOption+0xe8>
 8001f58:	eeb0 1a66 	vmov.f32	s2, s13
 8001f5c:	eef0 0a47 	vmov.f32	s1, s14
 8001f60:	eeb0 0a67 	vmov.f32	s0, s15
 8001f64:	4a1c      	ldr	r2, [pc, #112]	; (8001fd8 <setMetricsOption+0xf8>)
 8001f66:	491d      	ldr	r1, [pc, #116]	; (8001fdc <setMetricsOption+0xfc>)
 8001f68:	6978      	ldr	r0, [r7, #20]
 8001f6a:	f000 f849 	bl	8002000 <setString>
				metricsStruct.humidity, HUMIDITY_MIN, HUMIDITY_MAX);
		break;
 8001f6e:	e024      	b.n	8001fba <setMetricsOption+0xda>
	case MetricsOption_Pressure:
		setString(str, PRESSURE_STR_TEXT, PRESSURE_STR_PROT,
 8001f70:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f74:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001fe0 <setMetricsOption+0x100>
 8001f78:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001fe4 <setMetricsOption+0x104>
 8001f7c:	eeb0 1a66 	vmov.f32	s2, s13
 8001f80:	eef0 0a47 	vmov.f32	s1, s14
 8001f84:	eeb0 0a67 	vmov.f32	s0, s15
 8001f88:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <setMetricsOption+0x108>)
 8001f8a:	4918      	ldr	r1, [pc, #96]	; (8001fec <setMetricsOption+0x10c>)
 8001f8c:	6978      	ldr	r0, [r7, #20]
 8001f8e:	f000 f837 	bl	8002000 <setString>
				metricsStruct.pressure, PRESSURE_MIN, PRESSURE_MAX);
		break;
 8001f92:	e012      	b.n	8001fba <setMetricsOption+0xda>
	case MetricsOption_Altitude:
		setString(str, ALTITUDE_STR_TEXT, ALTITUDE_STR_PROT,
 8001f94:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f98:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001ff0 <setMetricsOption+0x110>
 8001f9c:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001ff4 <setMetricsOption+0x114>
 8001fa0:	eeb0 1a66 	vmov.f32	s2, s13
 8001fa4:	eef0 0a47 	vmov.f32	s1, s14
 8001fa8:	eeb0 0a67 	vmov.f32	s0, s15
 8001fac:	4a12      	ldr	r2, [pc, #72]	; (8001ff8 <setMetricsOption+0x118>)
 8001fae:	4913      	ldr	r1, [pc, #76]	; (8001ffc <setMetricsOption+0x11c>)
 8001fb0:	6978      	ldr	r0, [r7, #20]
 8001fb2:	f000 f825 	bl	8002000 <setString>
				metricsStruct.altitude, ALTITUDE_MIN, ALTITUDE_MAX);
		break;
 8001fb6:	e000      	b.n	8001fba <setMetricsOption+0xda>
		break;
 8001fb8:	bf00      	nop
	}
}
 8001fba:	bf00      	nop
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	c2c7cccd 	.word	0xc2c7cccd
 8001fc8:	42c7cccd 	.word	0x42c7cccd
 8001fcc:	08007648 	.word	0x08007648
 8001fd0:	08007640 	.word	0x08007640
 8001fd4:	00000000 	.word	0x00000000
 8001fd8:	08007658 	.word	0x08007658
 8001fdc:	08007650 	.word	0x08007650
 8001fe0:	43820000 	.word	0x43820000
 8001fe4:	449d7ccd 	.word	0x449d7ccd
 8001fe8:	08007668 	.word	0x08007668
 8001fec:	08007660 	.word	0x08007660
 8001ff0:	c4ea9000 	.word	0xc4ea9000
 8001ff4:	461c3f9a 	.word	0x461c3f9a
 8001ff8:	08007678 	.word	0x08007678
 8001ffc:	08007670 	.word	0x08007670

08002000 <setString>:
void setString(uint8_t *str, const uint8_t *strText, const uint8_t *strProt,
		float value, float minValue, float maxValue) {
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b089      	sub	sp, #36	; 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6178      	str	r0, [r7, #20]
 8002008:	6139      	str	r1, [r7, #16]
 800200a:	60fa      	str	r2, [r7, #12]
 800200c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002010:	edc7 0a01 	vstr	s1, [r7, #4]
 8002014:	ed87 1a00 	vstr	s2, [r7]
	strcpy((char*) str, (const char*) strText);
 8002018:	6939      	ldr	r1, [r7, #16]
 800201a:	6978      	ldr	r0, [r7, #20]
 800201c:	f002 f928 	bl	8004270 <strcpy>
	uint16_t len = strlen((const char*) str);
 8002020:	6978      	ldr	r0, [r7, #20]
 8002022:	f7fe f8d5 	bl	80001d0 <strlen>
 8002026:	4603      	mov	r3, r0
 8002028:	83fb      	strh	r3, [r7, #30]
	if (value < minValue)
 800202a:	ed97 7a02 	vldr	s14, [r7, #8]
 800202e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002032:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203a:	d502      	bpl.n	8002042 <setString+0x42>
		value = minValue;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	e00a      	b.n	8002058 <setString+0x58>
	else if (value > maxValue)
 8002042:	ed97 7a02 	vldr	s14, [r7, #8]
 8002046:	edd7 7a00 	vldr	s15, [r7]
 800204a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800204e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002052:	dd01      	ble.n	8002058 <setString+0x58>
		value = maxValue;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	60bb      	str	r3, [r7, #8]
	sprintf((char*) (str + len), (const char*) strProt, value);
 8002058:	8bfb      	ldrh	r3, [r7, #30]
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	18d4      	adds	r4, r2, r3
 800205e:	68b8      	ldr	r0, [r7, #8]
 8002060:	f7fe fa72 	bl	8000548 <__aeabi_f2d>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	68f9      	ldr	r1, [r7, #12]
 800206a:	4620      	mov	r0, r4
 800206c:	f002 f8e0 	bl	8004230 <siprintf>
}
 8002070:	bf00      	nop
 8002072:	3724      	adds	r7, #36	; 0x24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd90      	pop	{r4, r7, pc}

08002078 <displayString>:
uint8_t displayString(uint8_t index, uint8_t *str, uint8_t length) {
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	6039      	str	r1, [r7, #0]
 8002082:	71fb      	strb	r3, [r7, #7]
 8002084:	4613      	mov	r3, r2
 8002086:	71bb      	strb	r3, [r7, #6]
	uint8_t result = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	73fb      	strb	r3, [r7, #15]
	if (index + STR_DISP_LEN <= length) {
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	1cda      	adds	r2, r3, #3
 8002090:	79bb      	ldrb	r3, [r7, #6]
 8002092:	429a      	cmp	r2, r3
 8002094:	da15      	bge.n	80020c2 <displayString+0x4a>
		uint8_t dispStr[STR_DISP_LEN] = { 0 };
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
		memcpy(dispStr, str + index, STR_DISP_LEN);
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	60bb      	str	r3, [r7, #8]
		result = index + STR_DISP_LEN;
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	3304      	adds	r3, #4
 80020a8:	73fb      	strb	r3, [r7, #15]
		DisplayDigit_0.chr = dispStr[0];
 80020aa:	7a3a      	ldrb	r2, [r7, #8]
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <displayString+0x58>)
 80020ae:	705a      	strb	r2, [r3, #1]
		DisplayDigit_1.chr = dispStr[1];
 80020b0:	7a7a      	ldrb	r2, [r7, #9]
 80020b2:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <displayString+0x5c>)
 80020b4:	705a      	strb	r2, [r3, #1]
		DisplayDigit_2.chr = dispStr[2];
 80020b6:	7aba      	ldrb	r2, [r7, #10]
 80020b8:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <displayString+0x60>)
 80020ba:	705a      	strb	r2, [r3, #1]
		DisplayDigit_3.chr = dispStr[3];
 80020bc:	7afa      	ldrb	r2, [r7, #11]
 80020be:	4b07      	ldr	r3, [pc, #28]	; (80020dc <displayString+0x64>)
 80020c0:	705a      	strb	r2, [r3, #1]

	}
	return result;
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	20000218 	.word	0x20000218
 80020d4:	20000210 	.word	0x20000210
 80020d8:	2000020c 	.word	0x2000020c
 80020dc:	20000214 	.word	0x20000214

080020e0 <LL_I2C_IsActiveFlag_RXNE>:
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d101      	bne.n	80020f8 <LL_I2C_IsActiveFlag_RXNE+0x18>
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <LL_I2C_IsActiveFlag_RXNE+0x1a>
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <LL_I2C_ReceiveData8>:
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	b2db      	uxtb	r3, r3
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002128:	4b07      	ldr	r3, [pc, #28]	; (8002148 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800212a:	695a      	ldr	r2, [r3, #20]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4013      	ands	r3, r2
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	429a      	cmp	r2, r3
 8002134:	bf0c      	ite	eq
 8002136:	2301      	moveq	r3, #1
 8002138:	2300      	movne	r3, #0
 800213a:	b2db      	uxtb	r3, r3
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	40010400 	.word	0x40010400

0800214c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8002154:	4a04      	ldr	r2, [pc, #16]	; (8002168 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6153      	str	r3, [r2, #20]
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40010400 	.word	0x40010400

0800216c <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f06f 0201 	mvn.w	r2, #1
 800217a:	611a      	str	r2, [r3, #16]
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b01      	cmp	r3, #1
 800219a:	d101      	bne.n	80021a0 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800219c:	2301      	movs	r3, #1
 800219e:	e000      	b.n	80021a2 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80021b2:	e7fe      	b.n	80021b2 <NMI_Handler+0x4>

080021b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021b8:	e7fe      	b.n	80021b8 <HardFault_Handler+0x4>

080021ba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021be:	e7fe      	b.n	80021be <MemManage_Handler+0x4>

080021c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c4:	e7fe      	b.n	80021c4 <BusFault_Handler+0x4>

080021c6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021ca:	e7fe      	b.n	80021ca <UsageFault_Handler+0x4>

080021cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 8002208:	2008      	movs	r0, #8
 800220a:	f7ff ff89 	bl	8002120 <LL_EXTI_IsActiveFlag_0_31>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00f      	beq.n	8002234 <EXTI3_IRQHandler+0x30>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 8002214:	2008      	movs	r0, #8
 8002216:	f7ff ff99 	bl	800214c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_3 */
    metOpt++;
 800221a:	4b07      	ldr	r3, [pc, #28]	; (8002238 <EXTI3_IRQHandler+0x34>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	3301      	adds	r3, #1
 8002220:	b2da      	uxtb	r2, r3
 8002222:	4b05      	ldr	r3, [pc, #20]	; (8002238 <EXTI3_IRQHandler+0x34>)
 8002224:	701a      	strb	r2, [r3, #0]
    if(metOpt < MetricsOption_Temperature || metOpt > MetricsOption_Altitude){
 8002226:	4b04      	ldr	r3, [pc, #16]	; (8002238 <EXTI3_IRQHandler+0x34>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b03      	cmp	r3, #3
 800222c:	d902      	bls.n	8002234 <EXTI3_IRQHandler+0x30>
    	metOpt = MetricsOption_Temperature;
 800222e:	4b02      	ldr	r3, [pc, #8]	; (8002238 <EXTI3_IRQHandler+0x34>)
 8002230:	2200      	movs	r2, #0
 8002232:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_3 */
  }
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002234:	bf00      	nop
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000208 	.word	0x20000208

0800223c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 800223c:	b598      	push	{r3, r4, r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
	if (LL_I2C_IsActiveFlag_RXNE(I2C1)) {
 8002240:	4812      	ldr	r0, [pc, #72]	; (800228c <I2C1_EV_IRQHandler+0x50>)
 8002242:	f7ff ff4d 	bl	80020e0 <LL_I2C_IsActiveFlag_RXNE>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d01c      	beq.n	8002286 <I2C1_EV_IRQHandler+0x4a>
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 800224c:	4b10      	ldr	r3, [pc, #64]	; (8002290 <I2C1_EV_IRQHandler+0x54>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b10      	ldr	r3, [pc, #64]	; (8002294 <I2C1_EV_IRQHandler+0x58>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	1c59      	adds	r1, r3, #1
 8002258:	b2c8      	uxtb	r0, r1
 800225a:	490e      	ldr	r1, [pc, #56]	; (8002294 <I2C1_EV_IRQHandler+0x58>)
 800225c:	7008      	strb	r0, [r1, #0]
 800225e:	18d4      	adds	r4, r2, r3
 8002260:	480a      	ldr	r0, [pc, #40]	; (800228c <I2C1_EV_IRQHandler+0x50>)
 8002262:	f7ff ff50 	bl	8002106 <LL_I2C_ReceiveData8>
 8002266:	4603      	mov	r3, r0
 8002268:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 800226a:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <I2C1_EV_IRQHandler+0x58>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b13      	cmp	r3, #19
 8002272:	d903      	bls.n	800227c <I2C1_EV_IRQHandler+0x40>
 8002274:	4b07      	ldr	r3, [pc, #28]	; (8002294 <I2C1_EV_IRQHandler+0x58>)
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
 800227a:	e001      	b.n	8002280 <I2C1_EV_IRQHandler+0x44>
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <I2C1_EV_IRQHandler+0x58>)
 800227e:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <I2C1_EV_IRQHandler+0x5c>)
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd98      	pop	{r3, r4, r7, pc}
 800228a:	bf00      	nop
 800228c:	40005400 	.word	0x40005400
 8002290:	20000220 	.word	0x20000220
 8002294:	2000021c 	.word	0x2000021c
 8002298:	20000224 	.word	0x20000224

0800229c <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM6)) {
 80022a0:	4806      	ldr	r0, [pc, #24]	; (80022bc <TIM6_DAC1_IRQHandler+0x20>)
 80022a2:	f7ff ff71 	bl	8002188 <LL_TIM_IsActiveFlag_UPDATE>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <TIM6_DAC1_IRQHandler+0x14>
		updateDisplay();
 80022ac:	f7fe fdee 	bl	8000e8c <updateDisplay>
	}
  /* USER CODE END TIM6_DAC1_IRQn 0 */

  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */
	LL_TIM_ClearFlag_UPDATE(TIM6);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <TIM6_DAC1_IRQHandler+0x20>)
 80022b2:	f7ff ff5b 	bl	800216c <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40001000 	.word	0x40001000

080022c0 <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM7)) {
 80022c4:	4806      	ldr	r0, [pc, #24]	; (80022e0 <TIM7_DAC2_IRQHandler+0x20>)
 80022c6:	f7ff ff5f 	bl	8002188 <LL_TIM_IsActiveFlag_UPDATE>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d002      	beq.n	80022d6 <TIM7_DAC2_IRQHandler+0x16>
		nextStringSequence = true;
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <TIM7_DAC2_IRQHandler+0x24>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM7_DAC2_IRQn 0 */

  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */
	LL_TIM_ClearFlag_UPDATE(TIM7);
 80022d6:	4802      	ldr	r0, [pc, #8]	; (80022e0 <TIM7_DAC2_IRQHandler+0x20>)
 80022d8:	f7ff ff48 	bl	800216c <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 80022dc:	bf00      	nop
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40001400 	.word	0x40001400
 80022e4:	20000228 	.word	0x20000228

080022e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
	return 1;
 80022ec:	2301      	movs	r3, #1
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <_kill>:

int _kill(int pid, int sig)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002302:	f001 faf9 	bl	80038f8 <__errno>
 8002306:	4603      	mov	r3, r0
 8002308:	2216      	movs	r2, #22
 800230a:	601a      	str	r2, [r3, #0]
	return -1;
 800230c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <_exit>:

void _exit (int status)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002320:	f04f 31ff 	mov.w	r1, #4294967295
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff ffe7 	bl	80022f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800232a:	e7fe      	b.n	800232a <_exit+0x12>

0800232c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	e00a      	b.n	8002354 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800233e:	f3af 8000 	nop.w
 8002342:	4601      	mov	r1, r0
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	60ba      	str	r2, [r7, #8]
 800234a:	b2ca      	uxtb	r2, r1
 800234c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	3301      	adds	r3, #1
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	429a      	cmp	r2, r3
 800235a:	dbf0      	blt.n	800233e <_read+0x12>
	}

return len;
 800235c:	687b      	ldr	r3, [r7, #4]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b086      	sub	sp, #24
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	e009      	b.n	800238c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	60ba      	str	r2, [r7, #8]
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	3301      	adds	r3, #1
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	429a      	cmp	r2, r3
 8002392:	dbf1      	blt.n	8002378 <_write+0x12>
	}
	return len;
 8002394:	687b      	ldr	r3, [r7, #4]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <_close>:

int _close(int file)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
	return -1;
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023c6:	605a      	str	r2, [r3, #4]
	return 0;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <_isatty>:

int _isatty(int file)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
	return 1;
 80023de:	2301      	movs	r3, #1
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
	return 0;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002410:	4a14      	ldr	r2, [pc, #80]	; (8002464 <_sbrk+0x5c>)
 8002412:	4b15      	ldr	r3, [pc, #84]	; (8002468 <_sbrk+0x60>)
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <_sbrk+0x64>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002424:	4b11      	ldr	r3, [pc, #68]	; (800246c <_sbrk+0x64>)
 8002426:	4a12      	ldr	r2, [pc, #72]	; (8002470 <_sbrk+0x68>)
 8002428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <_sbrk+0x64>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	429a      	cmp	r2, r3
 8002436:	d207      	bcs.n	8002448 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002438:	f001 fa5e 	bl	80038f8 <__errno>
 800243c:	4603      	mov	r3, r0
 800243e:	220c      	movs	r2, #12
 8002440:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002442:	f04f 33ff 	mov.w	r3, #4294967295
 8002446:	e009      	b.n	800245c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002448:	4b08      	ldr	r3, [pc, #32]	; (800246c <_sbrk+0x64>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800244e:	4b07      	ldr	r3, [pc, #28]	; (800246c <_sbrk+0x64>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	4a05      	ldr	r2, [pc, #20]	; (800246c <_sbrk+0x64>)
 8002458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800245a:	68fb      	ldr	r3, [r7, #12]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	20003000 	.word	0x20003000
 8002468:	00000400 	.word	0x00000400
 800246c:	200001fc 	.word	0x200001fc
 8002470:	20000260 	.word	0x20000260

08002474 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <SystemInit+0x20>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247e:	4a05      	ldr	r2, [pc, #20]	; (8002494 <SystemInit+0x20>)
 8002480:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002484:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <__NVIC_GetPriorityGrouping>:
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800249c:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <__NVIC_GetPriorityGrouping+0x18>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	0a1b      	lsrs	r3, r3, #8
 80024a2:	f003 0307 	and.w	r3, r3, #7
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <__NVIC_EnableIRQ>:
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	db0b      	blt.n	80024de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	f003 021f 	and.w	r2, r3, #31
 80024cc:	4907      	ldr	r1, [pc, #28]	; (80024ec <__NVIC_EnableIRQ+0x38>)
 80024ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	2001      	movs	r0, #1
 80024d6:	fa00 f202 	lsl.w	r2, r0, r2
 80024da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	e000e100 	.word	0xe000e100

080024f0 <__NVIC_SetPriority>:
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	6039      	str	r1, [r7, #0]
 80024fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002500:	2b00      	cmp	r3, #0
 8002502:	db0a      	blt.n	800251a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	b2da      	uxtb	r2, r3
 8002508:	490c      	ldr	r1, [pc, #48]	; (800253c <__NVIC_SetPriority+0x4c>)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	0112      	lsls	r2, r2, #4
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	440b      	add	r3, r1
 8002514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002518:	e00a      	b.n	8002530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	b2da      	uxtb	r2, r3
 800251e:	4908      	ldr	r1, [pc, #32]	; (8002540 <__NVIC_SetPriority+0x50>)
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	3b04      	subs	r3, #4
 8002528:	0112      	lsls	r2, r2, #4
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	440b      	add	r3, r1
 800252e:	761a      	strb	r2, [r3, #24]
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	e000e100 	.word	0xe000e100
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <NVIC_EncodePriority>:
{
 8002544:	b480      	push	{r7}
 8002546:	b089      	sub	sp, #36	; 0x24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f1c3 0307 	rsb	r3, r3, #7
 800255e:	2b04      	cmp	r3, #4
 8002560:	bf28      	it	cs
 8002562:	2304      	movcs	r3, #4
 8002564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3304      	adds	r3, #4
 800256a:	2b06      	cmp	r3, #6
 800256c:	d902      	bls.n	8002574 <NVIC_EncodePriority+0x30>
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3b03      	subs	r3, #3
 8002572:	e000      	b.n	8002576 <NVIC_EncodePriority+0x32>
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002578:	f04f 32ff 	mov.w	r2, #4294967295
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43da      	mvns	r2, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	401a      	ands	r2, r3
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800258c:	f04f 31ff 	mov.w	r1, #4294967295
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	fa01 f303 	lsl.w	r3, r1, r3
 8002596:	43d9      	mvns	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800259c:	4313      	orrs	r3, r2
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3724      	adds	r7, #36	; 0x24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <LL_APB1_GRP1_EnableClock>:
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80025b6:	69da      	ldr	r2, [r3, #28]
 80025b8:	4907      	ldr	r1, [pc, #28]	; (80025d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80025c2:	69da      	ldr	r2, [r3, #28]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4013      	ands	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025ca:	68fb      	ldr	r3, [r7, #12]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	40021000 	.word	0x40021000

080025dc <LL_TIM_EnableCounter>:
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f043 0201 	orr.w	r2, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	601a      	str	r2, [r3, #0]
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <LL_TIM_DisableARRPreload>:
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	601a      	str	r2, [r3, #0]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <LL_TIM_SetTriggerOutput>:
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	431a      	orrs	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	605a      	str	r2, [r3, #4]
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <LL_TIM_DisableMasterSlaveMode>:
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	609a      	str	r2, [r3, #8]
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f043 0201 	orr.w	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	60da      	str	r2, [r3, #12]
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <MX_TIM6_Init>:

/* USER CODE END 0 */

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800268a:	1d3b      	adds	r3, r7, #4
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	60da      	str	r2, [r3, #12]
 8002696:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8002698:	2010      	movs	r0, #16
 800269a:	f7ff ff87 	bl	80025ac <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_DAC1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800269e:	f7ff fefb 	bl	8002498 <__NVIC_GetPriorityGrouping>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2200      	movs	r2, #0
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff ff4b 	bl	8002544 <NVIC_EncodePriority>
 80026ae:	4603      	mov	r3, r0
 80026b0:	4619      	mov	r1, r3
 80026b2:	2036      	movs	r0, #54	; 0x36
 80026b4:	f7ff ff1c 	bl	80024f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80026b8:	2036      	movs	r0, #54	; 0x36
 80026ba:	f7ff fefb 	bl	80024b4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 80026be:	f240 331f 	movw	r3, #799	; 0x31f
 80026c2:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 49;
 80026c8:	2331      	movs	r3, #49	; 0x31
 80026ca:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 80026cc:	1d3b      	adds	r3, r7, #4
 80026ce:	4619      	mov	r1, r3
 80026d0:	480b      	ldr	r0, [pc, #44]	; (8002700 <MX_TIM6_Init+0x7c>)
 80026d2:	f000 fd33 	bl	800313c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 80026d6:	480a      	ldr	r0, [pc, #40]	; (8002700 <MX_TIM6_Init+0x7c>)
 80026d8:	f7ff ff90 	bl	80025fc <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 80026dc:	2100      	movs	r1, #0
 80026de:	4808      	ldr	r0, [pc, #32]	; (8002700 <MX_TIM6_Init+0x7c>)
 80026e0:	f7ff ff9c 	bl	800261c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 80026e4:	4806      	ldr	r0, [pc, #24]	; (8002700 <MX_TIM6_Init+0x7c>)
 80026e6:	f7ff ffac 	bl	8002642 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */
	LL_TIM_EnableIT_UPDATE(TIM6);
 80026ea:	4805      	ldr	r0, [pc, #20]	; (8002700 <MX_TIM6_Init+0x7c>)
 80026ec:	f7ff ffb9 	bl	8002662 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM6);
 80026f0:	4803      	ldr	r0, [pc, #12]	; (8002700 <MX_TIM6_Init+0x7c>)
 80026f2:	f7ff ff73 	bl	80025dc <LL_TIM_EnableCounter>
  /* USER CODE END TIM6_Init 2 */

}
 80026f6:	bf00      	nop
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40001000 	.word	0x40001000

08002704 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800270a:	1d3b      	adds	r3, r7, #4
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8002718:	2020      	movs	r0, #32
 800271a:	f7ff ff47 	bl	80025ac <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_DAC2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800271e:	f7ff febb 	bl	8002498 <__NVIC_GetPriorityGrouping>
 8002722:	4603      	mov	r3, r0
 8002724:	2200      	movs	r2, #0
 8002726:	2100      	movs	r1, #0
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff0b 	bl	8002544 <NVIC_EncodePriority>
 800272e:	4603      	mov	r3, r0
 8002730:	4619      	mov	r1, r3
 8002732:	2037      	movs	r0, #55	; 0x37
 8002734:	f7ff fedc 	bl	80024f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8002738:	2037      	movs	r0, #55	; 0x37
 800273a:	f7ff febb 	bl	80024b4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 7999;
 800273e:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8002742:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002744:	2300      	movs	r3, #0
 8002746:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 999;
 8002748:	f240 33e7 	movw	r3, #999	; 0x3e7
 800274c:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 800274e:	1d3b      	adds	r3, r7, #4
 8002750:	4619      	mov	r1, r3
 8002752:	480b      	ldr	r0, [pc, #44]	; (8002780 <MX_TIM7_Init+0x7c>)
 8002754:	f000 fcf2 	bl	800313c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM7);
 8002758:	4809      	ldr	r0, [pc, #36]	; (8002780 <MX_TIM7_Init+0x7c>)
 800275a:	f7ff ff4f 	bl	80025fc <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 800275e:	2100      	movs	r1, #0
 8002760:	4807      	ldr	r0, [pc, #28]	; (8002780 <MX_TIM7_Init+0x7c>)
 8002762:	f7ff ff5b 	bl	800261c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 8002766:	4806      	ldr	r0, [pc, #24]	; (8002780 <MX_TIM7_Init+0x7c>)
 8002768:	f7ff ff6b 	bl	8002642 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */
	LL_TIM_EnableIT_UPDATE(TIM7);
 800276c:	4804      	ldr	r0, [pc, #16]	; (8002780 <MX_TIM7_Init+0x7c>)
 800276e:	f7ff ff78 	bl	8002662 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM7);
 8002772:	4803      	ldr	r0, [pc, #12]	; (8002780 <MX_TIM7_Init+0x7c>)
 8002774:	f7ff ff32 	bl	80025dc <LL_TIM_EnableCounter>
  /* USER CODE END TIM7_Init 2 */

}
 8002778:	bf00      	nop
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40001400 	.word	0x40001400

08002784 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002784:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027bc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002788:	480d      	ldr	r0, [pc, #52]	; (80027c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800278a:	490e      	ldr	r1, [pc, #56]	; (80027c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800278c:	4a0e      	ldr	r2, [pc, #56]	; (80027c8 <LoopForever+0xe>)
  movs r3, #0
 800278e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002790:	e002      	b.n	8002798 <LoopCopyDataInit>

08002792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002796:	3304      	adds	r3, #4

08002798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800279a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800279c:	d3f9      	bcc.n	8002792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800279e:	4a0b      	ldr	r2, [pc, #44]	; (80027cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80027a0:	4c0b      	ldr	r4, [pc, #44]	; (80027d0 <LoopForever+0x16>)
  movs r3, #0
 80027a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027a4:	e001      	b.n	80027aa <LoopFillZerobss>

080027a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027a8:	3204      	adds	r2, #4

080027aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027ac:	d3fb      	bcc.n	80027a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80027ae:	f7ff fe61 	bl	8002474 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027b2:	f001 f8a7 	bl	8003904 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027b6:	f7ff fa69 	bl	8001c8c <main>

080027ba <LoopForever>:

LoopForever:
    b LoopForever
 80027ba:	e7fe      	b.n	80027ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80027bc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80027c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027c4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80027c8:	08007ab0 	.word	0x08007ab0
  ldr r2, =_sbss
 80027cc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80027d0:	2000025c 	.word	0x2000025c

080027d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027d4:	e7fe      	b.n	80027d4 <ADC1_2_IRQHandler>
	...

080027d8 <LL_EXTI_EnableIT_0_31>:
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <LL_EXTI_EnableIT_0_31+0x20>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4904      	ldr	r1, [pc, #16]	; (80027f8 <LL_EXTI_EnableIT_0_31+0x20>)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	600b      	str	r3, [r1, #0]
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	40010400 	.word	0x40010400

080027fc <LL_EXTI_EnableIT_32_63>:
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <LL_EXTI_EnableIT_32_63+0x20>)
 8002806:	6a1a      	ldr	r2, [r3, #32]
 8002808:	4904      	ldr	r1, [pc, #16]	; (800281c <LL_EXTI_EnableIT_32_63+0x20>)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4313      	orrs	r3, r2
 800280e:	620b      	str	r3, [r1, #32]
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	40010400 	.word	0x40010400

08002820 <LL_EXTI_DisableIT_0_31>:
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <LL_EXTI_DisableIT_0_31+0x24>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	43db      	mvns	r3, r3
 8002830:	4904      	ldr	r1, [pc, #16]	; (8002844 <LL_EXTI_DisableIT_0_31+0x24>)
 8002832:	4013      	ands	r3, r2
 8002834:	600b      	str	r3, [r1, #0]
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40010400 	.word	0x40010400

08002848 <LL_EXTI_DisableIT_32_63>:
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <LL_EXTI_DisableIT_32_63+0x24>)
 8002852:	6a1a      	ldr	r2, [r3, #32]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	43db      	mvns	r3, r3
 8002858:	4904      	ldr	r1, [pc, #16]	; (800286c <LL_EXTI_DisableIT_32_63+0x24>)
 800285a:	4013      	ands	r3, r2
 800285c:	620b      	str	r3, [r1, #32]
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40010400 	.word	0x40010400

08002870 <LL_EXTI_EnableEvent_0_31>:
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <LL_EXTI_EnableEvent_0_31+0x20>)
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	4904      	ldr	r1, [pc, #16]	; (8002890 <LL_EXTI_EnableEvent_0_31+0x20>)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4313      	orrs	r3, r2
 8002882:	604b      	str	r3, [r1, #4]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	40010400 	.word	0x40010400

08002894 <LL_EXTI_EnableEvent_32_63>:
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <LL_EXTI_EnableEvent_32_63+0x20>)
 800289e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028a0:	4904      	ldr	r1, [pc, #16]	; (80028b4 <LL_EXTI_EnableEvent_32_63+0x20>)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	40010400 	.word	0x40010400

080028b8 <LL_EXTI_DisableEvent_0_31>:
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <LL_EXTI_DisableEvent_0_31+0x24>)
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	43db      	mvns	r3, r3
 80028c8:	4904      	ldr	r1, [pc, #16]	; (80028dc <LL_EXTI_DisableEvent_0_31+0x24>)
 80028ca:	4013      	ands	r3, r2
 80028cc:	604b      	str	r3, [r1, #4]
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40010400 	.word	0x40010400

080028e0 <LL_EXTI_DisableEvent_32_63>:
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80028e8:	4b06      	ldr	r3, [pc, #24]	; (8002904 <LL_EXTI_DisableEvent_32_63+0x24>)
 80028ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	43db      	mvns	r3, r3
 80028f0:	4904      	ldr	r1, [pc, #16]	; (8002904 <LL_EXTI_DisableEvent_32_63+0x24>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40010400 	.word	0x40010400

08002908 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	4904      	ldr	r1, [pc, #16]	; (8002928 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4313      	orrs	r3, r2
 800291a:	608b      	str	r3, [r1, #8]
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	40010400 	.word	0x40010400

0800292c <LL_EXTI_EnableRisingTrig_32_63>:
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002934:	4b05      	ldr	r3, [pc, #20]	; (800294c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002936:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002938:	4904      	ldr	r1, [pc, #16]	; (800294c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4313      	orrs	r3, r2
 800293e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	40010400 	.word	0x40010400

08002950 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	43db      	mvns	r3, r3
 8002960:	4904      	ldr	r1, [pc, #16]	; (8002974 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002962:	4013      	ands	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40010400 	.word	0x40010400

08002978 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002980:	4b06      	ldr	r3, [pc, #24]	; (800299c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002982:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	43db      	mvns	r3, r3
 8002988:	4904      	ldr	r1, [pc, #16]	; (800299c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800298a:	4013      	ands	r3, r2
 800298c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40010400 	.word	0x40010400

080029a0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	4904      	ldr	r1, [pc, #16]	; (80029c0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	60cb      	str	r3, [r1, #12]
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	40010400 	.word	0x40010400

080029c4 <LL_EXTI_EnableFallingTrig_32_63>:
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80029cc:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80029ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d0:	4904      	ldr	r1, [pc, #16]	; (80029e4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	40010400 	.word	0x40010400

080029e8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	4904      	ldr	r1, [pc, #16]	; (8002a0c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	60cb      	str	r3, [r1, #12]
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40010400 	.word	0x40010400

08002a10 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	4904      	ldr	r1, [pc, #16]	; (8002a34 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002a22:	4013      	ands	r3, r2
 8002a24:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40010400 	.word	0x40010400

08002a38 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002a40:	2300      	movs	r3, #0
 8002a42:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	7a1b      	ldrb	r3, [r3, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 80cd 	beq.w	8002be8 <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d061      	beq.n	8002b1a <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	7a5b      	ldrb	r3, [r3, #9]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d01c      	beq.n	8002a98 <LL_EXTI_Init+0x60>
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	dc25      	bgt.n	8002aae <LL_EXTI_Init+0x76>
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <LL_EXTI_Init+0x34>
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d00b      	beq.n	8002a82 <LL_EXTI_Init+0x4a>
 8002a6a:	e020      	b.n	8002aae <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff ff21 	bl	80028b8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff feac 	bl	80027d8 <LL_EXTI_EnableIT_0_31>
          break;
 8002a80:	e018      	b.n	8002ab4 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff feca 	bl	8002820 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff feed 	bl	8002870 <LL_EXTI_EnableEvent_0_31>
          break;
 8002a96:	e00d      	b.n	8002ab4 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff fe9b 	bl	80027d8 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff fee2 	bl	8002870 <LL_EXTI_EnableEvent_0_31>
          break;
 8002aac:	e002      	b.n	8002ab4 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
          break;
 8002ab2:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	7a9b      	ldrb	r3, [r3, #10]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d02e      	beq.n	8002b1a <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	7a9b      	ldrb	r3, [r3, #10]
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	d01c      	beq.n	8002afe <LL_EXTI_Init+0xc6>
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	dc25      	bgt.n	8002b14 <LL_EXTI_Init+0xdc>
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d002      	beq.n	8002ad2 <LL_EXTI_Init+0x9a>
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d00b      	beq.n	8002ae8 <LL_EXTI_Init+0xb0>
 8002ad0:	e020      	b.n	8002b14 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff ff86 	bl	80029e8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff ff11 	bl	8002908 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002ae6:	e019      	b.n	8002b1c <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff ff2f 	bl	8002950 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff ff52 	bl	80029a0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002afc:	e00e      	b.n	8002b1c <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff ff00 	bl	8002908 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff ff47 	bl	80029a0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002b12:	e003      	b.n	8002b1c <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
            break;
 8002b18:	e000      	b.n	8002b1c <LL_EXTI_Init+0xe4>
        }
      }
 8002b1a:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d076      	beq.n	8002c12 <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	7a5b      	ldrb	r3, [r3, #9]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d01c      	beq.n	8002b66 <LL_EXTI_Init+0x12e>
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	dc25      	bgt.n	8002b7c <LL_EXTI_Init+0x144>
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <LL_EXTI_Init+0x102>
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d00b      	beq.n	8002b50 <LL_EXTI_Init+0x118>
 8002b38:	e020      	b.n	8002b7c <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fece 	bl	80028e0 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff fe57 	bl	80027fc <LL_EXTI_EnableIT_32_63>
          break;
 8002b4e:	e018      	b.n	8002b82 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fe77 	bl	8002848 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff fe98 	bl	8002894 <LL_EXTI_EnableEvent_32_63>
          break;
 8002b64:	e00d      	b.n	8002b82 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fe46 	bl	80027fc <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff fe8d 	bl	8002894 <LL_EXTI_EnableEvent_32_63>
          break;
 8002b7a:	e002      	b.n	8002b82 <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
          break;
 8002b80:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	7a9b      	ldrb	r3, [r3, #10]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d043      	beq.n	8002c12 <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	7a9b      	ldrb	r3, [r3, #10]
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d01c      	beq.n	8002bcc <LL_EXTI_Init+0x194>
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	dc25      	bgt.n	8002be2 <LL_EXTI_Init+0x1aa>
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d002      	beq.n	8002ba0 <LL_EXTI_Init+0x168>
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d00b      	beq.n	8002bb6 <LL_EXTI_Init+0x17e>
 8002b9e:	e020      	b.n	8002be2 <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff ff33 	bl	8002a10 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff febc 	bl	800292c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8002bb4:	e02e      	b.n	8002c14 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff fedc 	bl	8002978 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fefd 	bl	80029c4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002bca:	e023      	b.n	8002c14 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff feab 	bl	800292c <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff fef2 	bl	80029c4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002be0:	e018      	b.n	8002c14 <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	73fb      	strb	r3, [r7, #15]
            break;
 8002be6:	e015      	b.n	8002c14 <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fe17 	bl	8002820 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fe5e 	bl	80028b8 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff fe21 	bl	8002848 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff fe68 	bl	80028e0 <LL_EXTI_DisableEvent_32_63>
 8002c10:	e000      	b.n	8002c14 <LL_EXTI_Init+0x1dc>
      }
 8002c12:	bf00      	nop
#endif
  }
  return status;
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <LL_GPIO_SetPinMode>:
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b089      	sub	sp, #36	; 0x24
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	fa93 f3a3 	rbit	r3, r3
 8002c38:	613b      	str	r3, [r7, #16]
  return result;
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	fab3 f383 	clz	r3, r3
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	2103      	movs	r1, #3
 8002c46:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	401a      	ands	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	fa93 f3a3 	rbit	r3, r3
 8002c58:	61bb      	str	r3, [r7, #24]
  return result;
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	fab3 f383 	clz	r3, r3
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	601a      	str	r2, [r3, #0]
}
 8002c70:	bf00      	nop
 8002c72:	3724      	adds	r7, #36	; 0x24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <LL_GPIO_SetPinOutputType>:
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	401a      	ands	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	fb01 f303 	mul.w	r3, r1, r3
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	605a      	str	r2, [r3, #4]
}
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <LL_GPIO_SetPinSpeed>:
{
 8002cac:	b480      	push	{r7}
 8002cae:	b089      	sub	sp, #36	; 0x24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	fa93 f3a3 	rbit	r3, r3
 8002cc6:	613b      	str	r3, [r7, #16]
  return result;
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	fab3 f383 	clz	r3, r3
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	2103      	movs	r1, #3
 8002cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	401a      	ands	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	61bb      	str	r3, [r7, #24]
  return result;
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	fab3 f383 	clz	r3, r3
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	609a      	str	r2, [r3, #8]
}
 8002cfe:	bf00      	nop
 8002d00:	3724      	adds	r7, #36	; 0x24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <LL_GPIO_SetPinPull>:
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b089      	sub	sp, #36	; 0x24
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	fa93 f3a3 	rbit	r3, r3
 8002d24:	613b      	str	r3, [r7, #16]
  return result;
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	fab3 f383 	clz	r3, r3
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	2103      	movs	r1, #3
 8002d32:	fa01 f303 	lsl.w	r3, r1, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	401a      	ands	r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	fa93 f3a3 	rbit	r3, r3
 8002d44:	61bb      	str	r3, [r7, #24]
  return result;
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	fab3 f383 	clz	r3, r3
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	fa01 f303 	lsl.w	r3, r1, r3
 8002d56:	431a      	orrs	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	60da      	str	r2, [r3, #12]
}
 8002d5c:	bf00      	nop
 8002d5e:	3724      	adds	r7, #36	; 0x24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <LL_GPIO_SetAFPin_0_7>:
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b089      	sub	sp, #36	; 0x24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a1a      	ldr	r2, [r3, #32]
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	fa93 f3a3 	rbit	r3, r3
 8002d82:	613b      	str	r3, [r7, #16]
  return result;
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	fab3 f383 	clz	r3, r3
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	210f      	movs	r1, #15
 8002d90:	fa01 f303 	lsl.w	r3, r1, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	401a      	ands	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	61bb      	str	r3, [r7, #24]
  return result;
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	fab3 f383 	clz	r3, r3
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	fa01 f303 	lsl.w	r3, r1, r3
 8002db4:	431a      	orrs	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	621a      	str	r2, [r3, #32]
}
 8002dba:	bf00      	nop
 8002dbc:	3724      	adds	r7, #36	; 0x24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <LL_GPIO_SetAFPin_8_15>:
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b089      	sub	sp, #36	; 0x24
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	0a1b      	lsrs	r3, r3, #8
 8002dda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	fa93 f3a3 	rbit	r3, r3
 8002de2:	613b      	str	r3, [r7, #16]
  return result;
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	fab3 f383 	clz	r3, r3
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	210f      	movs	r1, #15
 8002df0:	fa01 f303 	lsl.w	r3, r1, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	401a      	ands	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	0a1b      	lsrs	r3, r3, #8
 8002dfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	fa93 f3a3 	rbit	r3, r3
 8002e04:	61bb      	str	r3, [r7, #24]
  return result;
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	fab3 f383 	clz	r3, r3
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	fa01 f303 	lsl.w	r3, r1, r3
 8002e16:	431a      	orrs	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002e1c:	bf00      	nop
 8002e1e:	3724      	adds	r7, #36	; 0x24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	fa93 f3a3 	rbit	r3, r3
 8002e3e:	613b      	str	r3, [r7, #16]
  return result;
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	fab3 f383 	clz	r3, r3
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002e4a:	e051      	b.n	8002ef0 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	2101      	movs	r1, #1
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	fa01 f303 	lsl.w	r3, r1, r3
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d043      	beq.n	8002eea <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d003      	beq.n	8002e72 <LL_GPIO_Init+0x4a>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d10e      	bne.n	8002e90 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	461a      	mov	r2, r3
 8002e78:	69b9      	ldr	r1, [r7, #24]
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff ff16 	bl	8002cac <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	6819      	ldr	r1, [r3, #0]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff fef6 	bl	8002c7c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	461a      	mov	r2, r3
 8002e96:	69b9      	ldr	r1, [r7, #24]
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7ff ff36 	bl	8002d0a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d11a      	bne.n	8002edc <LL_GPIO_Init+0xb4>
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	fa93 f3a3 	rbit	r3, r3
 8002eb0:	60bb      	str	r3, [r7, #8]
  return result;
 8002eb2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002eb4:	fab3 f383 	clz	r3, r3
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b07      	cmp	r3, #7
 8002ebc:	d807      	bhi.n	8002ece <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	69b9      	ldr	r1, [r7, #24]
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff ff4e 	bl	8002d68 <LL_GPIO_SetAFPin_0_7>
 8002ecc:	e006      	b.n	8002edc <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	69b9      	ldr	r1, [r7, #24]
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7ff ff75 	bl	8002dc6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	69b9      	ldr	r1, [r7, #24]
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7ff fe9a 	bl	8002c1e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	3301      	adds	r3, #1
 8002eee:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1a6      	bne.n	8002e4c <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3720      	adds	r7, #32
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <LL_I2C_Enable>:
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f043 0201 	orr.w	r2, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	601a      	str	r2, [r3, #0]
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <LL_I2C_Disable>:
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f023 0201 	bic.w	r2, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	601a      	str	r2, [r3, #0]
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <LL_I2C_ConfigFilters>:
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	0219      	lsls	r1, r3, #8
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	430b      	orrs	r3, r1
 8002f64:	431a      	orrs	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	601a      	str	r2, [r3, #0]
}
 8002f6a:	bf00      	nop
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <LL_I2C_SetOwnAddress1>:
{
 8002f76:	b480      	push	{r7}
 8002f78:	b085      	sub	sp, #20
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002f8a:	f023 0307 	bic.w	r3, r3, #7
 8002f8e:	68b9      	ldr	r1, [r7, #8]
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	431a      	orrs	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	609a      	str	r2, [r3, #8]
}
 8002f9a:	bf00      	nop
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <LL_I2C_EnableOwnAddress1>:
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	609a      	str	r2, [r3, #8]
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <LL_I2C_DisableOwnAddress1>:
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	609a      	str	r2, [r3, #8]
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <LL_I2C_SetTiming>:
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
 8002fee:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	611a      	str	r2, [r3, #16]
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <LL_I2C_SetMode>:
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	601a      	str	r2, [r3, #0]
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <LL_I2C_AcknowledgeNextData>:
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	605a      	str	r2, [r3, #4]
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
 8003056:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff ff65 	bl	8002f28 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	6899      	ldr	r1, [r3, #8]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	461a      	mov	r2, r3
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7ff ff6d 	bl	8002f48 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	4619      	mov	r1, r3
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff ffb6 	bl	8002fe6 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff ff44 	bl	8002f08 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff ffa0 	bl	8002fc6 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	6919      	ldr	r1, [r3, #16]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	461a      	mov	r2, r3
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff ff70 	bl	8002f76 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d002      	beq.n	80030a4 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7ff ff81 	bl	8002fa6 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4619      	mov	r1, r3
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7ff ffa9 	bl	8003002 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	4619      	mov	r1, r3
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff ffb6 	bl	8003028 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <LL_TIM_SetPrescaler>:
{
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <LL_TIM_SetAutoReload>:
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <LL_TIM_SetRepetitionCounter>:
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
 8003106:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f043 0201 	orr.w	r2, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	615a      	str	r2, [r3, #20]
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a2f      	ldr	r2, [pc, #188]	; (800320c <LL_TIM_Init+0xd0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d007      	beq.n	8003164 <LL_TIM_Init+0x28>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315a:	d003      	beq.n	8003164 <LL_TIM_Init+0x28>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a2c      	ldr	r2, [pc, #176]	; (8003210 <LL_TIM_Init+0xd4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d106      	bne.n	8003172 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	4313      	orrs	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a25      	ldr	r2, [pc, #148]	; (800320c <LL_TIM_Init+0xd0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d013      	beq.n	80031a2 <LL_TIM_Init+0x66>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003180:	d00f      	beq.n	80031a2 <LL_TIM_Init+0x66>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a22      	ldr	r2, [pc, #136]	; (8003210 <LL_TIM_Init+0xd4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00b      	beq.n	80031a2 <LL_TIM_Init+0x66>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a21      	ldr	r2, [pc, #132]	; (8003214 <LL_TIM_Init+0xd8>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d007      	beq.n	80031a2 <LL_TIM_Init+0x66>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a20      	ldr	r2, [pc, #128]	; (8003218 <LL_TIM_Init+0xdc>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d003      	beq.n	80031a2 <LL_TIM_Init+0x66>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a1f      	ldr	r2, [pc, #124]	; (800321c <LL_TIM_Init+0xe0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d106      	bne.n	80031b0 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	4619      	mov	r1, r3
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff ff90 	bl	80030e2 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	4619      	mov	r1, r3
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff ff7c 	bl	80030c6 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a0e      	ldr	r2, [pc, #56]	; (800320c <LL_TIM_Init+0xd0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d00b      	beq.n	80031ee <LL_TIM_Init+0xb2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a0e      	ldr	r2, [pc, #56]	; (8003214 <LL_TIM_Init+0xd8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d007      	beq.n	80031ee <LL_TIM_Init+0xb2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a0d      	ldr	r2, [pc, #52]	; (8003218 <LL_TIM_Init+0xdc>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d003      	beq.n	80031ee <LL_TIM_Init+0xb2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a0c      	ldr	r2, [pc, #48]	; (800321c <LL_TIM_Init+0xe0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d105      	bne.n	80031fa <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	4619      	mov	r1, r3
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff ff82 	bl	80030fe <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff ff8d 	bl	800311a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40012c00 	.word	0x40012c00
 8003210:	40000400 	.word	0x40000400
 8003214:	40014000 	.word	0x40014000
 8003218:	40014400 	.word	0x40014400
 800321c:	40014800 	.word	0x40014800

08003220 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003232:	4a07      	ldr	r2, [pc, #28]	; (8003250 <LL_InitTick+0x30>)
 8003234:	3b01      	subs	r3, #1
 8003236:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003238:	4b05      	ldr	r3, [pc, #20]	; (8003250 <LL_InitTick+0x30>)
 800323a:	2200      	movs	r2, #0
 800323c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800323e:	4b04      	ldr	r3, [pc, #16]	; (8003250 <LL_InitTick+0x30>)
 8003240:	2205      	movs	r2, #5
 8003242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	e000e010 	.word	0xe000e010

08003254 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800325c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff ffdd 	bl	8003220 <LL_InitTick>
}
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003278:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <LL_mDelay+0x48>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800327e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003286:	d00c      	beq.n	80032a2 <LL_mDelay+0x32>
  {
    Delay++;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3301      	adds	r3, #1
 800328c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800328e:	e008      	b.n	80032a2 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003290:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <LL_mDelay+0x48>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <LL_mDelay+0x32>
    {
      Delay--;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3b01      	subs	r3, #1
 80032a0:	607b      	str	r3, [r7, #4]
  while (Delay)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1f3      	bne.n	8003290 <LL_mDelay+0x20>
    }
  }
}
 80032a8:	bf00      	nop
 80032aa:	bf00      	nop
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	e000e010 	.word	0xe000e010

080032bc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80032c4:	4a04      	ldr	r2, [pc, #16]	; (80032d8 <LL_SetSystemCoreClock+0x1c>)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6013      	str	r3, [r2, #0]
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	20000000 	.word	0x20000000

080032dc <lsm6ds0_read_byte>:
#include "lsm6ds0.h"

uint8_t addres = LSM6DS0_DEVICE_ADDRESS_0;

uint8_t lsm6ds0_read_byte(uint8_t reg_addr)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	4603      	mov	r3, r0
 80032e4:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80032e6:	2300      	movs	r3, #0
 80032e8:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres, 0));
 80032ea:	4b08      	ldr	r3, [pc, #32]	; (800330c <lsm6ds0_read_byte+0x30>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	79fa      	ldrb	r2, [r7, #7]
 80032f0:	f107 000f 	add.w	r0, r7, #15
 80032f4:	2100      	movs	r1, #0
 80032f6:	9100      	str	r1, [sp, #0]
 80032f8:	2101      	movs	r1, #1
 80032fa:	f7fe fb29 	bl	8001950 <i2c_master_read>
 80032fe:	4603      	mov	r3, r0
 8003300:	781b      	ldrb	r3, [r3, #0]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	20000004 	.word	0x20000004

08003310 <lsm6ds0_write_byte>:


void lsm6ds0_write_byte(uint8_t reg_addr, uint8_t value)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	460a      	mov	r2, r1
 800331a:	71fb      	strb	r3, [r7, #7]
 800331c:	4613      	mov	r3, r2
 800331e:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres, 0);
 8003320:	4b05      	ldr	r3, [pc, #20]	; (8003338 <lsm6ds0_write_byte+0x28>)
 8003322:	781a      	ldrb	r2, [r3, #0]
 8003324:	79f9      	ldrb	r1, [r7, #7]
 8003326:	79b8      	ldrb	r0, [r7, #6]
 8003328:	2300      	movs	r3, #0
 800332a:	f7fe facd 	bl	80018c8 <i2c_master_write>
}
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20000004 	.word	0x20000004

0800333c <lsm6ds0_init>:
	*z = (zz >> 4) / 1000.0f;
}


uint8_t lsm6ds0_init(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8003342:	2301      	movs	r3, #1
 8003344:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8003346:	2064      	movs	r0, #100	; 0x64
 8003348:	f7ff ff92 	bl	8003270 <LL_mDelay>

	uint8_t val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 800334c:	200f      	movs	r0, #15
 800334e:	f7ff ffc5 	bl	80032dc <lsm6ds0_read_byte>
 8003352:	4603      	mov	r3, r0
 8003354:	71bb      	strb	r3, [r7, #6]

	if(val == LSM6DS0_WHO_AM_I_VALUE)
 8003356:	79bb      	ldrb	r3, [r7, #6]
 8003358:	2b68      	cmp	r3, #104	; 0x68
 800335a:	d102      	bne.n	8003362 <lsm6ds0_init+0x26>
	{
		status = 1;
 800335c:	2301      	movs	r3, #1
 800335e:	71fb      	strb	r3, [r7, #7]
 8003360:	e00f      	b.n	8003382 <lsm6ds0_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres = LSM6DS0_DEVICE_ADDRESS_1;
 8003362:	4b0e      	ldr	r3, [pc, #56]	; (800339c <lsm6ds0_init+0x60>)
 8003364:	22d6      	movs	r2, #214	; 0xd6
 8003366:	701a      	strb	r2, [r3, #0]
		val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8003368:	200f      	movs	r0, #15
 800336a:	f7ff ffb7 	bl	80032dc <lsm6ds0_read_byte>
 800336e:	4603      	mov	r3, r0
 8003370:	71bb      	strb	r3, [r7, #6]
		if(val == LSM6DS0_WHO_AM_I_VALUE)
 8003372:	79bb      	ldrb	r3, [r7, #6]
 8003374:	2b68      	cmp	r3, #104	; 0x68
 8003376:	d102      	bne.n	800337e <lsm6ds0_init+0x42>
		{
			status = 1;
 8003378:	2301      	movs	r3, #1
 800337a:	71fb      	strb	r3, [r7, #7]
 800337c:	e001      	b.n	8003382 <lsm6ds0_init+0x46>
		}
		else
		{
			status = 0;
 800337e:	2300      	movs	r3, #0
 8003380:	71fb      	strb	r3, [r7, #7]
		}
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 8003382:	2380      	movs	r3, #128	; 0x80
 8003384:	717b      	strb	r3, [r7, #5]
	lsm6ds0_write_byte(LSM6DS0_ADDRESS_CTRL1, ctrl1);
 8003386:	797b      	ldrb	r3, [r7, #5]
 8003388:	4619      	mov	r1, r3
 800338a:	2010      	movs	r0, #16
 800338c:	f7ff ffc0 	bl	8003310 <lsm6ds0_write_byte>

	return status;
 8003390:	79fb      	ldrb	r3, [r7, #7]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000004 	.word	0x20000004

080033a0 <hts221_read_byte>:

uint8_t addresHTS221 = HTS221_DEVICE_ADDRESS;
Hts221HumidityStruct HumidityFactoryCoef;
Hts221TemperatureStruct TemperatureFactoryCoef;

uint8_t hts221_read_byte(uint8_t reg_addr) {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af02      	add	r7, sp, #8
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addresHTS221, 0));
 80033ae:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <hts221_read_byte+0x30>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	79fa      	ldrb	r2, [r7, #7]
 80033b4:	f107 000f 	add.w	r0, r7, #15
 80033b8:	2100      	movs	r1, #0
 80033ba:	9100      	str	r1, [sp, #0]
 80033bc:	2101      	movs	r1, #1
 80033be:	f7fe fac7 	bl	8001950 <i2c_master_read>
 80033c2:	4603      	mov	r3, r0
 80033c4:	781b      	ldrb	r3, [r3, #0]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000005 	.word	0x20000005

080033d4 <hts221_write_byte>:

void hts221_write_byte(uint8_t reg_addr, uint8_t value) {
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	460a      	mov	r2, r1
 80033de:	71fb      	strb	r3, [r7, #7]
 80033e0:	4613      	mov	r3, r2
 80033e2:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addresHTS221, 0);
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <hts221_write_byte+0x28>)
 80033e6:	781a      	ldrb	r2, [r3, #0]
 80033e8:	79f9      	ldrb	r1, [r7, #7]
 80033ea:	79b8      	ldrb	r0, [r7, #6]
 80033ec:	2300      	movs	r3, #0
 80033ee:	f7fe fa6b 	bl	80018c8 <i2c_master_write>
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20000005 	.word	0x20000005

08003400 <hts221_readArray>:

void hts221_readArray(uint8_t *data, uint8_t reg, uint8_t length) {
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af02      	add	r7, sp, #8
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	70fb      	strb	r3, [r7, #3]
 800340c:	4613      	mov	r3, r2
 800340e:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addresHTS221, 1);
 8003410:	4b06      	ldr	r3, [pc, #24]	; (800342c <hts221_readArray+0x2c>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	78fa      	ldrb	r2, [r7, #3]
 8003416:	78b9      	ldrb	r1, [r7, #2]
 8003418:	2001      	movs	r0, #1
 800341a:	9000      	str	r0, [sp, #0]
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7fe fa97 	bl	8001950 <i2c_master_read>
}
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	20000005 	.word	0x20000005

08003430 <hts221_init>:

uint8_t hts221_init(void) {
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
	uint8_t result = 0;
 8003436:	2300      	movs	r3, #0
 8003438:	71fb      	strb	r3, [r7, #7]
	LL_mDelay(100);
 800343a:	2064      	movs	r0, #100	; 0x64
 800343c:	f7ff ff18 	bl	8003270 <LL_mDelay>
	uint8_t val = hts221_read_byte(HTS221_WHO_AM_I_ADDRES);
 8003440:	200f      	movs	r0, #15
 8003442:	f7ff ffad 	bl	80033a0 <hts221_read_byte>
 8003446:	4603      	mov	r3, r0
 8003448:	71bb      	strb	r3, [r7, #6]
	if (val == HTS221_WHO_AM_I_VALUE) {
 800344a:	79bb      	ldrb	r3, [r7, #6]
 800344c:	2bbc      	cmp	r3, #188	; 0xbc
 800344e:	d134      	bne.n	80034ba <hts221_init+0x8a>
		result = 1;
 8003450:	2301      	movs	r3, #1
 8003452:	71fb      	strb	r3, [r7, #7]
		//load reserved bits from device
		uint8_t control1 = hts221_read_byte(HTS221_ADDRESS_CTRL1);
 8003454:	2020      	movs	r0, #32
 8003456:	f7ff ffa3 	bl	80033a0 <hts221_read_byte>
 800345a:	4603      	mov	r3, r0
 800345c:	717b      	strb	r3, [r7, #5]
		//active mode
		control1 &= ~HTS221_PD_MASK;
 800345e:	797b      	ldrb	r3, [r7, #5]
 8003460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003464:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 1) << HTS221_PD_BIT;
 8003466:	797b      	ldrb	r3, [r7, #5]
 8003468:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800346c:	717b      	strb	r3, [r7, #5]
		//output registers not updated until MSB and LSB reading
		control1 &= ~HTS221_BDU_MASK;
 800346e:	797b      	ldrb	r3, [r7, #5]
 8003470:	f023 0304 	bic.w	r3, r3, #4
 8003474:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 1) << HTS221_BDU_BIT;
 8003476:	797b      	ldrb	r3, [r7, #5]
 8003478:	f043 0304 	orr.w	r3, r3, #4
 800347c:	717b      	strb	r3, [r7, #5]
		//ODR register sampling
		control1 &= ~HTS221_ODR_MASK;
 800347e:	797b      	ldrb	r3, [r7, #5]
 8003480:	f023 0303 	bic.w	r3, r3, #3
 8003484:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 2) << HTS221_ODR_BIT;
 8003486:	797b      	ldrb	r3, [r7, #5]
 8003488:	f043 0302 	orr.w	r3, r3, #2
 800348c:	717b      	strb	r3, [r7, #5]
		//Write config. to device
		hts221_write_byte(HTS221_ADDRESS_CTRL1, control1);
 800348e:	797b      	ldrb	r3, [r7, #5]
 8003490:	4619      	mov	r1, r3
 8003492:	2020      	movs	r0, #32
 8003494:	f7ff ff9e 	bl	80033d4 <hts221_write_byte>
		val = hts221_read_byte(HTS221_ADDRESS_CTRL1);
 8003498:	2020      	movs	r0, #32
 800349a:	f7ff ff81 	bl	80033a0 <hts221_read_byte>
 800349e:	4603      	mov	r3, r0
 80034a0:	71bb      	strb	r3, [r7, #6]
		result = val == control1 ? 1 : 0;
 80034a2:	79ba      	ldrb	r2, [r7, #6]
 80034a4:	797b      	ldrb	r3, [r7, #5]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	bf0c      	ite	eq
 80034aa:	2301      	moveq	r3, #1
 80034ac:	2300      	movne	r3, #0
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	71fb      	strb	r3, [r7, #7]
		hts221_get_factory_coef(&HumidityFactoryCoef, &TemperatureFactoryCoef);
 80034b2:	4904      	ldr	r1, [pc, #16]	; (80034c4 <hts221_init+0x94>)
 80034b4:	4804      	ldr	r0, [pc, #16]	; (80034c8 <hts221_init+0x98>)
 80034b6:	f000 f859 	bl	800356c <hts221_get_factory_coef>
	}
	return result;
 80034ba:	79fb      	ldrb	r3, [r7, #7]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	2000023c 	.word	0x2000023c
 80034c8:	20000244 	.word	0x20000244

080034cc <hts221_get_humidity>:

void hts221_get_humidity(float *humidity) {
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2] = { 0 };
 80034d4:	2300      	movs	r3, #0
 80034d6:	81bb      	strh	r3, [r7, #12]
	hts221_readArray(buffer, HTS221_ADDRESS_H_OUT_L, 2);
 80034d8:	f107 030c 	add.w	r3, r7, #12
 80034dc:	2202      	movs	r2, #2
 80034de:	2128      	movs	r1, #40	; 0x28
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff ff8d 	bl	8003400 <hts221_readArray>
	int16_t hOut = ((int16_t) buffer[1]) << 8 | buffer[0];
 80034e6:	7b7b      	ldrb	r3, [r7, #13]
 80034e8:	021b      	lsls	r3, r3, #8
 80034ea:	b21a      	sxth	r2, r3
 80034ec:	7b3b      	ldrb	r3, [r7, #12]
 80034ee:	b21b      	sxth	r3, r3
 80034f0:	4313      	orrs	r3, r2
 80034f2:	82fb      	strh	r3, [r7, #22]
	int16_t h0Rh = HumidityFactoryCoef.h0Rh;
 80034f4:	4b1c      	ldr	r3, [pc, #112]	; (8003568 <hts221_get_humidity+0x9c>)
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	82bb      	strh	r3, [r7, #20]
	int16_t h1Rh = HumidityFactoryCoef.h1Rh;
 80034fa:	4b1b      	ldr	r3, [pc, #108]	; (8003568 <hts221_get_humidity+0x9c>)
 80034fc:	885b      	ldrh	r3, [r3, #2]
 80034fe:	827b      	strh	r3, [r7, #18]
	int16_t h0T0 = HumidityFactoryCoef.h0Out;
 8003500:	4b19      	ldr	r3, [pc, #100]	; (8003568 <hts221_get_humidity+0x9c>)
 8003502:	889b      	ldrh	r3, [r3, #4]
 8003504:	823b      	strh	r3, [r7, #16]
	int16_t h1T0 = HumidityFactoryCoef.h1Out;
 8003506:	4b18      	ldr	r3, [pc, #96]	; (8003568 <hts221_get_humidity+0x9c>)
 8003508:	88db      	ldrh	r3, [r3, #6]
 800350a:	81fb      	strh	r3, [r7, #14]
	*humidity = ((float)(h1Rh - h0Rh) * (float)(hOut - h0T0)) / (float)(h1T0 - h0T0) + h0Rh;
 800350c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003510:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	ee07 3a90 	vmov	s15, r3
 800351a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800351e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003522:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	ee07 3a90 	vmov	s15, r3
 800352c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003530:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003534:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003538:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	ee07 3a90 	vmov	s15, r3
 8003542:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800354a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800354e:	ee07 3a90 	vmov	s15, r3
 8003552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	edc3 7a00 	vstr	s15, [r3]
}
 8003560:	bf00      	nop
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	20000244 	.word	0x20000244

0800356c <hts221_get_factory_coef>:
	int16_t t1Out = TemperatureFactoryCoef.t1Out;
	*temperature = ((float)(t1Deg - t0Deg) * (float)(tOut - t0Out)) / (float)(t1Out - t0Out) + t0Deg;
}

void hts221_get_factory_coef(Hts221HumidityStruct *humidityStruct,
		Hts221TemperatureStruct *temperatureStruct) {
 800356c:	b580      	push	{r7, lr}
 800356e:	b088      	sub	sp, #32
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
	//Get humidity factory coef.
	int16_t h0RhX2 = (int16_t)hts221_read_byte(HTS221_ADDRESS_H0_rH_x2);
 8003576:	2030      	movs	r0, #48	; 0x30
 8003578:	f7ff ff12 	bl	80033a0 <hts221_read_byte>
 800357c:	4603      	mov	r3, r0
 800357e:	83fb      	strh	r3, [r7, #30]
	int16_t h1RhX2 = (int16_t)hts221_read_byte(HTS221_ADDRESS_H1_rH_x2);
 8003580:	2031      	movs	r0, #49	; 0x31
 8003582:	f7ff ff0d 	bl	80033a0 <hts221_read_byte>
 8003586:	4603      	mov	r3, r0
 8003588:	83bb      	strh	r3, [r7, #28]
	uint8_t buffer[4] = { 0 };
 800358a:	2300      	movs	r3, #0
 800358c:	60bb      	str	r3, [r7, #8]
	hts221_readArray(buffer, HTS221_ADDRESS_H0_OUT_L, 2);
 800358e:	f107 0308 	add.w	r3, r7, #8
 8003592:	2202      	movs	r2, #2
 8003594:	2136      	movs	r1, #54	; 0x36
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff ff32 	bl	8003400 <hts221_readArray>
	hts221_readArray(buffer + 2, HTS221_ADDRESS_H1_OUT_L, 2);
 800359c:	f107 0308 	add.w	r3, r7, #8
 80035a0:	3302      	adds	r3, #2
 80035a2:	2202      	movs	r2, #2
 80035a4:	213a      	movs	r1, #58	; 0x3a
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff ff2a 	bl	8003400 <hts221_readArray>
	int16_t h0Out = ((int16_t) buffer[1]) << 8 | (int16_t)buffer[0];
 80035ac:	7a7b      	ldrb	r3, [r7, #9]
 80035ae:	021b      	lsls	r3, r3, #8
 80035b0:	b21a      	sxth	r2, r3
 80035b2:	7a3b      	ldrb	r3, [r7, #8]
 80035b4:	b21b      	sxth	r3, r3
 80035b6:	4313      	orrs	r3, r2
 80035b8:	837b      	strh	r3, [r7, #26]
	int16_t h1Out = ((int16_t) buffer[3]) << 8 | (int16_t)buffer[2];
 80035ba:	7afb      	ldrb	r3, [r7, #11]
 80035bc:	021b      	lsls	r3, r3, #8
 80035be:	b21a      	sxth	r2, r3
 80035c0:	7abb      	ldrb	r3, [r7, #10]
 80035c2:	b21b      	sxth	r3, r3
 80035c4:	4313      	orrs	r3, r2
 80035c6:	833b      	strh	r3, [r7, #24]

	humidityStruct->h0Rh = h0RhX2 >> 1;
 80035c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80035cc:	105b      	asrs	r3, r3, #1
 80035ce:	b21a      	sxth	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	801a      	strh	r2, [r3, #0]
	humidityStruct->h1Rh = h1RhX2 >> 1;
 80035d4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80035d8:	105b      	asrs	r3, r3, #1
 80035da:	b21a      	sxth	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	805a      	strh	r2, [r3, #2]
	humidityStruct->h0Out = h0Out;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	8b7a      	ldrh	r2, [r7, #26]
 80035e4:	809a      	strh	r2, [r3, #4]
	humidityStruct->h1Out = h1Out;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	8b3a      	ldrh	r2, [r7, #24]
 80035ea:	80da      	strh	r2, [r3, #6]
	//Get temperature factory coef.
	buffer[0] = hts221_read_byte(HTS221_ADDRESS_T0_degC_x8);
 80035ec:	2032      	movs	r0, #50	; 0x32
 80035ee:	f7ff fed7 	bl	80033a0 <hts221_read_byte>
 80035f2:	4603      	mov	r3, r0
 80035f4:	723b      	strb	r3, [r7, #8]
	buffer[2] = hts221_read_byte(HTS221_ADDRESS_T1_degC_x8);
 80035f6:	2033      	movs	r0, #51	; 0x33
 80035f8:	f7ff fed2 	bl	80033a0 <hts221_read_byte>
 80035fc:	4603      	mov	r3, r0
 80035fe:	72bb      	strb	r3, [r7, #10]
	int16_t t0t1Msb = (int16_t)hts221_read_byte(HTS221_ADDRESS_T1_T0_MSB);
 8003600:	2035      	movs	r0, #53	; 0x35
 8003602:	f7ff fecd 	bl	80033a0 <hts221_read_byte>
 8003606:	4603      	mov	r3, r0
 8003608:	82fb      	strh	r3, [r7, #22]
	buffer[1] = t0t1Msb & 0x03;
 800360a:	8afb      	ldrh	r3, [r7, #22]
 800360c:	b2db      	uxtb	r3, r3
 800360e:	f003 0303 	and.w	r3, r3, #3
 8003612:	b2db      	uxtb	r3, r3
 8003614:	727b      	strb	r3, [r7, #9]
	buffer[3] = t0t1Msb & 0x0C;
 8003616:	8afb      	ldrh	r3, [r7, #22]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	f003 030c 	and.w	r3, r3, #12
 800361e:	b2db      	uxtb	r3, r3
 8003620:	72fb      	strb	r3, [r7, #11]
	int16_t t0DegX8 = ((int16_t) buffer[1]) << 8 | (int16_t)buffer[0];
 8003622:	7a7b      	ldrb	r3, [r7, #9]
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	b21a      	sxth	r2, r3
 8003628:	7a3b      	ldrb	r3, [r7, #8]
 800362a:	b21b      	sxth	r3, r3
 800362c:	4313      	orrs	r3, r2
 800362e:	82bb      	strh	r3, [r7, #20]
	int16_t t1DegX8 = ((int16_t) buffer[3]) << 6 | (int16_t)buffer[2];
 8003630:	7afb      	ldrb	r3, [r7, #11]
 8003632:	019b      	lsls	r3, r3, #6
 8003634:	b21a      	sxth	r2, r3
 8003636:	7abb      	ldrb	r3, [r7, #10]
 8003638:	b21b      	sxth	r3, r3
 800363a:	4313      	orrs	r3, r2
 800363c:	827b      	strh	r3, [r7, #18]
	hts221_readArray(buffer, HTS221_ADDRESS_T0_OUT_L, 4);
 800363e:	f107 0308 	add.w	r3, r7, #8
 8003642:	2204      	movs	r2, #4
 8003644:	213c      	movs	r1, #60	; 0x3c
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff feda 	bl	8003400 <hts221_readArray>
	//hts221_readArray(buffer + 2, HTS221_ADDRESS_T1_OUT_L, 2);
	int16_t t0Out = ((int16_t) buffer[1]) << 8 | (int16_t)buffer[0];
 800364c:	7a7b      	ldrb	r3, [r7, #9]
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	b21a      	sxth	r2, r3
 8003652:	7a3b      	ldrb	r3, [r7, #8]
 8003654:	b21b      	sxth	r3, r3
 8003656:	4313      	orrs	r3, r2
 8003658:	823b      	strh	r3, [r7, #16]
	int16_t t1Out = ((int16_t) buffer[3]) << 8 | (int16_t)buffer[2];
 800365a:	7afb      	ldrb	r3, [r7, #11]
 800365c:	021b      	lsls	r3, r3, #8
 800365e:	b21a      	sxth	r2, r3
 8003660:	7abb      	ldrb	r3, [r7, #10]
 8003662:	b21b      	sxth	r3, r3
 8003664:	4313      	orrs	r3, r2
 8003666:	81fb      	strh	r3, [r7, #14]

	temperatureStruct->t0DegC = t0DegX8 >> 3;
 8003668:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800366c:	10db      	asrs	r3, r3, #3
 800366e:	b21a      	sxth	r2, r3
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	801a      	strh	r2, [r3, #0]
	temperatureStruct->t1DegC = t1DegX8 >> 3;
 8003674:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003678:	10db      	asrs	r3, r3, #3
 800367a:	b21a      	sxth	r2, r3
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	805a      	strh	r2, [r3, #2]
	temperatureStruct->t0Out = t0Out;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	8a3a      	ldrh	r2, [r7, #16]
 8003684:	809a      	strh	r2, [r3, #4]
	temperatureStruct->t1Out = t1Out;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	89fa      	ldrh	r2, [r7, #14]
 800368a:	80da      	strh	r2, [r3, #6]
}
 800368c:	bf00      	nop
 800368e:	3720      	adds	r7, #32
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <lps25hb_read_byte>:

#include "lps25hb.h"

uint8_t addresLPS25HB = LPS25HB_DEVICE_ADDRESS_0;

uint8_t lps25hb_read_byte(uint8_t reg_addr) {
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af02      	add	r7, sp, #8
 800369a:	4603      	mov	r3, r0
 800369c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800369e:	2300      	movs	r3, #0
 80036a0:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addresLPS25HB, 0));
 80036a2:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <lps25hb_read_byte+0x30>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	79fa      	ldrb	r2, [r7, #7]
 80036a8:	f107 000f 	add.w	r0, r7, #15
 80036ac:	2100      	movs	r1, #0
 80036ae:	9100      	str	r1, [sp, #0]
 80036b0:	2101      	movs	r1, #1
 80036b2:	f7fe f94d 	bl	8001950 <i2c_master_read>
 80036b6:	4603      	mov	r3, r0
 80036b8:	781b      	ldrb	r3, [r3, #0]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20000006 	.word	0x20000006

080036c8 <lps25hb_write_byte>:

void lps25hb_write_byte(uint8_t reg_addr, uint8_t value) {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	460a      	mov	r2, r1
 80036d2:	71fb      	strb	r3, [r7, #7]
 80036d4:	4613      	mov	r3, r2
 80036d6:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addresLPS25HB, 0);
 80036d8:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <lps25hb_write_byte+0x28>)
 80036da:	781a      	ldrb	r2, [r3, #0]
 80036dc:	79f9      	ldrb	r1, [r7, #7]
 80036de:	79b8      	ldrb	r0, [r7, #6]
 80036e0:	2300      	movs	r3, #0
 80036e2:	f7fe f8f1 	bl	80018c8 <i2c_master_write>
}
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20000006 	.word	0x20000006

080036f4 <lps25hb_readArray>:

void lps25hb_readArray(uint8_t *data, uint8_t reg, uint8_t length) {
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af02      	add	r7, sp, #8
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	70fb      	strb	r3, [r7, #3]
 8003700:	4613      	mov	r3, r2
 8003702:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addresLPS25HB, 1);
 8003704:	4b06      	ldr	r3, [pc, #24]	; (8003720 <lps25hb_readArray+0x2c>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	78fa      	ldrb	r2, [r7, #3]
 800370a:	78b9      	ldrb	r1, [r7, #2]
 800370c:	2001      	movs	r0, #1
 800370e:	9000      	str	r0, [sp, #0]
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7fe f91d 	bl	8001950 <i2c_master_read>
}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20000006 	.word	0x20000006

08003724 <lps25hb_get_pressure>:
void lps25hb_get_pressure(float *pressure) {
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
	uint8_t buffer[3];
	uint32_t raw_press = 0;
 800372c:	2300      	movs	r3, #0
 800372e:	60fb      	str	r3, [r7, #12]
	uint8_t i;
	lps25hb_readArray(buffer, LPS25HB_ADDRESS_PressOut_XL, 3);
 8003730:	f107 0308 	add.w	r3, r7, #8
 8003734:	2203      	movs	r2, #3
 8003736:	2128      	movs	r1, #40	; 0x28
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff ffdb 	bl	80036f4 <lps25hb_readArray>
	for (i = 0; i < 3; i++)
 800373e:	2300      	movs	r3, #0
 8003740:	72fb      	strb	r3, [r7, #11]
 8003742:	e010      	b.n	8003766 <lps25hb_get_pressure+0x42>
		raw_press |= (((uint32_t) buffer[i]) << (8 * i));
 8003744:	7afb      	ldrb	r3, [r7, #11]
 8003746:	f107 0210 	add.w	r2, r7, #16
 800374a:	4413      	add	r3, r2
 800374c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8003750:	461a      	mov	r2, r3
 8003752:	7afb      	ldrb	r3, [r7, #11]
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	4313      	orrs	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < 3; i++)
 8003760:	7afb      	ldrb	r3, [r7, #11]
 8003762:	3301      	adds	r3, #1
 8003764:	72fb      	strb	r3, [r7, #11]
 8003766:	7afb      	ldrb	r3, [r7, #11]
 8003768:	2b02      	cmp	r3, #2
 800376a:	d9eb      	bls.n	8003744 <lps25hb_get_pressure+0x20>
	if (raw_press & 0x00800000)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <lps25hb_get_pressure+0x5a>
		raw_press |= 0xFF000000;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800377c:	60fb      	str	r3, [r7, #12]
	*pressure = ((float)raw_press) / 4096;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	ee07 3a90 	vmov	s15, r3
 8003784:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003788:	eddf 6a05 	vldr	s13, [pc, #20]	; 80037a0 <lps25hb_get_pressure+0x7c>
 800378c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	edc3 7a00 	vstr	s15, [r3]
}
 8003796:	bf00      	nop
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	45800000 	.word	0x45800000
 80037a4:	00000000 	.word	0x00000000

080037a8 <lps25hb_get_altitude>:
void lps25hb_get_altitude(float *altitude){
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
	float pressure = 0;
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	60bb      	str	r3, [r7, #8]
	lps25hb_get_pressure(&pressure);
 80037b6:	f107 0308 	add.w	r3, r7, #8
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff ffb2 	bl	8003724 <lps25hb_get_pressure>
	float pressurePW = pow(pressure/LPS25HB_ALTITUDE_P0,LPS25HB_ALTITUDE_PW);
 80037c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80037c4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003820 <lps25hb_get_altitude+0x78>
 80037c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80037cc:	ee16 0a90 	vmov	r0, s13
 80037d0:	f7fc feba 	bl	8000548 <__aeabi_f2d>
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8003818 <lps25hb_get_altitude+0x70>
 80037dc:	ec43 2b10 	vmov	d0, r2, r3
 80037e0:	f002 ff58 	bl	8006694 <pow>
 80037e4:	ec53 2b10 	vmov	r2, r3, d0
 80037e8:	4610      	mov	r0, r2
 80037ea:	4619      	mov	r1, r3
 80037ec:	f7fd f9dc 	bl	8000ba8 <__aeabi_d2f>
 80037f0:	4603      	mov	r3, r0
 80037f2:	60fb      	str	r3, [r7, #12]
	*altitude = LPS25HB_ALTITUDE_CONST*(1-pressurePW);
 80037f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80037fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003800:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003824 <lps25hb_get_altitude+0x7c>
 8003804:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	edc3 7a00 	vstr	s15, [r3]
}
 800380e:	bf00      	nop
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	c0000000 	.word	0xc0000000
 800381c:	3fc85b95 	.word	0x3fc85b95
 8003820:	447d5000 	.word	0x447d5000
 8003824:	472d2a00 	.word	0x472d2a00

08003828 <lps25hb_init>:
uint8_t lps25hb_init(void) {
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
	uint8_t result = 0;
 800382e:	2300      	movs	r3, #0
 8003830:	71fb      	strb	r3, [r7, #7]
	LL_mDelay(100);
 8003832:	2064      	movs	r0, #100	; 0x64
 8003834:	f7ff fd1c 	bl	8003270 <LL_mDelay>
	uint8_t val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRES);
 8003838:	200f      	movs	r0, #15
 800383a:	f7ff ff2b 	bl	8003694 <lps25hb_read_byte>
 800383e:	4603      	mov	r3, r0
 8003840:	71bb      	strb	r3, [r7, #6]
	if (val == LPS25HB_WHO_AM_I_VALUE) {
 8003842:	79bb      	ldrb	r3, [r7, #6]
 8003844:	2bbd      	cmp	r3, #189	; 0xbd
 8003846:	d102      	bne.n	800384e <lps25hb_init+0x26>
		result = 1;
 8003848:	2301      	movs	r3, #1
 800384a:	71fb      	strb	r3, [r7, #7]
 800384c:	e00f      	b.n	800386e <lps25hb_init+0x46>
	} else
	//if the device is not found on one address, try another one
	{
		addresLPS25HB = LPS25HB_DEVICE_ADDRESS_1;
 800384e:	4b29      	ldr	r3, [pc, #164]	; (80038f4 <lps25hb_init+0xcc>)
 8003850:	22ba      	movs	r2, #186	; 0xba
 8003852:	701a      	strb	r2, [r3, #0]
		val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRES);
 8003854:	200f      	movs	r0, #15
 8003856:	f7ff ff1d 	bl	8003694 <lps25hb_read_byte>
 800385a:	4603      	mov	r3, r0
 800385c:	71bb      	strb	r3, [r7, #6]
		if (val == LPS25HB_WHO_AM_I_VALUE)
 800385e:	79bb      	ldrb	r3, [r7, #6]
 8003860:	2bbd      	cmp	r3, #189	; 0xbd
 8003862:	d102      	bne.n	800386a <lps25hb_init+0x42>
			result = 1;
 8003864:	2301      	movs	r3, #1
 8003866:	71fb      	strb	r3, [r7, #7]
 8003868:	e001      	b.n	800386e <lps25hb_init+0x46>
		else
			result = 0;
 800386a:	2300      	movs	r3, #0
 800386c:	71fb      	strb	r3, [r7, #7]
	}
	if (result == 1) {
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d13a      	bne.n	80038ea <lps25hb_init+0xc2>
		//load reserved bits from device
		uint8_t control1 = lps25hb_read_byte(LPS25HB_ADDRESS_CTRL1);
 8003874:	2020      	movs	r0, #32
 8003876:	f7ff ff0d 	bl	8003694 <lps25hb_read_byte>
 800387a:	4603      	mov	r3, r0
 800387c:	717b      	strb	r3, [r7, #5]
		//active mode
		control1 &= ~LPS25HB_PD_MASK;
 800387e:	797b      	ldrb	r3, [r7, #5]
 8003880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003884:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 1) << LPS25HB_PD_BIT;
 8003886:	797b      	ldrb	r3, [r7, #5]
 8003888:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800388c:	717b      	strb	r3, [r7, #5]
		//output registers not updated until MSB and LSB reading
		control1 &= ~LPS25HB_BDU_MASK;
 800388e:	797b      	ldrb	r3, [r7, #5]
 8003890:	f023 0304 	bic.w	r3, r3, #4
 8003894:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 1) << LPS25HB_BDU_BIT;
 8003896:	797b      	ldrb	r3, [r7, #5]
 8003898:	f043 0304 	orr.w	r3, r3, #4
 800389c:	717b      	strb	r3, [r7, #5]
		//ODR register sampling
		control1 &= ~LPS25HB_ODR_MASK;
 800389e:	797b      	ldrb	r3, [r7, #5]
 80038a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a4:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 2) << LPS25HB_ODR_BIT;
 80038a6:	797b      	ldrb	r3, [r7, #5]
 80038a8:	f043 0320 	orr.w	r3, r3, #32
 80038ac:	717b      	strb	r3, [r7, #5]
		// Reset AZ (Self clear)
		val = control1;
 80038ae:	797b      	ldrb	r3, [r7, #5]
 80038b0:	71bb      	strb	r3, [r7, #6]
		control1 &= ~LPS25HB_RESET_AZ_MASK;
 80038b2:	797b      	ldrb	r3, [r7, #5]
 80038b4:	f023 0302 	bic.w	r3, r3, #2
 80038b8:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 1) << LPS25HB_RESET_AZ_BIT;
 80038ba:	797b      	ldrb	r3, [r7, #5]
 80038bc:	f043 0302 	orr.w	r3, r3, #2
 80038c0:	717b      	strb	r3, [r7, #5]
		//Write config. to device
		lps25hb_write_byte(LPS25HB_ADDRESS_CTRL1, control1);
 80038c2:	797b      	ldrb	r3, [r7, #5]
 80038c4:	4619      	mov	r1, r3
 80038c6:	2020      	movs	r0, #32
 80038c8:	f7ff fefe 	bl	80036c8 <lps25hb_write_byte>
		control1 = val;
 80038cc:	79bb      	ldrb	r3, [r7, #6]
 80038ce:	717b      	strb	r3, [r7, #5]
		val = lps25hb_read_byte(LPS25HB_ADDRESS_CTRL1);
 80038d0:	2020      	movs	r0, #32
 80038d2:	f7ff fedf 	bl	8003694 <lps25hb_read_byte>
 80038d6:	4603      	mov	r3, r0
 80038d8:	71bb      	strb	r3, [r7, #6]
		result = val == control1 ? 1 : 0;
 80038da:	79ba      	ldrb	r2, [r7, #6]
 80038dc:	797b      	ldrb	r3, [r7, #5]
 80038de:	429a      	cmp	r2, r3
 80038e0:	bf0c      	ite	eq
 80038e2:	2301      	moveq	r3, #1
 80038e4:	2300      	movne	r3, #0
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	71fb      	strb	r3, [r7, #7]
	}
	return result;
 80038ea:	79fb      	ldrb	r3, [r7, #7]

}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	20000006 	.word	0x20000006

080038f8 <__errno>:
 80038f8:	4b01      	ldr	r3, [pc, #4]	; (8003900 <__errno+0x8>)
 80038fa:	6818      	ldr	r0, [r3, #0]
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	20000008 	.word	0x20000008

08003904 <__libc_init_array>:
 8003904:	b570      	push	{r4, r5, r6, lr}
 8003906:	4d0d      	ldr	r5, [pc, #52]	; (800393c <__libc_init_array+0x38>)
 8003908:	4c0d      	ldr	r4, [pc, #52]	; (8003940 <__libc_init_array+0x3c>)
 800390a:	1b64      	subs	r4, r4, r5
 800390c:	10a4      	asrs	r4, r4, #2
 800390e:	2600      	movs	r6, #0
 8003910:	42a6      	cmp	r6, r4
 8003912:	d109      	bne.n	8003928 <__libc_init_array+0x24>
 8003914:	4d0b      	ldr	r5, [pc, #44]	; (8003944 <__libc_init_array+0x40>)
 8003916:	4c0c      	ldr	r4, [pc, #48]	; (8003948 <__libc_init_array+0x44>)
 8003918:	f003 fe70 	bl	80075fc <_init>
 800391c:	1b64      	subs	r4, r4, r5
 800391e:	10a4      	asrs	r4, r4, #2
 8003920:	2600      	movs	r6, #0
 8003922:	42a6      	cmp	r6, r4
 8003924:	d105      	bne.n	8003932 <__libc_init_array+0x2e>
 8003926:	bd70      	pop	{r4, r5, r6, pc}
 8003928:	f855 3b04 	ldr.w	r3, [r5], #4
 800392c:	4798      	blx	r3
 800392e:	3601      	adds	r6, #1
 8003930:	e7ee      	b.n	8003910 <__libc_init_array+0xc>
 8003932:	f855 3b04 	ldr.w	r3, [r5], #4
 8003936:	4798      	blx	r3
 8003938:	3601      	adds	r6, #1
 800393a:	e7f2      	b.n	8003922 <__libc_init_array+0x1e>
 800393c:	08007aa8 	.word	0x08007aa8
 8003940:	08007aa8 	.word	0x08007aa8
 8003944:	08007aa8 	.word	0x08007aa8
 8003948:	08007aac 	.word	0x08007aac

0800394c <memset>:
 800394c:	4402      	add	r2, r0
 800394e:	4603      	mov	r3, r0
 8003950:	4293      	cmp	r3, r2
 8003952:	d100      	bne.n	8003956 <memset+0xa>
 8003954:	4770      	bx	lr
 8003956:	f803 1b01 	strb.w	r1, [r3], #1
 800395a:	e7f9      	b.n	8003950 <memset+0x4>

0800395c <__cvt>:
 800395c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003960:	ec55 4b10 	vmov	r4, r5, d0
 8003964:	2d00      	cmp	r5, #0
 8003966:	460e      	mov	r6, r1
 8003968:	4619      	mov	r1, r3
 800396a:	462b      	mov	r3, r5
 800396c:	bfbb      	ittet	lt
 800396e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003972:	461d      	movlt	r5, r3
 8003974:	2300      	movge	r3, #0
 8003976:	232d      	movlt	r3, #45	; 0x2d
 8003978:	700b      	strb	r3, [r1, #0]
 800397a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800397c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003980:	4691      	mov	r9, r2
 8003982:	f023 0820 	bic.w	r8, r3, #32
 8003986:	bfbc      	itt	lt
 8003988:	4622      	movlt	r2, r4
 800398a:	4614      	movlt	r4, r2
 800398c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003990:	d005      	beq.n	800399e <__cvt+0x42>
 8003992:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003996:	d100      	bne.n	800399a <__cvt+0x3e>
 8003998:	3601      	adds	r6, #1
 800399a:	2102      	movs	r1, #2
 800399c:	e000      	b.n	80039a0 <__cvt+0x44>
 800399e:	2103      	movs	r1, #3
 80039a0:	ab03      	add	r3, sp, #12
 80039a2:	9301      	str	r3, [sp, #4]
 80039a4:	ab02      	add	r3, sp, #8
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	ec45 4b10 	vmov	d0, r4, r5
 80039ac:	4653      	mov	r3, sl
 80039ae:	4632      	mov	r2, r6
 80039b0:	f000 fcf2 	bl	8004398 <_dtoa_r>
 80039b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80039b8:	4607      	mov	r7, r0
 80039ba:	d102      	bne.n	80039c2 <__cvt+0x66>
 80039bc:	f019 0f01 	tst.w	r9, #1
 80039c0:	d022      	beq.n	8003a08 <__cvt+0xac>
 80039c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80039c6:	eb07 0906 	add.w	r9, r7, r6
 80039ca:	d110      	bne.n	80039ee <__cvt+0x92>
 80039cc:	783b      	ldrb	r3, [r7, #0]
 80039ce:	2b30      	cmp	r3, #48	; 0x30
 80039d0:	d10a      	bne.n	80039e8 <__cvt+0x8c>
 80039d2:	2200      	movs	r2, #0
 80039d4:	2300      	movs	r3, #0
 80039d6:	4620      	mov	r0, r4
 80039d8:	4629      	mov	r1, r5
 80039da:	f7fd f875 	bl	8000ac8 <__aeabi_dcmpeq>
 80039de:	b918      	cbnz	r0, 80039e8 <__cvt+0x8c>
 80039e0:	f1c6 0601 	rsb	r6, r6, #1
 80039e4:	f8ca 6000 	str.w	r6, [sl]
 80039e8:	f8da 3000 	ldr.w	r3, [sl]
 80039ec:	4499      	add	r9, r3
 80039ee:	2200      	movs	r2, #0
 80039f0:	2300      	movs	r3, #0
 80039f2:	4620      	mov	r0, r4
 80039f4:	4629      	mov	r1, r5
 80039f6:	f7fd f867 	bl	8000ac8 <__aeabi_dcmpeq>
 80039fa:	b108      	cbz	r0, 8003a00 <__cvt+0xa4>
 80039fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8003a00:	2230      	movs	r2, #48	; 0x30
 8003a02:	9b03      	ldr	r3, [sp, #12]
 8003a04:	454b      	cmp	r3, r9
 8003a06:	d307      	bcc.n	8003a18 <__cvt+0xbc>
 8003a08:	9b03      	ldr	r3, [sp, #12]
 8003a0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a0c:	1bdb      	subs	r3, r3, r7
 8003a0e:	4638      	mov	r0, r7
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	b004      	add	sp, #16
 8003a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a18:	1c59      	adds	r1, r3, #1
 8003a1a:	9103      	str	r1, [sp, #12]
 8003a1c:	701a      	strb	r2, [r3, #0]
 8003a1e:	e7f0      	b.n	8003a02 <__cvt+0xa6>

08003a20 <__exponent>:
 8003a20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a22:	4603      	mov	r3, r0
 8003a24:	2900      	cmp	r1, #0
 8003a26:	bfb8      	it	lt
 8003a28:	4249      	neglt	r1, r1
 8003a2a:	f803 2b02 	strb.w	r2, [r3], #2
 8003a2e:	bfb4      	ite	lt
 8003a30:	222d      	movlt	r2, #45	; 0x2d
 8003a32:	222b      	movge	r2, #43	; 0x2b
 8003a34:	2909      	cmp	r1, #9
 8003a36:	7042      	strb	r2, [r0, #1]
 8003a38:	dd2a      	ble.n	8003a90 <__exponent+0x70>
 8003a3a:	f10d 0407 	add.w	r4, sp, #7
 8003a3e:	46a4      	mov	ip, r4
 8003a40:	270a      	movs	r7, #10
 8003a42:	46a6      	mov	lr, r4
 8003a44:	460a      	mov	r2, r1
 8003a46:	fb91 f6f7 	sdiv	r6, r1, r7
 8003a4a:	fb07 1516 	mls	r5, r7, r6, r1
 8003a4e:	3530      	adds	r5, #48	; 0x30
 8003a50:	2a63      	cmp	r2, #99	; 0x63
 8003a52:	f104 34ff 	add.w	r4, r4, #4294967295
 8003a56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003a5a:	4631      	mov	r1, r6
 8003a5c:	dcf1      	bgt.n	8003a42 <__exponent+0x22>
 8003a5e:	3130      	adds	r1, #48	; 0x30
 8003a60:	f1ae 0502 	sub.w	r5, lr, #2
 8003a64:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003a68:	1c44      	adds	r4, r0, #1
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	4561      	cmp	r1, ip
 8003a6e:	d30a      	bcc.n	8003a86 <__exponent+0x66>
 8003a70:	f10d 0209 	add.w	r2, sp, #9
 8003a74:	eba2 020e 	sub.w	r2, r2, lr
 8003a78:	4565      	cmp	r5, ip
 8003a7a:	bf88      	it	hi
 8003a7c:	2200      	movhi	r2, #0
 8003a7e:	4413      	add	r3, r2
 8003a80:	1a18      	subs	r0, r3, r0
 8003a82:	b003      	add	sp, #12
 8003a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a8a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003a8e:	e7ed      	b.n	8003a6c <__exponent+0x4c>
 8003a90:	2330      	movs	r3, #48	; 0x30
 8003a92:	3130      	adds	r1, #48	; 0x30
 8003a94:	7083      	strb	r3, [r0, #2]
 8003a96:	70c1      	strb	r1, [r0, #3]
 8003a98:	1d03      	adds	r3, r0, #4
 8003a9a:	e7f1      	b.n	8003a80 <__exponent+0x60>

08003a9c <_printf_float>:
 8003a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aa0:	ed2d 8b02 	vpush	{d8}
 8003aa4:	b08d      	sub	sp, #52	; 0x34
 8003aa6:	460c      	mov	r4, r1
 8003aa8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003aac:	4616      	mov	r6, r2
 8003aae:	461f      	mov	r7, r3
 8003ab0:	4605      	mov	r5, r0
 8003ab2:	f001 fa5d 	bl	8004f70 <_localeconv_r>
 8003ab6:	f8d0 a000 	ldr.w	sl, [r0]
 8003aba:	4650      	mov	r0, sl
 8003abc:	f7fc fb88 	bl	80001d0 <strlen>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	930a      	str	r3, [sp, #40]	; 0x28
 8003ac4:	6823      	ldr	r3, [r4, #0]
 8003ac6:	9305      	str	r3, [sp, #20]
 8003ac8:	f8d8 3000 	ldr.w	r3, [r8]
 8003acc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003ad0:	3307      	adds	r3, #7
 8003ad2:	f023 0307 	bic.w	r3, r3, #7
 8003ad6:	f103 0208 	add.w	r2, r3, #8
 8003ada:	f8c8 2000 	str.w	r2, [r8]
 8003ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003ae6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003aea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003aee:	9307      	str	r3, [sp, #28]
 8003af0:	f8cd 8018 	str.w	r8, [sp, #24]
 8003af4:	ee08 0a10 	vmov	s16, r0
 8003af8:	4b9f      	ldr	r3, [pc, #636]	; (8003d78 <_printf_float+0x2dc>)
 8003afa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003afe:	f04f 32ff 	mov.w	r2, #4294967295
 8003b02:	f7fd f813 	bl	8000b2c <__aeabi_dcmpun>
 8003b06:	bb88      	cbnz	r0, 8003b6c <_printf_float+0xd0>
 8003b08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003b0c:	4b9a      	ldr	r3, [pc, #616]	; (8003d78 <_printf_float+0x2dc>)
 8003b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b12:	f7fc ffed 	bl	8000af0 <__aeabi_dcmple>
 8003b16:	bb48      	cbnz	r0, 8003b6c <_printf_float+0xd0>
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	4640      	mov	r0, r8
 8003b1e:	4649      	mov	r1, r9
 8003b20:	f7fc ffdc 	bl	8000adc <__aeabi_dcmplt>
 8003b24:	b110      	cbz	r0, 8003b2c <_printf_float+0x90>
 8003b26:	232d      	movs	r3, #45	; 0x2d
 8003b28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b2c:	4b93      	ldr	r3, [pc, #588]	; (8003d7c <_printf_float+0x2e0>)
 8003b2e:	4894      	ldr	r0, [pc, #592]	; (8003d80 <_printf_float+0x2e4>)
 8003b30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003b34:	bf94      	ite	ls
 8003b36:	4698      	movls	r8, r3
 8003b38:	4680      	movhi	r8, r0
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	6123      	str	r3, [r4, #16]
 8003b3e:	9b05      	ldr	r3, [sp, #20]
 8003b40:	f023 0204 	bic.w	r2, r3, #4
 8003b44:	6022      	str	r2, [r4, #0]
 8003b46:	f04f 0900 	mov.w	r9, #0
 8003b4a:	9700      	str	r7, [sp, #0]
 8003b4c:	4633      	mov	r3, r6
 8003b4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003b50:	4621      	mov	r1, r4
 8003b52:	4628      	mov	r0, r5
 8003b54:	f000 f9d8 	bl	8003f08 <_printf_common>
 8003b58:	3001      	adds	r0, #1
 8003b5a:	f040 8090 	bne.w	8003c7e <_printf_float+0x1e2>
 8003b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b62:	b00d      	add	sp, #52	; 0x34
 8003b64:	ecbd 8b02 	vpop	{d8}
 8003b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b6c:	4642      	mov	r2, r8
 8003b6e:	464b      	mov	r3, r9
 8003b70:	4640      	mov	r0, r8
 8003b72:	4649      	mov	r1, r9
 8003b74:	f7fc ffda 	bl	8000b2c <__aeabi_dcmpun>
 8003b78:	b140      	cbz	r0, 8003b8c <_printf_float+0xf0>
 8003b7a:	464b      	mov	r3, r9
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bfbc      	itt	lt
 8003b80:	232d      	movlt	r3, #45	; 0x2d
 8003b82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003b86:	487f      	ldr	r0, [pc, #508]	; (8003d84 <_printf_float+0x2e8>)
 8003b88:	4b7f      	ldr	r3, [pc, #508]	; (8003d88 <_printf_float+0x2ec>)
 8003b8a:	e7d1      	b.n	8003b30 <_printf_float+0x94>
 8003b8c:	6863      	ldr	r3, [r4, #4]
 8003b8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003b92:	9206      	str	r2, [sp, #24]
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	d13f      	bne.n	8003c18 <_printf_float+0x17c>
 8003b98:	2306      	movs	r3, #6
 8003b9a:	6063      	str	r3, [r4, #4]
 8003b9c:	9b05      	ldr	r3, [sp, #20]
 8003b9e:	6861      	ldr	r1, [r4, #4]
 8003ba0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	9303      	str	r3, [sp, #12]
 8003ba8:	ab0a      	add	r3, sp, #40	; 0x28
 8003baa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003bae:	ab09      	add	r3, sp, #36	; 0x24
 8003bb0:	ec49 8b10 	vmov	d0, r8, r9
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	6022      	str	r2, [r4, #0]
 8003bb8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	f7ff fecd 	bl	800395c <__cvt>
 8003bc2:	9b06      	ldr	r3, [sp, #24]
 8003bc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003bc6:	2b47      	cmp	r3, #71	; 0x47
 8003bc8:	4680      	mov	r8, r0
 8003bca:	d108      	bne.n	8003bde <_printf_float+0x142>
 8003bcc:	1cc8      	adds	r0, r1, #3
 8003bce:	db02      	blt.n	8003bd6 <_printf_float+0x13a>
 8003bd0:	6863      	ldr	r3, [r4, #4]
 8003bd2:	4299      	cmp	r1, r3
 8003bd4:	dd41      	ble.n	8003c5a <_printf_float+0x1be>
 8003bd6:	f1ab 0b02 	sub.w	fp, fp, #2
 8003bda:	fa5f fb8b 	uxtb.w	fp, fp
 8003bde:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003be2:	d820      	bhi.n	8003c26 <_printf_float+0x18a>
 8003be4:	3901      	subs	r1, #1
 8003be6:	465a      	mov	r2, fp
 8003be8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003bec:	9109      	str	r1, [sp, #36]	; 0x24
 8003bee:	f7ff ff17 	bl	8003a20 <__exponent>
 8003bf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003bf4:	1813      	adds	r3, r2, r0
 8003bf6:	2a01      	cmp	r2, #1
 8003bf8:	4681      	mov	r9, r0
 8003bfa:	6123      	str	r3, [r4, #16]
 8003bfc:	dc02      	bgt.n	8003c04 <_printf_float+0x168>
 8003bfe:	6822      	ldr	r2, [r4, #0]
 8003c00:	07d2      	lsls	r2, r2, #31
 8003c02:	d501      	bpl.n	8003c08 <_printf_float+0x16c>
 8003c04:	3301      	adds	r3, #1
 8003c06:	6123      	str	r3, [r4, #16]
 8003c08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d09c      	beq.n	8003b4a <_printf_float+0xae>
 8003c10:	232d      	movs	r3, #45	; 0x2d
 8003c12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c16:	e798      	b.n	8003b4a <_printf_float+0xae>
 8003c18:	9a06      	ldr	r2, [sp, #24]
 8003c1a:	2a47      	cmp	r2, #71	; 0x47
 8003c1c:	d1be      	bne.n	8003b9c <_printf_float+0x100>
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1bc      	bne.n	8003b9c <_printf_float+0x100>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e7b9      	b.n	8003b9a <_printf_float+0xfe>
 8003c26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003c2a:	d118      	bne.n	8003c5e <_printf_float+0x1c2>
 8003c2c:	2900      	cmp	r1, #0
 8003c2e:	6863      	ldr	r3, [r4, #4]
 8003c30:	dd0b      	ble.n	8003c4a <_printf_float+0x1ae>
 8003c32:	6121      	str	r1, [r4, #16]
 8003c34:	b913      	cbnz	r3, 8003c3c <_printf_float+0x1a0>
 8003c36:	6822      	ldr	r2, [r4, #0]
 8003c38:	07d0      	lsls	r0, r2, #31
 8003c3a:	d502      	bpl.n	8003c42 <_printf_float+0x1a6>
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	440b      	add	r3, r1
 8003c40:	6123      	str	r3, [r4, #16]
 8003c42:	65a1      	str	r1, [r4, #88]	; 0x58
 8003c44:	f04f 0900 	mov.w	r9, #0
 8003c48:	e7de      	b.n	8003c08 <_printf_float+0x16c>
 8003c4a:	b913      	cbnz	r3, 8003c52 <_printf_float+0x1b6>
 8003c4c:	6822      	ldr	r2, [r4, #0]
 8003c4e:	07d2      	lsls	r2, r2, #31
 8003c50:	d501      	bpl.n	8003c56 <_printf_float+0x1ba>
 8003c52:	3302      	adds	r3, #2
 8003c54:	e7f4      	b.n	8003c40 <_printf_float+0x1a4>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e7f2      	b.n	8003c40 <_printf_float+0x1a4>
 8003c5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c60:	4299      	cmp	r1, r3
 8003c62:	db05      	blt.n	8003c70 <_printf_float+0x1d4>
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	6121      	str	r1, [r4, #16]
 8003c68:	07d8      	lsls	r0, r3, #31
 8003c6a:	d5ea      	bpl.n	8003c42 <_printf_float+0x1a6>
 8003c6c:	1c4b      	adds	r3, r1, #1
 8003c6e:	e7e7      	b.n	8003c40 <_printf_float+0x1a4>
 8003c70:	2900      	cmp	r1, #0
 8003c72:	bfd4      	ite	le
 8003c74:	f1c1 0202 	rsble	r2, r1, #2
 8003c78:	2201      	movgt	r2, #1
 8003c7a:	4413      	add	r3, r2
 8003c7c:	e7e0      	b.n	8003c40 <_printf_float+0x1a4>
 8003c7e:	6823      	ldr	r3, [r4, #0]
 8003c80:	055a      	lsls	r2, r3, #21
 8003c82:	d407      	bmi.n	8003c94 <_printf_float+0x1f8>
 8003c84:	6923      	ldr	r3, [r4, #16]
 8003c86:	4642      	mov	r2, r8
 8003c88:	4631      	mov	r1, r6
 8003c8a:	4628      	mov	r0, r5
 8003c8c:	47b8      	blx	r7
 8003c8e:	3001      	adds	r0, #1
 8003c90:	d12c      	bne.n	8003cec <_printf_float+0x250>
 8003c92:	e764      	b.n	8003b5e <_printf_float+0xc2>
 8003c94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003c98:	f240 80e0 	bls.w	8003e5c <_printf_float+0x3c0>
 8003c9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f7fc ff10 	bl	8000ac8 <__aeabi_dcmpeq>
 8003ca8:	2800      	cmp	r0, #0
 8003caa:	d034      	beq.n	8003d16 <_printf_float+0x27a>
 8003cac:	4a37      	ldr	r2, [pc, #220]	; (8003d8c <_printf_float+0x2f0>)
 8003cae:	2301      	movs	r3, #1
 8003cb0:	4631      	mov	r1, r6
 8003cb2:	4628      	mov	r0, r5
 8003cb4:	47b8      	blx	r7
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	f43f af51 	beq.w	8003b5e <_printf_float+0xc2>
 8003cbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	db02      	blt.n	8003cca <_printf_float+0x22e>
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	07d8      	lsls	r0, r3, #31
 8003cc8:	d510      	bpl.n	8003cec <_printf_float+0x250>
 8003cca:	ee18 3a10 	vmov	r3, s16
 8003cce:	4652      	mov	r2, sl
 8003cd0:	4631      	mov	r1, r6
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	47b8      	blx	r7
 8003cd6:	3001      	adds	r0, #1
 8003cd8:	f43f af41 	beq.w	8003b5e <_printf_float+0xc2>
 8003cdc:	f04f 0800 	mov.w	r8, #0
 8003ce0:	f104 091a 	add.w	r9, r4, #26
 8003ce4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	4543      	cmp	r3, r8
 8003cea:	dc09      	bgt.n	8003d00 <_printf_float+0x264>
 8003cec:	6823      	ldr	r3, [r4, #0]
 8003cee:	079b      	lsls	r3, r3, #30
 8003cf0:	f100 8105 	bmi.w	8003efe <_printf_float+0x462>
 8003cf4:	68e0      	ldr	r0, [r4, #12]
 8003cf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003cf8:	4298      	cmp	r0, r3
 8003cfa:	bfb8      	it	lt
 8003cfc:	4618      	movlt	r0, r3
 8003cfe:	e730      	b.n	8003b62 <_printf_float+0xc6>
 8003d00:	2301      	movs	r3, #1
 8003d02:	464a      	mov	r2, r9
 8003d04:	4631      	mov	r1, r6
 8003d06:	4628      	mov	r0, r5
 8003d08:	47b8      	blx	r7
 8003d0a:	3001      	adds	r0, #1
 8003d0c:	f43f af27 	beq.w	8003b5e <_printf_float+0xc2>
 8003d10:	f108 0801 	add.w	r8, r8, #1
 8003d14:	e7e6      	b.n	8003ce4 <_printf_float+0x248>
 8003d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	dc39      	bgt.n	8003d90 <_printf_float+0x2f4>
 8003d1c:	4a1b      	ldr	r2, [pc, #108]	; (8003d8c <_printf_float+0x2f0>)
 8003d1e:	2301      	movs	r3, #1
 8003d20:	4631      	mov	r1, r6
 8003d22:	4628      	mov	r0, r5
 8003d24:	47b8      	blx	r7
 8003d26:	3001      	adds	r0, #1
 8003d28:	f43f af19 	beq.w	8003b5e <_printf_float+0xc2>
 8003d2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d30:	4313      	orrs	r3, r2
 8003d32:	d102      	bne.n	8003d3a <_printf_float+0x29e>
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	07d9      	lsls	r1, r3, #31
 8003d38:	d5d8      	bpl.n	8003cec <_printf_float+0x250>
 8003d3a:	ee18 3a10 	vmov	r3, s16
 8003d3e:	4652      	mov	r2, sl
 8003d40:	4631      	mov	r1, r6
 8003d42:	4628      	mov	r0, r5
 8003d44:	47b8      	blx	r7
 8003d46:	3001      	adds	r0, #1
 8003d48:	f43f af09 	beq.w	8003b5e <_printf_float+0xc2>
 8003d4c:	f04f 0900 	mov.w	r9, #0
 8003d50:	f104 0a1a 	add.w	sl, r4, #26
 8003d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d56:	425b      	negs	r3, r3
 8003d58:	454b      	cmp	r3, r9
 8003d5a:	dc01      	bgt.n	8003d60 <_printf_float+0x2c4>
 8003d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d5e:	e792      	b.n	8003c86 <_printf_float+0x1ea>
 8003d60:	2301      	movs	r3, #1
 8003d62:	4652      	mov	r2, sl
 8003d64:	4631      	mov	r1, r6
 8003d66:	4628      	mov	r0, r5
 8003d68:	47b8      	blx	r7
 8003d6a:	3001      	adds	r0, #1
 8003d6c:	f43f aef7 	beq.w	8003b5e <_printf_float+0xc2>
 8003d70:	f109 0901 	add.w	r9, r9, #1
 8003d74:	e7ee      	b.n	8003d54 <_printf_float+0x2b8>
 8003d76:	bf00      	nop
 8003d78:	7fefffff 	.word	0x7fefffff
 8003d7c:	08007684 	.word	0x08007684
 8003d80:	08007688 	.word	0x08007688
 8003d84:	08007690 	.word	0x08007690
 8003d88:	0800768c 	.word	0x0800768c
 8003d8c:	08007694 	.word	0x08007694
 8003d90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d94:	429a      	cmp	r2, r3
 8003d96:	bfa8      	it	ge
 8003d98:	461a      	movge	r2, r3
 8003d9a:	2a00      	cmp	r2, #0
 8003d9c:	4691      	mov	r9, r2
 8003d9e:	dc37      	bgt.n	8003e10 <_printf_float+0x374>
 8003da0:	f04f 0b00 	mov.w	fp, #0
 8003da4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003da8:	f104 021a 	add.w	r2, r4, #26
 8003dac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003dae:	9305      	str	r3, [sp, #20]
 8003db0:	eba3 0309 	sub.w	r3, r3, r9
 8003db4:	455b      	cmp	r3, fp
 8003db6:	dc33      	bgt.n	8003e20 <_printf_float+0x384>
 8003db8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	db3b      	blt.n	8003e38 <_printf_float+0x39c>
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	07da      	lsls	r2, r3, #31
 8003dc4:	d438      	bmi.n	8003e38 <_printf_float+0x39c>
 8003dc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003dc8:	9b05      	ldr	r3, [sp, #20]
 8003dca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	eba2 0901 	sub.w	r9, r2, r1
 8003dd2:	4599      	cmp	r9, r3
 8003dd4:	bfa8      	it	ge
 8003dd6:	4699      	movge	r9, r3
 8003dd8:	f1b9 0f00 	cmp.w	r9, #0
 8003ddc:	dc35      	bgt.n	8003e4a <_printf_float+0x3ae>
 8003dde:	f04f 0800 	mov.w	r8, #0
 8003de2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003de6:	f104 0a1a 	add.w	sl, r4, #26
 8003dea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003dee:	1a9b      	subs	r3, r3, r2
 8003df0:	eba3 0309 	sub.w	r3, r3, r9
 8003df4:	4543      	cmp	r3, r8
 8003df6:	f77f af79 	ble.w	8003cec <_printf_float+0x250>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	4652      	mov	r2, sl
 8003dfe:	4631      	mov	r1, r6
 8003e00:	4628      	mov	r0, r5
 8003e02:	47b8      	blx	r7
 8003e04:	3001      	adds	r0, #1
 8003e06:	f43f aeaa 	beq.w	8003b5e <_printf_float+0xc2>
 8003e0a:	f108 0801 	add.w	r8, r8, #1
 8003e0e:	e7ec      	b.n	8003dea <_printf_float+0x34e>
 8003e10:	4613      	mov	r3, r2
 8003e12:	4631      	mov	r1, r6
 8003e14:	4642      	mov	r2, r8
 8003e16:	4628      	mov	r0, r5
 8003e18:	47b8      	blx	r7
 8003e1a:	3001      	adds	r0, #1
 8003e1c:	d1c0      	bne.n	8003da0 <_printf_float+0x304>
 8003e1e:	e69e      	b.n	8003b5e <_printf_float+0xc2>
 8003e20:	2301      	movs	r3, #1
 8003e22:	4631      	mov	r1, r6
 8003e24:	4628      	mov	r0, r5
 8003e26:	9205      	str	r2, [sp, #20]
 8003e28:	47b8      	blx	r7
 8003e2a:	3001      	adds	r0, #1
 8003e2c:	f43f ae97 	beq.w	8003b5e <_printf_float+0xc2>
 8003e30:	9a05      	ldr	r2, [sp, #20]
 8003e32:	f10b 0b01 	add.w	fp, fp, #1
 8003e36:	e7b9      	b.n	8003dac <_printf_float+0x310>
 8003e38:	ee18 3a10 	vmov	r3, s16
 8003e3c:	4652      	mov	r2, sl
 8003e3e:	4631      	mov	r1, r6
 8003e40:	4628      	mov	r0, r5
 8003e42:	47b8      	blx	r7
 8003e44:	3001      	adds	r0, #1
 8003e46:	d1be      	bne.n	8003dc6 <_printf_float+0x32a>
 8003e48:	e689      	b.n	8003b5e <_printf_float+0xc2>
 8003e4a:	9a05      	ldr	r2, [sp, #20]
 8003e4c:	464b      	mov	r3, r9
 8003e4e:	4442      	add	r2, r8
 8003e50:	4631      	mov	r1, r6
 8003e52:	4628      	mov	r0, r5
 8003e54:	47b8      	blx	r7
 8003e56:	3001      	adds	r0, #1
 8003e58:	d1c1      	bne.n	8003dde <_printf_float+0x342>
 8003e5a:	e680      	b.n	8003b5e <_printf_float+0xc2>
 8003e5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e5e:	2a01      	cmp	r2, #1
 8003e60:	dc01      	bgt.n	8003e66 <_printf_float+0x3ca>
 8003e62:	07db      	lsls	r3, r3, #31
 8003e64:	d538      	bpl.n	8003ed8 <_printf_float+0x43c>
 8003e66:	2301      	movs	r3, #1
 8003e68:	4642      	mov	r2, r8
 8003e6a:	4631      	mov	r1, r6
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	47b8      	blx	r7
 8003e70:	3001      	adds	r0, #1
 8003e72:	f43f ae74 	beq.w	8003b5e <_printf_float+0xc2>
 8003e76:	ee18 3a10 	vmov	r3, s16
 8003e7a:	4652      	mov	r2, sl
 8003e7c:	4631      	mov	r1, r6
 8003e7e:	4628      	mov	r0, r5
 8003e80:	47b8      	blx	r7
 8003e82:	3001      	adds	r0, #1
 8003e84:	f43f ae6b 	beq.w	8003b5e <_printf_float+0xc2>
 8003e88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f7fc fe1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e94:	b9d8      	cbnz	r0, 8003ece <_printf_float+0x432>
 8003e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e98:	f108 0201 	add.w	r2, r8, #1
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	4631      	mov	r1, r6
 8003ea0:	4628      	mov	r0, r5
 8003ea2:	47b8      	blx	r7
 8003ea4:	3001      	adds	r0, #1
 8003ea6:	d10e      	bne.n	8003ec6 <_printf_float+0x42a>
 8003ea8:	e659      	b.n	8003b5e <_printf_float+0xc2>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	4652      	mov	r2, sl
 8003eae:	4631      	mov	r1, r6
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	47b8      	blx	r7
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	f43f ae52 	beq.w	8003b5e <_printf_float+0xc2>
 8003eba:	f108 0801 	add.w	r8, r8, #1
 8003ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	4543      	cmp	r3, r8
 8003ec4:	dcf1      	bgt.n	8003eaa <_printf_float+0x40e>
 8003ec6:	464b      	mov	r3, r9
 8003ec8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003ecc:	e6dc      	b.n	8003c88 <_printf_float+0x1ec>
 8003ece:	f04f 0800 	mov.w	r8, #0
 8003ed2:	f104 0a1a 	add.w	sl, r4, #26
 8003ed6:	e7f2      	b.n	8003ebe <_printf_float+0x422>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	4642      	mov	r2, r8
 8003edc:	e7df      	b.n	8003e9e <_printf_float+0x402>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	464a      	mov	r2, r9
 8003ee2:	4631      	mov	r1, r6
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	47b8      	blx	r7
 8003ee8:	3001      	adds	r0, #1
 8003eea:	f43f ae38 	beq.w	8003b5e <_printf_float+0xc2>
 8003eee:	f108 0801 	add.w	r8, r8, #1
 8003ef2:	68e3      	ldr	r3, [r4, #12]
 8003ef4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ef6:	1a5b      	subs	r3, r3, r1
 8003ef8:	4543      	cmp	r3, r8
 8003efa:	dcf0      	bgt.n	8003ede <_printf_float+0x442>
 8003efc:	e6fa      	b.n	8003cf4 <_printf_float+0x258>
 8003efe:	f04f 0800 	mov.w	r8, #0
 8003f02:	f104 0919 	add.w	r9, r4, #25
 8003f06:	e7f4      	b.n	8003ef2 <_printf_float+0x456>

08003f08 <_printf_common>:
 8003f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f0c:	4616      	mov	r6, r2
 8003f0e:	4699      	mov	r9, r3
 8003f10:	688a      	ldr	r2, [r1, #8]
 8003f12:	690b      	ldr	r3, [r1, #16]
 8003f14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	bfb8      	it	lt
 8003f1c:	4613      	movlt	r3, r2
 8003f1e:	6033      	str	r3, [r6, #0]
 8003f20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f24:	4607      	mov	r7, r0
 8003f26:	460c      	mov	r4, r1
 8003f28:	b10a      	cbz	r2, 8003f2e <_printf_common+0x26>
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	6033      	str	r3, [r6, #0]
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	0699      	lsls	r1, r3, #26
 8003f32:	bf42      	ittt	mi
 8003f34:	6833      	ldrmi	r3, [r6, #0]
 8003f36:	3302      	addmi	r3, #2
 8003f38:	6033      	strmi	r3, [r6, #0]
 8003f3a:	6825      	ldr	r5, [r4, #0]
 8003f3c:	f015 0506 	ands.w	r5, r5, #6
 8003f40:	d106      	bne.n	8003f50 <_printf_common+0x48>
 8003f42:	f104 0a19 	add.w	sl, r4, #25
 8003f46:	68e3      	ldr	r3, [r4, #12]
 8003f48:	6832      	ldr	r2, [r6, #0]
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	42ab      	cmp	r3, r5
 8003f4e:	dc26      	bgt.n	8003f9e <_printf_common+0x96>
 8003f50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f54:	1e13      	subs	r3, r2, #0
 8003f56:	6822      	ldr	r2, [r4, #0]
 8003f58:	bf18      	it	ne
 8003f5a:	2301      	movne	r3, #1
 8003f5c:	0692      	lsls	r2, r2, #26
 8003f5e:	d42b      	bmi.n	8003fb8 <_printf_common+0xb0>
 8003f60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f64:	4649      	mov	r1, r9
 8003f66:	4638      	mov	r0, r7
 8003f68:	47c0      	blx	r8
 8003f6a:	3001      	adds	r0, #1
 8003f6c:	d01e      	beq.n	8003fac <_printf_common+0xa4>
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	68e5      	ldr	r5, [r4, #12]
 8003f72:	6832      	ldr	r2, [r6, #0]
 8003f74:	f003 0306 	and.w	r3, r3, #6
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	bf08      	it	eq
 8003f7c:	1aad      	subeq	r5, r5, r2
 8003f7e:	68a3      	ldr	r3, [r4, #8]
 8003f80:	6922      	ldr	r2, [r4, #16]
 8003f82:	bf0c      	ite	eq
 8003f84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f88:	2500      	movne	r5, #0
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	bfc4      	itt	gt
 8003f8e:	1a9b      	subgt	r3, r3, r2
 8003f90:	18ed      	addgt	r5, r5, r3
 8003f92:	2600      	movs	r6, #0
 8003f94:	341a      	adds	r4, #26
 8003f96:	42b5      	cmp	r5, r6
 8003f98:	d11a      	bne.n	8003fd0 <_printf_common+0xc8>
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	e008      	b.n	8003fb0 <_printf_common+0xa8>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	4652      	mov	r2, sl
 8003fa2:	4649      	mov	r1, r9
 8003fa4:	4638      	mov	r0, r7
 8003fa6:	47c0      	blx	r8
 8003fa8:	3001      	adds	r0, #1
 8003faa:	d103      	bne.n	8003fb4 <_printf_common+0xac>
 8003fac:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fb4:	3501      	adds	r5, #1
 8003fb6:	e7c6      	b.n	8003f46 <_printf_common+0x3e>
 8003fb8:	18e1      	adds	r1, r4, r3
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	2030      	movs	r0, #48	; 0x30
 8003fbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fc2:	4422      	add	r2, r4
 8003fc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fcc:	3302      	adds	r3, #2
 8003fce:	e7c7      	b.n	8003f60 <_printf_common+0x58>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	4622      	mov	r2, r4
 8003fd4:	4649      	mov	r1, r9
 8003fd6:	4638      	mov	r0, r7
 8003fd8:	47c0      	blx	r8
 8003fda:	3001      	adds	r0, #1
 8003fdc:	d0e6      	beq.n	8003fac <_printf_common+0xa4>
 8003fde:	3601      	adds	r6, #1
 8003fe0:	e7d9      	b.n	8003f96 <_printf_common+0x8e>
	...

08003fe4 <_printf_i>:
 8003fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe8:	460c      	mov	r4, r1
 8003fea:	4691      	mov	r9, r2
 8003fec:	7e27      	ldrb	r7, [r4, #24]
 8003fee:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003ff0:	2f78      	cmp	r7, #120	; 0x78
 8003ff2:	4680      	mov	r8, r0
 8003ff4:	469a      	mov	sl, r3
 8003ff6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ffa:	d807      	bhi.n	800400c <_printf_i+0x28>
 8003ffc:	2f62      	cmp	r7, #98	; 0x62
 8003ffe:	d80a      	bhi.n	8004016 <_printf_i+0x32>
 8004000:	2f00      	cmp	r7, #0
 8004002:	f000 80d8 	beq.w	80041b6 <_printf_i+0x1d2>
 8004006:	2f58      	cmp	r7, #88	; 0x58
 8004008:	f000 80a3 	beq.w	8004152 <_printf_i+0x16e>
 800400c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004010:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004014:	e03a      	b.n	800408c <_printf_i+0xa8>
 8004016:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800401a:	2b15      	cmp	r3, #21
 800401c:	d8f6      	bhi.n	800400c <_printf_i+0x28>
 800401e:	a001      	add	r0, pc, #4	; (adr r0, 8004024 <_printf_i+0x40>)
 8004020:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004024:	0800407d 	.word	0x0800407d
 8004028:	08004091 	.word	0x08004091
 800402c:	0800400d 	.word	0x0800400d
 8004030:	0800400d 	.word	0x0800400d
 8004034:	0800400d 	.word	0x0800400d
 8004038:	0800400d 	.word	0x0800400d
 800403c:	08004091 	.word	0x08004091
 8004040:	0800400d 	.word	0x0800400d
 8004044:	0800400d 	.word	0x0800400d
 8004048:	0800400d 	.word	0x0800400d
 800404c:	0800400d 	.word	0x0800400d
 8004050:	0800419d 	.word	0x0800419d
 8004054:	080040c1 	.word	0x080040c1
 8004058:	0800417f 	.word	0x0800417f
 800405c:	0800400d 	.word	0x0800400d
 8004060:	0800400d 	.word	0x0800400d
 8004064:	080041bf 	.word	0x080041bf
 8004068:	0800400d 	.word	0x0800400d
 800406c:	080040c1 	.word	0x080040c1
 8004070:	0800400d 	.word	0x0800400d
 8004074:	0800400d 	.word	0x0800400d
 8004078:	08004187 	.word	0x08004187
 800407c:	680b      	ldr	r3, [r1, #0]
 800407e:	1d1a      	adds	r2, r3, #4
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	600a      	str	r2, [r1, #0]
 8004084:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004088:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800408c:	2301      	movs	r3, #1
 800408e:	e0a3      	b.n	80041d8 <_printf_i+0x1f4>
 8004090:	6825      	ldr	r5, [r4, #0]
 8004092:	6808      	ldr	r0, [r1, #0]
 8004094:	062e      	lsls	r6, r5, #24
 8004096:	f100 0304 	add.w	r3, r0, #4
 800409a:	d50a      	bpl.n	80040b2 <_printf_i+0xce>
 800409c:	6805      	ldr	r5, [r0, #0]
 800409e:	600b      	str	r3, [r1, #0]
 80040a0:	2d00      	cmp	r5, #0
 80040a2:	da03      	bge.n	80040ac <_printf_i+0xc8>
 80040a4:	232d      	movs	r3, #45	; 0x2d
 80040a6:	426d      	negs	r5, r5
 80040a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040ac:	485e      	ldr	r0, [pc, #376]	; (8004228 <_printf_i+0x244>)
 80040ae:	230a      	movs	r3, #10
 80040b0:	e019      	b.n	80040e6 <_printf_i+0x102>
 80040b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80040b6:	6805      	ldr	r5, [r0, #0]
 80040b8:	600b      	str	r3, [r1, #0]
 80040ba:	bf18      	it	ne
 80040bc:	b22d      	sxthne	r5, r5
 80040be:	e7ef      	b.n	80040a0 <_printf_i+0xbc>
 80040c0:	680b      	ldr	r3, [r1, #0]
 80040c2:	6825      	ldr	r5, [r4, #0]
 80040c4:	1d18      	adds	r0, r3, #4
 80040c6:	6008      	str	r0, [r1, #0]
 80040c8:	0628      	lsls	r0, r5, #24
 80040ca:	d501      	bpl.n	80040d0 <_printf_i+0xec>
 80040cc:	681d      	ldr	r5, [r3, #0]
 80040ce:	e002      	b.n	80040d6 <_printf_i+0xf2>
 80040d0:	0669      	lsls	r1, r5, #25
 80040d2:	d5fb      	bpl.n	80040cc <_printf_i+0xe8>
 80040d4:	881d      	ldrh	r5, [r3, #0]
 80040d6:	4854      	ldr	r0, [pc, #336]	; (8004228 <_printf_i+0x244>)
 80040d8:	2f6f      	cmp	r7, #111	; 0x6f
 80040da:	bf0c      	ite	eq
 80040dc:	2308      	moveq	r3, #8
 80040de:	230a      	movne	r3, #10
 80040e0:	2100      	movs	r1, #0
 80040e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040e6:	6866      	ldr	r6, [r4, #4]
 80040e8:	60a6      	str	r6, [r4, #8]
 80040ea:	2e00      	cmp	r6, #0
 80040ec:	bfa2      	ittt	ge
 80040ee:	6821      	ldrge	r1, [r4, #0]
 80040f0:	f021 0104 	bicge.w	r1, r1, #4
 80040f4:	6021      	strge	r1, [r4, #0]
 80040f6:	b90d      	cbnz	r5, 80040fc <_printf_i+0x118>
 80040f8:	2e00      	cmp	r6, #0
 80040fa:	d04d      	beq.n	8004198 <_printf_i+0x1b4>
 80040fc:	4616      	mov	r6, r2
 80040fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8004102:	fb03 5711 	mls	r7, r3, r1, r5
 8004106:	5dc7      	ldrb	r7, [r0, r7]
 8004108:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800410c:	462f      	mov	r7, r5
 800410e:	42bb      	cmp	r3, r7
 8004110:	460d      	mov	r5, r1
 8004112:	d9f4      	bls.n	80040fe <_printf_i+0x11a>
 8004114:	2b08      	cmp	r3, #8
 8004116:	d10b      	bne.n	8004130 <_printf_i+0x14c>
 8004118:	6823      	ldr	r3, [r4, #0]
 800411a:	07df      	lsls	r7, r3, #31
 800411c:	d508      	bpl.n	8004130 <_printf_i+0x14c>
 800411e:	6923      	ldr	r3, [r4, #16]
 8004120:	6861      	ldr	r1, [r4, #4]
 8004122:	4299      	cmp	r1, r3
 8004124:	bfde      	ittt	le
 8004126:	2330      	movle	r3, #48	; 0x30
 8004128:	f806 3c01 	strble.w	r3, [r6, #-1]
 800412c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004130:	1b92      	subs	r2, r2, r6
 8004132:	6122      	str	r2, [r4, #16]
 8004134:	f8cd a000 	str.w	sl, [sp]
 8004138:	464b      	mov	r3, r9
 800413a:	aa03      	add	r2, sp, #12
 800413c:	4621      	mov	r1, r4
 800413e:	4640      	mov	r0, r8
 8004140:	f7ff fee2 	bl	8003f08 <_printf_common>
 8004144:	3001      	adds	r0, #1
 8004146:	d14c      	bne.n	80041e2 <_printf_i+0x1fe>
 8004148:	f04f 30ff 	mov.w	r0, #4294967295
 800414c:	b004      	add	sp, #16
 800414e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004152:	4835      	ldr	r0, [pc, #212]	; (8004228 <_printf_i+0x244>)
 8004154:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	680e      	ldr	r6, [r1, #0]
 800415c:	061f      	lsls	r7, r3, #24
 800415e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004162:	600e      	str	r6, [r1, #0]
 8004164:	d514      	bpl.n	8004190 <_printf_i+0x1ac>
 8004166:	07d9      	lsls	r1, r3, #31
 8004168:	bf44      	itt	mi
 800416a:	f043 0320 	orrmi.w	r3, r3, #32
 800416e:	6023      	strmi	r3, [r4, #0]
 8004170:	b91d      	cbnz	r5, 800417a <_printf_i+0x196>
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	f023 0320 	bic.w	r3, r3, #32
 8004178:	6023      	str	r3, [r4, #0]
 800417a:	2310      	movs	r3, #16
 800417c:	e7b0      	b.n	80040e0 <_printf_i+0xfc>
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	f043 0320 	orr.w	r3, r3, #32
 8004184:	6023      	str	r3, [r4, #0]
 8004186:	2378      	movs	r3, #120	; 0x78
 8004188:	4828      	ldr	r0, [pc, #160]	; (800422c <_printf_i+0x248>)
 800418a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800418e:	e7e3      	b.n	8004158 <_printf_i+0x174>
 8004190:	065e      	lsls	r6, r3, #25
 8004192:	bf48      	it	mi
 8004194:	b2ad      	uxthmi	r5, r5
 8004196:	e7e6      	b.n	8004166 <_printf_i+0x182>
 8004198:	4616      	mov	r6, r2
 800419a:	e7bb      	b.n	8004114 <_printf_i+0x130>
 800419c:	680b      	ldr	r3, [r1, #0]
 800419e:	6826      	ldr	r6, [r4, #0]
 80041a0:	6960      	ldr	r0, [r4, #20]
 80041a2:	1d1d      	adds	r5, r3, #4
 80041a4:	600d      	str	r5, [r1, #0]
 80041a6:	0635      	lsls	r5, r6, #24
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	d501      	bpl.n	80041b0 <_printf_i+0x1cc>
 80041ac:	6018      	str	r0, [r3, #0]
 80041ae:	e002      	b.n	80041b6 <_printf_i+0x1d2>
 80041b0:	0671      	lsls	r1, r6, #25
 80041b2:	d5fb      	bpl.n	80041ac <_printf_i+0x1c8>
 80041b4:	8018      	strh	r0, [r3, #0]
 80041b6:	2300      	movs	r3, #0
 80041b8:	6123      	str	r3, [r4, #16]
 80041ba:	4616      	mov	r6, r2
 80041bc:	e7ba      	b.n	8004134 <_printf_i+0x150>
 80041be:	680b      	ldr	r3, [r1, #0]
 80041c0:	1d1a      	adds	r2, r3, #4
 80041c2:	600a      	str	r2, [r1, #0]
 80041c4:	681e      	ldr	r6, [r3, #0]
 80041c6:	6862      	ldr	r2, [r4, #4]
 80041c8:	2100      	movs	r1, #0
 80041ca:	4630      	mov	r0, r6
 80041cc:	f7fc f808 	bl	80001e0 <memchr>
 80041d0:	b108      	cbz	r0, 80041d6 <_printf_i+0x1f2>
 80041d2:	1b80      	subs	r0, r0, r6
 80041d4:	6060      	str	r0, [r4, #4]
 80041d6:	6863      	ldr	r3, [r4, #4]
 80041d8:	6123      	str	r3, [r4, #16]
 80041da:	2300      	movs	r3, #0
 80041dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041e0:	e7a8      	b.n	8004134 <_printf_i+0x150>
 80041e2:	6923      	ldr	r3, [r4, #16]
 80041e4:	4632      	mov	r2, r6
 80041e6:	4649      	mov	r1, r9
 80041e8:	4640      	mov	r0, r8
 80041ea:	47d0      	blx	sl
 80041ec:	3001      	adds	r0, #1
 80041ee:	d0ab      	beq.n	8004148 <_printf_i+0x164>
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	079b      	lsls	r3, r3, #30
 80041f4:	d413      	bmi.n	800421e <_printf_i+0x23a>
 80041f6:	68e0      	ldr	r0, [r4, #12]
 80041f8:	9b03      	ldr	r3, [sp, #12]
 80041fa:	4298      	cmp	r0, r3
 80041fc:	bfb8      	it	lt
 80041fe:	4618      	movlt	r0, r3
 8004200:	e7a4      	b.n	800414c <_printf_i+0x168>
 8004202:	2301      	movs	r3, #1
 8004204:	4632      	mov	r2, r6
 8004206:	4649      	mov	r1, r9
 8004208:	4640      	mov	r0, r8
 800420a:	47d0      	blx	sl
 800420c:	3001      	adds	r0, #1
 800420e:	d09b      	beq.n	8004148 <_printf_i+0x164>
 8004210:	3501      	adds	r5, #1
 8004212:	68e3      	ldr	r3, [r4, #12]
 8004214:	9903      	ldr	r1, [sp, #12]
 8004216:	1a5b      	subs	r3, r3, r1
 8004218:	42ab      	cmp	r3, r5
 800421a:	dcf2      	bgt.n	8004202 <_printf_i+0x21e>
 800421c:	e7eb      	b.n	80041f6 <_printf_i+0x212>
 800421e:	2500      	movs	r5, #0
 8004220:	f104 0619 	add.w	r6, r4, #25
 8004224:	e7f5      	b.n	8004212 <_printf_i+0x22e>
 8004226:	bf00      	nop
 8004228:	08007696 	.word	0x08007696
 800422c:	080076a7 	.word	0x080076a7

08004230 <siprintf>:
 8004230:	b40e      	push	{r1, r2, r3}
 8004232:	b500      	push	{lr}
 8004234:	b09c      	sub	sp, #112	; 0x70
 8004236:	ab1d      	add	r3, sp, #116	; 0x74
 8004238:	9002      	str	r0, [sp, #8]
 800423a:	9006      	str	r0, [sp, #24]
 800423c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004240:	4809      	ldr	r0, [pc, #36]	; (8004268 <siprintf+0x38>)
 8004242:	9107      	str	r1, [sp, #28]
 8004244:	9104      	str	r1, [sp, #16]
 8004246:	4909      	ldr	r1, [pc, #36]	; (800426c <siprintf+0x3c>)
 8004248:	f853 2b04 	ldr.w	r2, [r3], #4
 800424c:	9105      	str	r1, [sp, #20]
 800424e:	6800      	ldr	r0, [r0, #0]
 8004250:	9301      	str	r3, [sp, #4]
 8004252:	a902      	add	r1, sp, #8
 8004254:	f001 fb3a 	bl	80058cc <_svfiprintf_r>
 8004258:	9b02      	ldr	r3, [sp, #8]
 800425a:	2200      	movs	r2, #0
 800425c:	701a      	strb	r2, [r3, #0]
 800425e:	b01c      	add	sp, #112	; 0x70
 8004260:	f85d eb04 	ldr.w	lr, [sp], #4
 8004264:	b003      	add	sp, #12
 8004266:	4770      	bx	lr
 8004268:	20000008 	.word	0x20000008
 800426c:	ffff0208 	.word	0xffff0208

08004270 <strcpy>:
 8004270:	4603      	mov	r3, r0
 8004272:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004276:	f803 2b01 	strb.w	r2, [r3], #1
 800427a:	2a00      	cmp	r2, #0
 800427c:	d1f9      	bne.n	8004272 <strcpy+0x2>
 800427e:	4770      	bx	lr

08004280 <quorem>:
 8004280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004284:	6903      	ldr	r3, [r0, #16]
 8004286:	690c      	ldr	r4, [r1, #16]
 8004288:	42a3      	cmp	r3, r4
 800428a:	4607      	mov	r7, r0
 800428c:	f2c0 8081 	blt.w	8004392 <quorem+0x112>
 8004290:	3c01      	subs	r4, #1
 8004292:	f101 0814 	add.w	r8, r1, #20
 8004296:	f100 0514 	add.w	r5, r0, #20
 800429a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800429e:	9301      	str	r3, [sp, #4]
 80042a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80042a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80042a8:	3301      	adds	r3, #1
 80042aa:	429a      	cmp	r2, r3
 80042ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80042b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80042b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80042b8:	d331      	bcc.n	800431e <quorem+0x9e>
 80042ba:	f04f 0e00 	mov.w	lr, #0
 80042be:	4640      	mov	r0, r8
 80042c0:	46ac      	mov	ip, r5
 80042c2:	46f2      	mov	sl, lr
 80042c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80042c8:	b293      	uxth	r3, r2
 80042ca:	fb06 e303 	mla	r3, r6, r3, lr
 80042ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	ebaa 0303 	sub.w	r3, sl, r3
 80042d8:	0c12      	lsrs	r2, r2, #16
 80042da:	f8dc a000 	ldr.w	sl, [ip]
 80042de:	fb06 e202 	mla	r2, r6, r2, lr
 80042e2:	fa13 f38a 	uxtah	r3, r3, sl
 80042e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80042ea:	fa1f fa82 	uxth.w	sl, r2
 80042ee:	f8dc 2000 	ldr.w	r2, [ip]
 80042f2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80042f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004300:	4581      	cmp	r9, r0
 8004302:	f84c 3b04 	str.w	r3, [ip], #4
 8004306:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800430a:	d2db      	bcs.n	80042c4 <quorem+0x44>
 800430c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004310:	b92b      	cbnz	r3, 800431e <quorem+0x9e>
 8004312:	9b01      	ldr	r3, [sp, #4]
 8004314:	3b04      	subs	r3, #4
 8004316:	429d      	cmp	r5, r3
 8004318:	461a      	mov	r2, r3
 800431a:	d32e      	bcc.n	800437a <quorem+0xfa>
 800431c:	613c      	str	r4, [r7, #16]
 800431e:	4638      	mov	r0, r7
 8004320:	f001 f8be 	bl	80054a0 <__mcmp>
 8004324:	2800      	cmp	r0, #0
 8004326:	db24      	blt.n	8004372 <quorem+0xf2>
 8004328:	3601      	adds	r6, #1
 800432a:	4628      	mov	r0, r5
 800432c:	f04f 0c00 	mov.w	ip, #0
 8004330:	f858 2b04 	ldr.w	r2, [r8], #4
 8004334:	f8d0 e000 	ldr.w	lr, [r0]
 8004338:	b293      	uxth	r3, r2
 800433a:	ebac 0303 	sub.w	r3, ip, r3
 800433e:	0c12      	lsrs	r2, r2, #16
 8004340:	fa13 f38e 	uxtah	r3, r3, lr
 8004344:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004348:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800434c:	b29b      	uxth	r3, r3
 800434e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004352:	45c1      	cmp	r9, r8
 8004354:	f840 3b04 	str.w	r3, [r0], #4
 8004358:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800435c:	d2e8      	bcs.n	8004330 <quorem+0xb0>
 800435e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004362:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004366:	b922      	cbnz	r2, 8004372 <quorem+0xf2>
 8004368:	3b04      	subs	r3, #4
 800436a:	429d      	cmp	r5, r3
 800436c:	461a      	mov	r2, r3
 800436e:	d30a      	bcc.n	8004386 <quorem+0x106>
 8004370:	613c      	str	r4, [r7, #16]
 8004372:	4630      	mov	r0, r6
 8004374:	b003      	add	sp, #12
 8004376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800437a:	6812      	ldr	r2, [r2, #0]
 800437c:	3b04      	subs	r3, #4
 800437e:	2a00      	cmp	r2, #0
 8004380:	d1cc      	bne.n	800431c <quorem+0x9c>
 8004382:	3c01      	subs	r4, #1
 8004384:	e7c7      	b.n	8004316 <quorem+0x96>
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	3b04      	subs	r3, #4
 800438a:	2a00      	cmp	r2, #0
 800438c:	d1f0      	bne.n	8004370 <quorem+0xf0>
 800438e:	3c01      	subs	r4, #1
 8004390:	e7eb      	b.n	800436a <quorem+0xea>
 8004392:	2000      	movs	r0, #0
 8004394:	e7ee      	b.n	8004374 <quorem+0xf4>
	...

08004398 <_dtoa_r>:
 8004398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800439c:	ed2d 8b02 	vpush	{d8}
 80043a0:	ec57 6b10 	vmov	r6, r7, d0
 80043a4:	b095      	sub	sp, #84	; 0x54
 80043a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80043a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80043ac:	9105      	str	r1, [sp, #20]
 80043ae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80043b2:	4604      	mov	r4, r0
 80043b4:	9209      	str	r2, [sp, #36]	; 0x24
 80043b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80043b8:	b975      	cbnz	r5, 80043d8 <_dtoa_r+0x40>
 80043ba:	2010      	movs	r0, #16
 80043bc:	f000 fddc 	bl	8004f78 <malloc>
 80043c0:	4602      	mov	r2, r0
 80043c2:	6260      	str	r0, [r4, #36]	; 0x24
 80043c4:	b920      	cbnz	r0, 80043d0 <_dtoa_r+0x38>
 80043c6:	4bb2      	ldr	r3, [pc, #712]	; (8004690 <_dtoa_r+0x2f8>)
 80043c8:	21ea      	movs	r1, #234	; 0xea
 80043ca:	48b2      	ldr	r0, [pc, #712]	; (8004694 <_dtoa_r+0x2fc>)
 80043cc:	f001 fb8e 	bl	8005aec <__assert_func>
 80043d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80043d4:	6005      	str	r5, [r0, #0]
 80043d6:	60c5      	str	r5, [r0, #12]
 80043d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043da:	6819      	ldr	r1, [r3, #0]
 80043dc:	b151      	cbz	r1, 80043f4 <_dtoa_r+0x5c>
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	604a      	str	r2, [r1, #4]
 80043e2:	2301      	movs	r3, #1
 80043e4:	4093      	lsls	r3, r2
 80043e6:	608b      	str	r3, [r1, #8]
 80043e8:	4620      	mov	r0, r4
 80043ea:	f000 fe1b 	bl	8005024 <_Bfree>
 80043ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	1e3b      	subs	r3, r7, #0
 80043f6:	bfb9      	ittee	lt
 80043f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80043fc:	9303      	strlt	r3, [sp, #12]
 80043fe:	2300      	movge	r3, #0
 8004400:	f8c8 3000 	strge.w	r3, [r8]
 8004404:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004408:	4ba3      	ldr	r3, [pc, #652]	; (8004698 <_dtoa_r+0x300>)
 800440a:	bfbc      	itt	lt
 800440c:	2201      	movlt	r2, #1
 800440e:	f8c8 2000 	strlt.w	r2, [r8]
 8004412:	ea33 0309 	bics.w	r3, r3, r9
 8004416:	d11b      	bne.n	8004450 <_dtoa_r+0xb8>
 8004418:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800441a:	f242 730f 	movw	r3, #9999	; 0x270f
 800441e:	6013      	str	r3, [r2, #0]
 8004420:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004424:	4333      	orrs	r3, r6
 8004426:	f000 857a 	beq.w	8004f1e <_dtoa_r+0xb86>
 800442a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800442c:	b963      	cbnz	r3, 8004448 <_dtoa_r+0xb0>
 800442e:	4b9b      	ldr	r3, [pc, #620]	; (800469c <_dtoa_r+0x304>)
 8004430:	e024      	b.n	800447c <_dtoa_r+0xe4>
 8004432:	4b9b      	ldr	r3, [pc, #620]	; (80046a0 <_dtoa_r+0x308>)
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	3308      	adds	r3, #8
 8004438:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	9800      	ldr	r0, [sp, #0]
 800443e:	b015      	add	sp, #84	; 0x54
 8004440:	ecbd 8b02 	vpop	{d8}
 8004444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004448:	4b94      	ldr	r3, [pc, #592]	; (800469c <_dtoa_r+0x304>)
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	3303      	adds	r3, #3
 800444e:	e7f3      	b.n	8004438 <_dtoa_r+0xa0>
 8004450:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004454:	2200      	movs	r2, #0
 8004456:	ec51 0b17 	vmov	r0, r1, d7
 800445a:	2300      	movs	r3, #0
 800445c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004460:	f7fc fb32 	bl	8000ac8 <__aeabi_dcmpeq>
 8004464:	4680      	mov	r8, r0
 8004466:	b158      	cbz	r0, 8004480 <_dtoa_r+0xe8>
 8004468:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800446a:	2301      	movs	r3, #1
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 8551 	beq.w	8004f18 <_dtoa_r+0xb80>
 8004476:	488b      	ldr	r0, [pc, #556]	; (80046a4 <_dtoa_r+0x30c>)
 8004478:	6018      	str	r0, [r3, #0]
 800447a:	1e43      	subs	r3, r0, #1
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	e7dd      	b.n	800443c <_dtoa_r+0xa4>
 8004480:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004484:	aa12      	add	r2, sp, #72	; 0x48
 8004486:	a913      	add	r1, sp, #76	; 0x4c
 8004488:	4620      	mov	r0, r4
 800448a:	f001 f8ad 	bl	80055e8 <__d2b>
 800448e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004492:	4683      	mov	fp, r0
 8004494:	2d00      	cmp	r5, #0
 8004496:	d07c      	beq.n	8004592 <_dtoa_r+0x1fa>
 8004498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800449a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800449e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044a2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80044a6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80044aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80044ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80044b2:	4b7d      	ldr	r3, [pc, #500]	; (80046a8 <_dtoa_r+0x310>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	4630      	mov	r0, r6
 80044b8:	4639      	mov	r1, r7
 80044ba:	f7fb fee5 	bl	8000288 <__aeabi_dsub>
 80044be:	a36e      	add	r3, pc, #440	; (adr r3, 8004678 <_dtoa_r+0x2e0>)
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	f7fc f898 	bl	80005f8 <__aeabi_dmul>
 80044c8:	a36d      	add	r3, pc, #436	; (adr r3, 8004680 <_dtoa_r+0x2e8>)
 80044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ce:	f7fb fedd 	bl	800028c <__adddf3>
 80044d2:	4606      	mov	r6, r0
 80044d4:	4628      	mov	r0, r5
 80044d6:	460f      	mov	r7, r1
 80044d8:	f7fc f824 	bl	8000524 <__aeabi_i2d>
 80044dc:	a36a      	add	r3, pc, #424	; (adr r3, 8004688 <_dtoa_r+0x2f0>)
 80044de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e2:	f7fc f889 	bl	80005f8 <__aeabi_dmul>
 80044e6:	4602      	mov	r2, r0
 80044e8:	460b      	mov	r3, r1
 80044ea:	4630      	mov	r0, r6
 80044ec:	4639      	mov	r1, r7
 80044ee:	f7fb fecd 	bl	800028c <__adddf3>
 80044f2:	4606      	mov	r6, r0
 80044f4:	460f      	mov	r7, r1
 80044f6:	f7fc fb2f 	bl	8000b58 <__aeabi_d2iz>
 80044fa:	2200      	movs	r2, #0
 80044fc:	4682      	mov	sl, r0
 80044fe:	2300      	movs	r3, #0
 8004500:	4630      	mov	r0, r6
 8004502:	4639      	mov	r1, r7
 8004504:	f7fc faea 	bl	8000adc <__aeabi_dcmplt>
 8004508:	b148      	cbz	r0, 800451e <_dtoa_r+0x186>
 800450a:	4650      	mov	r0, sl
 800450c:	f7fc f80a 	bl	8000524 <__aeabi_i2d>
 8004510:	4632      	mov	r2, r6
 8004512:	463b      	mov	r3, r7
 8004514:	f7fc fad8 	bl	8000ac8 <__aeabi_dcmpeq>
 8004518:	b908      	cbnz	r0, 800451e <_dtoa_r+0x186>
 800451a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800451e:	f1ba 0f16 	cmp.w	sl, #22
 8004522:	d854      	bhi.n	80045ce <_dtoa_r+0x236>
 8004524:	4b61      	ldr	r3, [pc, #388]	; (80046ac <_dtoa_r+0x314>)
 8004526:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800452a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004532:	f7fc fad3 	bl	8000adc <__aeabi_dcmplt>
 8004536:	2800      	cmp	r0, #0
 8004538:	d04b      	beq.n	80045d2 <_dtoa_r+0x23a>
 800453a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800453e:	2300      	movs	r3, #0
 8004540:	930e      	str	r3, [sp, #56]	; 0x38
 8004542:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004544:	1b5d      	subs	r5, r3, r5
 8004546:	1e6b      	subs	r3, r5, #1
 8004548:	9304      	str	r3, [sp, #16]
 800454a:	bf43      	ittte	mi
 800454c:	2300      	movmi	r3, #0
 800454e:	f1c5 0801 	rsbmi	r8, r5, #1
 8004552:	9304      	strmi	r3, [sp, #16]
 8004554:	f04f 0800 	movpl.w	r8, #0
 8004558:	f1ba 0f00 	cmp.w	sl, #0
 800455c:	db3b      	blt.n	80045d6 <_dtoa_r+0x23e>
 800455e:	9b04      	ldr	r3, [sp, #16]
 8004560:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004564:	4453      	add	r3, sl
 8004566:	9304      	str	r3, [sp, #16]
 8004568:	2300      	movs	r3, #0
 800456a:	9306      	str	r3, [sp, #24]
 800456c:	9b05      	ldr	r3, [sp, #20]
 800456e:	2b09      	cmp	r3, #9
 8004570:	d869      	bhi.n	8004646 <_dtoa_r+0x2ae>
 8004572:	2b05      	cmp	r3, #5
 8004574:	bfc4      	itt	gt
 8004576:	3b04      	subgt	r3, #4
 8004578:	9305      	strgt	r3, [sp, #20]
 800457a:	9b05      	ldr	r3, [sp, #20]
 800457c:	f1a3 0302 	sub.w	r3, r3, #2
 8004580:	bfcc      	ite	gt
 8004582:	2500      	movgt	r5, #0
 8004584:	2501      	movle	r5, #1
 8004586:	2b03      	cmp	r3, #3
 8004588:	d869      	bhi.n	800465e <_dtoa_r+0x2c6>
 800458a:	e8df f003 	tbb	[pc, r3]
 800458e:	4e2c      	.short	0x4e2c
 8004590:	5a4c      	.short	0x5a4c
 8004592:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004596:	441d      	add	r5, r3
 8004598:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800459c:	2b20      	cmp	r3, #32
 800459e:	bfc1      	itttt	gt
 80045a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80045a4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80045a8:	fa09 f303 	lslgt.w	r3, r9, r3
 80045ac:	fa26 f000 	lsrgt.w	r0, r6, r0
 80045b0:	bfda      	itte	le
 80045b2:	f1c3 0320 	rsble	r3, r3, #32
 80045b6:	fa06 f003 	lslle.w	r0, r6, r3
 80045ba:	4318      	orrgt	r0, r3
 80045bc:	f7fb ffa2 	bl	8000504 <__aeabi_ui2d>
 80045c0:	2301      	movs	r3, #1
 80045c2:	4606      	mov	r6, r0
 80045c4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80045c8:	3d01      	subs	r5, #1
 80045ca:	9310      	str	r3, [sp, #64]	; 0x40
 80045cc:	e771      	b.n	80044b2 <_dtoa_r+0x11a>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e7b6      	b.n	8004540 <_dtoa_r+0x1a8>
 80045d2:	900e      	str	r0, [sp, #56]	; 0x38
 80045d4:	e7b5      	b.n	8004542 <_dtoa_r+0x1aa>
 80045d6:	f1ca 0300 	rsb	r3, sl, #0
 80045da:	9306      	str	r3, [sp, #24]
 80045dc:	2300      	movs	r3, #0
 80045de:	eba8 080a 	sub.w	r8, r8, sl
 80045e2:	930d      	str	r3, [sp, #52]	; 0x34
 80045e4:	e7c2      	b.n	800456c <_dtoa_r+0x1d4>
 80045e6:	2300      	movs	r3, #0
 80045e8:	9308      	str	r3, [sp, #32]
 80045ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	dc39      	bgt.n	8004664 <_dtoa_r+0x2cc>
 80045f0:	f04f 0901 	mov.w	r9, #1
 80045f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80045f8:	464b      	mov	r3, r9
 80045fa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80045fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004600:	2200      	movs	r2, #0
 8004602:	6042      	str	r2, [r0, #4]
 8004604:	2204      	movs	r2, #4
 8004606:	f102 0614 	add.w	r6, r2, #20
 800460a:	429e      	cmp	r6, r3
 800460c:	6841      	ldr	r1, [r0, #4]
 800460e:	d92f      	bls.n	8004670 <_dtoa_r+0x2d8>
 8004610:	4620      	mov	r0, r4
 8004612:	f000 fcc7 	bl	8004fa4 <_Balloc>
 8004616:	9000      	str	r0, [sp, #0]
 8004618:	2800      	cmp	r0, #0
 800461a:	d14b      	bne.n	80046b4 <_dtoa_r+0x31c>
 800461c:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <_dtoa_r+0x318>)
 800461e:	4602      	mov	r2, r0
 8004620:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004624:	e6d1      	b.n	80043ca <_dtoa_r+0x32>
 8004626:	2301      	movs	r3, #1
 8004628:	e7de      	b.n	80045e8 <_dtoa_r+0x250>
 800462a:	2300      	movs	r3, #0
 800462c:	9308      	str	r3, [sp, #32]
 800462e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004630:	eb0a 0903 	add.w	r9, sl, r3
 8004634:	f109 0301 	add.w	r3, r9, #1
 8004638:	2b01      	cmp	r3, #1
 800463a:	9301      	str	r3, [sp, #4]
 800463c:	bfb8      	it	lt
 800463e:	2301      	movlt	r3, #1
 8004640:	e7dd      	b.n	80045fe <_dtoa_r+0x266>
 8004642:	2301      	movs	r3, #1
 8004644:	e7f2      	b.n	800462c <_dtoa_r+0x294>
 8004646:	2501      	movs	r5, #1
 8004648:	2300      	movs	r3, #0
 800464a:	9305      	str	r3, [sp, #20]
 800464c:	9508      	str	r5, [sp, #32]
 800464e:	f04f 39ff 	mov.w	r9, #4294967295
 8004652:	2200      	movs	r2, #0
 8004654:	f8cd 9004 	str.w	r9, [sp, #4]
 8004658:	2312      	movs	r3, #18
 800465a:	9209      	str	r2, [sp, #36]	; 0x24
 800465c:	e7cf      	b.n	80045fe <_dtoa_r+0x266>
 800465e:	2301      	movs	r3, #1
 8004660:	9308      	str	r3, [sp, #32]
 8004662:	e7f4      	b.n	800464e <_dtoa_r+0x2b6>
 8004664:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004668:	f8cd 9004 	str.w	r9, [sp, #4]
 800466c:	464b      	mov	r3, r9
 800466e:	e7c6      	b.n	80045fe <_dtoa_r+0x266>
 8004670:	3101      	adds	r1, #1
 8004672:	6041      	str	r1, [r0, #4]
 8004674:	0052      	lsls	r2, r2, #1
 8004676:	e7c6      	b.n	8004606 <_dtoa_r+0x26e>
 8004678:	636f4361 	.word	0x636f4361
 800467c:	3fd287a7 	.word	0x3fd287a7
 8004680:	8b60c8b3 	.word	0x8b60c8b3
 8004684:	3fc68a28 	.word	0x3fc68a28
 8004688:	509f79fb 	.word	0x509f79fb
 800468c:	3fd34413 	.word	0x3fd34413
 8004690:	080076c5 	.word	0x080076c5
 8004694:	080076dc 	.word	0x080076dc
 8004698:	7ff00000 	.word	0x7ff00000
 800469c:	080076c1 	.word	0x080076c1
 80046a0:	080076b8 	.word	0x080076b8
 80046a4:	08007695 	.word	0x08007695
 80046a8:	3ff80000 	.word	0x3ff80000
 80046ac:	080077d8 	.word	0x080077d8
 80046b0:	0800773b 	.word	0x0800773b
 80046b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046b6:	9a00      	ldr	r2, [sp, #0]
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	9b01      	ldr	r3, [sp, #4]
 80046bc:	2b0e      	cmp	r3, #14
 80046be:	f200 80ad 	bhi.w	800481c <_dtoa_r+0x484>
 80046c2:	2d00      	cmp	r5, #0
 80046c4:	f000 80aa 	beq.w	800481c <_dtoa_r+0x484>
 80046c8:	f1ba 0f00 	cmp.w	sl, #0
 80046cc:	dd36      	ble.n	800473c <_dtoa_r+0x3a4>
 80046ce:	4ac3      	ldr	r2, [pc, #780]	; (80049dc <_dtoa_r+0x644>)
 80046d0:	f00a 030f 	and.w	r3, sl, #15
 80046d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80046d8:	ed93 7b00 	vldr	d7, [r3]
 80046dc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80046e0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80046e4:	eeb0 8a47 	vmov.f32	s16, s14
 80046e8:	eef0 8a67 	vmov.f32	s17, s15
 80046ec:	d016      	beq.n	800471c <_dtoa_r+0x384>
 80046ee:	4bbc      	ldr	r3, [pc, #752]	; (80049e0 <_dtoa_r+0x648>)
 80046f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80046f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80046f8:	f7fc f8a8 	bl	800084c <__aeabi_ddiv>
 80046fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004700:	f007 070f 	and.w	r7, r7, #15
 8004704:	2503      	movs	r5, #3
 8004706:	4eb6      	ldr	r6, [pc, #728]	; (80049e0 <_dtoa_r+0x648>)
 8004708:	b957      	cbnz	r7, 8004720 <_dtoa_r+0x388>
 800470a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800470e:	ec53 2b18 	vmov	r2, r3, d8
 8004712:	f7fc f89b 	bl	800084c <__aeabi_ddiv>
 8004716:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800471a:	e029      	b.n	8004770 <_dtoa_r+0x3d8>
 800471c:	2502      	movs	r5, #2
 800471e:	e7f2      	b.n	8004706 <_dtoa_r+0x36e>
 8004720:	07f9      	lsls	r1, r7, #31
 8004722:	d508      	bpl.n	8004736 <_dtoa_r+0x39e>
 8004724:	ec51 0b18 	vmov	r0, r1, d8
 8004728:	e9d6 2300 	ldrd	r2, r3, [r6]
 800472c:	f7fb ff64 	bl	80005f8 <__aeabi_dmul>
 8004730:	ec41 0b18 	vmov	d8, r0, r1
 8004734:	3501      	adds	r5, #1
 8004736:	107f      	asrs	r7, r7, #1
 8004738:	3608      	adds	r6, #8
 800473a:	e7e5      	b.n	8004708 <_dtoa_r+0x370>
 800473c:	f000 80a6 	beq.w	800488c <_dtoa_r+0x4f4>
 8004740:	f1ca 0600 	rsb	r6, sl, #0
 8004744:	4ba5      	ldr	r3, [pc, #660]	; (80049dc <_dtoa_r+0x644>)
 8004746:	4fa6      	ldr	r7, [pc, #664]	; (80049e0 <_dtoa_r+0x648>)
 8004748:	f006 020f 	and.w	r2, r6, #15
 800474c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004754:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004758:	f7fb ff4e 	bl	80005f8 <__aeabi_dmul>
 800475c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004760:	1136      	asrs	r6, r6, #4
 8004762:	2300      	movs	r3, #0
 8004764:	2502      	movs	r5, #2
 8004766:	2e00      	cmp	r6, #0
 8004768:	f040 8085 	bne.w	8004876 <_dtoa_r+0x4de>
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1d2      	bne.n	8004716 <_dtoa_r+0x37e>
 8004770:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 808c 	beq.w	8004890 <_dtoa_r+0x4f8>
 8004778:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800477c:	4b99      	ldr	r3, [pc, #612]	; (80049e4 <_dtoa_r+0x64c>)
 800477e:	2200      	movs	r2, #0
 8004780:	4630      	mov	r0, r6
 8004782:	4639      	mov	r1, r7
 8004784:	f7fc f9aa 	bl	8000adc <__aeabi_dcmplt>
 8004788:	2800      	cmp	r0, #0
 800478a:	f000 8081 	beq.w	8004890 <_dtoa_r+0x4f8>
 800478e:	9b01      	ldr	r3, [sp, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d07d      	beq.n	8004890 <_dtoa_r+0x4f8>
 8004794:	f1b9 0f00 	cmp.w	r9, #0
 8004798:	dd3c      	ble.n	8004814 <_dtoa_r+0x47c>
 800479a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800479e:	9307      	str	r3, [sp, #28]
 80047a0:	2200      	movs	r2, #0
 80047a2:	4b91      	ldr	r3, [pc, #580]	; (80049e8 <_dtoa_r+0x650>)
 80047a4:	4630      	mov	r0, r6
 80047a6:	4639      	mov	r1, r7
 80047a8:	f7fb ff26 	bl	80005f8 <__aeabi_dmul>
 80047ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047b0:	3501      	adds	r5, #1
 80047b2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80047b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80047ba:	4628      	mov	r0, r5
 80047bc:	f7fb feb2 	bl	8000524 <__aeabi_i2d>
 80047c0:	4632      	mov	r2, r6
 80047c2:	463b      	mov	r3, r7
 80047c4:	f7fb ff18 	bl	80005f8 <__aeabi_dmul>
 80047c8:	4b88      	ldr	r3, [pc, #544]	; (80049ec <_dtoa_r+0x654>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	f7fb fd5e 	bl	800028c <__adddf3>
 80047d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80047d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047d8:	9303      	str	r3, [sp, #12]
 80047da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d15c      	bne.n	800489a <_dtoa_r+0x502>
 80047e0:	4b83      	ldr	r3, [pc, #524]	; (80049f0 <_dtoa_r+0x658>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	4630      	mov	r0, r6
 80047e6:	4639      	mov	r1, r7
 80047e8:	f7fb fd4e 	bl	8000288 <__aeabi_dsub>
 80047ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80047f0:	4606      	mov	r6, r0
 80047f2:	460f      	mov	r7, r1
 80047f4:	f7fc f990 	bl	8000b18 <__aeabi_dcmpgt>
 80047f8:	2800      	cmp	r0, #0
 80047fa:	f040 8296 	bne.w	8004d2a <_dtoa_r+0x992>
 80047fe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004802:	4630      	mov	r0, r6
 8004804:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004808:	4639      	mov	r1, r7
 800480a:	f7fc f967 	bl	8000adc <__aeabi_dcmplt>
 800480e:	2800      	cmp	r0, #0
 8004810:	f040 8288 	bne.w	8004d24 <_dtoa_r+0x98c>
 8004814:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004818:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800481c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800481e:	2b00      	cmp	r3, #0
 8004820:	f2c0 8158 	blt.w	8004ad4 <_dtoa_r+0x73c>
 8004824:	f1ba 0f0e 	cmp.w	sl, #14
 8004828:	f300 8154 	bgt.w	8004ad4 <_dtoa_r+0x73c>
 800482c:	4b6b      	ldr	r3, [pc, #428]	; (80049dc <_dtoa_r+0x644>)
 800482e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004832:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004838:	2b00      	cmp	r3, #0
 800483a:	f280 80e3 	bge.w	8004a04 <_dtoa_r+0x66c>
 800483e:	9b01      	ldr	r3, [sp, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	f300 80df 	bgt.w	8004a04 <_dtoa_r+0x66c>
 8004846:	f040 826d 	bne.w	8004d24 <_dtoa_r+0x98c>
 800484a:	4b69      	ldr	r3, [pc, #420]	; (80049f0 <_dtoa_r+0x658>)
 800484c:	2200      	movs	r2, #0
 800484e:	4640      	mov	r0, r8
 8004850:	4649      	mov	r1, r9
 8004852:	f7fb fed1 	bl	80005f8 <__aeabi_dmul>
 8004856:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800485a:	f7fc f953 	bl	8000b04 <__aeabi_dcmpge>
 800485e:	9e01      	ldr	r6, [sp, #4]
 8004860:	4637      	mov	r7, r6
 8004862:	2800      	cmp	r0, #0
 8004864:	f040 8243 	bne.w	8004cee <_dtoa_r+0x956>
 8004868:	9d00      	ldr	r5, [sp, #0]
 800486a:	2331      	movs	r3, #49	; 0x31
 800486c:	f805 3b01 	strb.w	r3, [r5], #1
 8004870:	f10a 0a01 	add.w	sl, sl, #1
 8004874:	e23f      	b.n	8004cf6 <_dtoa_r+0x95e>
 8004876:	07f2      	lsls	r2, r6, #31
 8004878:	d505      	bpl.n	8004886 <_dtoa_r+0x4ee>
 800487a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800487e:	f7fb febb 	bl	80005f8 <__aeabi_dmul>
 8004882:	3501      	adds	r5, #1
 8004884:	2301      	movs	r3, #1
 8004886:	1076      	asrs	r6, r6, #1
 8004888:	3708      	adds	r7, #8
 800488a:	e76c      	b.n	8004766 <_dtoa_r+0x3ce>
 800488c:	2502      	movs	r5, #2
 800488e:	e76f      	b.n	8004770 <_dtoa_r+0x3d8>
 8004890:	9b01      	ldr	r3, [sp, #4]
 8004892:	f8cd a01c 	str.w	sl, [sp, #28]
 8004896:	930c      	str	r3, [sp, #48]	; 0x30
 8004898:	e78d      	b.n	80047b6 <_dtoa_r+0x41e>
 800489a:	9900      	ldr	r1, [sp, #0]
 800489c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800489e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048a0:	4b4e      	ldr	r3, [pc, #312]	; (80049dc <_dtoa_r+0x644>)
 80048a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80048a6:	4401      	add	r1, r0
 80048a8:	9102      	str	r1, [sp, #8]
 80048aa:	9908      	ldr	r1, [sp, #32]
 80048ac:	eeb0 8a47 	vmov.f32	s16, s14
 80048b0:	eef0 8a67 	vmov.f32	s17, s15
 80048b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80048bc:	2900      	cmp	r1, #0
 80048be:	d045      	beq.n	800494c <_dtoa_r+0x5b4>
 80048c0:	494c      	ldr	r1, [pc, #304]	; (80049f4 <_dtoa_r+0x65c>)
 80048c2:	2000      	movs	r0, #0
 80048c4:	f7fb ffc2 	bl	800084c <__aeabi_ddiv>
 80048c8:	ec53 2b18 	vmov	r2, r3, d8
 80048cc:	f7fb fcdc 	bl	8000288 <__aeabi_dsub>
 80048d0:	9d00      	ldr	r5, [sp, #0]
 80048d2:	ec41 0b18 	vmov	d8, r0, r1
 80048d6:	4639      	mov	r1, r7
 80048d8:	4630      	mov	r0, r6
 80048da:	f7fc f93d 	bl	8000b58 <__aeabi_d2iz>
 80048de:	900c      	str	r0, [sp, #48]	; 0x30
 80048e0:	f7fb fe20 	bl	8000524 <__aeabi_i2d>
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	4630      	mov	r0, r6
 80048ea:	4639      	mov	r1, r7
 80048ec:	f7fb fccc 	bl	8000288 <__aeabi_dsub>
 80048f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048f2:	3330      	adds	r3, #48	; 0x30
 80048f4:	f805 3b01 	strb.w	r3, [r5], #1
 80048f8:	ec53 2b18 	vmov	r2, r3, d8
 80048fc:	4606      	mov	r6, r0
 80048fe:	460f      	mov	r7, r1
 8004900:	f7fc f8ec 	bl	8000adc <__aeabi_dcmplt>
 8004904:	2800      	cmp	r0, #0
 8004906:	d165      	bne.n	80049d4 <_dtoa_r+0x63c>
 8004908:	4632      	mov	r2, r6
 800490a:	463b      	mov	r3, r7
 800490c:	4935      	ldr	r1, [pc, #212]	; (80049e4 <_dtoa_r+0x64c>)
 800490e:	2000      	movs	r0, #0
 8004910:	f7fb fcba 	bl	8000288 <__aeabi_dsub>
 8004914:	ec53 2b18 	vmov	r2, r3, d8
 8004918:	f7fc f8e0 	bl	8000adc <__aeabi_dcmplt>
 800491c:	2800      	cmp	r0, #0
 800491e:	f040 80b9 	bne.w	8004a94 <_dtoa_r+0x6fc>
 8004922:	9b02      	ldr	r3, [sp, #8]
 8004924:	429d      	cmp	r5, r3
 8004926:	f43f af75 	beq.w	8004814 <_dtoa_r+0x47c>
 800492a:	4b2f      	ldr	r3, [pc, #188]	; (80049e8 <_dtoa_r+0x650>)
 800492c:	ec51 0b18 	vmov	r0, r1, d8
 8004930:	2200      	movs	r2, #0
 8004932:	f7fb fe61 	bl	80005f8 <__aeabi_dmul>
 8004936:	4b2c      	ldr	r3, [pc, #176]	; (80049e8 <_dtoa_r+0x650>)
 8004938:	ec41 0b18 	vmov	d8, r0, r1
 800493c:	2200      	movs	r2, #0
 800493e:	4630      	mov	r0, r6
 8004940:	4639      	mov	r1, r7
 8004942:	f7fb fe59 	bl	80005f8 <__aeabi_dmul>
 8004946:	4606      	mov	r6, r0
 8004948:	460f      	mov	r7, r1
 800494a:	e7c4      	b.n	80048d6 <_dtoa_r+0x53e>
 800494c:	ec51 0b17 	vmov	r0, r1, d7
 8004950:	f7fb fe52 	bl	80005f8 <__aeabi_dmul>
 8004954:	9b02      	ldr	r3, [sp, #8]
 8004956:	9d00      	ldr	r5, [sp, #0]
 8004958:	930c      	str	r3, [sp, #48]	; 0x30
 800495a:	ec41 0b18 	vmov	d8, r0, r1
 800495e:	4639      	mov	r1, r7
 8004960:	4630      	mov	r0, r6
 8004962:	f7fc f8f9 	bl	8000b58 <__aeabi_d2iz>
 8004966:	9011      	str	r0, [sp, #68]	; 0x44
 8004968:	f7fb fddc 	bl	8000524 <__aeabi_i2d>
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
 8004970:	4630      	mov	r0, r6
 8004972:	4639      	mov	r1, r7
 8004974:	f7fb fc88 	bl	8000288 <__aeabi_dsub>
 8004978:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800497a:	3330      	adds	r3, #48	; 0x30
 800497c:	f805 3b01 	strb.w	r3, [r5], #1
 8004980:	9b02      	ldr	r3, [sp, #8]
 8004982:	429d      	cmp	r5, r3
 8004984:	4606      	mov	r6, r0
 8004986:	460f      	mov	r7, r1
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	d134      	bne.n	80049f8 <_dtoa_r+0x660>
 800498e:	4b19      	ldr	r3, [pc, #100]	; (80049f4 <_dtoa_r+0x65c>)
 8004990:	ec51 0b18 	vmov	r0, r1, d8
 8004994:	f7fb fc7a 	bl	800028c <__adddf3>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	4630      	mov	r0, r6
 800499e:	4639      	mov	r1, r7
 80049a0:	f7fc f8ba 	bl	8000b18 <__aeabi_dcmpgt>
 80049a4:	2800      	cmp	r0, #0
 80049a6:	d175      	bne.n	8004a94 <_dtoa_r+0x6fc>
 80049a8:	ec53 2b18 	vmov	r2, r3, d8
 80049ac:	4911      	ldr	r1, [pc, #68]	; (80049f4 <_dtoa_r+0x65c>)
 80049ae:	2000      	movs	r0, #0
 80049b0:	f7fb fc6a 	bl	8000288 <__aeabi_dsub>
 80049b4:	4602      	mov	r2, r0
 80049b6:	460b      	mov	r3, r1
 80049b8:	4630      	mov	r0, r6
 80049ba:	4639      	mov	r1, r7
 80049bc:	f7fc f88e 	bl	8000adc <__aeabi_dcmplt>
 80049c0:	2800      	cmp	r0, #0
 80049c2:	f43f af27 	beq.w	8004814 <_dtoa_r+0x47c>
 80049c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049c8:	1e6b      	subs	r3, r5, #1
 80049ca:	930c      	str	r3, [sp, #48]	; 0x30
 80049cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80049d0:	2b30      	cmp	r3, #48	; 0x30
 80049d2:	d0f8      	beq.n	80049c6 <_dtoa_r+0x62e>
 80049d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80049d8:	e04a      	b.n	8004a70 <_dtoa_r+0x6d8>
 80049da:	bf00      	nop
 80049dc:	080077d8 	.word	0x080077d8
 80049e0:	080077b0 	.word	0x080077b0
 80049e4:	3ff00000 	.word	0x3ff00000
 80049e8:	40240000 	.word	0x40240000
 80049ec:	401c0000 	.word	0x401c0000
 80049f0:	40140000 	.word	0x40140000
 80049f4:	3fe00000 	.word	0x3fe00000
 80049f8:	4baf      	ldr	r3, [pc, #700]	; (8004cb8 <_dtoa_r+0x920>)
 80049fa:	f7fb fdfd 	bl	80005f8 <__aeabi_dmul>
 80049fe:	4606      	mov	r6, r0
 8004a00:	460f      	mov	r7, r1
 8004a02:	e7ac      	b.n	800495e <_dtoa_r+0x5c6>
 8004a04:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004a08:	9d00      	ldr	r5, [sp, #0]
 8004a0a:	4642      	mov	r2, r8
 8004a0c:	464b      	mov	r3, r9
 8004a0e:	4630      	mov	r0, r6
 8004a10:	4639      	mov	r1, r7
 8004a12:	f7fb ff1b 	bl	800084c <__aeabi_ddiv>
 8004a16:	f7fc f89f 	bl	8000b58 <__aeabi_d2iz>
 8004a1a:	9002      	str	r0, [sp, #8]
 8004a1c:	f7fb fd82 	bl	8000524 <__aeabi_i2d>
 8004a20:	4642      	mov	r2, r8
 8004a22:	464b      	mov	r3, r9
 8004a24:	f7fb fde8 	bl	80005f8 <__aeabi_dmul>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4630      	mov	r0, r6
 8004a2e:	4639      	mov	r1, r7
 8004a30:	f7fb fc2a 	bl	8000288 <__aeabi_dsub>
 8004a34:	9e02      	ldr	r6, [sp, #8]
 8004a36:	9f01      	ldr	r7, [sp, #4]
 8004a38:	3630      	adds	r6, #48	; 0x30
 8004a3a:	f805 6b01 	strb.w	r6, [r5], #1
 8004a3e:	9e00      	ldr	r6, [sp, #0]
 8004a40:	1bae      	subs	r6, r5, r6
 8004a42:	42b7      	cmp	r7, r6
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	d137      	bne.n	8004aba <_dtoa_r+0x722>
 8004a4a:	f7fb fc1f 	bl	800028c <__adddf3>
 8004a4e:	4642      	mov	r2, r8
 8004a50:	464b      	mov	r3, r9
 8004a52:	4606      	mov	r6, r0
 8004a54:	460f      	mov	r7, r1
 8004a56:	f7fc f85f 	bl	8000b18 <__aeabi_dcmpgt>
 8004a5a:	b9c8      	cbnz	r0, 8004a90 <_dtoa_r+0x6f8>
 8004a5c:	4642      	mov	r2, r8
 8004a5e:	464b      	mov	r3, r9
 8004a60:	4630      	mov	r0, r6
 8004a62:	4639      	mov	r1, r7
 8004a64:	f7fc f830 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a68:	b110      	cbz	r0, 8004a70 <_dtoa_r+0x6d8>
 8004a6a:	9b02      	ldr	r3, [sp, #8]
 8004a6c:	07d9      	lsls	r1, r3, #31
 8004a6e:	d40f      	bmi.n	8004a90 <_dtoa_r+0x6f8>
 8004a70:	4620      	mov	r0, r4
 8004a72:	4659      	mov	r1, fp
 8004a74:	f000 fad6 	bl	8005024 <_Bfree>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	702b      	strb	r3, [r5, #0]
 8004a7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a7e:	f10a 0001 	add.w	r0, sl, #1
 8004a82:	6018      	str	r0, [r3, #0]
 8004a84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f43f acd8 	beq.w	800443c <_dtoa_r+0xa4>
 8004a8c:	601d      	str	r5, [r3, #0]
 8004a8e:	e4d5      	b.n	800443c <_dtoa_r+0xa4>
 8004a90:	f8cd a01c 	str.w	sl, [sp, #28]
 8004a94:	462b      	mov	r3, r5
 8004a96:	461d      	mov	r5, r3
 8004a98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a9c:	2a39      	cmp	r2, #57	; 0x39
 8004a9e:	d108      	bne.n	8004ab2 <_dtoa_r+0x71a>
 8004aa0:	9a00      	ldr	r2, [sp, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d1f7      	bne.n	8004a96 <_dtoa_r+0x6fe>
 8004aa6:	9a07      	ldr	r2, [sp, #28]
 8004aa8:	9900      	ldr	r1, [sp, #0]
 8004aaa:	3201      	adds	r2, #1
 8004aac:	9207      	str	r2, [sp, #28]
 8004aae:	2230      	movs	r2, #48	; 0x30
 8004ab0:	700a      	strb	r2, [r1, #0]
 8004ab2:	781a      	ldrb	r2, [r3, #0]
 8004ab4:	3201      	adds	r2, #1
 8004ab6:	701a      	strb	r2, [r3, #0]
 8004ab8:	e78c      	b.n	80049d4 <_dtoa_r+0x63c>
 8004aba:	4b7f      	ldr	r3, [pc, #508]	; (8004cb8 <_dtoa_r+0x920>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	f7fb fd9b 	bl	80005f8 <__aeabi_dmul>
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	4606      	mov	r6, r0
 8004ac8:	460f      	mov	r7, r1
 8004aca:	f7fb fffd 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	d09b      	beq.n	8004a0a <_dtoa_r+0x672>
 8004ad2:	e7cd      	b.n	8004a70 <_dtoa_r+0x6d8>
 8004ad4:	9a08      	ldr	r2, [sp, #32]
 8004ad6:	2a00      	cmp	r2, #0
 8004ad8:	f000 80c4 	beq.w	8004c64 <_dtoa_r+0x8cc>
 8004adc:	9a05      	ldr	r2, [sp, #20]
 8004ade:	2a01      	cmp	r2, #1
 8004ae0:	f300 80a8 	bgt.w	8004c34 <_dtoa_r+0x89c>
 8004ae4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004ae6:	2a00      	cmp	r2, #0
 8004ae8:	f000 80a0 	beq.w	8004c2c <_dtoa_r+0x894>
 8004aec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004af0:	9e06      	ldr	r6, [sp, #24]
 8004af2:	4645      	mov	r5, r8
 8004af4:	9a04      	ldr	r2, [sp, #16]
 8004af6:	2101      	movs	r1, #1
 8004af8:	441a      	add	r2, r3
 8004afa:	4620      	mov	r0, r4
 8004afc:	4498      	add	r8, r3
 8004afe:	9204      	str	r2, [sp, #16]
 8004b00:	f000 fb4c 	bl	800519c <__i2b>
 8004b04:	4607      	mov	r7, r0
 8004b06:	2d00      	cmp	r5, #0
 8004b08:	dd0b      	ble.n	8004b22 <_dtoa_r+0x78a>
 8004b0a:	9b04      	ldr	r3, [sp, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	dd08      	ble.n	8004b22 <_dtoa_r+0x78a>
 8004b10:	42ab      	cmp	r3, r5
 8004b12:	9a04      	ldr	r2, [sp, #16]
 8004b14:	bfa8      	it	ge
 8004b16:	462b      	movge	r3, r5
 8004b18:	eba8 0803 	sub.w	r8, r8, r3
 8004b1c:	1aed      	subs	r5, r5, r3
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	9304      	str	r3, [sp, #16]
 8004b22:	9b06      	ldr	r3, [sp, #24]
 8004b24:	b1fb      	cbz	r3, 8004b66 <_dtoa_r+0x7ce>
 8004b26:	9b08      	ldr	r3, [sp, #32]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 809f 	beq.w	8004c6c <_dtoa_r+0x8d4>
 8004b2e:	2e00      	cmp	r6, #0
 8004b30:	dd11      	ble.n	8004b56 <_dtoa_r+0x7be>
 8004b32:	4639      	mov	r1, r7
 8004b34:	4632      	mov	r2, r6
 8004b36:	4620      	mov	r0, r4
 8004b38:	f000 fbec 	bl	8005314 <__pow5mult>
 8004b3c:	465a      	mov	r2, fp
 8004b3e:	4601      	mov	r1, r0
 8004b40:	4607      	mov	r7, r0
 8004b42:	4620      	mov	r0, r4
 8004b44:	f000 fb40 	bl	80051c8 <__multiply>
 8004b48:	4659      	mov	r1, fp
 8004b4a:	9007      	str	r0, [sp, #28]
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	f000 fa69 	bl	8005024 <_Bfree>
 8004b52:	9b07      	ldr	r3, [sp, #28]
 8004b54:	469b      	mov	fp, r3
 8004b56:	9b06      	ldr	r3, [sp, #24]
 8004b58:	1b9a      	subs	r2, r3, r6
 8004b5a:	d004      	beq.n	8004b66 <_dtoa_r+0x7ce>
 8004b5c:	4659      	mov	r1, fp
 8004b5e:	4620      	mov	r0, r4
 8004b60:	f000 fbd8 	bl	8005314 <__pow5mult>
 8004b64:	4683      	mov	fp, r0
 8004b66:	2101      	movs	r1, #1
 8004b68:	4620      	mov	r0, r4
 8004b6a:	f000 fb17 	bl	800519c <__i2b>
 8004b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	4606      	mov	r6, r0
 8004b74:	dd7c      	ble.n	8004c70 <_dtoa_r+0x8d8>
 8004b76:	461a      	mov	r2, r3
 8004b78:	4601      	mov	r1, r0
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	f000 fbca 	bl	8005314 <__pow5mult>
 8004b80:	9b05      	ldr	r3, [sp, #20]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	4606      	mov	r6, r0
 8004b86:	dd76      	ble.n	8004c76 <_dtoa_r+0x8de>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	9306      	str	r3, [sp, #24]
 8004b8c:	6933      	ldr	r3, [r6, #16]
 8004b8e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004b92:	6918      	ldr	r0, [r3, #16]
 8004b94:	f000 fab2 	bl	80050fc <__hi0bits>
 8004b98:	f1c0 0020 	rsb	r0, r0, #32
 8004b9c:	9b04      	ldr	r3, [sp, #16]
 8004b9e:	4418      	add	r0, r3
 8004ba0:	f010 001f 	ands.w	r0, r0, #31
 8004ba4:	f000 8086 	beq.w	8004cb4 <_dtoa_r+0x91c>
 8004ba8:	f1c0 0320 	rsb	r3, r0, #32
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	dd7f      	ble.n	8004cb0 <_dtoa_r+0x918>
 8004bb0:	f1c0 001c 	rsb	r0, r0, #28
 8004bb4:	9b04      	ldr	r3, [sp, #16]
 8004bb6:	4403      	add	r3, r0
 8004bb8:	4480      	add	r8, r0
 8004bba:	4405      	add	r5, r0
 8004bbc:	9304      	str	r3, [sp, #16]
 8004bbe:	f1b8 0f00 	cmp.w	r8, #0
 8004bc2:	dd05      	ble.n	8004bd0 <_dtoa_r+0x838>
 8004bc4:	4659      	mov	r1, fp
 8004bc6:	4642      	mov	r2, r8
 8004bc8:	4620      	mov	r0, r4
 8004bca:	f000 fbfd 	bl	80053c8 <__lshift>
 8004bce:	4683      	mov	fp, r0
 8004bd0:	9b04      	ldr	r3, [sp, #16]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	dd05      	ble.n	8004be2 <_dtoa_r+0x84a>
 8004bd6:	4631      	mov	r1, r6
 8004bd8:	461a      	mov	r2, r3
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f000 fbf4 	bl	80053c8 <__lshift>
 8004be0:	4606      	mov	r6, r0
 8004be2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d069      	beq.n	8004cbc <_dtoa_r+0x924>
 8004be8:	4631      	mov	r1, r6
 8004bea:	4658      	mov	r0, fp
 8004bec:	f000 fc58 	bl	80054a0 <__mcmp>
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	da63      	bge.n	8004cbc <_dtoa_r+0x924>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	4659      	mov	r1, fp
 8004bf8:	220a      	movs	r2, #10
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f000 fa34 	bl	8005068 <__multadd>
 8004c00:	9b08      	ldr	r3, [sp, #32]
 8004c02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c06:	4683      	mov	fp, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 818f 	beq.w	8004f2c <_dtoa_r+0xb94>
 8004c0e:	4639      	mov	r1, r7
 8004c10:	2300      	movs	r3, #0
 8004c12:	220a      	movs	r2, #10
 8004c14:	4620      	mov	r0, r4
 8004c16:	f000 fa27 	bl	8005068 <__multadd>
 8004c1a:	f1b9 0f00 	cmp.w	r9, #0
 8004c1e:	4607      	mov	r7, r0
 8004c20:	f300 808e 	bgt.w	8004d40 <_dtoa_r+0x9a8>
 8004c24:	9b05      	ldr	r3, [sp, #20]
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	dc50      	bgt.n	8004ccc <_dtoa_r+0x934>
 8004c2a:	e089      	b.n	8004d40 <_dtoa_r+0x9a8>
 8004c2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004c32:	e75d      	b.n	8004af0 <_dtoa_r+0x758>
 8004c34:	9b01      	ldr	r3, [sp, #4]
 8004c36:	1e5e      	subs	r6, r3, #1
 8004c38:	9b06      	ldr	r3, [sp, #24]
 8004c3a:	42b3      	cmp	r3, r6
 8004c3c:	bfbf      	itttt	lt
 8004c3e:	9b06      	ldrlt	r3, [sp, #24]
 8004c40:	9606      	strlt	r6, [sp, #24]
 8004c42:	1af2      	sublt	r2, r6, r3
 8004c44:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8004c46:	bfb6      	itet	lt
 8004c48:	189b      	addlt	r3, r3, r2
 8004c4a:	1b9e      	subge	r6, r3, r6
 8004c4c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8004c4e:	9b01      	ldr	r3, [sp, #4]
 8004c50:	bfb8      	it	lt
 8004c52:	2600      	movlt	r6, #0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	bfb5      	itete	lt
 8004c58:	eba8 0503 	sublt.w	r5, r8, r3
 8004c5c:	9b01      	ldrge	r3, [sp, #4]
 8004c5e:	2300      	movlt	r3, #0
 8004c60:	4645      	movge	r5, r8
 8004c62:	e747      	b.n	8004af4 <_dtoa_r+0x75c>
 8004c64:	9e06      	ldr	r6, [sp, #24]
 8004c66:	9f08      	ldr	r7, [sp, #32]
 8004c68:	4645      	mov	r5, r8
 8004c6a:	e74c      	b.n	8004b06 <_dtoa_r+0x76e>
 8004c6c:	9a06      	ldr	r2, [sp, #24]
 8004c6e:	e775      	b.n	8004b5c <_dtoa_r+0x7c4>
 8004c70:	9b05      	ldr	r3, [sp, #20]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	dc18      	bgt.n	8004ca8 <_dtoa_r+0x910>
 8004c76:	9b02      	ldr	r3, [sp, #8]
 8004c78:	b9b3      	cbnz	r3, 8004ca8 <_dtoa_r+0x910>
 8004c7a:	9b03      	ldr	r3, [sp, #12]
 8004c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c80:	b9a3      	cbnz	r3, 8004cac <_dtoa_r+0x914>
 8004c82:	9b03      	ldr	r3, [sp, #12]
 8004c84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c88:	0d1b      	lsrs	r3, r3, #20
 8004c8a:	051b      	lsls	r3, r3, #20
 8004c8c:	b12b      	cbz	r3, 8004c9a <_dtoa_r+0x902>
 8004c8e:	9b04      	ldr	r3, [sp, #16]
 8004c90:	3301      	adds	r3, #1
 8004c92:	9304      	str	r3, [sp, #16]
 8004c94:	f108 0801 	add.w	r8, r8, #1
 8004c98:	2301      	movs	r3, #1
 8004c9a:	9306      	str	r3, [sp, #24]
 8004c9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f47f af74 	bne.w	8004b8c <_dtoa_r+0x7f4>
 8004ca4:	2001      	movs	r0, #1
 8004ca6:	e779      	b.n	8004b9c <_dtoa_r+0x804>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	e7f6      	b.n	8004c9a <_dtoa_r+0x902>
 8004cac:	9b02      	ldr	r3, [sp, #8]
 8004cae:	e7f4      	b.n	8004c9a <_dtoa_r+0x902>
 8004cb0:	d085      	beq.n	8004bbe <_dtoa_r+0x826>
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	301c      	adds	r0, #28
 8004cb6:	e77d      	b.n	8004bb4 <_dtoa_r+0x81c>
 8004cb8:	40240000 	.word	0x40240000
 8004cbc:	9b01      	ldr	r3, [sp, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	dc38      	bgt.n	8004d34 <_dtoa_r+0x99c>
 8004cc2:	9b05      	ldr	r3, [sp, #20]
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	dd35      	ble.n	8004d34 <_dtoa_r+0x99c>
 8004cc8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004ccc:	f1b9 0f00 	cmp.w	r9, #0
 8004cd0:	d10d      	bne.n	8004cee <_dtoa_r+0x956>
 8004cd2:	4631      	mov	r1, r6
 8004cd4:	464b      	mov	r3, r9
 8004cd6:	2205      	movs	r2, #5
 8004cd8:	4620      	mov	r0, r4
 8004cda:	f000 f9c5 	bl	8005068 <__multadd>
 8004cde:	4601      	mov	r1, r0
 8004ce0:	4606      	mov	r6, r0
 8004ce2:	4658      	mov	r0, fp
 8004ce4:	f000 fbdc 	bl	80054a0 <__mcmp>
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	f73f adbd 	bgt.w	8004868 <_dtoa_r+0x4d0>
 8004cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cf0:	9d00      	ldr	r5, [sp, #0]
 8004cf2:	ea6f 0a03 	mvn.w	sl, r3
 8004cf6:	f04f 0800 	mov.w	r8, #0
 8004cfa:	4631      	mov	r1, r6
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	f000 f991 	bl	8005024 <_Bfree>
 8004d02:	2f00      	cmp	r7, #0
 8004d04:	f43f aeb4 	beq.w	8004a70 <_dtoa_r+0x6d8>
 8004d08:	f1b8 0f00 	cmp.w	r8, #0
 8004d0c:	d005      	beq.n	8004d1a <_dtoa_r+0x982>
 8004d0e:	45b8      	cmp	r8, r7
 8004d10:	d003      	beq.n	8004d1a <_dtoa_r+0x982>
 8004d12:	4641      	mov	r1, r8
 8004d14:	4620      	mov	r0, r4
 8004d16:	f000 f985 	bl	8005024 <_Bfree>
 8004d1a:	4639      	mov	r1, r7
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	f000 f981 	bl	8005024 <_Bfree>
 8004d22:	e6a5      	b.n	8004a70 <_dtoa_r+0x6d8>
 8004d24:	2600      	movs	r6, #0
 8004d26:	4637      	mov	r7, r6
 8004d28:	e7e1      	b.n	8004cee <_dtoa_r+0x956>
 8004d2a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004d2c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004d30:	4637      	mov	r7, r6
 8004d32:	e599      	b.n	8004868 <_dtoa_r+0x4d0>
 8004d34:	9b08      	ldr	r3, [sp, #32]
 8004d36:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 80fd 	beq.w	8004f3a <_dtoa_r+0xba2>
 8004d40:	2d00      	cmp	r5, #0
 8004d42:	dd05      	ble.n	8004d50 <_dtoa_r+0x9b8>
 8004d44:	4639      	mov	r1, r7
 8004d46:	462a      	mov	r2, r5
 8004d48:	4620      	mov	r0, r4
 8004d4a:	f000 fb3d 	bl	80053c8 <__lshift>
 8004d4e:	4607      	mov	r7, r0
 8004d50:	9b06      	ldr	r3, [sp, #24]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d05c      	beq.n	8004e10 <_dtoa_r+0xa78>
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	4620      	mov	r0, r4
 8004d5a:	f000 f923 	bl	8004fa4 <_Balloc>
 8004d5e:	4605      	mov	r5, r0
 8004d60:	b928      	cbnz	r0, 8004d6e <_dtoa_r+0x9d6>
 8004d62:	4b80      	ldr	r3, [pc, #512]	; (8004f64 <_dtoa_r+0xbcc>)
 8004d64:	4602      	mov	r2, r0
 8004d66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004d6a:	f7ff bb2e 	b.w	80043ca <_dtoa_r+0x32>
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	3202      	adds	r2, #2
 8004d72:	0092      	lsls	r2, r2, #2
 8004d74:	f107 010c 	add.w	r1, r7, #12
 8004d78:	300c      	adds	r0, #12
 8004d7a:	f000 f905 	bl	8004f88 <memcpy>
 8004d7e:	2201      	movs	r2, #1
 8004d80:	4629      	mov	r1, r5
 8004d82:	4620      	mov	r0, r4
 8004d84:	f000 fb20 	bl	80053c8 <__lshift>
 8004d88:	9b00      	ldr	r3, [sp, #0]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	9301      	str	r3, [sp, #4]
 8004d8e:	9b00      	ldr	r3, [sp, #0]
 8004d90:	444b      	add	r3, r9
 8004d92:	9307      	str	r3, [sp, #28]
 8004d94:	9b02      	ldr	r3, [sp, #8]
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	46b8      	mov	r8, r7
 8004d9c:	9306      	str	r3, [sp, #24]
 8004d9e:	4607      	mov	r7, r0
 8004da0:	9b01      	ldr	r3, [sp, #4]
 8004da2:	4631      	mov	r1, r6
 8004da4:	3b01      	subs	r3, #1
 8004da6:	4658      	mov	r0, fp
 8004da8:	9302      	str	r3, [sp, #8]
 8004daa:	f7ff fa69 	bl	8004280 <quorem>
 8004dae:	4603      	mov	r3, r0
 8004db0:	3330      	adds	r3, #48	; 0x30
 8004db2:	9004      	str	r0, [sp, #16]
 8004db4:	4641      	mov	r1, r8
 8004db6:	4658      	mov	r0, fp
 8004db8:	9308      	str	r3, [sp, #32]
 8004dba:	f000 fb71 	bl	80054a0 <__mcmp>
 8004dbe:	463a      	mov	r2, r7
 8004dc0:	4681      	mov	r9, r0
 8004dc2:	4631      	mov	r1, r6
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	f000 fb87 	bl	80054d8 <__mdiff>
 8004dca:	68c2      	ldr	r2, [r0, #12]
 8004dcc:	9b08      	ldr	r3, [sp, #32]
 8004dce:	4605      	mov	r5, r0
 8004dd0:	bb02      	cbnz	r2, 8004e14 <_dtoa_r+0xa7c>
 8004dd2:	4601      	mov	r1, r0
 8004dd4:	4658      	mov	r0, fp
 8004dd6:	f000 fb63 	bl	80054a0 <__mcmp>
 8004dda:	9b08      	ldr	r3, [sp, #32]
 8004ddc:	4602      	mov	r2, r0
 8004dde:	4629      	mov	r1, r5
 8004de0:	4620      	mov	r0, r4
 8004de2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8004de6:	f000 f91d 	bl	8005024 <_Bfree>
 8004dea:	9b05      	ldr	r3, [sp, #20]
 8004dec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dee:	9d01      	ldr	r5, [sp, #4]
 8004df0:	ea43 0102 	orr.w	r1, r3, r2
 8004df4:	9b06      	ldr	r3, [sp, #24]
 8004df6:	430b      	orrs	r3, r1
 8004df8:	9b08      	ldr	r3, [sp, #32]
 8004dfa:	d10d      	bne.n	8004e18 <_dtoa_r+0xa80>
 8004dfc:	2b39      	cmp	r3, #57	; 0x39
 8004dfe:	d029      	beq.n	8004e54 <_dtoa_r+0xabc>
 8004e00:	f1b9 0f00 	cmp.w	r9, #0
 8004e04:	dd01      	ble.n	8004e0a <_dtoa_r+0xa72>
 8004e06:	9b04      	ldr	r3, [sp, #16]
 8004e08:	3331      	adds	r3, #49	; 0x31
 8004e0a:	9a02      	ldr	r2, [sp, #8]
 8004e0c:	7013      	strb	r3, [r2, #0]
 8004e0e:	e774      	b.n	8004cfa <_dtoa_r+0x962>
 8004e10:	4638      	mov	r0, r7
 8004e12:	e7b9      	b.n	8004d88 <_dtoa_r+0x9f0>
 8004e14:	2201      	movs	r2, #1
 8004e16:	e7e2      	b.n	8004dde <_dtoa_r+0xa46>
 8004e18:	f1b9 0f00 	cmp.w	r9, #0
 8004e1c:	db06      	blt.n	8004e2c <_dtoa_r+0xa94>
 8004e1e:	9905      	ldr	r1, [sp, #20]
 8004e20:	ea41 0909 	orr.w	r9, r1, r9
 8004e24:	9906      	ldr	r1, [sp, #24]
 8004e26:	ea59 0101 	orrs.w	r1, r9, r1
 8004e2a:	d120      	bne.n	8004e6e <_dtoa_r+0xad6>
 8004e2c:	2a00      	cmp	r2, #0
 8004e2e:	ddec      	ble.n	8004e0a <_dtoa_r+0xa72>
 8004e30:	4659      	mov	r1, fp
 8004e32:	2201      	movs	r2, #1
 8004e34:	4620      	mov	r0, r4
 8004e36:	9301      	str	r3, [sp, #4]
 8004e38:	f000 fac6 	bl	80053c8 <__lshift>
 8004e3c:	4631      	mov	r1, r6
 8004e3e:	4683      	mov	fp, r0
 8004e40:	f000 fb2e 	bl	80054a0 <__mcmp>
 8004e44:	2800      	cmp	r0, #0
 8004e46:	9b01      	ldr	r3, [sp, #4]
 8004e48:	dc02      	bgt.n	8004e50 <_dtoa_r+0xab8>
 8004e4a:	d1de      	bne.n	8004e0a <_dtoa_r+0xa72>
 8004e4c:	07da      	lsls	r2, r3, #31
 8004e4e:	d5dc      	bpl.n	8004e0a <_dtoa_r+0xa72>
 8004e50:	2b39      	cmp	r3, #57	; 0x39
 8004e52:	d1d8      	bne.n	8004e06 <_dtoa_r+0xa6e>
 8004e54:	9a02      	ldr	r2, [sp, #8]
 8004e56:	2339      	movs	r3, #57	; 0x39
 8004e58:	7013      	strb	r3, [r2, #0]
 8004e5a:	462b      	mov	r3, r5
 8004e5c:	461d      	mov	r5, r3
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004e64:	2a39      	cmp	r2, #57	; 0x39
 8004e66:	d050      	beq.n	8004f0a <_dtoa_r+0xb72>
 8004e68:	3201      	adds	r2, #1
 8004e6a:	701a      	strb	r2, [r3, #0]
 8004e6c:	e745      	b.n	8004cfa <_dtoa_r+0x962>
 8004e6e:	2a00      	cmp	r2, #0
 8004e70:	dd03      	ble.n	8004e7a <_dtoa_r+0xae2>
 8004e72:	2b39      	cmp	r3, #57	; 0x39
 8004e74:	d0ee      	beq.n	8004e54 <_dtoa_r+0xabc>
 8004e76:	3301      	adds	r3, #1
 8004e78:	e7c7      	b.n	8004e0a <_dtoa_r+0xa72>
 8004e7a:	9a01      	ldr	r2, [sp, #4]
 8004e7c:	9907      	ldr	r1, [sp, #28]
 8004e7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004e82:	428a      	cmp	r2, r1
 8004e84:	d02a      	beq.n	8004edc <_dtoa_r+0xb44>
 8004e86:	4659      	mov	r1, fp
 8004e88:	2300      	movs	r3, #0
 8004e8a:	220a      	movs	r2, #10
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	f000 f8eb 	bl	8005068 <__multadd>
 8004e92:	45b8      	cmp	r8, r7
 8004e94:	4683      	mov	fp, r0
 8004e96:	f04f 0300 	mov.w	r3, #0
 8004e9a:	f04f 020a 	mov.w	r2, #10
 8004e9e:	4641      	mov	r1, r8
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	d107      	bne.n	8004eb4 <_dtoa_r+0xb1c>
 8004ea4:	f000 f8e0 	bl	8005068 <__multadd>
 8004ea8:	4680      	mov	r8, r0
 8004eaa:	4607      	mov	r7, r0
 8004eac:	9b01      	ldr	r3, [sp, #4]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	9301      	str	r3, [sp, #4]
 8004eb2:	e775      	b.n	8004da0 <_dtoa_r+0xa08>
 8004eb4:	f000 f8d8 	bl	8005068 <__multadd>
 8004eb8:	4639      	mov	r1, r7
 8004eba:	4680      	mov	r8, r0
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	220a      	movs	r2, #10
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	f000 f8d1 	bl	8005068 <__multadd>
 8004ec6:	4607      	mov	r7, r0
 8004ec8:	e7f0      	b.n	8004eac <_dtoa_r+0xb14>
 8004eca:	f1b9 0f00 	cmp.w	r9, #0
 8004ece:	9a00      	ldr	r2, [sp, #0]
 8004ed0:	bfcc      	ite	gt
 8004ed2:	464d      	movgt	r5, r9
 8004ed4:	2501      	movle	r5, #1
 8004ed6:	4415      	add	r5, r2
 8004ed8:	f04f 0800 	mov.w	r8, #0
 8004edc:	4659      	mov	r1, fp
 8004ede:	2201      	movs	r2, #1
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	9301      	str	r3, [sp, #4]
 8004ee4:	f000 fa70 	bl	80053c8 <__lshift>
 8004ee8:	4631      	mov	r1, r6
 8004eea:	4683      	mov	fp, r0
 8004eec:	f000 fad8 	bl	80054a0 <__mcmp>
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	dcb2      	bgt.n	8004e5a <_dtoa_r+0xac2>
 8004ef4:	d102      	bne.n	8004efc <_dtoa_r+0xb64>
 8004ef6:	9b01      	ldr	r3, [sp, #4]
 8004ef8:	07db      	lsls	r3, r3, #31
 8004efa:	d4ae      	bmi.n	8004e5a <_dtoa_r+0xac2>
 8004efc:	462b      	mov	r3, r5
 8004efe:	461d      	mov	r5, r3
 8004f00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f04:	2a30      	cmp	r2, #48	; 0x30
 8004f06:	d0fa      	beq.n	8004efe <_dtoa_r+0xb66>
 8004f08:	e6f7      	b.n	8004cfa <_dtoa_r+0x962>
 8004f0a:	9a00      	ldr	r2, [sp, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d1a5      	bne.n	8004e5c <_dtoa_r+0xac4>
 8004f10:	f10a 0a01 	add.w	sl, sl, #1
 8004f14:	2331      	movs	r3, #49	; 0x31
 8004f16:	e779      	b.n	8004e0c <_dtoa_r+0xa74>
 8004f18:	4b13      	ldr	r3, [pc, #76]	; (8004f68 <_dtoa_r+0xbd0>)
 8004f1a:	f7ff baaf 	b.w	800447c <_dtoa_r+0xe4>
 8004f1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f47f aa86 	bne.w	8004432 <_dtoa_r+0x9a>
 8004f26:	4b11      	ldr	r3, [pc, #68]	; (8004f6c <_dtoa_r+0xbd4>)
 8004f28:	f7ff baa8 	b.w	800447c <_dtoa_r+0xe4>
 8004f2c:	f1b9 0f00 	cmp.w	r9, #0
 8004f30:	dc03      	bgt.n	8004f3a <_dtoa_r+0xba2>
 8004f32:	9b05      	ldr	r3, [sp, #20]
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	f73f aec9 	bgt.w	8004ccc <_dtoa_r+0x934>
 8004f3a:	9d00      	ldr	r5, [sp, #0]
 8004f3c:	4631      	mov	r1, r6
 8004f3e:	4658      	mov	r0, fp
 8004f40:	f7ff f99e 	bl	8004280 <quorem>
 8004f44:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004f48:	f805 3b01 	strb.w	r3, [r5], #1
 8004f4c:	9a00      	ldr	r2, [sp, #0]
 8004f4e:	1aaa      	subs	r2, r5, r2
 8004f50:	4591      	cmp	r9, r2
 8004f52:	ddba      	ble.n	8004eca <_dtoa_r+0xb32>
 8004f54:	4659      	mov	r1, fp
 8004f56:	2300      	movs	r3, #0
 8004f58:	220a      	movs	r2, #10
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	f000 f884 	bl	8005068 <__multadd>
 8004f60:	4683      	mov	fp, r0
 8004f62:	e7eb      	b.n	8004f3c <_dtoa_r+0xba4>
 8004f64:	0800773b 	.word	0x0800773b
 8004f68:	08007694 	.word	0x08007694
 8004f6c:	080076b8 	.word	0x080076b8

08004f70 <_localeconv_r>:
 8004f70:	4800      	ldr	r0, [pc, #0]	; (8004f74 <_localeconv_r+0x4>)
 8004f72:	4770      	bx	lr
 8004f74:	2000015c 	.word	0x2000015c

08004f78 <malloc>:
 8004f78:	4b02      	ldr	r3, [pc, #8]	; (8004f84 <malloc+0xc>)
 8004f7a:	4601      	mov	r1, r0
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	f000 bbef 	b.w	8005760 <_malloc_r>
 8004f82:	bf00      	nop
 8004f84:	20000008 	.word	0x20000008

08004f88 <memcpy>:
 8004f88:	440a      	add	r2, r1
 8004f8a:	4291      	cmp	r1, r2
 8004f8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f90:	d100      	bne.n	8004f94 <memcpy+0xc>
 8004f92:	4770      	bx	lr
 8004f94:	b510      	push	{r4, lr}
 8004f96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f9e:	4291      	cmp	r1, r2
 8004fa0:	d1f9      	bne.n	8004f96 <memcpy+0xe>
 8004fa2:	bd10      	pop	{r4, pc}

08004fa4 <_Balloc>:
 8004fa4:	b570      	push	{r4, r5, r6, lr}
 8004fa6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004fa8:	4604      	mov	r4, r0
 8004faa:	460d      	mov	r5, r1
 8004fac:	b976      	cbnz	r6, 8004fcc <_Balloc+0x28>
 8004fae:	2010      	movs	r0, #16
 8004fb0:	f7ff ffe2 	bl	8004f78 <malloc>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	6260      	str	r0, [r4, #36]	; 0x24
 8004fb8:	b920      	cbnz	r0, 8004fc4 <_Balloc+0x20>
 8004fba:	4b18      	ldr	r3, [pc, #96]	; (800501c <_Balloc+0x78>)
 8004fbc:	4818      	ldr	r0, [pc, #96]	; (8005020 <_Balloc+0x7c>)
 8004fbe:	2166      	movs	r1, #102	; 0x66
 8004fc0:	f000 fd94 	bl	8005aec <__assert_func>
 8004fc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004fc8:	6006      	str	r6, [r0, #0]
 8004fca:	60c6      	str	r6, [r0, #12]
 8004fcc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004fce:	68f3      	ldr	r3, [r6, #12]
 8004fd0:	b183      	cbz	r3, 8004ff4 <_Balloc+0x50>
 8004fd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004fda:	b9b8      	cbnz	r0, 800500c <_Balloc+0x68>
 8004fdc:	2101      	movs	r1, #1
 8004fde:	fa01 f605 	lsl.w	r6, r1, r5
 8004fe2:	1d72      	adds	r2, r6, #5
 8004fe4:	0092      	lsls	r2, r2, #2
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f000 fb5a 	bl	80056a0 <_calloc_r>
 8004fec:	b160      	cbz	r0, 8005008 <_Balloc+0x64>
 8004fee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004ff2:	e00e      	b.n	8005012 <_Balloc+0x6e>
 8004ff4:	2221      	movs	r2, #33	; 0x21
 8004ff6:	2104      	movs	r1, #4
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	f000 fb51 	bl	80056a0 <_calloc_r>
 8004ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005000:	60f0      	str	r0, [r6, #12]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1e4      	bne.n	8004fd2 <_Balloc+0x2e>
 8005008:	2000      	movs	r0, #0
 800500a:	bd70      	pop	{r4, r5, r6, pc}
 800500c:	6802      	ldr	r2, [r0, #0]
 800500e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005012:	2300      	movs	r3, #0
 8005014:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005018:	e7f7      	b.n	800500a <_Balloc+0x66>
 800501a:	bf00      	nop
 800501c:	080076c5 	.word	0x080076c5
 8005020:	0800774c 	.word	0x0800774c

08005024 <_Bfree>:
 8005024:	b570      	push	{r4, r5, r6, lr}
 8005026:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005028:	4605      	mov	r5, r0
 800502a:	460c      	mov	r4, r1
 800502c:	b976      	cbnz	r6, 800504c <_Bfree+0x28>
 800502e:	2010      	movs	r0, #16
 8005030:	f7ff ffa2 	bl	8004f78 <malloc>
 8005034:	4602      	mov	r2, r0
 8005036:	6268      	str	r0, [r5, #36]	; 0x24
 8005038:	b920      	cbnz	r0, 8005044 <_Bfree+0x20>
 800503a:	4b09      	ldr	r3, [pc, #36]	; (8005060 <_Bfree+0x3c>)
 800503c:	4809      	ldr	r0, [pc, #36]	; (8005064 <_Bfree+0x40>)
 800503e:	218a      	movs	r1, #138	; 0x8a
 8005040:	f000 fd54 	bl	8005aec <__assert_func>
 8005044:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005048:	6006      	str	r6, [r0, #0]
 800504a:	60c6      	str	r6, [r0, #12]
 800504c:	b13c      	cbz	r4, 800505e <_Bfree+0x3a>
 800504e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005050:	6862      	ldr	r2, [r4, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005058:	6021      	str	r1, [r4, #0]
 800505a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800505e:	bd70      	pop	{r4, r5, r6, pc}
 8005060:	080076c5 	.word	0x080076c5
 8005064:	0800774c 	.word	0x0800774c

08005068 <__multadd>:
 8005068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800506c:	690e      	ldr	r6, [r1, #16]
 800506e:	4607      	mov	r7, r0
 8005070:	4698      	mov	r8, r3
 8005072:	460c      	mov	r4, r1
 8005074:	f101 0014 	add.w	r0, r1, #20
 8005078:	2300      	movs	r3, #0
 800507a:	6805      	ldr	r5, [r0, #0]
 800507c:	b2a9      	uxth	r1, r5
 800507e:	fb02 8101 	mla	r1, r2, r1, r8
 8005082:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005086:	0c2d      	lsrs	r5, r5, #16
 8005088:	fb02 c505 	mla	r5, r2, r5, ip
 800508c:	b289      	uxth	r1, r1
 800508e:	3301      	adds	r3, #1
 8005090:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005094:	429e      	cmp	r6, r3
 8005096:	f840 1b04 	str.w	r1, [r0], #4
 800509a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800509e:	dcec      	bgt.n	800507a <__multadd+0x12>
 80050a0:	f1b8 0f00 	cmp.w	r8, #0
 80050a4:	d022      	beq.n	80050ec <__multadd+0x84>
 80050a6:	68a3      	ldr	r3, [r4, #8]
 80050a8:	42b3      	cmp	r3, r6
 80050aa:	dc19      	bgt.n	80050e0 <__multadd+0x78>
 80050ac:	6861      	ldr	r1, [r4, #4]
 80050ae:	4638      	mov	r0, r7
 80050b0:	3101      	adds	r1, #1
 80050b2:	f7ff ff77 	bl	8004fa4 <_Balloc>
 80050b6:	4605      	mov	r5, r0
 80050b8:	b928      	cbnz	r0, 80050c6 <__multadd+0x5e>
 80050ba:	4602      	mov	r2, r0
 80050bc:	4b0d      	ldr	r3, [pc, #52]	; (80050f4 <__multadd+0x8c>)
 80050be:	480e      	ldr	r0, [pc, #56]	; (80050f8 <__multadd+0x90>)
 80050c0:	21b5      	movs	r1, #181	; 0xb5
 80050c2:	f000 fd13 	bl	8005aec <__assert_func>
 80050c6:	6922      	ldr	r2, [r4, #16]
 80050c8:	3202      	adds	r2, #2
 80050ca:	f104 010c 	add.w	r1, r4, #12
 80050ce:	0092      	lsls	r2, r2, #2
 80050d0:	300c      	adds	r0, #12
 80050d2:	f7ff ff59 	bl	8004f88 <memcpy>
 80050d6:	4621      	mov	r1, r4
 80050d8:	4638      	mov	r0, r7
 80050da:	f7ff ffa3 	bl	8005024 <_Bfree>
 80050de:	462c      	mov	r4, r5
 80050e0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80050e4:	3601      	adds	r6, #1
 80050e6:	f8c3 8014 	str.w	r8, [r3, #20]
 80050ea:	6126      	str	r6, [r4, #16]
 80050ec:	4620      	mov	r0, r4
 80050ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050f2:	bf00      	nop
 80050f4:	0800773b 	.word	0x0800773b
 80050f8:	0800774c 	.word	0x0800774c

080050fc <__hi0bits>:
 80050fc:	0c03      	lsrs	r3, r0, #16
 80050fe:	041b      	lsls	r3, r3, #16
 8005100:	b9d3      	cbnz	r3, 8005138 <__hi0bits+0x3c>
 8005102:	0400      	lsls	r0, r0, #16
 8005104:	2310      	movs	r3, #16
 8005106:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800510a:	bf04      	itt	eq
 800510c:	0200      	lsleq	r0, r0, #8
 800510e:	3308      	addeq	r3, #8
 8005110:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005114:	bf04      	itt	eq
 8005116:	0100      	lsleq	r0, r0, #4
 8005118:	3304      	addeq	r3, #4
 800511a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800511e:	bf04      	itt	eq
 8005120:	0080      	lsleq	r0, r0, #2
 8005122:	3302      	addeq	r3, #2
 8005124:	2800      	cmp	r0, #0
 8005126:	db05      	blt.n	8005134 <__hi0bits+0x38>
 8005128:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800512c:	f103 0301 	add.w	r3, r3, #1
 8005130:	bf08      	it	eq
 8005132:	2320      	moveq	r3, #32
 8005134:	4618      	mov	r0, r3
 8005136:	4770      	bx	lr
 8005138:	2300      	movs	r3, #0
 800513a:	e7e4      	b.n	8005106 <__hi0bits+0xa>

0800513c <__lo0bits>:
 800513c:	6803      	ldr	r3, [r0, #0]
 800513e:	f013 0207 	ands.w	r2, r3, #7
 8005142:	4601      	mov	r1, r0
 8005144:	d00b      	beq.n	800515e <__lo0bits+0x22>
 8005146:	07da      	lsls	r2, r3, #31
 8005148:	d424      	bmi.n	8005194 <__lo0bits+0x58>
 800514a:	0798      	lsls	r0, r3, #30
 800514c:	bf49      	itett	mi
 800514e:	085b      	lsrmi	r3, r3, #1
 8005150:	089b      	lsrpl	r3, r3, #2
 8005152:	2001      	movmi	r0, #1
 8005154:	600b      	strmi	r3, [r1, #0]
 8005156:	bf5c      	itt	pl
 8005158:	600b      	strpl	r3, [r1, #0]
 800515a:	2002      	movpl	r0, #2
 800515c:	4770      	bx	lr
 800515e:	b298      	uxth	r0, r3
 8005160:	b9b0      	cbnz	r0, 8005190 <__lo0bits+0x54>
 8005162:	0c1b      	lsrs	r3, r3, #16
 8005164:	2010      	movs	r0, #16
 8005166:	f013 0fff 	tst.w	r3, #255	; 0xff
 800516a:	bf04      	itt	eq
 800516c:	0a1b      	lsreq	r3, r3, #8
 800516e:	3008      	addeq	r0, #8
 8005170:	071a      	lsls	r2, r3, #28
 8005172:	bf04      	itt	eq
 8005174:	091b      	lsreq	r3, r3, #4
 8005176:	3004      	addeq	r0, #4
 8005178:	079a      	lsls	r2, r3, #30
 800517a:	bf04      	itt	eq
 800517c:	089b      	lsreq	r3, r3, #2
 800517e:	3002      	addeq	r0, #2
 8005180:	07da      	lsls	r2, r3, #31
 8005182:	d403      	bmi.n	800518c <__lo0bits+0x50>
 8005184:	085b      	lsrs	r3, r3, #1
 8005186:	f100 0001 	add.w	r0, r0, #1
 800518a:	d005      	beq.n	8005198 <__lo0bits+0x5c>
 800518c:	600b      	str	r3, [r1, #0]
 800518e:	4770      	bx	lr
 8005190:	4610      	mov	r0, r2
 8005192:	e7e8      	b.n	8005166 <__lo0bits+0x2a>
 8005194:	2000      	movs	r0, #0
 8005196:	4770      	bx	lr
 8005198:	2020      	movs	r0, #32
 800519a:	4770      	bx	lr

0800519c <__i2b>:
 800519c:	b510      	push	{r4, lr}
 800519e:	460c      	mov	r4, r1
 80051a0:	2101      	movs	r1, #1
 80051a2:	f7ff feff 	bl	8004fa4 <_Balloc>
 80051a6:	4602      	mov	r2, r0
 80051a8:	b928      	cbnz	r0, 80051b6 <__i2b+0x1a>
 80051aa:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <__i2b+0x24>)
 80051ac:	4805      	ldr	r0, [pc, #20]	; (80051c4 <__i2b+0x28>)
 80051ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80051b2:	f000 fc9b 	bl	8005aec <__assert_func>
 80051b6:	2301      	movs	r3, #1
 80051b8:	6144      	str	r4, [r0, #20]
 80051ba:	6103      	str	r3, [r0, #16]
 80051bc:	bd10      	pop	{r4, pc}
 80051be:	bf00      	nop
 80051c0:	0800773b 	.word	0x0800773b
 80051c4:	0800774c 	.word	0x0800774c

080051c8 <__multiply>:
 80051c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051cc:	4614      	mov	r4, r2
 80051ce:	690a      	ldr	r2, [r1, #16]
 80051d0:	6923      	ldr	r3, [r4, #16]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	bfb8      	it	lt
 80051d6:	460b      	movlt	r3, r1
 80051d8:	460d      	mov	r5, r1
 80051da:	bfbc      	itt	lt
 80051dc:	4625      	movlt	r5, r4
 80051de:	461c      	movlt	r4, r3
 80051e0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80051e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80051e8:	68ab      	ldr	r3, [r5, #8]
 80051ea:	6869      	ldr	r1, [r5, #4]
 80051ec:	eb0a 0709 	add.w	r7, sl, r9
 80051f0:	42bb      	cmp	r3, r7
 80051f2:	b085      	sub	sp, #20
 80051f4:	bfb8      	it	lt
 80051f6:	3101      	addlt	r1, #1
 80051f8:	f7ff fed4 	bl	8004fa4 <_Balloc>
 80051fc:	b930      	cbnz	r0, 800520c <__multiply+0x44>
 80051fe:	4602      	mov	r2, r0
 8005200:	4b42      	ldr	r3, [pc, #264]	; (800530c <__multiply+0x144>)
 8005202:	4843      	ldr	r0, [pc, #268]	; (8005310 <__multiply+0x148>)
 8005204:	f240 115d 	movw	r1, #349	; 0x15d
 8005208:	f000 fc70 	bl	8005aec <__assert_func>
 800520c:	f100 0614 	add.w	r6, r0, #20
 8005210:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005214:	4633      	mov	r3, r6
 8005216:	2200      	movs	r2, #0
 8005218:	4543      	cmp	r3, r8
 800521a:	d31e      	bcc.n	800525a <__multiply+0x92>
 800521c:	f105 0c14 	add.w	ip, r5, #20
 8005220:	f104 0314 	add.w	r3, r4, #20
 8005224:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005228:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800522c:	9202      	str	r2, [sp, #8]
 800522e:	ebac 0205 	sub.w	r2, ip, r5
 8005232:	3a15      	subs	r2, #21
 8005234:	f022 0203 	bic.w	r2, r2, #3
 8005238:	3204      	adds	r2, #4
 800523a:	f105 0115 	add.w	r1, r5, #21
 800523e:	458c      	cmp	ip, r1
 8005240:	bf38      	it	cc
 8005242:	2204      	movcc	r2, #4
 8005244:	9201      	str	r2, [sp, #4]
 8005246:	9a02      	ldr	r2, [sp, #8]
 8005248:	9303      	str	r3, [sp, #12]
 800524a:	429a      	cmp	r2, r3
 800524c:	d808      	bhi.n	8005260 <__multiply+0x98>
 800524e:	2f00      	cmp	r7, #0
 8005250:	dc55      	bgt.n	80052fe <__multiply+0x136>
 8005252:	6107      	str	r7, [r0, #16]
 8005254:	b005      	add	sp, #20
 8005256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800525a:	f843 2b04 	str.w	r2, [r3], #4
 800525e:	e7db      	b.n	8005218 <__multiply+0x50>
 8005260:	f8b3 a000 	ldrh.w	sl, [r3]
 8005264:	f1ba 0f00 	cmp.w	sl, #0
 8005268:	d020      	beq.n	80052ac <__multiply+0xe4>
 800526a:	f105 0e14 	add.w	lr, r5, #20
 800526e:	46b1      	mov	r9, r6
 8005270:	2200      	movs	r2, #0
 8005272:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005276:	f8d9 b000 	ldr.w	fp, [r9]
 800527a:	b2a1      	uxth	r1, r4
 800527c:	fa1f fb8b 	uxth.w	fp, fp
 8005280:	fb0a b101 	mla	r1, sl, r1, fp
 8005284:	4411      	add	r1, r2
 8005286:	f8d9 2000 	ldr.w	r2, [r9]
 800528a:	0c24      	lsrs	r4, r4, #16
 800528c:	0c12      	lsrs	r2, r2, #16
 800528e:	fb0a 2404 	mla	r4, sl, r4, r2
 8005292:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005296:	b289      	uxth	r1, r1
 8005298:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800529c:	45f4      	cmp	ip, lr
 800529e:	f849 1b04 	str.w	r1, [r9], #4
 80052a2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80052a6:	d8e4      	bhi.n	8005272 <__multiply+0xaa>
 80052a8:	9901      	ldr	r1, [sp, #4]
 80052aa:	5072      	str	r2, [r6, r1]
 80052ac:	9a03      	ldr	r2, [sp, #12]
 80052ae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80052b2:	3304      	adds	r3, #4
 80052b4:	f1b9 0f00 	cmp.w	r9, #0
 80052b8:	d01f      	beq.n	80052fa <__multiply+0x132>
 80052ba:	6834      	ldr	r4, [r6, #0]
 80052bc:	f105 0114 	add.w	r1, r5, #20
 80052c0:	46b6      	mov	lr, r6
 80052c2:	f04f 0a00 	mov.w	sl, #0
 80052c6:	880a      	ldrh	r2, [r1, #0]
 80052c8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80052cc:	fb09 b202 	mla	r2, r9, r2, fp
 80052d0:	4492      	add	sl, r2
 80052d2:	b2a4      	uxth	r4, r4
 80052d4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80052d8:	f84e 4b04 	str.w	r4, [lr], #4
 80052dc:	f851 4b04 	ldr.w	r4, [r1], #4
 80052e0:	f8be 2000 	ldrh.w	r2, [lr]
 80052e4:	0c24      	lsrs	r4, r4, #16
 80052e6:	fb09 2404 	mla	r4, r9, r4, r2
 80052ea:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80052ee:	458c      	cmp	ip, r1
 80052f0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80052f4:	d8e7      	bhi.n	80052c6 <__multiply+0xfe>
 80052f6:	9a01      	ldr	r2, [sp, #4]
 80052f8:	50b4      	str	r4, [r6, r2]
 80052fa:	3604      	adds	r6, #4
 80052fc:	e7a3      	b.n	8005246 <__multiply+0x7e>
 80052fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1a5      	bne.n	8005252 <__multiply+0x8a>
 8005306:	3f01      	subs	r7, #1
 8005308:	e7a1      	b.n	800524e <__multiply+0x86>
 800530a:	bf00      	nop
 800530c:	0800773b 	.word	0x0800773b
 8005310:	0800774c 	.word	0x0800774c

08005314 <__pow5mult>:
 8005314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005318:	4615      	mov	r5, r2
 800531a:	f012 0203 	ands.w	r2, r2, #3
 800531e:	4606      	mov	r6, r0
 8005320:	460f      	mov	r7, r1
 8005322:	d007      	beq.n	8005334 <__pow5mult+0x20>
 8005324:	4c25      	ldr	r4, [pc, #148]	; (80053bc <__pow5mult+0xa8>)
 8005326:	3a01      	subs	r2, #1
 8005328:	2300      	movs	r3, #0
 800532a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800532e:	f7ff fe9b 	bl	8005068 <__multadd>
 8005332:	4607      	mov	r7, r0
 8005334:	10ad      	asrs	r5, r5, #2
 8005336:	d03d      	beq.n	80053b4 <__pow5mult+0xa0>
 8005338:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800533a:	b97c      	cbnz	r4, 800535c <__pow5mult+0x48>
 800533c:	2010      	movs	r0, #16
 800533e:	f7ff fe1b 	bl	8004f78 <malloc>
 8005342:	4602      	mov	r2, r0
 8005344:	6270      	str	r0, [r6, #36]	; 0x24
 8005346:	b928      	cbnz	r0, 8005354 <__pow5mult+0x40>
 8005348:	4b1d      	ldr	r3, [pc, #116]	; (80053c0 <__pow5mult+0xac>)
 800534a:	481e      	ldr	r0, [pc, #120]	; (80053c4 <__pow5mult+0xb0>)
 800534c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005350:	f000 fbcc 	bl	8005aec <__assert_func>
 8005354:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005358:	6004      	str	r4, [r0, #0]
 800535a:	60c4      	str	r4, [r0, #12]
 800535c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005360:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005364:	b94c      	cbnz	r4, 800537a <__pow5mult+0x66>
 8005366:	f240 2171 	movw	r1, #625	; 0x271
 800536a:	4630      	mov	r0, r6
 800536c:	f7ff ff16 	bl	800519c <__i2b>
 8005370:	2300      	movs	r3, #0
 8005372:	f8c8 0008 	str.w	r0, [r8, #8]
 8005376:	4604      	mov	r4, r0
 8005378:	6003      	str	r3, [r0, #0]
 800537a:	f04f 0900 	mov.w	r9, #0
 800537e:	07eb      	lsls	r3, r5, #31
 8005380:	d50a      	bpl.n	8005398 <__pow5mult+0x84>
 8005382:	4639      	mov	r1, r7
 8005384:	4622      	mov	r2, r4
 8005386:	4630      	mov	r0, r6
 8005388:	f7ff ff1e 	bl	80051c8 <__multiply>
 800538c:	4639      	mov	r1, r7
 800538e:	4680      	mov	r8, r0
 8005390:	4630      	mov	r0, r6
 8005392:	f7ff fe47 	bl	8005024 <_Bfree>
 8005396:	4647      	mov	r7, r8
 8005398:	106d      	asrs	r5, r5, #1
 800539a:	d00b      	beq.n	80053b4 <__pow5mult+0xa0>
 800539c:	6820      	ldr	r0, [r4, #0]
 800539e:	b938      	cbnz	r0, 80053b0 <__pow5mult+0x9c>
 80053a0:	4622      	mov	r2, r4
 80053a2:	4621      	mov	r1, r4
 80053a4:	4630      	mov	r0, r6
 80053a6:	f7ff ff0f 	bl	80051c8 <__multiply>
 80053aa:	6020      	str	r0, [r4, #0]
 80053ac:	f8c0 9000 	str.w	r9, [r0]
 80053b0:	4604      	mov	r4, r0
 80053b2:	e7e4      	b.n	800537e <__pow5mult+0x6a>
 80053b4:	4638      	mov	r0, r7
 80053b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053ba:	bf00      	nop
 80053bc:	080078a0 	.word	0x080078a0
 80053c0:	080076c5 	.word	0x080076c5
 80053c4:	0800774c 	.word	0x0800774c

080053c8 <__lshift>:
 80053c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053cc:	460c      	mov	r4, r1
 80053ce:	6849      	ldr	r1, [r1, #4]
 80053d0:	6923      	ldr	r3, [r4, #16]
 80053d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80053d6:	68a3      	ldr	r3, [r4, #8]
 80053d8:	4607      	mov	r7, r0
 80053da:	4691      	mov	r9, r2
 80053dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80053e0:	f108 0601 	add.w	r6, r8, #1
 80053e4:	42b3      	cmp	r3, r6
 80053e6:	db0b      	blt.n	8005400 <__lshift+0x38>
 80053e8:	4638      	mov	r0, r7
 80053ea:	f7ff fddb 	bl	8004fa4 <_Balloc>
 80053ee:	4605      	mov	r5, r0
 80053f0:	b948      	cbnz	r0, 8005406 <__lshift+0x3e>
 80053f2:	4602      	mov	r2, r0
 80053f4:	4b28      	ldr	r3, [pc, #160]	; (8005498 <__lshift+0xd0>)
 80053f6:	4829      	ldr	r0, [pc, #164]	; (800549c <__lshift+0xd4>)
 80053f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80053fc:	f000 fb76 	bl	8005aec <__assert_func>
 8005400:	3101      	adds	r1, #1
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	e7ee      	b.n	80053e4 <__lshift+0x1c>
 8005406:	2300      	movs	r3, #0
 8005408:	f100 0114 	add.w	r1, r0, #20
 800540c:	f100 0210 	add.w	r2, r0, #16
 8005410:	4618      	mov	r0, r3
 8005412:	4553      	cmp	r3, sl
 8005414:	db33      	blt.n	800547e <__lshift+0xb6>
 8005416:	6920      	ldr	r0, [r4, #16]
 8005418:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800541c:	f104 0314 	add.w	r3, r4, #20
 8005420:	f019 091f 	ands.w	r9, r9, #31
 8005424:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005428:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800542c:	d02b      	beq.n	8005486 <__lshift+0xbe>
 800542e:	f1c9 0e20 	rsb	lr, r9, #32
 8005432:	468a      	mov	sl, r1
 8005434:	2200      	movs	r2, #0
 8005436:	6818      	ldr	r0, [r3, #0]
 8005438:	fa00 f009 	lsl.w	r0, r0, r9
 800543c:	4302      	orrs	r2, r0
 800543e:	f84a 2b04 	str.w	r2, [sl], #4
 8005442:	f853 2b04 	ldr.w	r2, [r3], #4
 8005446:	459c      	cmp	ip, r3
 8005448:	fa22 f20e 	lsr.w	r2, r2, lr
 800544c:	d8f3      	bhi.n	8005436 <__lshift+0x6e>
 800544e:	ebac 0304 	sub.w	r3, ip, r4
 8005452:	3b15      	subs	r3, #21
 8005454:	f023 0303 	bic.w	r3, r3, #3
 8005458:	3304      	adds	r3, #4
 800545a:	f104 0015 	add.w	r0, r4, #21
 800545e:	4584      	cmp	ip, r0
 8005460:	bf38      	it	cc
 8005462:	2304      	movcc	r3, #4
 8005464:	50ca      	str	r2, [r1, r3]
 8005466:	b10a      	cbz	r2, 800546c <__lshift+0xa4>
 8005468:	f108 0602 	add.w	r6, r8, #2
 800546c:	3e01      	subs	r6, #1
 800546e:	4638      	mov	r0, r7
 8005470:	612e      	str	r6, [r5, #16]
 8005472:	4621      	mov	r1, r4
 8005474:	f7ff fdd6 	bl	8005024 <_Bfree>
 8005478:	4628      	mov	r0, r5
 800547a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800547e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005482:	3301      	adds	r3, #1
 8005484:	e7c5      	b.n	8005412 <__lshift+0x4a>
 8005486:	3904      	subs	r1, #4
 8005488:	f853 2b04 	ldr.w	r2, [r3], #4
 800548c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005490:	459c      	cmp	ip, r3
 8005492:	d8f9      	bhi.n	8005488 <__lshift+0xc0>
 8005494:	e7ea      	b.n	800546c <__lshift+0xa4>
 8005496:	bf00      	nop
 8005498:	0800773b 	.word	0x0800773b
 800549c:	0800774c 	.word	0x0800774c

080054a0 <__mcmp>:
 80054a0:	b530      	push	{r4, r5, lr}
 80054a2:	6902      	ldr	r2, [r0, #16]
 80054a4:	690c      	ldr	r4, [r1, #16]
 80054a6:	1b12      	subs	r2, r2, r4
 80054a8:	d10e      	bne.n	80054c8 <__mcmp+0x28>
 80054aa:	f100 0314 	add.w	r3, r0, #20
 80054ae:	3114      	adds	r1, #20
 80054b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80054b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80054b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80054bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80054c0:	42a5      	cmp	r5, r4
 80054c2:	d003      	beq.n	80054cc <__mcmp+0x2c>
 80054c4:	d305      	bcc.n	80054d2 <__mcmp+0x32>
 80054c6:	2201      	movs	r2, #1
 80054c8:	4610      	mov	r0, r2
 80054ca:	bd30      	pop	{r4, r5, pc}
 80054cc:	4283      	cmp	r3, r0
 80054ce:	d3f3      	bcc.n	80054b8 <__mcmp+0x18>
 80054d0:	e7fa      	b.n	80054c8 <__mcmp+0x28>
 80054d2:	f04f 32ff 	mov.w	r2, #4294967295
 80054d6:	e7f7      	b.n	80054c8 <__mcmp+0x28>

080054d8 <__mdiff>:
 80054d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054dc:	460c      	mov	r4, r1
 80054de:	4606      	mov	r6, r0
 80054e0:	4611      	mov	r1, r2
 80054e2:	4620      	mov	r0, r4
 80054e4:	4617      	mov	r7, r2
 80054e6:	f7ff ffdb 	bl	80054a0 <__mcmp>
 80054ea:	1e05      	subs	r5, r0, #0
 80054ec:	d110      	bne.n	8005510 <__mdiff+0x38>
 80054ee:	4629      	mov	r1, r5
 80054f0:	4630      	mov	r0, r6
 80054f2:	f7ff fd57 	bl	8004fa4 <_Balloc>
 80054f6:	b930      	cbnz	r0, 8005506 <__mdiff+0x2e>
 80054f8:	4b39      	ldr	r3, [pc, #228]	; (80055e0 <__mdiff+0x108>)
 80054fa:	4602      	mov	r2, r0
 80054fc:	f240 2132 	movw	r1, #562	; 0x232
 8005500:	4838      	ldr	r0, [pc, #224]	; (80055e4 <__mdiff+0x10c>)
 8005502:	f000 faf3 	bl	8005aec <__assert_func>
 8005506:	2301      	movs	r3, #1
 8005508:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800550c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005510:	bfa4      	itt	ge
 8005512:	463b      	movge	r3, r7
 8005514:	4627      	movge	r7, r4
 8005516:	4630      	mov	r0, r6
 8005518:	6879      	ldr	r1, [r7, #4]
 800551a:	bfa6      	itte	ge
 800551c:	461c      	movge	r4, r3
 800551e:	2500      	movge	r5, #0
 8005520:	2501      	movlt	r5, #1
 8005522:	f7ff fd3f 	bl	8004fa4 <_Balloc>
 8005526:	b920      	cbnz	r0, 8005532 <__mdiff+0x5a>
 8005528:	4b2d      	ldr	r3, [pc, #180]	; (80055e0 <__mdiff+0x108>)
 800552a:	4602      	mov	r2, r0
 800552c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005530:	e7e6      	b.n	8005500 <__mdiff+0x28>
 8005532:	693e      	ldr	r6, [r7, #16]
 8005534:	60c5      	str	r5, [r0, #12]
 8005536:	6925      	ldr	r5, [r4, #16]
 8005538:	f107 0114 	add.w	r1, r7, #20
 800553c:	f104 0914 	add.w	r9, r4, #20
 8005540:	f100 0e14 	add.w	lr, r0, #20
 8005544:	f107 0210 	add.w	r2, r7, #16
 8005548:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800554c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005550:	46f2      	mov	sl, lr
 8005552:	2700      	movs	r7, #0
 8005554:	f859 3b04 	ldr.w	r3, [r9], #4
 8005558:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800555c:	fa1f f883 	uxth.w	r8, r3
 8005560:	fa17 f78b 	uxtah	r7, r7, fp
 8005564:	0c1b      	lsrs	r3, r3, #16
 8005566:	eba7 0808 	sub.w	r8, r7, r8
 800556a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800556e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005572:	fa1f f888 	uxth.w	r8, r8
 8005576:	141f      	asrs	r7, r3, #16
 8005578:	454d      	cmp	r5, r9
 800557a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800557e:	f84a 3b04 	str.w	r3, [sl], #4
 8005582:	d8e7      	bhi.n	8005554 <__mdiff+0x7c>
 8005584:	1b2b      	subs	r3, r5, r4
 8005586:	3b15      	subs	r3, #21
 8005588:	f023 0303 	bic.w	r3, r3, #3
 800558c:	3304      	adds	r3, #4
 800558e:	3415      	adds	r4, #21
 8005590:	42a5      	cmp	r5, r4
 8005592:	bf38      	it	cc
 8005594:	2304      	movcc	r3, #4
 8005596:	4419      	add	r1, r3
 8005598:	4473      	add	r3, lr
 800559a:	469e      	mov	lr, r3
 800559c:	460d      	mov	r5, r1
 800559e:	4565      	cmp	r5, ip
 80055a0:	d30e      	bcc.n	80055c0 <__mdiff+0xe8>
 80055a2:	f10c 0203 	add.w	r2, ip, #3
 80055a6:	1a52      	subs	r2, r2, r1
 80055a8:	f022 0203 	bic.w	r2, r2, #3
 80055ac:	3903      	subs	r1, #3
 80055ae:	458c      	cmp	ip, r1
 80055b0:	bf38      	it	cc
 80055b2:	2200      	movcc	r2, #0
 80055b4:	441a      	add	r2, r3
 80055b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80055ba:	b17b      	cbz	r3, 80055dc <__mdiff+0x104>
 80055bc:	6106      	str	r6, [r0, #16]
 80055be:	e7a5      	b.n	800550c <__mdiff+0x34>
 80055c0:	f855 8b04 	ldr.w	r8, [r5], #4
 80055c4:	fa17 f488 	uxtah	r4, r7, r8
 80055c8:	1422      	asrs	r2, r4, #16
 80055ca:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80055ce:	b2a4      	uxth	r4, r4
 80055d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80055d4:	f84e 4b04 	str.w	r4, [lr], #4
 80055d8:	1417      	asrs	r7, r2, #16
 80055da:	e7e0      	b.n	800559e <__mdiff+0xc6>
 80055dc:	3e01      	subs	r6, #1
 80055de:	e7ea      	b.n	80055b6 <__mdiff+0xde>
 80055e0:	0800773b 	.word	0x0800773b
 80055e4:	0800774c 	.word	0x0800774c

080055e8 <__d2b>:
 80055e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80055ec:	4689      	mov	r9, r1
 80055ee:	2101      	movs	r1, #1
 80055f0:	ec57 6b10 	vmov	r6, r7, d0
 80055f4:	4690      	mov	r8, r2
 80055f6:	f7ff fcd5 	bl	8004fa4 <_Balloc>
 80055fa:	4604      	mov	r4, r0
 80055fc:	b930      	cbnz	r0, 800560c <__d2b+0x24>
 80055fe:	4602      	mov	r2, r0
 8005600:	4b25      	ldr	r3, [pc, #148]	; (8005698 <__d2b+0xb0>)
 8005602:	4826      	ldr	r0, [pc, #152]	; (800569c <__d2b+0xb4>)
 8005604:	f240 310a 	movw	r1, #778	; 0x30a
 8005608:	f000 fa70 	bl	8005aec <__assert_func>
 800560c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005610:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005614:	bb35      	cbnz	r5, 8005664 <__d2b+0x7c>
 8005616:	2e00      	cmp	r6, #0
 8005618:	9301      	str	r3, [sp, #4]
 800561a:	d028      	beq.n	800566e <__d2b+0x86>
 800561c:	4668      	mov	r0, sp
 800561e:	9600      	str	r6, [sp, #0]
 8005620:	f7ff fd8c 	bl	800513c <__lo0bits>
 8005624:	9900      	ldr	r1, [sp, #0]
 8005626:	b300      	cbz	r0, 800566a <__d2b+0x82>
 8005628:	9a01      	ldr	r2, [sp, #4]
 800562a:	f1c0 0320 	rsb	r3, r0, #32
 800562e:	fa02 f303 	lsl.w	r3, r2, r3
 8005632:	430b      	orrs	r3, r1
 8005634:	40c2      	lsrs	r2, r0
 8005636:	6163      	str	r3, [r4, #20]
 8005638:	9201      	str	r2, [sp, #4]
 800563a:	9b01      	ldr	r3, [sp, #4]
 800563c:	61a3      	str	r3, [r4, #24]
 800563e:	2b00      	cmp	r3, #0
 8005640:	bf14      	ite	ne
 8005642:	2202      	movne	r2, #2
 8005644:	2201      	moveq	r2, #1
 8005646:	6122      	str	r2, [r4, #16]
 8005648:	b1d5      	cbz	r5, 8005680 <__d2b+0x98>
 800564a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800564e:	4405      	add	r5, r0
 8005650:	f8c9 5000 	str.w	r5, [r9]
 8005654:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005658:	f8c8 0000 	str.w	r0, [r8]
 800565c:	4620      	mov	r0, r4
 800565e:	b003      	add	sp, #12
 8005660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005668:	e7d5      	b.n	8005616 <__d2b+0x2e>
 800566a:	6161      	str	r1, [r4, #20]
 800566c:	e7e5      	b.n	800563a <__d2b+0x52>
 800566e:	a801      	add	r0, sp, #4
 8005670:	f7ff fd64 	bl	800513c <__lo0bits>
 8005674:	9b01      	ldr	r3, [sp, #4]
 8005676:	6163      	str	r3, [r4, #20]
 8005678:	2201      	movs	r2, #1
 800567a:	6122      	str	r2, [r4, #16]
 800567c:	3020      	adds	r0, #32
 800567e:	e7e3      	b.n	8005648 <__d2b+0x60>
 8005680:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005684:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005688:	f8c9 0000 	str.w	r0, [r9]
 800568c:	6918      	ldr	r0, [r3, #16]
 800568e:	f7ff fd35 	bl	80050fc <__hi0bits>
 8005692:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005696:	e7df      	b.n	8005658 <__d2b+0x70>
 8005698:	0800773b 	.word	0x0800773b
 800569c:	0800774c 	.word	0x0800774c

080056a0 <_calloc_r>:
 80056a0:	b513      	push	{r0, r1, r4, lr}
 80056a2:	434a      	muls	r2, r1
 80056a4:	4611      	mov	r1, r2
 80056a6:	9201      	str	r2, [sp, #4]
 80056a8:	f000 f85a 	bl	8005760 <_malloc_r>
 80056ac:	4604      	mov	r4, r0
 80056ae:	b118      	cbz	r0, 80056b8 <_calloc_r+0x18>
 80056b0:	9a01      	ldr	r2, [sp, #4]
 80056b2:	2100      	movs	r1, #0
 80056b4:	f7fe f94a 	bl	800394c <memset>
 80056b8:	4620      	mov	r0, r4
 80056ba:	b002      	add	sp, #8
 80056bc:	bd10      	pop	{r4, pc}
	...

080056c0 <_free_r>:
 80056c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056c2:	2900      	cmp	r1, #0
 80056c4:	d048      	beq.n	8005758 <_free_r+0x98>
 80056c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056ca:	9001      	str	r0, [sp, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f1a1 0404 	sub.w	r4, r1, #4
 80056d2:	bfb8      	it	lt
 80056d4:	18e4      	addlt	r4, r4, r3
 80056d6:	f000 fa65 	bl	8005ba4 <__malloc_lock>
 80056da:	4a20      	ldr	r2, [pc, #128]	; (800575c <_free_r+0x9c>)
 80056dc:	9801      	ldr	r0, [sp, #4]
 80056de:	6813      	ldr	r3, [r2, #0]
 80056e0:	4615      	mov	r5, r2
 80056e2:	b933      	cbnz	r3, 80056f2 <_free_r+0x32>
 80056e4:	6063      	str	r3, [r4, #4]
 80056e6:	6014      	str	r4, [r2, #0]
 80056e8:	b003      	add	sp, #12
 80056ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056ee:	f000 ba5f 	b.w	8005bb0 <__malloc_unlock>
 80056f2:	42a3      	cmp	r3, r4
 80056f4:	d90b      	bls.n	800570e <_free_r+0x4e>
 80056f6:	6821      	ldr	r1, [r4, #0]
 80056f8:	1862      	adds	r2, r4, r1
 80056fa:	4293      	cmp	r3, r2
 80056fc:	bf04      	itt	eq
 80056fe:	681a      	ldreq	r2, [r3, #0]
 8005700:	685b      	ldreq	r3, [r3, #4]
 8005702:	6063      	str	r3, [r4, #4]
 8005704:	bf04      	itt	eq
 8005706:	1852      	addeq	r2, r2, r1
 8005708:	6022      	streq	r2, [r4, #0]
 800570a:	602c      	str	r4, [r5, #0]
 800570c:	e7ec      	b.n	80056e8 <_free_r+0x28>
 800570e:	461a      	mov	r2, r3
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	b10b      	cbz	r3, 8005718 <_free_r+0x58>
 8005714:	42a3      	cmp	r3, r4
 8005716:	d9fa      	bls.n	800570e <_free_r+0x4e>
 8005718:	6811      	ldr	r1, [r2, #0]
 800571a:	1855      	adds	r5, r2, r1
 800571c:	42a5      	cmp	r5, r4
 800571e:	d10b      	bne.n	8005738 <_free_r+0x78>
 8005720:	6824      	ldr	r4, [r4, #0]
 8005722:	4421      	add	r1, r4
 8005724:	1854      	adds	r4, r2, r1
 8005726:	42a3      	cmp	r3, r4
 8005728:	6011      	str	r1, [r2, #0]
 800572a:	d1dd      	bne.n	80056e8 <_free_r+0x28>
 800572c:	681c      	ldr	r4, [r3, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	6053      	str	r3, [r2, #4]
 8005732:	4421      	add	r1, r4
 8005734:	6011      	str	r1, [r2, #0]
 8005736:	e7d7      	b.n	80056e8 <_free_r+0x28>
 8005738:	d902      	bls.n	8005740 <_free_r+0x80>
 800573a:	230c      	movs	r3, #12
 800573c:	6003      	str	r3, [r0, #0]
 800573e:	e7d3      	b.n	80056e8 <_free_r+0x28>
 8005740:	6825      	ldr	r5, [r4, #0]
 8005742:	1961      	adds	r1, r4, r5
 8005744:	428b      	cmp	r3, r1
 8005746:	bf04      	itt	eq
 8005748:	6819      	ldreq	r1, [r3, #0]
 800574a:	685b      	ldreq	r3, [r3, #4]
 800574c:	6063      	str	r3, [r4, #4]
 800574e:	bf04      	itt	eq
 8005750:	1949      	addeq	r1, r1, r5
 8005752:	6021      	streq	r1, [r4, #0]
 8005754:	6054      	str	r4, [r2, #4]
 8005756:	e7c7      	b.n	80056e8 <_free_r+0x28>
 8005758:	b003      	add	sp, #12
 800575a:	bd30      	pop	{r4, r5, pc}
 800575c:	20000200 	.word	0x20000200

08005760 <_malloc_r>:
 8005760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005762:	1ccd      	adds	r5, r1, #3
 8005764:	f025 0503 	bic.w	r5, r5, #3
 8005768:	3508      	adds	r5, #8
 800576a:	2d0c      	cmp	r5, #12
 800576c:	bf38      	it	cc
 800576e:	250c      	movcc	r5, #12
 8005770:	2d00      	cmp	r5, #0
 8005772:	4606      	mov	r6, r0
 8005774:	db01      	blt.n	800577a <_malloc_r+0x1a>
 8005776:	42a9      	cmp	r1, r5
 8005778:	d903      	bls.n	8005782 <_malloc_r+0x22>
 800577a:	230c      	movs	r3, #12
 800577c:	6033      	str	r3, [r6, #0]
 800577e:	2000      	movs	r0, #0
 8005780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005782:	f000 fa0f 	bl	8005ba4 <__malloc_lock>
 8005786:	4921      	ldr	r1, [pc, #132]	; (800580c <_malloc_r+0xac>)
 8005788:	680a      	ldr	r2, [r1, #0]
 800578a:	4614      	mov	r4, r2
 800578c:	b99c      	cbnz	r4, 80057b6 <_malloc_r+0x56>
 800578e:	4f20      	ldr	r7, [pc, #128]	; (8005810 <_malloc_r+0xb0>)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	b923      	cbnz	r3, 800579e <_malloc_r+0x3e>
 8005794:	4621      	mov	r1, r4
 8005796:	4630      	mov	r0, r6
 8005798:	f000 f998 	bl	8005acc <_sbrk_r>
 800579c:	6038      	str	r0, [r7, #0]
 800579e:	4629      	mov	r1, r5
 80057a0:	4630      	mov	r0, r6
 80057a2:	f000 f993 	bl	8005acc <_sbrk_r>
 80057a6:	1c43      	adds	r3, r0, #1
 80057a8:	d123      	bne.n	80057f2 <_malloc_r+0x92>
 80057aa:	230c      	movs	r3, #12
 80057ac:	6033      	str	r3, [r6, #0]
 80057ae:	4630      	mov	r0, r6
 80057b0:	f000 f9fe 	bl	8005bb0 <__malloc_unlock>
 80057b4:	e7e3      	b.n	800577e <_malloc_r+0x1e>
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	1b5b      	subs	r3, r3, r5
 80057ba:	d417      	bmi.n	80057ec <_malloc_r+0x8c>
 80057bc:	2b0b      	cmp	r3, #11
 80057be:	d903      	bls.n	80057c8 <_malloc_r+0x68>
 80057c0:	6023      	str	r3, [r4, #0]
 80057c2:	441c      	add	r4, r3
 80057c4:	6025      	str	r5, [r4, #0]
 80057c6:	e004      	b.n	80057d2 <_malloc_r+0x72>
 80057c8:	6863      	ldr	r3, [r4, #4]
 80057ca:	42a2      	cmp	r2, r4
 80057cc:	bf0c      	ite	eq
 80057ce:	600b      	streq	r3, [r1, #0]
 80057d0:	6053      	strne	r3, [r2, #4]
 80057d2:	4630      	mov	r0, r6
 80057d4:	f000 f9ec 	bl	8005bb0 <__malloc_unlock>
 80057d8:	f104 000b 	add.w	r0, r4, #11
 80057dc:	1d23      	adds	r3, r4, #4
 80057de:	f020 0007 	bic.w	r0, r0, #7
 80057e2:	1ac2      	subs	r2, r0, r3
 80057e4:	d0cc      	beq.n	8005780 <_malloc_r+0x20>
 80057e6:	1a1b      	subs	r3, r3, r0
 80057e8:	50a3      	str	r3, [r4, r2]
 80057ea:	e7c9      	b.n	8005780 <_malloc_r+0x20>
 80057ec:	4622      	mov	r2, r4
 80057ee:	6864      	ldr	r4, [r4, #4]
 80057f0:	e7cc      	b.n	800578c <_malloc_r+0x2c>
 80057f2:	1cc4      	adds	r4, r0, #3
 80057f4:	f024 0403 	bic.w	r4, r4, #3
 80057f8:	42a0      	cmp	r0, r4
 80057fa:	d0e3      	beq.n	80057c4 <_malloc_r+0x64>
 80057fc:	1a21      	subs	r1, r4, r0
 80057fe:	4630      	mov	r0, r6
 8005800:	f000 f964 	bl	8005acc <_sbrk_r>
 8005804:	3001      	adds	r0, #1
 8005806:	d1dd      	bne.n	80057c4 <_malloc_r+0x64>
 8005808:	e7cf      	b.n	80057aa <_malloc_r+0x4a>
 800580a:	bf00      	nop
 800580c:	20000200 	.word	0x20000200
 8005810:	20000204 	.word	0x20000204

08005814 <__ssputs_r>:
 8005814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005818:	688e      	ldr	r6, [r1, #8]
 800581a:	429e      	cmp	r6, r3
 800581c:	4682      	mov	sl, r0
 800581e:	460c      	mov	r4, r1
 8005820:	4690      	mov	r8, r2
 8005822:	461f      	mov	r7, r3
 8005824:	d838      	bhi.n	8005898 <__ssputs_r+0x84>
 8005826:	898a      	ldrh	r2, [r1, #12]
 8005828:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800582c:	d032      	beq.n	8005894 <__ssputs_r+0x80>
 800582e:	6825      	ldr	r5, [r4, #0]
 8005830:	6909      	ldr	r1, [r1, #16]
 8005832:	eba5 0901 	sub.w	r9, r5, r1
 8005836:	6965      	ldr	r5, [r4, #20]
 8005838:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800583c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005840:	3301      	adds	r3, #1
 8005842:	444b      	add	r3, r9
 8005844:	106d      	asrs	r5, r5, #1
 8005846:	429d      	cmp	r5, r3
 8005848:	bf38      	it	cc
 800584a:	461d      	movcc	r5, r3
 800584c:	0553      	lsls	r3, r2, #21
 800584e:	d531      	bpl.n	80058b4 <__ssputs_r+0xa0>
 8005850:	4629      	mov	r1, r5
 8005852:	f7ff ff85 	bl	8005760 <_malloc_r>
 8005856:	4606      	mov	r6, r0
 8005858:	b950      	cbnz	r0, 8005870 <__ssputs_r+0x5c>
 800585a:	230c      	movs	r3, #12
 800585c:	f8ca 3000 	str.w	r3, [sl]
 8005860:	89a3      	ldrh	r3, [r4, #12]
 8005862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005866:	81a3      	strh	r3, [r4, #12]
 8005868:	f04f 30ff 	mov.w	r0, #4294967295
 800586c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005870:	6921      	ldr	r1, [r4, #16]
 8005872:	464a      	mov	r2, r9
 8005874:	f7ff fb88 	bl	8004f88 <memcpy>
 8005878:	89a3      	ldrh	r3, [r4, #12]
 800587a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800587e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005882:	81a3      	strh	r3, [r4, #12]
 8005884:	6126      	str	r6, [r4, #16]
 8005886:	6165      	str	r5, [r4, #20]
 8005888:	444e      	add	r6, r9
 800588a:	eba5 0509 	sub.w	r5, r5, r9
 800588e:	6026      	str	r6, [r4, #0]
 8005890:	60a5      	str	r5, [r4, #8]
 8005892:	463e      	mov	r6, r7
 8005894:	42be      	cmp	r6, r7
 8005896:	d900      	bls.n	800589a <__ssputs_r+0x86>
 8005898:	463e      	mov	r6, r7
 800589a:	4632      	mov	r2, r6
 800589c:	6820      	ldr	r0, [r4, #0]
 800589e:	4641      	mov	r1, r8
 80058a0:	f000 f966 	bl	8005b70 <memmove>
 80058a4:	68a3      	ldr	r3, [r4, #8]
 80058a6:	6822      	ldr	r2, [r4, #0]
 80058a8:	1b9b      	subs	r3, r3, r6
 80058aa:	4432      	add	r2, r6
 80058ac:	60a3      	str	r3, [r4, #8]
 80058ae:	6022      	str	r2, [r4, #0]
 80058b0:	2000      	movs	r0, #0
 80058b2:	e7db      	b.n	800586c <__ssputs_r+0x58>
 80058b4:	462a      	mov	r2, r5
 80058b6:	f000 f981 	bl	8005bbc <_realloc_r>
 80058ba:	4606      	mov	r6, r0
 80058bc:	2800      	cmp	r0, #0
 80058be:	d1e1      	bne.n	8005884 <__ssputs_r+0x70>
 80058c0:	6921      	ldr	r1, [r4, #16]
 80058c2:	4650      	mov	r0, sl
 80058c4:	f7ff fefc 	bl	80056c0 <_free_r>
 80058c8:	e7c7      	b.n	800585a <__ssputs_r+0x46>
	...

080058cc <_svfiprintf_r>:
 80058cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d0:	4698      	mov	r8, r3
 80058d2:	898b      	ldrh	r3, [r1, #12]
 80058d4:	061b      	lsls	r3, r3, #24
 80058d6:	b09d      	sub	sp, #116	; 0x74
 80058d8:	4607      	mov	r7, r0
 80058da:	460d      	mov	r5, r1
 80058dc:	4614      	mov	r4, r2
 80058de:	d50e      	bpl.n	80058fe <_svfiprintf_r+0x32>
 80058e0:	690b      	ldr	r3, [r1, #16]
 80058e2:	b963      	cbnz	r3, 80058fe <_svfiprintf_r+0x32>
 80058e4:	2140      	movs	r1, #64	; 0x40
 80058e6:	f7ff ff3b 	bl	8005760 <_malloc_r>
 80058ea:	6028      	str	r0, [r5, #0]
 80058ec:	6128      	str	r0, [r5, #16]
 80058ee:	b920      	cbnz	r0, 80058fa <_svfiprintf_r+0x2e>
 80058f0:	230c      	movs	r3, #12
 80058f2:	603b      	str	r3, [r7, #0]
 80058f4:	f04f 30ff 	mov.w	r0, #4294967295
 80058f8:	e0d1      	b.n	8005a9e <_svfiprintf_r+0x1d2>
 80058fa:	2340      	movs	r3, #64	; 0x40
 80058fc:	616b      	str	r3, [r5, #20]
 80058fe:	2300      	movs	r3, #0
 8005900:	9309      	str	r3, [sp, #36]	; 0x24
 8005902:	2320      	movs	r3, #32
 8005904:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005908:	f8cd 800c 	str.w	r8, [sp, #12]
 800590c:	2330      	movs	r3, #48	; 0x30
 800590e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005ab8 <_svfiprintf_r+0x1ec>
 8005912:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005916:	f04f 0901 	mov.w	r9, #1
 800591a:	4623      	mov	r3, r4
 800591c:	469a      	mov	sl, r3
 800591e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005922:	b10a      	cbz	r2, 8005928 <_svfiprintf_r+0x5c>
 8005924:	2a25      	cmp	r2, #37	; 0x25
 8005926:	d1f9      	bne.n	800591c <_svfiprintf_r+0x50>
 8005928:	ebba 0b04 	subs.w	fp, sl, r4
 800592c:	d00b      	beq.n	8005946 <_svfiprintf_r+0x7a>
 800592e:	465b      	mov	r3, fp
 8005930:	4622      	mov	r2, r4
 8005932:	4629      	mov	r1, r5
 8005934:	4638      	mov	r0, r7
 8005936:	f7ff ff6d 	bl	8005814 <__ssputs_r>
 800593a:	3001      	adds	r0, #1
 800593c:	f000 80aa 	beq.w	8005a94 <_svfiprintf_r+0x1c8>
 8005940:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005942:	445a      	add	r2, fp
 8005944:	9209      	str	r2, [sp, #36]	; 0x24
 8005946:	f89a 3000 	ldrb.w	r3, [sl]
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 80a2 	beq.w	8005a94 <_svfiprintf_r+0x1c8>
 8005950:	2300      	movs	r3, #0
 8005952:	f04f 32ff 	mov.w	r2, #4294967295
 8005956:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800595a:	f10a 0a01 	add.w	sl, sl, #1
 800595e:	9304      	str	r3, [sp, #16]
 8005960:	9307      	str	r3, [sp, #28]
 8005962:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005966:	931a      	str	r3, [sp, #104]	; 0x68
 8005968:	4654      	mov	r4, sl
 800596a:	2205      	movs	r2, #5
 800596c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005970:	4851      	ldr	r0, [pc, #324]	; (8005ab8 <_svfiprintf_r+0x1ec>)
 8005972:	f7fa fc35 	bl	80001e0 <memchr>
 8005976:	9a04      	ldr	r2, [sp, #16]
 8005978:	b9d8      	cbnz	r0, 80059b2 <_svfiprintf_r+0xe6>
 800597a:	06d0      	lsls	r0, r2, #27
 800597c:	bf44      	itt	mi
 800597e:	2320      	movmi	r3, #32
 8005980:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005984:	0711      	lsls	r1, r2, #28
 8005986:	bf44      	itt	mi
 8005988:	232b      	movmi	r3, #43	; 0x2b
 800598a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800598e:	f89a 3000 	ldrb.w	r3, [sl]
 8005992:	2b2a      	cmp	r3, #42	; 0x2a
 8005994:	d015      	beq.n	80059c2 <_svfiprintf_r+0xf6>
 8005996:	9a07      	ldr	r2, [sp, #28]
 8005998:	4654      	mov	r4, sl
 800599a:	2000      	movs	r0, #0
 800599c:	f04f 0c0a 	mov.w	ip, #10
 80059a0:	4621      	mov	r1, r4
 80059a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059a6:	3b30      	subs	r3, #48	; 0x30
 80059a8:	2b09      	cmp	r3, #9
 80059aa:	d94e      	bls.n	8005a4a <_svfiprintf_r+0x17e>
 80059ac:	b1b0      	cbz	r0, 80059dc <_svfiprintf_r+0x110>
 80059ae:	9207      	str	r2, [sp, #28]
 80059b0:	e014      	b.n	80059dc <_svfiprintf_r+0x110>
 80059b2:	eba0 0308 	sub.w	r3, r0, r8
 80059b6:	fa09 f303 	lsl.w	r3, r9, r3
 80059ba:	4313      	orrs	r3, r2
 80059bc:	9304      	str	r3, [sp, #16]
 80059be:	46a2      	mov	sl, r4
 80059c0:	e7d2      	b.n	8005968 <_svfiprintf_r+0x9c>
 80059c2:	9b03      	ldr	r3, [sp, #12]
 80059c4:	1d19      	adds	r1, r3, #4
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	9103      	str	r1, [sp, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	bfbb      	ittet	lt
 80059ce:	425b      	neglt	r3, r3
 80059d0:	f042 0202 	orrlt.w	r2, r2, #2
 80059d4:	9307      	strge	r3, [sp, #28]
 80059d6:	9307      	strlt	r3, [sp, #28]
 80059d8:	bfb8      	it	lt
 80059da:	9204      	strlt	r2, [sp, #16]
 80059dc:	7823      	ldrb	r3, [r4, #0]
 80059de:	2b2e      	cmp	r3, #46	; 0x2e
 80059e0:	d10c      	bne.n	80059fc <_svfiprintf_r+0x130>
 80059e2:	7863      	ldrb	r3, [r4, #1]
 80059e4:	2b2a      	cmp	r3, #42	; 0x2a
 80059e6:	d135      	bne.n	8005a54 <_svfiprintf_r+0x188>
 80059e8:	9b03      	ldr	r3, [sp, #12]
 80059ea:	1d1a      	adds	r2, r3, #4
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	9203      	str	r2, [sp, #12]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	bfb8      	it	lt
 80059f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80059f8:	3402      	adds	r4, #2
 80059fa:	9305      	str	r3, [sp, #20]
 80059fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005ac8 <_svfiprintf_r+0x1fc>
 8005a00:	7821      	ldrb	r1, [r4, #0]
 8005a02:	2203      	movs	r2, #3
 8005a04:	4650      	mov	r0, sl
 8005a06:	f7fa fbeb 	bl	80001e0 <memchr>
 8005a0a:	b140      	cbz	r0, 8005a1e <_svfiprintf_r+0x152>
 8005a0c:	2340      	movs	r3, #64	; 0x40
 8005a0e:	eba0 000a 	sub.w	r0, r0, sl
 8005a12:	fa03 f000 	lsl.w	r0, r3, r0
 8005a16:	9b04      	ldr	r3, [sp, #16]
 8005a18:	4303      	orrs	r3, r0
 8005a1a:	3401      	adds	r4, #1
 8005a1c:	9304      	str	r3, [sp, #16]
 8005a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a22:	4826      	ldr	r0, [pc, #152]	; (8005abc <_svfiprintf_r+0x1f0>)
 8005a24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a28:	2206      	movs	r2, #6
 8005a2a:	f7fa fbd9 	bl	80001e0 <memchr>
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	d038      	beq.n	8005aa4 <_svfiprintf_r+0x1d8>
 8005a32:	4b23      	ldr	r3, [pc, #140]	; (8005ac0 <_svfiprintf_r+0x1f4>)
 8005a34:	bb1b      	cbnz	r3, 8005a7e <_svfiprintf_r+0x1b2>
 8005a36:	9b03      	ldr	r3, [sp, #12]
 8005a38:	3307      	adds	r3, #7
 8005a3a:	f023 0307 	bic.w	r3, r3, #7
 8005a3e:	3308      	adds	r3, #8
 8005a40:	9303      	str	r3, [sp, #12]
 8005a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a44:	4433      	add	r3, r6
 8005a46:	9309      	str	r3, [sp, #36]	; 0x24
 8005a48:	e767      	b.n	800591a <_svfiprintf_r+0x4e>
 8005a4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a4e:	460c      	mov	r4, r1
 8005a50:	2001      	movs	r0, #1
 8005a52:	e7a5      	b.n	80059a0 <_svfiprintf_r+0xd4>
 8005a54:	2300      	movs	r3, #0
 8005a56:	3401      	adds	r4, #1
 8005a58:	9305      	str	r3, [sp, #20]
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	f04f 0c0a 	mov.w	ip, #10
 8005a60:	4620      	mov	r0, r4
 8005a62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a66:	3a30      	subs	r2, #48	; 0x30
 8005a68:	2a09      	cmp	r2, #9
 8005a6a:	d903      	bls.n	8005a74 <_svfiprintf_r+0x1a8>
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d0c5      	beq.n	80059fc <_svfiprintf_r+0x130>
 8005a70:	9105      	str	r1, [sp, #20]
 8005a72:	e7c3      	b.n	80059fc <_svfiprintf_r+0x130>
 8005a74:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a78:	4604      	mov	r4, r0
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e7f0      	b.n	8005a60 <_svfiprintf_r+0x194>
 8005a7e:	ab03      	add	r3, sp, #12
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	462a      	mov	r2, r5
 8005a84:	4b0f      	ldr	r3, [pc, #60]	; (8005ac4 <_svfiprintf_r+0x1f8>)
 8005a86:	a904      	add	r1, sp, #16
 8005a88:	4638      	mov	r0, r7
 8005a8a:	f7fe f807 	bl	8003a9c <_printf_float>
 8005a8e:	1c42      	adds	r2, r0, #1
 8005a90:	4606      	mov	r6, r0
 8005a92:	d1d6      	bne.n	8005a42 <_svfiprintf_r+0x176>
 8005a94:	89ab      	ldrh	r3, [r5, #12]
 8005a96:	065b      	lsls	r3, r3, #25
 8005a98:	f53f af2c 	bmi.w	80058f4 <_svfiprintf_r+0x28>
 8005a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a9e:	b01d      	add	sp, #116	; 0x74
 8005aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa4:	ab03      	add	r3, sp, #12
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	462a      	mov	r2, r5
 8005aaa:	4b06      	ldr	r3, [pc, #24]	; (8005ac4 <_svfiprintf_r+0x1f8>)
 8005aac:	a904      	add	r1, sp, #16
 8005aae:	4638      	mov	r0, r7
 8005ab0:	f7fe fa98 	bl	8003fe4 <_printf_i>
 8005ab4:	e7eb      	b.n	8005a8e <_svfiprintf_r+0x1c2>
 8005ab6:	bf00      	nop
 8005ab8:	080078ac 	.word	0x080078ac
 8005abc:	080078b6 	.word	0x080078b6
 8005ac0:	08003a9d 	.word	0x08003a9d
 8005ac4:	08005815 	.word	0x08005815
 8005ac8:	080078b2 	.word	0x080078b2

08005acc <_sbrk_r>:
 8005acc:	b538      	push	{r3, r4, r5, lr}
 8005ace:	4d06      	ldr	r5, [pc, #24]	; (8005ae8 <_sbrk_r+0x1c>)
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	4608      	mov	r0, r1
 8005ad6:	602b      	str	r3, [r5, #0]
 8005ad8:	f7fc fc96 	bl	8002408 <_sbrk>
 8005adc:	1c43      	adds	r3, r0, #1
 8005ade:	d102      	bne.n	8005ae6 <_sbrk_r+0x1a>
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	b103      	cbz	r3, 8005ae6 <_sbrk_r+0x1a>
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	bd38      	pop	{r3, r4, r5, pc}
 8005ae8:	2000024c 	.word	0x2000024c

08005aec <__assert_func>:
 8005aec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005aee:	4614      	mov	r4, r2
 8005af0:	461a      	mov	r2, r3
 8005af2:	4b09      	ldr	r3, [pc, #36]	; (8005b18 <__assert_func+0x2c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4605      	mov	r5, r0
 8005af8:	68d8      	ldr	r0, [r3, #12]
 8005afa:	b14c      	cbz	r4, 8005b10 <__assert_func+0x24>
 8005afc:	4b07      	ldr	r3, [pc, #28]	; (8005b1c <__assert_func+0x30>)
 8005afe:	9100      	str	r1, [sp, #0]
 8005b00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005b04:	4906      	ldr	r1, [pc, #24]	; (8005b20 <__assert_func+0x34>)
 8005b06:	462b      	mov	r3, r5
 8005b08:	f000 f80e 	bl	8005b28 <fiprintf>
 8005b0c:	f000 faa4 	bl	8006058 <abort>
 8005b10:	4b04      	ldr	r3, [pc, #16]	; (8005b24 <__assert_func+0x38>)
 8005b12:	461c      	mov	r4, r3
 8005b14:	e7f3      	b.n	8005afe <__assert_func+0x12>
 8005b16:	bf00      	nop
 8005b18:	20000008 	.word	0x20000008
 8005b1c:	080078bd 	.word	0x080078bd
 8005b20:	080078ca 	.word	0x080078ca
 8005b24:	080078f8 	.word	0x080078f8

08005b28 <fiprintf>:
 8005b28:	b40e      	push	{r1, r2, r3}
 8005b2a:	b503      	push	{r0, r1, lr}
 8005b2c:	4601      	mov	r1, r0
 8005b2e:	ab03      	add	r3, sp, #12
 8005b30:	4805      	ldr	r0, [pc, #20]	; (8005b48 <fiprintf+0x20>)
 8005b32:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b36:	6800      	ldr	r0, [r0, #0]
 8005b38:	9301      	str	r3, [sp, #4]
 8005b3a:	f000 f88f 	bl	8005c5c <_vfiprintf_r>
 8005b3e:	b002      	add	sp, #8
 8005b40:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b44:	b003      	add	sp, #12
 8005b46:	4770      	bx	lr
 8005b48:	20000008 	.word	0x20000008

08005b4c <__ascii_mbtowc>:
 8005b4c:	b082      	sub	sp, #8
 8005b4e:	b901      	cbnz	r1, 8005b52 <__ascii_mbtowc+0x6>
 8005b50:	a901      	add	r1, sp, #4
 8005b52:	b142      	cbz	r2, 8005b66 <__ascii_mbtowc+0x1a>
 8005b54:	b14b      	cbz	r3, 8005b6a <__ascii_mbtowc+0x1e>
 8005b56:	7813      	ldrb	r3, [r2, #0]
 8005b58:	600b      	str	r3, [r1, #0]
 8005b5a:	7812      	ldrb	r2, [r2, #0]
 8005b5c:	1e10      	subs	r0, r2, #0
 8005b5e:	bf18      	it	ne
 8005b60:	2001      	movne	r0, #1
 8005b62:	b002      	add	sp, #8
 8005b64:	4770      	bx	lr
 8005b66:	4610      	mov	r0, r2
 8005b68:	e7fb      	b.n	8005b62 <__ascii_mbtowc+0x16>
 8005b6a:	f06f 0001 	mvn.w	r0, #1
 8005b6e:	e7f8      	b.n	8005b62 <__ascii_mbtowc+0x16>

08005b70 <memmove>:
 8005b70:	4288      	cmp	r0, r1
 8005b72:	b510      	push	{r4, lr}
 8005b74:	eb01 0402 	add.w	r4, r1, r2
 8005b78:	d902      	bls.n	8005b80 <memmove+0x10>
 8005b7a:	4284      	cmp	r4, r0
 8005b7c:	4623      	mov	r3, r4
 8005b7e:	d807      	bhi.n	8005b90 <memmove+0x20>
 8005b80:	1e43      	subs	r3, r0, #1
 8005b82:	42a1      	cmp	r1, r4
 8005b84:	d008      	beq.n	8005b98 <memmove+0x28>
 8005b86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b8e:	e7f8      	b.n	8005b82 <memmove+0x12>
 8005b90:	4402      	add	r2, r0
 8005b92:	4601      	mov	r1, r0
 8005b94:	428a      	cmp	r2, r1
 8005b96:	d100      	bne.n	8005b9a <memmove+0x2a>
 8005b98:	bd10      	pop	{r4, pc}
 8005b9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ba2:	e7f7      	b.n	8005b94 <memmove+0x24>

08005ba4 <__malloc_lock>:
 8005ba4:	4801      	ldr	r0, [pc, #4]	; (8005bac <__malloc_lock+0x8>)
 8005ba6:	f000 bc17 	b.w	80063d8 <__retarget_lock_acquire_recursive>
 8005baa:	bf00      	nop
 8005bac:	20000254 	.word	0x20000254

08005bb0 <__malloc_unlock>:
 8005bb0:	4801      	ldr	r0, [pc, #4]	; (8005bb8 <__malloc_unlock+0x8>)
 8005bb2:	f000 bc12 	b.w	80063da <__retarget_lock_release_recursive>
 8005bb6:	bf00      	nop
 8005bb8:	20000254 	.word	0x20000254

08005bbc <_realloc_r>:
 8005bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bbe:	4607      	mov	r7, r0
 8005bc0:	4614      	mov	r4, r2
 8005bc2:	460e      	mov	r6, r1
 8005bc4:	b921      	cbnz	r1, 8005bd0 <_realloc_r+0x14>
 8005bc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005bca:	4611      	mov	r1, r2
 8005bcc:	f7ff bdc8 	b.w	8005760 <_malloc_r>
 8005bd0:	b922      	cbnz	r2, 8005bdc <_realloc_r+0x20>
 8005bd2:	f7ff fd75 	bl	80056c0 <_free_r>
 8005bd6:	4625      	mov	r5, r4
 8005bd8:	4628      	mov	r0, r5
 8005bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bdc:	f000 fc62 	bl	80064a4 <_malloc_usable_size_r>
 8005be0:	42a0      	cmp	r0, r4
 8005be2:	d20f      	bcs.n	8005c04 <_realloc_r+0x48>
 8005be4:	4621      	mov	r1, r4
 8005be6:	4638      	mov	r0, r7
 8005be8:	f7ff fdba 	bl	8005760 <_malloc_r>
 8005bec:	4605      	mov	r5, r0
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	d0f2      	beq.n	8005bd8 <_realloc_r+0x1c>
 8005bf2:	4631      	mov	r1, r6
 8005bf4:	4622      	mov	r2, r4
 8005bf6:	f7ff f9c7 	bl	8004f88 <memcpy>
 8005bfa:	4631      	mov	r1, r6
 8005bfc:	4638      	mov	r0, r7
 8005bfe:	f7ff fd5f 	bl	80056c0 <_free_r>
 8005c02:	e7e9      	b.n	8005bd8 <_realloc_r+0x1c>
 8005c04:	4635      	mov	r5, r6
 8005c06:	e7e7      	b.n	8005bd8 <_realloc_r+0x1c>

08005c08 <__sfputc_r>:
 8005c08:	6893      	ldr	r3, [r2, #8]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	b410      	push	{r4}
 8005c10:	6093      	str	r3, [r2, #8]
 8005c12:	da08      	bge.n	8005c26 <__sfputc_r+0x1e>
 8005c14:	6994      	ldr	r4, [r2, #24]
 8005c16:	42a3      	cmp	r3, r4
 8005c18:	db01      	blt.n	8005c1e <__sfputc_r+0x16>
 8005c1a:	290a      	cmp	r1, #10
 8005c1c:	d103      	bne.n	8005c26 <__sfputc_r+0x1e>
 8005c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c22:	f000 b94b 	b.w	8005ebc <__swbuf_r>
 8005c26:	6813      	ldr	r3, [r2, #0]
 8005c28:	1c58      	adds	r0, r3, #1
 8005c2a:	6010      	str	r0, [r2, #0]
 8005c2c:	7019      	strb	r1, [r3, #0]
 8005c2e:	4608      	mov	r0, r1
 8005c30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <__sfputs_r>:
 8005c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c38:	4606      	mov	r6, r0
 8005c3a:	460f      	mov	r7, r1
 8005c3c:	4614      	mov	r4, r2
 8005c3e:	18d5      	adds	r5, r2, r3
 8005c40:	42ac      	cmp	r4, r5
 8005c42:	d101      	bne.n	8005c48 <__sfputs_r+0x12>
 8005c44:	2000      	movs	r0, #0
 8005c46:	e007      	b.n	8005c58 <__sfputs_r+0x22>
 8005c48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c4c:	463a      	mov	r2, r7
 8005c4e:	4630      	mov	r0, r6
 8005c50:	f7ff ffda 	bl	8005c08 <__sfputc_r>
 8005c54:	1c43      	adds	r3, r0, #1
 8005c56:	d1f3      	bne.n	8005c40 <__sfputs_r+0xa>
 8005c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c5c <_vfiprintf_r>:
 8005c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c60:	460d      	mov	r5, r1
 8005c62:	b09d      	sub	sp, #116	; 0x74
 8005c64:	4614      	mov	r4, r2
 8005c66:	4698      	mov	r8, r3
 8005c68:	4606      	mov	r6, r0
 8005c6a:	b118      	cbz	r0, 8005c74 <_vfiprintf_r+0x18>
 8005c6c:	6983      	ldr	r3, [r0, #24]
 8005c6e:	b90b      	cbnz	r3, 8005c74 <_vfiprintf_r+0x18>
 8005c70:	f000 fb14 	bl	800629c <__sinit>
 8005c74:	4b89      	ldr	r3, [pc, #548]	; (8005e9c <_vfiprintf_r+0x240>)
 8005c76:	429d      	cmp	r5, r3
 8005c78:	d11b      	bne.n	8005cb2 <_vfiprintf_r+0x56>
 8005c7a:	6875      	ldr	r5, [r6, #4]
 8005c7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c7e:	07d9      	lsls	r1, r3, #31
 8005c80:	d405      	bmi.n	8005c8e <_vfiprintf_r+0x32>
 8005c82:	89ab      	ldrh	r3, [r5, #12]
 8005c84:	059a      	lsls	r2, r3, #22
 8005c86:	d402      	bmi.n	8005c8e <_vfiprintf_r+0x32>
 8005c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c8a:	f000 fba5 	bl	80063d8 <__retarget_lock_acquire_recursive>
 8005c8e:	89ab      	ldrh	r3, [r5, #12]
 8005c90:	071b      	lsls	r3, r3, #28
 8005c92:	d501      	bpl.n	8005c98 <_vfiprintf_r+0x3c>
 8005c94:	692b      	ldr	r3, [r5, #16]
 8005c96:	b9eb      	cbnz	r3, 8005cd4 <_vfiprintf_r+0x78>
 8005c98:	4629      	mov	r1, r5
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	f000 f96e 	bl	8005f7c <__swsetup_r>
 8005ca0:	b1c0      	cbz	r0, 8005cd4 <_vfiprintf_r+0x78>
 8005ca2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ca4:	07dc      	lsls	r4, r3, #31
 8005ca6:	d50e      	bpl.n	8005cc6 <_vfiprintf_r+0x6a>
 8005ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cac:	b01d      	add	sp, #116	; 0x74
 8005cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb2:	4b7b      	ldr	r3, [pc, #492]	; (8005ea0 <_vfiprintf_r+0x244>)
 8005cb4:	429d      	cmp	r5, r3
 8005cb6:	d101      	bne.n	8005cbc <_vfiprintf_r+0x60>
 8005cb8:	68b5      	ldr	r5, [r6, #8]
 8005cba:	e7df      	b.n	8005c7c <_vfiprintf_r+0x20>
 8005cbc:	4b79      	ldr	r3, [pc, #484]	; (8005ea4 <_vfiprintf_r+0x248>)
 8005cbe:	429d      	cmp	r5, r3
 8005cc0:	bf08      	it	eq
 8005cc2:	68f5      	ldreq	r5, [r6, #12]
 8005cc4:	e7da      	b.n	8005c7c <_vfiprintf_r+0x20>
 8005cc6:	89ab      	ldrh	r3, [r5, #12]
 8005cc8:	0598      	lsls	r0, r3, #22
 8005cca:	d4ed      	bmi.n	8005ca8 <_vfiprintf_r+0x4c>
 8005ccc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cce:	f000 fb84 	bl	80063da <__retarget_lock_release_recursive>
 8005cd2:	e7e9      	b.n	8005ca8 <_vfiprintf_r+0x4c>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8005cd8:	2320      	movs	r3, #32
 8005cda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cde:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ce2:	2330      	movs	r3, #48	; 0x30
 8005ce4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005ea8 <_vfiprintf_r+0x24c>
 8005ce8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cec:	f04f 0901 	mov.w	r9, #1
 8005cf0:	4623      	mov	r3, r4
 8005cf2:	469a      	mov	sl, r3
 8005cf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cf8:	b10a      	cbz	r2, 8005cfe <_vfiprintf_r+0xa2>
 8005cfa:	2a25      	cmp	r2, #37	; 0x25
 8005cfc:	d1f9      	bne.n	8005cf2 <_vfiprintf_r+0x96>
 8005cfe:	ebba 0b04 	subs.w	fp, sl, r4
 8005d02:	d00b      	beq.n	8005d1c <_vfiprintf_r+0xc0>
 8005d04:	465b      	mov	r3, fp
 8005d06:	4622      	mov	r2, r4
 8005d08:	4629      	mov	r1, r5
 8005d0a:	4630      	mov	r0, r6
 8005d0c:	f7ff ff93 	bl	8005c36 <__sfputs_r>
 8005d10:	3001      	adds	r0, #1
 8005d12:	f000 80aa 	beq.w	8005e6a <_vfiprintf_r+0x20e>
 8005d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d18:	445a      	add	r2, fp
 8005d1a:	9209      	str	r2, [sp, #36]	; 0x24
 8005d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 80a2 	beq.w	8005e6a <_vfiprintf_r+0x20e>
 8005d26:	2300      	movs	r3, #0
 8005d28:	f04f 32ff 	mov.w	r2, #4294967295
 8005d2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d30:	f10a 0a01 	add.w	sl, sl, #1
 8005d34:	9304      	str	r3, [sp, #16]
 8005d36:	9307      	str	r3, [sp, #28]
 8005d38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d3c:	931a      	str	r3, [sp, #104]	; 0x68
 8005d3e:	4654      	mov	r4, sl
 8005d40:	2205      	movs	r2, #5
 8005d42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d46:	4858      	ldr	r0, [pc, #352]	; (8005ea8 <_vfiprintf_r+0x24c>)
 8005d48:	f7fa fa4a 	bl	80001e0 <memchr>
 8005d4c:	9a04      	ldr	r2, [sp, #16]
 8005d4e:	b9d8      	cbnz	r0, 8005d88 <_vfiprintf_r+0x12c>
 8005d50:	06d1      	lsls	r1, r2, #27
 8005d52:	bf44      	itt	mi
 8005d54:	2320      	movmi	r3, #32
 8005d56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d5a:	0713      	lsls	r3, r2, #28
 8005d5c:	bf44      	itt	mi
 8005d5e:	232b      	movmi	r3, #43	; 0x2b
 8005d60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d64:	f89a 3000 	ldrb.w	r3, [sl]
 8005d68:	2b2a      	cmp	r3, #42	; 0x2a
 8005d6a:	d015      	beq.n	8005d98 <_vfiprintf_r+0x13c>
 8005d6c:	9a07      	ldr	r2, [sp, #28]
 8005d6e:	4654      	mov	r4, sl
 8005d70:	2000      	movs	r0, #0
 8005d72:	f04f 0c0a 	mov.w	ip, #10
 8005d76:	4621      	mov	r1, r4
 8005d78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d7c:	3b30      	subs	r3, #48	; 0x30
 8005d7e:	2b09      	cmp	r3, #9
 8005d80:	d94e      	bls.n	8005e20 <_vfiprintf_r+0x1c4>
 8005d82:	b1b0      	cbz	r0, 8005db2 <_vfiprintf_r+0x156>
 8005d84:	9207      	str	r2, [sp, #28]
 8005d86:	e014      	b.n	8005db2 <_vfiprintf_r+0x156>
 8005d88:	eba0 0308 	sub.w	r3, r0, r8
 8005d8c:	fa09 f303 	lsl.w	r3, r9, r3
 8005d90:	4313      	orrs	r3, r2
 8005d92:	9304      	str	r3, [sp, #16]
 8005d94:	46a2      	mov	sl, r4
 8005d96:	e7d2      	b.n	8005d3e <_vfiprintf_r+0xe2>
 8005d98:	9b03      	ldr	r3, [sp, #12]
 8005d9a:	1d19      	adds	r1, r3, #4
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	9103      	str	r1, [sp, #12]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	bfbb      	ittet	lt
 8005da4:	425b      	neglt	r3, r3
 8005da6:	f042 0202 	orrlt.w	r2, r2, #2
 8005daa:	9307      	strge	r3, [sp, #28]
 8005dac:	9307      	strlt	r3, [sp, #28]
 8005dae:	bfb8      	it	lt
 8005db0:	9204      	strlt	r2, [sp, #16]
 8005db2:	7823      	ldrb	r3, [r4, #0]
 8005db4:	2b2e      	cmp	r3, #46	; 0x2e
 8005db6:	d10c      	bne.n	8005dd2 <_vfiprintf_r+0x176>
 8005db8:	7863      	ldrb	r3, [r4, #1]
 8005dba:	2b2a      	cmp	r3, #42	; 0x2a
 8005dbc:	d135      	bne.n	8005e2a <_vfiprintf_r+0x1ce>
 8005dbe:	9b03      	ldr	r3, [sp, #12]
 8005dc0:	1d1a      	adds	r2, r3, #4
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	9203      	str	r2, [sp, #12]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	bfb8      	it	lt
 8005dca:	f04f 33ff 	movlt.w	r3, #4294967295
 8005dce:	3402      	adds	r4, #2
 8005dd0:	9305      	str	r3, [sp, #20]
 8005dd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005eb8 <_vfiprintf_r+0x25c>
 8005dd6:	7821      	ldrb	r1, [r4, #0]
 8005dd8:	2203      	movs	r2, #3
 8005dda:	4650      	mov	r0, sl
 8005ddc:	f7fa fa00 	bl	80001e0 <memchr>
 8005de0:	b140      	cbz	r0, 8005df4 <_vfiprintf_r+0x198>
 8005de2:	2340      	movs	r3, #64	; 0x40
 8005de4:	eba0 000a 	sub.w	r0, r0, sl
 8005de8:	fa03 f000 	lsl.w	r0, r3, r0
 8005dec:	9b04      	ldr	r3, [sp, #16]
 8005dee:	4303      	orrs	r3, r0
 8005df0:	3401      	adds	r4, #1
 8005df2:	9304      	str	r3, [sp, #16]
 8005df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005df8:	482c      	ldr	r0, [pc, #176]	; (8005eac <_vfiprintf_r+0x250>)
 8005dfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005dfe:	2206      	movs	r2, #6
 8005e00:	f7fa f9ee 	bl	80001e0 <memchr>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	d03f      	beq.n	8005e88 <_vfiprintf_r+0x22c>
 8005e08:	4b29      	ldr	r3, [pc, #164]	; (8005eb0 <_vfiprintf_r+0x254>)
 8005e0a:	bb1b      	cbnz	r3, 8005e54 <_vfiprintf_r+0x1f8>
 8005e0c:	9b03      	ldr	r3, [sp, #12]
 8005e0e:	3307      	adds	r3, #7
 8005e10:	f023 0307 	bic.w	r3, r3, #7
 8005e14:	3308      	adds	r3, #8
 8005e16:	9303      	str	r3, [sp, #12]
 8005e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e1a:	443b      	add	r3, r7
 8005e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e1e:	e767      	b.n	8005cf0 <_vfiprintf_r+0x94>
 8005e20:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e24:	460c      	mov	r4, r1
 8005e26:	2001      	movs	r0, #1
 8005e28:	e7a5      	b.n	8005d76 <_vfiprintf_r+0x11a>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	3401      	adds	r4, #1
 8005e2e:	9305      	str	r3, [sp, #20]
 8005e30:	4619      	mov	r1, r3
 8005e32:	f04f 0c0a 	mov.w	ip, #10
 8005e36:	4620      	mov	r0, r4
 8005e38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e3c:	3a30      	subs	r2, #48	; 0x30
 8005e3e:	2a09      	cmp	r2, #9
 8005e40:	d903      	bls.n	8005e4a <_vfiprintf_r+0x1ee>
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d0c5      	beq.n	8005dd2 <_vfiprintf_r+0x176>
 8005e46:	9105      	str	r1, [sp, #20]
 8005e48:	e7c3      	b.n	8005dd2 <_vfiprintf_r+0x176>
 8005e4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e4e:	4604      	mov	r4, r0
 8005e50:	2301      	movs	r3, #1
 8005e52:	e7f0      	b.n	8005e36 <_vfiprintf_r+0x1da>
 8005e54:	ab03      	add	r3, sp, #12
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	462a      	mov	r2, r5
 8005e5a:	4b16      	ldr	r3, [pc, #88]	; (8005eb4 <_vfiprintf_r+0x258>)
 8005e5c:	a904      	add	r1, sp, #16
 8005e5e:	4630      	mov	r0, r6
 8005e60:	f7fd fe1c 	bl	8003a9c <_printf_float>
 8005e64:	4607      	mov	r7, r0
 8005e66:	1c78      	adds	r0, r7, #1
 8005e68:	d1d6      	bne.n	8005e18 <_vfiprintf_r+0x1bc>
 8005e6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e6c:	07d9      	lsls	r1, r3, #31
 8005e6e:	d405      	bmi.n	8005e7c <_vfiprintf_r+0x220>
 8005e70:	89ab      	ldrh	r3, [r5, #12]
 8005e72:	059a      	lsls	r2, r3, #22
 8005e74:	d402      	bmi.n	8005e7c <_vfiprintf_r+0x220>
 8005e76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e78:	f000 faaf 	bl	80063da <__retarget_lock_release_recursive>
 8005e7c:	89ab      	ldrh	r3, [r5, #12]
 8005e7e:	065b      	lsls	r3, r3, #25
 8005e80:	f53f af12 	bmi.w	8005ca8 <_vfiprintf_r+0x4c>
 8005e84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e86:	e711      	b.n	8005cac <_vfiprintf_r+0x50>
 8005e88:	ab03      	add	r3, sp, #12
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	462a      	mov	r2, r5
 8005e8e:	4b09      	ldr	r3, [pc, #36]	; (8005eb4 <_vfiprintf_r+0x258>)
 8005e90:	a904      	add	r1, sp, #16
 8005e92:	4630      	mov	r0, r6
 8005e94:	f7fe f8a6 	bl	8003fe4 <_printf_i>
 8005e98:	e7e4      	b.n	8005e64 <_vfiprintf_r+0x208>
 8005e9a:	bf00      	nop
 8005e9c:	08007a24 	.word	0x08007a24
 8005ea0:	08007a44 	.word	0x08007a44
 8005ea4:	08007a04 	.word	0x08007a04
 8005ea8:	080078ac 	.word	0x080078ac
 8005eac:	080078b6 	.word	0x080078b6
 8005eb0:	08003a9d 	.word	0x08003a9d
 8005eb4:	08005c37 	.word	0x08005c37
 8005eb8:	080078b2 	.word	0x080078b2

08005ebc <__swbuf_r>:
 8005ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ebe:	460e      	mov	r6, r1
 8005ec0:	4614      	mov	r4, r2
 8005ec2:	4605      	mov	r5, r0
 8005ec4:	b118      	cbz	r0, 8005ece <__swbuf_r+0x12>
 8005ec6:	6983      	ldr	r3, [r0, #24]
 8005ec8:	b90b      	cbnz	r3, 8005ece <__swbuf_r+0x12>
 8005eca:	f000 f9e7 	bl	800629c <__sinit>
 8005ece:	4b21      	ldr	r3, [pc, #132]	; (8005f54 <__swbuf_r+0x98>)
 8005ed0:	429c      	cmp	r4, r3
 8005ed2:	d12b      	bne.n	8005f2c <__swbuf_r+0x70>
 8005ed4:	686c      	ldr	r4, [r5, #4]
 8005ed6:	69a3      	ldr	r3, [r4, #24]
 8005ed8:	60a3      	str	r3, [r4, #8]
 8005eda:	89a3      	ldrh	r3, [r4, #12]
 8005edc:	071a      	lsls	r2, r3, #28
 8005ede:	d52f      	bpl.n	8005f40 <__swbuf_r+0x84>
 8005ee0:	6923      	ldr	r3, [r4, #16]
 8005ee2:	b36b      	cbz	r3, 8005f40 <__swbuf_r+0x84>
 8005ee4:	6923      	ldr	r3, [r4, #16]
 8005ee6:	6820      	ldr	r0, [r4, #0]
 8005ee8:	1ac0      	subs	r0, r0, r3
 8005eea:	6963      	ldr	r3, [r4, #20]
 8005eec:	b2f6      	uxtb	r6, r6
 8005eee:	4283      	cmp	r3, r0
 8005ef0:	4637      	mov	r7, r6
 8005ef2:	dc04      	bgt.n	8005efe <__swbuf_r+0x42>
 8005ef4:	4621      	mov	r1, r4
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	f000 f93c 	bl	8006174 <_fflush_r>
 8005efc:	bb30      	cbnz	r0, 8005f4c <__swbuf_r+0x90>
 8005efe:	68a3      	ldr	r3, [r4, #8]
 8005f00:	3b01      	subs	r3, #1
 8005f02:	60a3      	str	r3, [r4, #8]
 8005f04:	6823      	ldr	r3, [r4, #0]
 8005f06:	1c5a      	adds	r2, r3, #1
 8005f08:	6022      	str	r2, [r4, #0]
 8005f0a:	701e      	strb	r6, [r3, #0]
 8005f0c:	6963      	ldr	r3, [r4, #20]
 8005f0e:	3001      	adds	r0, #1
 8005f10:	4283      	cmp	r3, r0
 8005f12:	d004      	beq.n	8005f1e <__swbuf_r+0x62>
 8005f14:	89a3      	ldrh	r3, [r4, #12]
 8005f16:	07db      	lsls	r3, r3, #31
 8005f18:	d506      	bpl.n	8005f28 <__swbuf_r+0x6c>
 8005f1a:	2e0a      	cmp	r6, #10
 8005f1c:	d104      	bne.n	8005f28 <__swbuf_r+0x6c>
 8005f1e:	4621      	mov	r1, r4
 8005f20:	4628      	mov	r0, r5
 8005f22:	f000 f927 	bl	8006174 <_fflush_r>
 8005f26:	b988      	cbnz	r0, 8005f4c <__swbuf_r+0x90>
 8005f28:	4638      	mov	r0, r7
 8005f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f2c:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <__swbuf_r+0x9c>)
 8005f2e:	429c      	cmp	r4, r3
 8005f30:	d101      	bne.n	8005f36 <__swbuf_r+0x7a>
 8005f32:	68ac      	ldr	r4, [r5, #8]
 8005f34:	e7cf      	b.n	8005ed6 <__swbuf_r+0x1a>
 8005f36:	4b09      	ldr	r3, [pc, #36]	; (8005f5c <__swbuf_r+0xa0>)
 8005f38:	429c      	cmp	r4, r3
 8005f3a:	bf08      	it	eq
 8005f3c:	68ec      	ldreq	r4, [r5, #12]
 8005f3e:	e7ca      	b.n	8005ed6 <__swbuf_r+0x1a>
 8005f40:	4621      	mov	r1, r4
 8005f42:	4628      	mov	r0, r5
 8005f44:	f000 f81a 	bl	8005f7c <__swsetup_r>
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	d0cb      	beq.n	8005ee4 <__swbuf_r+0x28>
 8005f4c:	f04f 37ff 	mov.w	r7, #4294967295
 8005f50:	e7ea      	b.n	8005f28 <__swbuf_r+0x6c>
 8005f52:	bf00      	nop
 8005f54:	08007a24 	.word	0x08007a24
 8005f58:	08007a44 	.word	0x08007a44
 8005f5c:	08007a04 	.word	0x08007a04

08005f60 <__ascii_wctomb>:
 8005f60:	b149      	cbz	r1, 8005f76 <__ascii_wctomb+0x16>
 8005f62:	2aff      	cmp	r2, #255	; 0xff
 8005f64:	bf85      	ittet	hi
 8005f66:	238a      	movhi	r3, #138	; 0x8a
 8005f68:	6003      	strhi	r3, [r0, #0]
 8005f6a:	700a      	strbls	r2, [r1, #0]
 8005f6c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005f70:	bf98      	it	ls
 8005f72:	2001      	movls	r0, #1
 8005f74:	4770      	bx	lr
 8005f76:	4608      	mov	r0, r1
 8005f78:	4770      	bx	lr
	...

08005f7c <__swsetup_r>:
 8005f7c:	4b32      	ldr	r3, [pc, #200]	; (8006048 <__swsetup_r+0xcc>)
 8005f7e:	b570      	push	{r4, r5, r6, lr}
 8005f80:	681d      	ldr	r5, [r3, #0]
 8005f82:	4606      	mov	r6, r0
 8005f84:	460c      	mov	r4, r1
 8005f86:	b125      	cbz	r5, 8005f92 <__swsetup_r+0x16>
 8005f88:	69ab      	ldr	r3, [r5, #24]
 8005f8a:	b913      	cbnz	r3, 8005f92 <__swsetup_r+0x16>
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	f000 f985 	bl	800629c <__sinit>
 8005f92:	4b2e      	ldr	r3, [pc, #184]	; (800604c <__swsetup_r+0xd0>)
 8005f94:	429c      	cmp	r4, r3
 8005f96:	d10f      	bne.n	8005fb8 <__swsetup_r+0x3c>
 8005f98:	686c      	ldr	r4, [r5, #4]
 8005f9a:	89a3      	ldrh	r3, [r4, #12]
 8005f9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fa0:	0719      	lsls	r1, r3, #28
 8005fa2:	d42c      	bmi.n	8005ffe <__swsetup_r+0x82>
 8005fa4:	06dd      	lsls	r5, r3, #27
 8005fa6:	d411      	bmi.n	8005fcc <__swsetup_r+0x50>
 8005fa8:	2309      	movs	r3, #9
 8005faa:	6033      	str	r3, [r6, #0]
 8005fac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005fb0:	81a3      	strh	r3, [r4, #12]
 8005fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb6:	e03e      	b.n	8006036 <__swsetup_r+0xba>
 8005fb8:	4b25      	ldr	r3, [pc, #148]	; (8006050 <__swsetup_r+0xd4>)
 8005fba:	429c      	cmp	r4, r3
 8005fbc:	d101      	bne.n	8005fc2 <__swsetup_r+0x46>
 8005fbe:	68ac      	ldr	r4, [r5, #8]
 8005fc0:	e7eb      	b.n	8005f9a <__swsetup_r+0x1e>
 8005fc2:	4b24      	ldr	r3, [pc, #144]	; (8006054 <__swsetup_r+0xd8>)
 8005fc4:	429c      	cmp	r4, r3
 8005fc6:	bf08      	it	eq
 8005fc8:	68ec      	ldreq	r4, [r5, #12]
 8005fca:	e7e6      	b.n	8005f9a <__swsetup_r+0x1e>
 8005fcc:	0758      	lsls	r0, r3, #29
 8005fce:	d512      	bpl.n	8005ff6 <__swsetup_r+0x7a>
 8005fd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fd2:	b141      	cbz	r1, 8005fe6 <__swsetup_r+0x6a>
 8005fd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fd8:	4299      	cmp	r1, r3
 8005fda:	d002      	beq.n	8005fe2 <__swsetup_r+0x66>
 8005fdc:	4630      	mov	r0, r6
 8005fde:	f7ff fb6f 	bl	80056c0 <_free_r>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	6363      	str	r3, [r4, #52]	; 0x34
 8005fe6:	89a3      	ldrh	r3, [r4, #12]
 8005fe8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fec:	81a3      	strh	r3, [r4, #12]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	6063      	str	r3, [r4, #4]
 8005ff2:	6923      	ldr	r3, [r4, #16]
 8005ff4:	6023      	str	r3, [r4, #0]
 8005ff6:	89a3      	ldrh	r3, [r4, #12]
 8005ff8:	f043 0308 	orr.w	r3, r3, #8
 8005ffc:	81a3      	strh	r3, [r4, #12]
 8005ffe:	6923      	ldr	r3, [r4, #16]
 8006000:	b94b      	cbnz	r3, 8006016 <__swsetup_r+0x9a>
 8006002:	89a3      	ldrh	r3, [r4, #12]
 8006004:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800600c:	d003      	beq.n	8006016 <__swsetup_r+0x9a>
 800600e:	4621      	mov	r1, r4
 8006010:	4630      	mov	r0, r6
 8006012:	f000 fa07 	bl	8006424 <__smakebuf_r>
 8006016:	89a0      	ldrh	r0, [r4, #12]
 8006018:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800601c:	f010 0301 	ands.w	r3, r0, #1
 8006020:	d00a      	beq.n	8006038 <__swsetup_r+0xbc>
 8006022:	2300      	movs	r3, #0
 8006024:	60a3      	str	r3, [r4, #8]
 8006026:	6963      	ldr	r3, [r4, #20]
 8006028:	425b      	negs	r3, r3
 800602a:	61a3      	str	r3, [r4, #24]
 800602c:	6923      	ldr	r3, [r4, #16]
 800602e:	b943      	cbnz	r3, 8006042 <__swsetup_r+0xc6>
 8006030:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006034:	d1ba      	bne.n	8005fac <__swsetup_r+0x30>
 8006036:	bd70      	pop	{r4, r5, r6, pc}
 8006038:	0781      	lsls	r1, r0, #30
 800603a:	bf58      	it	pl
 800603c:	6963      	ldrpl	r3, [r4, #20]
 800603e:	60a3      	str	r3, [r4, #8]
 8006040:	e7f4      	b.n	800602c <__swsetup_r+0xb0>
 8006042:	2000      	movs	r0, #0
 8006044:	e7f7      	b.n	8006036 <__swsetup_r+0xba>
 8006046:	bf00      	nop
 8006048:	20000008 	.word	0x20000008
 800604c:	08007a24 	.word	0x08007a24
 8006050:	08007a44 	.word	0x08007a44
 8006054:	08007a04 	.word	0x08007a04

08006058 <abort>:
 8006058:	b508      	push	{r3, lr}
 800605a:	2006      	movs	r0, #6
 800605c:	f000 fa52 	bl	8006504 <raise>
 8006060:	2001      	movs	r0, #1
 8006062:	f7fc f959 	bl	8002318 <_exit>
	...

08006068 <__sflush_r>:
 8006068:	898a      	ldrh	r2, [r1, #12]
 800606a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800606e:	4605      	mov	r5, r0
 8006070:	0710      	lsls	r0, r2, #28
 8006072:	460c      	mov	r4, r1
 8006074:	d458      	bmi.n	8006128 <__sflush_r+0xc0>
 8006076:	684b      	ldr	r3, [r1, #4]
 8006078:	2b00      	cmp	r3, #0
 800607a:	dc05      	bgt.n	8006088 <__sflush_r+0x20>
 800607c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800607e:	2b00      	cmp	r3, #0
 8006080:	dc02      	bgt.n	8006088 <__sflush_r+0x20>
 8006082:	2000      	movs	r0, #0
 8006084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006088:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800608a:	2e00      	cmp	r6, #0
 800608c:	d0f9      	beq.n	8006082 <__sflush_r+0x1a>
 800608e:	2300      	movs	r3, #0
 8006090:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006094:	682f      	ldr	r7, [r5, #0]
 8006096:	602b      	str	r3, [r5, #0]
 8006098:	d032      	beq.n	8006100 <__sflush_r+0x98>
 800609a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800609c:	89a3      	ldrh	r3, [r4, #12]
 800609e:	075a      	lsls	r2, r3, #29
 80060a0:	d505      	bpl.n	80060ae <__sflush_r+0x46>
 80060a2:	6863      	ldr	r3, [r4, #4]
 80060a4:	1ac0      	subs	r0, r0, r3
 80060a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060a8:	b10b      	cbz	r3, 80060ae <__sflush_r+0x46>
 80060aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060ac:	1ac0      	subs	r0, r0, r3
 80060ae:	2300      	movs	r3, #0
 80060b0:	4602      	mov	r2, r0
 80060b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060b4:	6a21      	ldr	r1, [r4, #32]
 80060b6:	4628      	mov	r0, r5
 80060b8:	47b0      	blx	r6
 80060ba:	1c43      	adds	r3, r0, #1
 80060bc:	89a3      	ldrh	r3, [r4, #12]
 80060be:	d106      	bne.n	80060ce <__sflush_r+0x66>
 80060c0:	6829      	ldr	r1, [r5, #0]
 80060c2:	291d      	cmp	r1, #29
 80060c4:	d82c      	bhi.n	8006120 <__sflush_r+0xb8>
 80060c6:	4a2a      	ldr	r2, [pc, #168]	; (8006170 <__sflush_r+0x108>)
 80060c8:	40ca      	lsrs	r2, r1
 80060ca:	07d6      	lsls	r6, r2, #31
 80060cc:	d528      	bpl.n	8006120 <__sflush_r+0xb8>
 80060ce:	2200      	movs	r2, #0
 80060d0:	6062      	str	r2, [r4, #4]
 80060d2:	04d9      	lsls	r1, r3, #19
 80060d4:	6922      	ldr	r2, [r4, #16]
 80060d6:	6022      	str	r2, [r4, #0]
 80060d8:	d504      	bpl.n	80060e4 <__sflush_r+0x7c>
 80060da:	1c42      	adds	r2, r0, #1
 80060dc:	d101      	bne.n	80060e2 <__sflush_r+0x7a>
 80060de:	682b      	ldr	r3, [r5, #0]
 80060e0:	b903      	cbnz	r3, 80060e4 <__sflush_r+0x7c>
 80060e2:	6560      	str	r0, [r4, #84]	; 0x54
 80060e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060e6:	602f      	str	r7, [r5, #0]
 80060e8:	2900      	cmp	r1, #0
 80060ea:	d0ca      	beq.n	8006082 <__sflush_r+0x1a>
 80060ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060f0:	4299      	cmp	r1, r3
 80060f2:	d002      	beq.n	80060fa <__sflush_r+0x92>
 80060f4:	4628      	mov	r0, r5
 80060f6:	f7ff fae3 	bl	80056c0 <_free_r>
 80060fa:	2000      	movs	r0, #0
 80060fc:	6360      	str	r0, [r4, #52]	; 0x34
 80060fe:	e7c1      	b.n	8006084 <__sflush_r+0x1c>
 8006100:	6a21      	ldr	r1, [r4, #32]
 8006102:	2301      	movs	r3, #1
 8006104:	4628      	mov	r0, r5
 8006106:	47b0      	blx	r6
 8006108:	1c41      	adds	r1, r0, #1
 800610a:	d1c7      	bne.n	800609c <__sflush_r+0x34>
 800610c:	682b      	ldr	r3, [r5, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d0c4      	beq.n	800609c <__sflush_r+0x34>
 8006112:	2b1d      	cmp	r3, #29
 8006114:	d001      	beq.n	800611a <__sflush_r+0xb2>
 8006116:	2b16      	cmp	r3, #22
 8006118:	d101      	bne.n	800611e <__sflush_r+0xb6>
 800611a:	602f      	str	r7, [r5, #0]
 800611c:	e7b1      	b.n	8006082 <__sflush_r+0x1a>
 800611e:	89a3      	ldrh	r3, [r4, #12]
 8006120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006124:	81a3      	strh	r3, [r4, #12]
 8006126:	e7ad      	b.n	8006084 <__sflush_r+0x1c>
 8006128:	690f      	ldr	r7, [r1, #16]
 800612a:	2f00      	cmp	r7, #0
 800612c:	d0a9      	beq.n	8006082 <__sflush_r+0x1a>
 800612e:	0793      	lsls	r3, r2, #30
 8006130:	680e      	ldr	r6, [r1, #0]
 8006132:	bf08      	it	eq
 8006134:	694b      	ldreq	r3, [r1, #20]
 8006136:	600f      	str	r7, [r1, #0]
 8006138:	bf18      	it	ne
 800613a:	2300      	movne	r3, #0
 800613c:	eba6 0807 	sub.w	r8, r6, r7
 8006140:	608b      	str	r3, [r1, #8]
 8006142:	f1b8 0f00 	cmp.w	r8, #0
 8006146:	dd9c      	ble.n	8006082 <__sflush_r+0x1a>
 8006148:	6a21      	ldr	r1, [r4, #32]
 800614a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800614c:	4643      	mov	r3, r8
 800614e:	463a      	mov	r2, r7
 8006150:	4628      	mov	r0, r5
 8006152:	47b0      	blx	r6
 8006154:	2800      	cmp	r0, #0
 8006156:	dc06      	bgt.n	8006166 <__sflush_r+0xfe>
 8006158:	89a3      	ldrh	r3, [r4, #12]
 800615a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800615e:	81a3      	strh	r3, [r4, #12]
 8006160:	f04f 30ff 	mov.w	r0, #4294967295
 8006164:	e78e      	b.n	8006084 <__sflush_r+0x1c>
 8006166:	4407      	add	r7, r0
 8006168:	eba8 0800 	sub.w	r8, r8, r0
 800616c:	e7e9      	b.n	8006142 <__sflush_r+0xda>
 800616e:	bf00      	nop
 8006170:	20400001 	.word	0x20400001

08006174 <_fflush_r>:
 8006174:	b538      	push	{r3, r4, r5, lr}
 8006176:	690b      	ldr	r3, [r1, #16]
 8006178:	4605      	mov	r5, r0
 800617a:	460c      	mov	r4, r1
 800617c:	b913      	cbnz	r3, 8006184 <_fflush_r+0x10>
 800617e:	2500      	movs	r5, #0
 8006180:	4628      	mov	r0, r5
 8006182:	bd38      	pop	{r3, r4, r5, pc}
 8006184:	b118      	cbz	r0, 800618e <_fflush_r+0x1a>
 8006186:	6983      	ldr	r3, [r0, #24]
 8006188:	b90b      	cbnz	r3, 800618e <_fflush_r+0x1a>
 800618a:	f000 f887 	bl	800629c <__sinit>
 800618e:	4b14      	ldr	r3, [pc, #80]	; (80061e0 <_fflush_r+0x6c>)
 8006190:	429c      	cmp	r4, r3
 8006192:	d11b      	bne.n	80061cc <_fflush_r+0x58>
 8006194:	686c      	ldr	r4, [r5, #4]
 8006196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0ef      	beq.n	800617e <_fflush_r+0xa>
 800619e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80061a0:	07d0      	lsls	r0, r2, #31
 80061a2:	d404      	bmi.n	80061ae <_fflush_r+0x3a>
 80061a4:	0599      	lsls	r1, r3, #22
 80061a6:	d402      	bmi.n	80061ae <_fflush_r+0x3a>
 80061a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061aa:	f000 f915 	bl	80063d8 <__retarget_lock_acquire_recursive>
 80061ae:	4628      	mov	r0, r5
 80061b0:	4621      	mov	r1, r4
 80061b2:	f7ff ff59 	bl	8006068 <__sflush_r>
 80061b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061b8:	07da      	lsls	r2, r3, #31
 80061ba:	4605      	mov	r5, r0
 80061bc:	d4e0      	bmi.n	8006180 <_fflush_r+0xc>
 80061be:	89a3      	ldrh	r3, [r4, #12]
 80061c0:	059b      	lsls	r3, r3, #22
 80061c2:	d4dd      	bmi.n	8006180 <_fflush_r+0xc>
 80061c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061c6:	f000 f908 	bl	80063da <__retarget_lock_release_recursive>
 80061ca:	e7d9      	b.n	8006180 <_fflush_r+0xc>
 80061cc:	4b05      	ldr	r3, [pc, #20]	; (80061e4 <_fflush_r+0x70>)
 80061ce:	429c      	cmp	r4, r3
 80061d0:	d101      	bne.n	80061d6 <_fflush_r+0x62>
 80061d2:	68ac      	ldr	r4, [r5, #8]
 80061d4:	e7df      	b.n	8006196 <_fflush_r+0x22>
 80061d6:	4b04      	ldr	r3, [pc, #16]	; (80061e8 <_fflush_r+0x74>)
 80061d8:	429c      	cmp	r4, r3
 80061da:	bf08      	it	eq
 80061dc:	68ec      	ldreq	r4, [r5, #12]
 80061de:	e7da      	b.n	8006196 <_fflush_r+0x22>
 80061e0:	08007a24 	.word	0x08007a24
 80061e4:	08007a44 	.word	0x08007a44
 80061e8:	08007a04 	.word	0x08007a04

080061ec <std>:
 80061ec:	2300      	movs	r3, #0
 80061ee:	b510      	push	{r4, lr}
 80061f0:	4604      	mov	r4, r0
 80061f2:	e9c0 3300 	strd	r3, r3, [r0]
 80061f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061fa:	6083      	str	r3, [r0, #8]
 80061fc:	8181      	strh	r1, [r0, #12]
 80061fe:	6643      	str	r3, [r0, #100]	; 0x64
 8006200:	81c2      	strh	r2, [r0, #14]
 8006202:	6183      	str	r3, [r0, #24]
 8006204:	4619      	mov	r1, r3
 8006206:	2208      	movs	r2, #8
 8006208:	305c      	adds	r0, #92	; 0x5c
 800620a:	f7fd fb9f 	bl	800394c <memset>
 800620e:	4b05      	ldr	r3, [pc, #20]	; (8006224 <std+0x38>)
 8006210:	6263      	str	r3, [r4, #36]	; 0x24
 8006212:	4b05      	ldr	r3, [pc, #20]	; (8006228 <std+0x3c>)
 8006214:	62a3      	str	r3, [r4, #40]	; 0x28
 8006216:	4b05      	ldr	r3, [pc, #20]	; (800622c <std+0x40>)
 8006218:	62e3      	str	r3, [r4, #44]	; 0x2c
 800621a:	4b05      	ldr	r3, [pc, #20]	; (8006230 <std+0x44>)
 800621c:	6224      	str	r4, [r4, #32]
 800621e:	6323      	str	r3, [r4, #48]	; 0x30
 8006220:	bd10      	pop	{r4, pc}
 8006222:	bf00      	nop
 8006224:	0800653d 	.word	0x0800653d
 8006228:	0800655f 	.word	0x0800655f
 800622c:	08006597 	.word	0x08006597
 8006230:	080065bb 	.word	0x080065bb

08006234 <_cleanup_r>:
 8006234:	4901      	ldr	r1, [pc, #4]	; (800623c <_cleanup_r+0x8>)
 8006236:	f000 b8af 	b.w	8006398 <_fwalk_reent>
 800623a:	bf00      	nop
 800623c:	08006175 	.word	0x08006175

08006240 <__sfmoreglue>:
 8006240:	b570      	push	{r4, r5, r6, lr}
 8006242:	1e4a      	subs	r2, r1, #1
 8006244:	2568      	movs	r5, #104	; 0x68
 8006246:	4355      	muls	r5, r2
 8006248:	460e      	mov	r6, r1
 800624a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800624e:	f7ff fa87 	bl	8005760 <_malloc_r>
 8006252:	4604      	mov	r4, r0
 8006254:	b140      	cbz	r0, 8006268 <__sfmoreglue+0x28>
 8006256:	2100      	movs	r1, #0
 8006258:	e9c0 1600 	strd	r1, r6, [r0]
 800625c:	300c      	adds	r0, #12
 800625e:	60a0      	str	r0, [r4, #8]
 8006260:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006264:	f7fd fb72 	bl	800394c <memset>
 8006268:	4620      	mov	r0, r4
 800626a:	bd70      	pop	{r4, r5, r6, pc}

0800626c <__sfp_lock_acquire>:
 800626c:	4801      	ldr	r0, [pc, #4]	; (8006274 <__sfp_lock_acquire+0x8>)
 800626e:	f000 b8b3 	b.w	80063d8 <__retarget_lock_acquire_recursive>
 8006272:	bf00      	nop
 8006274:	20000258 	.word	0x20000258

08006278 <__sfp_lock_release>:
 8006278:	4801      	ldr	r0, [pc, #4]	; (8006280 <__sfp_lock_release+0x8>)
 800627a:	f000 b8ae 	b.w	80063da <__retarget_lock_release_recursive>
 800627e:	bf00      	nop
 8006280:	20000258 	.word	0x20000258

08006284 <__sinit_lock_acquire>:
 8006284:	4801      	ldr	r0, [pc, #4]	; (800628c <__sinit_lock_acquire+0x8>)
 8006286:	f000 b8a7 	b.w	80063d8 <__retarget_lock_acquire_recursive>
 800628a:	bf00      	nop
 800628c:	20000253 	.word	0x20000253

08006290 <__sinit_lock_release>:
 8006290:	4801      	ldr	r0, [pc, #4]	; (8006298 <__sinit_lock_release+0x8>)
 8006292:	f000 b8a2 	b.w	80063da <__retarget_lock_release_recursive>
 8006296:	bf00      	nop
 8006298:	20000253 	.word	0x20000253

0800629c <__sinit>:
 800629c:	b510      	push	{r4, lr}
 800629e:	4604      	mov	r4, r0
 80062a0:	f7ff fff0 	bl	8006284 <__sinit_lock_acquire>
 80062a4:	69a3      	ldr	r3, [r4, #24]
 80062a6:	b11b      	cbz	r3, 80062b0 <__sinit+0x14>
 80062a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062ac:	f7ff bff0 	b.w	8006290 <__sinit_lock_release>
 80062b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80062b4:	6523      	str	r3, [r4, #80]	; 0x50
 80062b6:	4b13      	ldr	r3, [pc, #76]	; (8006304 <__sinit+0x68>)
 80062b8:	4a13      	ldr	r2, [pc, #76]	; (8006308 <__sinit+0x6c>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80062be:	42a3      	cmp	r3, r4
 80062c0:	bf04      	itt	eq
 80062c2:	2301      	moveq	r3, #1
 80062c4:	61a3      	streq	r3, [r4, #24]
 80062c6:	4620      	mov	r0, r4
 80062c8:	f000 f820 	bl	800630c <__sfp>
 80062cc:	6060      	str	r0, [r4, #4]
 80062ce:	4620      	mov	r0, r4
 80062d0:	f000 f81c 	bl	800630c <__sfp>
 80062d4:	60a0      	str	r0, [r4, #8]
 80062d6:	4620      	mov	r0, r4
 80062d8:	f000 f818 	bl	800630c <__sfp>
 80062dc:	2200      	movs	r2, #0
 80062de:	60e0      	str	r0, [r4, #12]
 80062e0:	2104      	movs	r1, #4
 80062e2:	6860      	ldr	r0, [r4, #4]
 80062e4:	f7ff ff82 	bl	80061ec <std>
 80062e8:	68a0      	ldr	r0, [r4, #8]
 80062ea:	2201      	movs	r2, #1
 80062ec:	2109      	movs	r1, #9
 80062ee:	f7ff ff7d 	bl	80061ec <std>
 80062f2:	68e0      	ldr	r0, [r4, #12]
 80062f4:	2202      	movs	r2, #2
 80062f6:	2112      	movs	r1, #18
 80062f8:	f7ff ff78 	bl	80061ec <std>
 80062fc:	2301      	movs	r3, #1
 80062fe:	61a3      	str	r3, [r4, #24]
 8006300:	e7d2      	b.n	80062a8 <__sinit+0xc>
 8006302:	bf00      	nop
 8006304:	08007680 	.word	0x08007680
 8006308:	08006235 	.word	0x08006235

0800630c <__sfp>:
 800630c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630e:	4607      	mov	r7, r0
 8006310:	f7ff ffac 	bl	800626c <__sfp_lock_acquire>
 8006314:	4b1e      	ldr	r3, [pc, #120]	; (8006390 <__sfp+0x84>)
 8006316:	681e      	ldr	r6, [r3, #0]
 8006318:	69b3      	ldr	r3, [r6, #24]
 800631a:	b913      	cbnz	r3, 8006322 <__sfp+0x16>
 800631c:	4630      	mov	r0, r6
 800631e:	f7ff ffbd 	bl	800629c <__sinit>
 8006322:	3648      	adds	r6, #72	; 0x48
 8006324:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006328:	3b01      	subs	r3, #1
 800632a:	d503      	bpl.n	8006334 <__sfp+0x28>
 800632c:	6833      	ldr	r3, [r6, #0]
 800632e:	b30b      	cbz	r3, 8006374 <__sfp+0x68>
 8006330:	6836      	ldr	r6, [r6, #0]
 8006332:	e7f7      	b.n	8006324 <__sfp+0x18>
 8006334:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006338:	b9d5      	cbnz	r5, 8006370 <__sfp+0x64>
 800633a:	4b16      	ldr	r3, [pc, #88]	; (8006394 <__sfp+0x88>)
 800633c:	60e3      	str	r3, [r4, #12]
 800633e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006342:	6665      	str	r5, [r4, #100]	; 0x64
 8006344:	f000 f847 	bl	80063d6 <__retarget_lock_init_recursive>
 8006348:	f7ff ff96 	bl	8006278 <__sfp_lock_release>
 800634c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006350:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006354:	6025      	str	r5, [r4, #0]
 8006356:	61a5      	str	r5, [r4, #24]
 8006358:	2208      	movs	r2, #8
 800635a:	4629      	mov	r1, r5
 800635c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006360:	f7fd faf4 	bl	800394c <memset>
 8006364:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006368:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800636c:	4620      	mov	r0, r4
 800636e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006370:	3468      	adds	r4, #104	; 0x68
 8006372:	e7d9      	b.n	8006328 <__sfp+0x1c>
 8006374:	2104      	movs	r1, #4
 8006376:	4638      	mov	r0, r7
 8006378:	f7ff ff62 	bl	8006240 <__sfmoreglue>
 800637c:	4604      	mov	r4, r0
 800637e:	6030      	str	r0, [r6, #0]
 8006380:	2800      	cmp	r0, #0
 8006382:	d1d5      	bne.n	8006330 <__sfp+0x24>
 8006384:	f7ff ff78 	bl	8006278 <__sfp_lock_release>
 8006388:	230c      	movs	r3, #12
 800638a:	603b      	str	r3, [r7, #0]
 800638c:	e7ee      	b.n	800636c <__sfp+0x60>
 800638e:	bf00      	nop
 8006390:	08007680 	.word	0x08007680
 8006394:	ffff0001 	.word	0xffff0001

08006398 <_fwalk_reent>:
 8006398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800639c:	4606      	mov	r6, r0
 800639e:	4688      	mov	r8, r1
 80063a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80063a4:	2700      	movs	r7, #0
 80063a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063aa:	f1b9 0901 	subs.w	r9, r9, #1
 80063ae:	d505      	bpl.n	80063bc <_fwalk_reent+0x24>
 80063b0:	6824      	ldr	r4, [r4, #0]
 80063b2:	2c00      	cmp	r4, #0
 80063b4:	d1f7      	bne.n	80063a6 <_fwalk_reent+0xe>
 80063b6:	4638      	mov	r0, r7
 80063b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063bc:	89ab      	ldrh	r3, [r5, #12]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d907      	bls.n	80063d2 <_fwalk_reent+0x3a>
 80063c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063c6:	3301      	adds	r3, #1
 80063c8:	d003      	beq.n	80063d2 <_fwalk_reent+0x3a>
 80063ca:	4629      	mov	r1, r5
 80063cc:	4630      	mov	r0, r6
 80063ce:	47c0      	blx	r8
 80063d0:	4307      	orrs	r7, r0
 80063d2:	3568      	adds	r5, #104	; 0x68
 80063d4:	e7e9      	b.n	80063aa <_fwalk_reent+0x12>

080063d6 <__retarget_lock_init_recursive>:
 80063d6:	4770      	bx	lr

080063d8 <__retarget_lock_acquire_recursive>:
 80063d8:	4770      	bx	lr

080063da <__retarget_lock_release_recursive>:
 80063da:	4770      	bx	lr

080063dc <__swhatbuf_r>:
 80063dc:	b570      	push	{r4, r5, r6, lr}
 80063de:	460e      	mov	r6, r1
 80063e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063e4:	2900      	cmp	r1, #0
 80063e6:	b096      	sub	sp, #88	; 0x58
 80063e8:	4614      	mov	r4, r2
 80063ea:	461d      	mov	r5, r3
 80063ec:	da07      	bge.n	80063fe <__swhatbuf_r+0x22>
 80063ee:	2300      	movs	r3, #0
 80063f0:	602b      	str	r3, [r5, #0]
 80063f2:	89b3      	ldrh	r3, [r6, #12]
 80063f4:	061a      	lsls	r2, r3, #24
 80063f6:	d410      	bmi.n	800641a <__swhatbuf_r+0x3e>
 80063f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063fc:	e00e      	b.n	800641c <__swhatbuf_r+0x40>
 80063fe:	466a      	mov	r2, sp
 8006400:	f000 f902 	bl	8006608 <_fstat_r>
 8006404:	2800      	cmp	r0, #0
 8006406:	dbf2      	blt.n	80063ee <__swhatbuf_r+0x12>
 8006408:	9a01      	ldr	r2, [sp, #4]
 800640a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800640e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006412:	425a      	negs	r2, r3
 8006414:	415a      	adcs	r2, r3
 8006416:	602a      	str	r2, [r5, #0]
 8006418:	e7ee      	b.n	80063f8 <__swhatbuf_r+0x1c>
 800641a:	2340      	movs	r3, #64	; 0x40
 800641c:	2000      	movs	r0, #0
 800641e:	6023      	str	r3, [r4, #0]
 8006420:	b016      	add	sp, #88	; 0x58
 8006422:	bd70      	pop	{r4, r5, r6, pc}

08006424 <__smakebuf_r>:
 8006424:	898b      	ldrh	r3, [r1, #12]
 8006426:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006428:	079d      	lsls	r5, r3, #30
 800642a:	4606      	mov	r6, r0
 800642c:	460c      	mov	r4, r1
 800642e:	d507      	bpl.n	8006440 <__smakebuf_r+0x1c>
 8006430:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	6123      	str	r3, [r4, #16]
 8006438:	2301      	movs	r3, #1
 800643a:	6163      	str	r3, [r4, #20]
 800643c:	b002      	add	sp, #8
 800643e:	bd70      	pop	{r4, r5, r6, pc}
 8006440:	ab01      	add	r3, sp, #4
 8006442:	466a      	mov	r2, sp
 8006444:	f7ff ffca 	bl	80063dc <__swhatbuf_r>
 8006448:	9900      	ldr	r1, [sp, #0]
 800644a:	4605      	mov	r5, r0
 800644c:	4630      	mov	r0, r6
 800644e:	f7ff f987 	bl	8005760 <_malloc_r>
 8006452:	b948      	cbnz	r0, 8006468 <__smakebuf_r+0x44>
 8006454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006458:	059a      	lsls	r2, r3, #22
 800645a:	d4ef      	bmi.n	800643c <__smakebuf_r+0x18>
 800645c:	f023 0303 	bic.w	r3, r3, #3
 8006460:	f043 0302 	orr.w	r3, r3, #2
 8006464:	81a3      	strh	r3, [r4, #12]
 8006466:	e7e3      	b.n	8006430 <__smakebuf_r+0xc>
 8006468:	4b0d      	ldr	r3, [pc, #52]	; (80064a0 <__smakebuf_r+0x7c>)
 800646a:	62b3      	str	r3, [r6, #40]	; 0x28
 800646c:	89a3      	ldrh	r3, [r4, #12]
 800646e:	6020      	str	r0, [r4, #0]
 8006470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006474:	81a3      	strh	r3, [r4, #12]
 8006476:	9b00      	ldr	r3, [sp, #0]
 8006478:	6163      	str	r3, [r4, #20]
 800647a:	9b01      	ldr	r3, [sp, #4]
 800647c:	6120      	str	r0, [r4, #16]
 800647e:	b15b      	cbz	r3, 8006498 <__smakebuf_r+0x74>
 8006480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006484:	4630      	mov	r0, r6
 8006486:	f000 f8d1 	bl	800662c <_isatty_r>
 800648a:	b128      	cbz	r0, 8006498 <__smakebuf_r+0x74>
 800648c:	89a3      	ldrh	r3, [r4, #12]
 800648e:	f023 0303 	bic.w	r3, r3, #3
 8006492:	f043 0301 	orr.w	r3, r3, #1
 8006496:	81a3      	strh	r3, [r4, #12]
 8006498:	89a0      	ldrh	r0, [r4, #12]
 800649a:	4305      	orrs	r5, r0
 800649c:	81a5      	strh	r5, [r4, #12]
 800649e:	e7cd      	b.n	800643c <__smakebuf_r+0x18>
 80064a0:	08006235 	.word	0x08006235

080064a4 <_malloc_usable_size_r>:
 80064a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064a8:	1f18      	subs	r0, r3, #4
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	bfbc      	itt	lt
 80064ae:	580b      	ldrlt	r3, [r1, r0]
 80064b0:	18c0      	addlt	r0, r0, r3
 80064b2:	4770      	bx	lr

080064b4 <_raise_r>:
 80064b4:	291f      	cmp	r1, #31
 80064b6:	b538      	push	{r3, r4, r5, lr}
 80064b8:	4604      	mov	r4, r0
 80064ba:	460d      	mov	r5, r1
 80064bc:	d904      	bls.n	80064c8 <_raise_r+0x14>
 80064be:	2316      	movs	r3, #22
 80064c0:	6003      	str	r3, [r0, #0]
 80064c2:	f04f 30ff 	mov.w	r0, #4294967295
 80064c6:	bd38      	pop	{r3, r4, r5, pc}
 80064c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80064ca:	b112      	cbz	r2, 80064d2 <_raise_r+0x1e>
 80064cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80064d0:	b94b      	cbnz	r3, 80064e6 <_raise_r+0x32>
 80064d2:	4620      	mov	r0, r4
 80064d4:	f000 f830 	bl	8006538 <_getpid_r>
 80064d8:	462a      	mov	r2, r5
 80064da:	4601      	mov	r1, r0
 80064dc:	4620      	mov	r0, r4
 80064de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064e2:	f000 b817 	b.w	8006514 <_kill_r>
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d00a      	beq.n	8006500 <_raise_r+0x4c>
 80064ea:	1c59      	adds	r1, r3, #1
 80064ec:	d103      	bne.n	80064f6 <_raise_r+0x42>
 80064ee:	2316      	movs	r3, #22
 80064f0:	6003      	str	r3, [r0, #0]
 80064f2:	2001      	movs	r0, #1
 80064f4:	e7e7      	b.n	80064c6 <_raise_r+0x12>
 80064f6:	2400      	movs	r4, #0
 80064f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80064fc:	4628      	mov	r0, r5
 80064fe:	4798      	blx	r3
 8006500:	2000      	movs	r0, #0
 8006502:	e7e0      	b.n	80064c6 <_raise_r+0x12>

08006504 <raise>:
 8006504:	4b02      	ldr	r3, [pc, #8]	; (8006510 <raise+0xc>)
 8006506:	4601      	mov	r1, r0
 8006508:	6818      	ldr	r0, [r3, #0]
 800650a:	f7ff bfd3 	b.w	80064b4 <_raise_r>
 800650e:	bf00      	nop
 8006510:	20000008 	.word	0x20000008

08006514 <_kill_r>:
 8006514:	b538      	push	{r3, r4, r5, lr}
 8006516:	4d07      	ldr	r5, [pc, #28]	; (8006534 <_kill_r+0x20>)
 8006518:	2300      	movs	r3, #0
 800651a:	4604      	mov	r4, r0
 800651c:	4608      	mov	r0, r1
 800651e:	4611      	mov	r1, r2
 8006520:	602b      	str	r3, [r5, #0]
 8006522:	f7fb fee9 	bl	80022f8 <_kill>
 8006526:	1c43      	adds	r3, r0, #1
 8006528:	d102      	bne.n	8006530 <_kill_r+0x1c>
 800652a:	682b      	ldr	r3, [r5, #0]
 800652c:	b103      	cbz	r3, 8006530 <_kill_r+0x1c>
 800652e:	6023      	str	r3, [r4, #0]
 8006530:	bd38      	pop	{r3, r4, r5, pc}
 8006532:	bf00      	nop
 8006534:	2000024c 	.word	0x2000024c

08006538 <_getpid_r>:
 8006538:	f7fb bed6 	b.w	80022e8 <_getpid>

0800653c <__sread>:
 800653c:	b510      	push	{r4, lr}
 800653e:	460c      	mov	r4, r1
 8006540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006544:	f000 f894 	bl	8006670 <_read_r>
 8006548:	2800      	cmp	r0, #0
 800654a:	bfab      	itete	ge
 800654c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800654e:	89a3      	ldrhlt	r3, [r4, #12]
 8006550:	181b      	addge	r3, r3, r0
 8006552:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006556:	bfac      	ite	ge
 8006558:	6563      	strge	r3, [r4, #84]	; 0x54
 800655a:	81a3      	strhlt	r3, [r4, #12]
 800655c:	bd10      	pop	{r4, pc}

0800655e <__swrite>:
 800655e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006562:	461f      	mov	r7, r3
 8006564:	898b      	ldrh	r3, [r1, #12]
 8006566:	05db      	lsls	r3, r3, #23
 8006568:	4605      	mov	r5, r0
 800656a:	460c      	mov	r4, r1
 800656c:	4616      	mov	r6, r2
 800656e:	d505      	bpl.n	800657c <__swrite+0x1e>
 8006570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006574:	2302      	movs	r3, #2
 8006576:	2200      	movs	r2, #0
 8006578:	f000 f868 	bl	800664c <_lseek_r>
 800657c:	89a3      	ldrh	r3, [r4, #12]
 800657e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006582:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006586:	81a3      	strh	r3, [r4, #12]
 8006588:	4632      	mov	r2, r6
 800658a:	463b      	mov	r3, r7
 800658c:	4628      	mov	r0, r5
 800658e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006592:	f000 b817 	b.w	80065c4 <_write_r>

08006596 <__sseek>:
 8006596:	b510      	push	{r4, lr}
 8006598:	460c      	mov	r4, r1
 800659a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800659e:	f000 f855 	bl	800664c <_lseek_r>
 80065a2:	1c43      	adds	r3, r0, #1
 80065a4:	89a3      	ldrh	r3, [r4, #12]
 80065a6:	bf15      	itete	ne
 80065a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80065aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065b2:	81a3      	strheq	r3, [r4, #12]
 80065b4:	bf18      	it	ne
 80065b6:	81a3      	strhne	r3, [r4, #12]
 80065b8:	bd10      	pop	{r4, pc}

080065ba <__sclose>:
 80065ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065be:	f000 b813 	b.w	80065e8 <_close_r>
	...

080065c4 <_write_r>:
 80065c4:	b538      	push	{r3, r4, r5, lr}
 80065c6:	4d07      	ldr	r5, [pc, #28]	; (80065e4 <_write_r+0x20>)
 80065c8:	4604      	mov	r4, r0
 80065ca:	4608      	mov	r0, r1
 80065cc:	4611      	mov	r1, r2
 80065ce:	2200      	movs	r2, #0
 80065d0:	602a      	str	r2, [r5, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	f7fb fec7 	bl	8002366 <_write>
 80065d8:	1c43      	adds	r3, r0, #1
 80065da:	d102      	bne.n	80065e2 <_write_r+0x1e>
 80065dc:	682b      	ldr	r3, [r5, #0]
 80065de:	b103      	cbz	r3, 80065e2 <_write_r+0x1e>
 80065e0:	6023      	str	r3, [r4, #0]
 80065e2:	bd38      	pop	{r3, r4, r5, pc}
 80065e4:	2000024c 	.word	0x2000024c

080065e8 <_close_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	4d06      	ldr	r5, [pc, #24]	; (8006604 <_close_r+0x1c>)
 80065ec:	2300      	movs	r3, #0
 80065ee:	4604      	mov	r4, r0
 80065f0:	4608      	mov	r0, r1
 80065f2:	602b      	str	r3, [r5, #0]
 80065f4:	f7fb fed3 	bl	800239e <_close>
 80065f8:	1c43      	adds	r3, r0, #1
 80065fa:	d102      	bne.n	8006602 <_close_r+0x1a>
 80065fc:	682b      	ldr	r3, [r5, #0]
 80065fe:	b103      	cbz	r3, 8006602 <_close_r+0x1a>
 8006600:	6023      	str	r3, [r4, #0]
 8006602:	bd38      	pop	{r3, r4, r5, pc}
 8006604:	2000024c 	.word	0x2000024c

08006608 <_fstat_r>:
 8006608:	b538      	push	{r3, r4, r5, lr}
 800660a:	4d07      	ldr	r5, [pc, #28]	; (8006628 <_fstat_r+0x20>)
 800660c:	2300      	movs	r3, #0
 800660e:	4604      	mov	r4, r0
 8006610:	4608      	mov	r0, r1
 8006612:	4611      	mov	r1, r2
 8006614:	602b      	str	r3, [r5, #0]
 8006616:	f7fb fece 	bl	80023b6 <_fstat>
 800661a:	1c43      	adds	r3, r0, #1
 800661c:	d102      	bne.n	8006624 <_fstat_r+0x1c>
 800661e:	682b      	ldr	r3, [r5, #0]
 8006620:	b103      	cbz	r3, 8006624 <_fstat_r+0x1c>
 8006622:	6023      	str	r3, [r4, #0]
 8006624:	bd38      	pop	{r3, r4, r5, pc}
 8006626:	bf00      	nop
 8006628:	2000024c 	.word	0x2000024c

0800662c <_isatty_r>:
 800662c:	b538      	push	{r3, r4, r5, lr}
 800662e:	4d06      	ldr	r5, [pc, #24]	; (8006648 <_isatty_r+0x1c>)
 8006630:	2300      	movs	r3, #0
 8006632:	4604      	mov	r4, r0
 8006634:	4608      	mov	r0, r1
 8006636:	602b      	str	r3, [r5, #0]
 8006638:	f7fb fecd 	bl	80023d6 <_isatty>
 800663c:	1c43      	adds	r3, r0, #1
 800663e:	d102      	bne.n	8006646 <_isatty_r+0x1a>
 8006640:	682b      	ldr	r3, [r5, #0]
 8006642:	b103      	cbz	r3, 8006646 <_isatty_r+0x1a>
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	bd38      	pop	{r3, r4, r5, pc}
 8006648:	2000024c 	.word	0x2000024c

0800664c <_lseek_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	4d07      	ldr	r5, [pc, #28]	; (800666c <_lseek_r+0x20>)
 8006650:	4604      	mov	r4, r0
 8006652:	4608      	mov	r0, r1
 8006654:	4611      	mov	r1, r2
 8006656:	2200      	movs	r2, #0
 8006658:	602a      	str	r2, [r5, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	f7fb fec6 	bl	80023ec <_lseek>
 8006660:	1c43      	adds	r3, r0, #1
 8006662:	d102      	bne.n	800666a <_lseek_r+0x1e>
 8006664:	682b      	ldr	r3, [r5, #0]
 8006666:	b103      	cbz	r3, 800666a <_lseek_r+0x1e>
 8006668:	6023      	str	r3, [r4, #0]
 800666a:	bd38      	pop	{r3, r4, r5, pc}
 800666c:	2000024c 	.word	0x2000024c

08006670 <_read_r>:
 8006670:	b538      	push	{r3, r4, r5, lr}
 8006672:	4d07      	ldr	r5, [pc, #28]	; (8006690 <_read_r+0x20>)
 8006674:	4604      	mov	r4, r0
 8006676:	4608      	mov	r0, r1
 8006678:	4611      	mov	r1, r2
 800667a:	2200      	movs	r2, #0
 800667c:	602a      	str	r2, [r5, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	f7fb fe54 	bl	800232c <_read>
 8006684:	1c43      	adds	r3, r0, #1
 8006686:	d102      	bne.n	800668e <_read_r+0x1e>
 8006688:	682b      	ldr	r3, [r5, #0]
 800668a:	b103      	cbz	r3, 800668e <_read_r+0x1e>
 800668c:	6023      	str	r3, [r4, #0]
 800668e:	bd38      	pop	{r3, r4, r5, pc}
 8006690:	2000024c 	.word	0x2000024c

08006694 <pow>:
 8006694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006698:	ec59 8b10 	vmov	r8, r9, d0
 800669c:	ec57 6b11 	vmov	r6, r7, d1
 80066a0:	f000 f8a6 	bl	80067f0 <__ieee754_pow>
 80066a4:	4b4e      	ldr	r3, [pc, #312]	; (80067e0 <pow+0x14c>)
 80066a6:	f993 3000 	ldrsb.w	r3, [r3]
 80066aa:	3301      	adds	r3, #1
 80066ac:	ec55 4b10 	vmov	r4, r5, d0
 80066b0:	d015      	beq.n	80066de <pow+0x4a>
 80066b2:	4632      	mov	r2, r6
 80066b4:	463b      	mov	r3, r7
 80066b6:	4630      	mov	r0, r6
 80066b8:	4639      	mov	r1, r7
 80066ba:	f7fa fa37 	bl	8000b2c <__aeabi_dcmpun>
 80066be:	b970      	cbnz	r0, 80066de <pow+0x4a>
 80066c0:	4642      	mov	r2, r8
 80066c2:	464b      	mov	r3, r9
 80066c4:	4640      	mov	r0, r8
 80066c6:	4649      	mov	r1, r9
 80066c8:	f7fa fa30 	bl	8000b2c <__aeabi_dcmpun>
 80066cc:	2200      	movs	r2, #0
 80066ce:	2300      	movs	r3, #0
 80066d0:	b148      	cbz	r0, 80066e6 <pow+0x52>
 80066d2:	4630      	mov	r0, r6
 80066d4:	4639      	mov	r1, r7
 80066d6:	f7fa f9f7 	bl	8000ac8 <__aeabi_dcmpeq>
 80066da:	2800      	cmp	r0, #0
 80066dc:	d17d      	bne.n	80067da <pow+0x146>
 80066de:	ec45 4b10 	vmov	d0, r4, r5
 80066e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066e6:	4640      	mov	r0, r8
 80066e8:	4649      	mov	r1, r9
 80066ea:	f7fa f9ed 	bl	8000ac8 <__aeabi_dcmpeq>
 80066ee:	b1e0      	cbz	r0, 800672a <pow+0x96>
 80066f0:	2200      	movs	r2, #0
 80066f2:	2300      	movs	r3, #0
 80066f4:	4630      	mov	r0, r6
 80066f6:	4639      	mov	r1, r7
 80066f8:	f7fa f9e6 	bl	8000ac8 <__aeabi_dcmpeq>
 80066fc:	2800      	cmp	r0, #0
 80066fe:	d16c      	bne.n	80067da <pow+0x146>
 8006700:	ec47 6b10 	vmov	d0, r6, r7
 8006704:	f000 fe53 	bl	80073ae <finite>
 8006708:	2800      	cmp	r0, #0
 800670a:	d0e8      	beq.n	80066de <pow+0x4a>
 800670c:	2200      	movs	r2, #0
 800670e:	2300      	movs	r3, #0
 8006710:	4630      	mov	r0, r6
 8006712:	4639      	mov	r1, r7
 8006714:	f7fa f9e2 	bl	8000adc <__aeabi_dcmplt>
 8006718:	2800      	cmp	r0, #0
 800671a:	d0e0      	beq.n	80066de <pow+0x4a>
 800671c:	f7fd f8ec 	bl	80038f8 <__errno>
 8006720:	2321      	movs	r3, #33	; 0x21
 8006722:	6003      	str	r3, [r0, #0]
 8006724:	2400      	movs	r4, #0
 8006726:	4d2f      	ldr	r5, [pc, #188]	; (80067e4 <pow+0x150>)
 8006728:	e7d9      	b.n	80066de <pow+0x4a>
 800672a:	ec45 4b10 	vmov	d0, r4, r5
 800672e:	f000 fe3e 	bl	80073ae <finite>
 8006732:	bbb8      	cbnz	r0, 80067a4 <pow+0x110>
 8006734:	ec49 8b10 	vmov	d0, r8, r9
 8006738:	f000 fe39 	bl	80073ae <finite>
 800673c:	b390      	cbz	r0, 80067a4 <pow+0x110>
 800673e:	ec47 6b10 	vmov	d0, r6, r7
 8006742:	f000 fe34 	bl	80073ae <finite>
 8006746:	b368      	cbz	r0, 80067a4 <pow+0x110>
 8006748:	4622      	mov	r2, r4
 800674a:	462b      	mov	r3, r5
 800674c:	4620      	mov	r0, r4
 800674e:	4629      	mov	r1, r5
 8006750:	f7fa f9ec 	bl	8000b2c <__aeabi_dcmpun>
 8006754:	b160      	cbz	r0, 8006770 <pow+0xdc>
 8006756:	f7fd f8cf 	bl	80038f8 <__errno>
 800675a:	2321      	movs	r3, #33	; 0x21
 800675c:	6003      	str	r3, [r0, #0]
 800675e:	2200      	movs	r2, #0
 8006760:	2300      	movs	r3, #0
 8006762:	4610      	mov	r0, r2
 8006764:	4619      	mov	r1, r3
 8006766:	f7fa f871 	bl	800084c <__aeabi_ddiv>
 800676a:	4604      	mov	r4, r0
 800676c:	460d      	mov	r5, r1
 800676e:	e7b6      	b.n	80066de <pow+0x4a>
 8006770:	f7fd f8c2 	bl	80038f8 <__errno>
 8006774:	2322      	movs	r3, #34	; 0x22
 8006776:	6003      	str	r3, [r0, #0]
 8006778:	2200      	movs	r2, #0
 800677a:	2300      	movs	r3, #0
 800677c:	4640      	mov	r0, r8
 800677e:	4649      	mov	r1, r9
 8006780:	f7fa f9ac 	bl	8000adc <__aeabi_dcmplt>
 8006784:	2400      	movs	r4, #0
 8006786:	b158      	cbz	r0, 80067a0 <pow+0x10c>
 8006788:	ec47 6b10 	vmov	d0, r6, r7
 800678c:	f000 fe24 	bl	80073d8 <rint>
 8006790:	4632      	mov	r2, r6
 8006792:	ec51 0b10 	vmov	r0, r1, d0
 8006796:	463b      	mov	r3, r7
 8006798:	f7fa f996 	bl	8000ac8 <__aeabi_dcmpeq>
 800679c:	2800      	cmp	r0, #0
 800679e:	d0c2      	beq.n	8006726 <pow+0x92>
 80067a0:	4d11      	ldr	r5, [pc, #68]	; (80067e8 <pow+0x154>)
 80067a2:	e79c      	b.n	80066de <pow+0x4a>
 80067a4:	2200      	movs	r2, #0
 80067a6:	2300      	movs	r3, #0
 80067a8:	4620      	mov	r0, r4
 80067aa:	4629      	mov	r1, r5
 80067ac:	f7fa f98c 	bl	8000ac8 <__aeabi_dcmpeq>
 80067b0:	2800      	cmp	r0, #0
 80067b2:	d094      	beq.n	80066de <pow+0x4a>
 80067b4:	ec49 8b10 	vmov	d0, r8, r9
 80067b8:	f000 fdf9 	bl	80073ae <finite>
 80067bc:	2800      	cmp	r0, #0
 80067be:	d08e      	beq.n	80066de <pow+0x4a>
 80067c0:	ec47 6b10 	vmov	d0, r6, r7
 80067c4:	f000 fdf3 	bl	80073ae <finite>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d088      	beq.n	80066de <pow+0x4a>
 80067cc:	f7fd f894 	bl	80038f8 <__errno>
 80067d0:	2322      	movs	r3, #34	; 0x22
 80067d2:	6003      	str	r3, [r0, #0]
 80067d4:	2400      	movs	r4, #0
 80067d6:	2500      	movs	r5, #0
 80067d8:	e781      	b.n	80066de <pow+0x4a>
 80067da:	4d04      	ldr	r5, [pc, #16]	; (80067ec <pow+0x158>)
 80067dc:	2400      	movs	r4, #0
 80067de:	e77e      	b.n	80066de <pow+0x4a>
 80067e0:	200001d8 	.word	0x200001d8
 80067e4:	fff00000 	.word	0xfff00000
 80067e8:	7ff00000 	.word	0x7ff00000
 80067ec:	3ff00000 	.word	0x3ff00000

080067f0 <__ieee754_pow>:
 80067f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f4:	ed2d 8b06 	vpush	{d8-d10}
 80067f8:	b08d      	sub	sp, #52	; 0x34
 80067fa:	ed8d 1b02 	vstr	d1, [sp, #8]
 80067fe:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8006802:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8006806:	ea56 0100 	orrs.w	r1, r6, r0
 800680a:	ec53 2b10 	vmov	r2, r3, d0
 800680e:	f000 84d1 	beq.w	80071b4 <__ieee754_pow+0x9c4>
 8006812:	497f      	ldr	r1, [pc, #508]	; (8006a10 <__ieee754_pow+0x220>)
 8006814:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8006818:	428c      	cmp	r4, r1
 800681a:	ee10 8a10 	vmov	r8, s0
 800681e:	4699      	mov	r9, r3
 8006820:	dc09      	bgt.n	8006836 <__ieee754_pow+0x46>
 8006822:	d103      	bne.n	800682c <__ieee754_pow+0x3c>
 8006824:	b97a      	cbnz	r2, 8006846 <__ieee754_pow+0x56>
 8006826:	42a6      	cmp	r6, r4
 8006828:	dd02      	ble.n	8006830 <__ieee754_pow+0x40>
 800682a:	e00c      	b.n	8006846 <__ieee754_pow+0x56>
 800682c:	428e      	cmp	r6, r1
 800682e:	dc02      	bgt.n	8006836 <__ieee754_pow+0x46>
 8006830:	428e      	cmp	r6, r1
 8006832:	d110      	bne.n	8006856 <__ieee754_pow+0x66>
 8006834:	b178      	cbz	r0, 8006856 <__ieee754_pow+0x66>
 8006836:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800683a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800683e:	ea54 0308 	orrs.w	r3, r4, r8
 8006842:	f000 84b7 	beq.w	80071b4 <__ieee754_pow+0x9c4>
 8006846:	4873      	ldr	r0, [pc, #460]	; (8006a14 <__ieee754_pow+0x224>)
 8006848:	b00d      	add	sp, #52	; 0x34
 800684a:	ecbd 8b06 	vpop	{d8-d10}
 800684e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006852:	f000 bdb9 	b.w	80073c8 <nan>
 8006856:	f1b9 0f00 	cmp.w	r9, #0
 800685a:	da36      	bge.n	80068ca <__ieee754_pow+0xda>
 800685c:	496e      	ldr	r1, [pc, #440]	; (8006a18 <__ieee754_pow+0x228>)
 800685e:	428e      	cmp	r6, r1
 8006860:	dc51      	bgt.n	8006906 <__ieee754_pow+0x116>
 8006862:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8006866:	428e      	cmp	r6, r1
 8006868:	f340 84af 	ble.w	80071ca <__ieee754_pow+0x9da>
 800686c:	1531      	asrs	r1, r6, #20
 800686e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006872:	2914      	cmp	r1, #20
 8006874:	dd0f      	ble.n	8006896 <__ieee754_pow+0xa6>
 8006876:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800687a:	fa20 fc01 	lsr.w	ip, r0, r1
 800687e:	fa0c f101 	lsl.w	r1, ip, r1
 8006882:	4281      	cmp	r1, r0
 8006884:	f040 84a1 	bne.w	80071ca <__ieee754_pow+0x9da>
 8006888:	f00c 0c01 	and.w	ip, ip, #1
 800688c:	f1cc 0102 	rsb	r1, ip, #2
 8006890:	9100      	str	r1, [sp, #0]
 8006892:	b180      	cbz	r0, 80068b6 <__ieee754_pow+0xc6>
 8006894:	e059      	b.n	800694a <__ieee754_pow+0x15a>
 8006896:	2800      	cmp	r0, #0
 8006898:	d155      	bne.n	8006946 <__ieee754_pow+0x156>
 800689a:	f1c1 0114 	rsb	r1, r1, #20
 800689e:	fa46 fc01 	asr.w	ip, r6, r1
 80068a2:	fa0c f101 	lsl.w	r1, ip, r1
 80068a6:	42b1      	cmp	r1, r6
 80068a8:	f040 848c 	bne.w	80071c4 <__ieee754_pow+0x9d4>
 80068ac:	f00c 0c01 	and.w	ip, ip, #1
 80068b0:	f1cc 0102 	rsb	r1, ip, #2
 80068b4:	9100      	str	r1, [sp, #0]
 80068b6:	4959      	ldr	r1, [pc, #356]	; (8006a1c <__ieee754_pow+0x22c>)
 80068b8:	428e      	cmp	r6, r1
 80068ba:	d12d      	bne.n	8006918 <__ieee754_pow+0x128>
 80068bc:	2f00      	cmp	r7, #0
 80068be:	da79      	bge.n	80069b4 <__ieee754_pow+0x1c4>
 80068c0:	4956      	ldr	r1, [pc, #344]	; (8006a1c <__ieee754_pow+0x22c>)
 80068c2:	2000      	movs	r0, #0
 80068c4:	f7f9 ffc2 	bl	800084c <__aeabi_ddiv>
 80068c8:	e016      	b.n	80068f8 <__ieee754_pow+0x108>
 80068ca:	2100      	movs	r1, #0
 80068cc:	9100      	str	r1, [sp, #0]
 80068ce:	2800      	cmp	r0, #0
 80068d0:	d13b      	bne.n	800694a <__ieee754_pow+0x15a>
 80068d2:	494f      	ldr	r1, [pc, #316]	; (8006a10 <__ieee754_pow+0x220>)
 80068d4:	428e      	cmp	r6, r1
 80068d6:	d1ee      	bne.n	80068b6 <__ieee754_pow+0xc6>
 80068d8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80068dc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80068e0:	ea53 0308 	orrs.w	r3, r3, r8
 80068e4:	f000 8466 	beq.w	80071b4 <__ieee754_pow+0x9c4>
 80068e8:	4b4d      	ldr	r3, [pc, #308]	; (8006a20 <__ieee754_pow+0x230>)
 80068ea:	429c      	cmp	r4, r3
 80068ec:	dd0d      	ble.n	800690a <__ieee754_pow+0x11a>
 80068ee:	2f00      	cmp	r7, #0
 80068f0:	f280 8464 	bge.w	80071bc <__ieee754_pow+0x9cc>
 80068f4:	2000      	movs	r0, #0
 80068f6:	2100      	movs	r1, #0
 80068f8:	ec41 0b10 	vmov	d0, r0, r1
 80068fc:	b00d      	add	sp, #52	; 0x34
 80068fe:	ecbd 8b06 	vpop	{d8-d10}
 8006902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006906:	2102      	movs	r1, #2
 8006908:	e7e0      	b.n	80068cc <__ieee754_pow+0xdc>
 800690a:	2f00      	cmp	r7, #0
 800690c:	daf2      	bge.n	80068f4 <__ieee754_pow+0x104>
 800690e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8006912:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006916:	e7ef      	b.n	80068f8 <__ieee754_pow+0x108>
 8006918:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800691c:	d104      	bne.n	8006928 <__ieee754_pow+0x138>
 800691e:	4610      	mov	r0, r2
 8006920:	4619      	mov	r1, r3
 8006922:	f7f9 fe69 	bl	80005f8 <__aeabi_dmul>
 8006926:	e7e7      	b.n	80068f8 <__ieee754_pow+0x108>
 8006928:	493e      	ldr	r1, [pc, #248]	; (8006a24 <__ieee754_pow+0x234>)
 800692a:	428f      	cmp	r7, r1
 800692c:	d10d      	bne.n	800694a <__ieee754_pow+0x15a>
 800692e:	f1b9 0f00 	cmp.w	r9, #0
 8006932:	db0a      	blt.n	800694a <__ieee754_pow+0x15a>
 8006934:	ec43 2b10 	vmov	d0, r2, r3
 8006938:	b00d      	add	sp, #52	; 0x34
 800693a:	ecbd 8b06 	vpop	{d8-d10}
 800693e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006942:	f000 bc77 	b.w	8007234 <__ieee754_sqrt>
 8006946:	2100      	movs	r1, #0
 8006948:	9100      	str	r1, [sp, #0]
 800694a:	ec43 2b10 	vmov	d0, r2, r3
 800694e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006952:	f000 fd23 	bl	800739c <fabs>
 8006956:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800695a:	ec51 0b10 	vmov	r0, r1, d0
 800695e:	f1b8 0f00 	cmp.w	r8, #0
 8006962:	d12a      	bne.n	80069ba <__ieee754_pow+0x1ca>
 8006964:	b12c      	cbz	r4, 8006972 <__ieee754_pow+0x182>
 8006966:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8006a1c <__ieee754_pow+0x22c>
 800696a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800696e:	45e6      	cmp	lr, ip
 8006970:	d123      	bne.n	80069ba <__ieee754_pow+0x1ca>
 8006972:	2f00      	cmp	r7, #0
 8006974:	da05      	bge.n	8006982 <__ieee754_pow+0x192>
 8006976:	4602      	mov	r2, r0
 8006978:	460b      	mov	r3, r1
 800697a:	2000      	movs	r0, #0
 800697c:	4927      	ldr	r1, [pc, #156]	; (8006a1c <__ieee754_pow+0x22c>)
 800697e:	f7f9 ff65 	bl	800084c <__aeabi_ddiv>
 8006982:	f1b9 0f00 	cmp.w	r9, #0
 8006986:	dab7      	bge.n	80068f8 <__ieee754_pow+0x108>
 8006988:	9b00      	ldr	r3, [sp, #0]
 800698a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800698e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006992:	4323      	orrs	r3, r4
 8006994:	d108      	bne.n	80069a8 <__ieee754_pow+0x1b8>
 8006996:	4602      	mov	r2, r0
 8006998:	460b      	mov	r3, r1
 800699a:	4610      	mov	r0, r2
 800699c:	4619      	mov	r1, r3
 800699e:	f7f9 fc73 	bl	8000288 <__aeabi_dsub>
 80069a2:	4602      	mov	r2, r0
 80069a4:	460b      	mov	r3, r1
 80069a6:	e78d      	b.n	80068c4 <__ieee754_pow+0xd4>
 80069a8:	9b00      	ldr	r3, [sp, #0]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d1a4      	bne.n	80068f8 <__ieee754_pow+0x108>
 80069ae:	4602      	mov	r2, r0
 80069b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069b4:	4610      	mov	r0, r2
 80069b6:	4619      	mov	r1, r3
 80069b8:	e79e      	b.n	80068f8 <__ieee754_pow+0x108>
 80069ba:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80069be:	f10c 35ff 	add.w	r5, ip, #4294967295
 80069c2:	950a      	str	r5, [sp, #40]	; 0x28
 80069c4:	9d00      	ldr	r5, [sp, #0]
 80069c6:	46ac      	mov	ip, r5
 80069c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80069ca:	ea5c 0505 	orrs.w	r5, ip, r5
 80069ce:	d0e4      	beq.n	800699a <__ieee754_pow+0x1aa>
 80069d0:	4b15      	ldr	r3, [pc, #84]	; (8006a28 <__ieee754_pow+0x238>)
 80069d2:	429e      	cmp	r6, r3
 80069d4:	f340 80fc 	ble.w	8006bd0 <__ieee754_pow+0x3e0>
 80069d8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80069dc:	429e      	cmp	r6, r3
 80069de:	4b10      	ldr	r3, [pc, #64]	; (8006a20 <__ieee754_pow+0x230>)
 80069e0:	dd07      	ble.n	80069f2 <__ieee754_pow+0x202>
 80069e2:	429c      	cmp	r4, r3
 80069e4:	dc0a      	bgt.n	80069fc <__ieee754_pow+0x20c>
 80069e6:	2f00      	cmp	r7, #0
 80069e8:	da84      	bge.n	80068f4 <__ieee754_pow+0x104>
 80069ea:	a307      	add	r3, pc, #28	; (adr r3, 8006a08 <__ieee754_pow+0x218>)
 80069ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f0:	e795      	b.n	800691e <__ieee754_pow+0x12e>
 80069f2:	429c      	cmp	r4, r3
 80069f4:	dbf7      	blt.n	80069e6 <__ieee754_pow+0x1f6>
 80069f6:	4b09      	ldr	r3, [pc, #36]	; (8006a1c <__ieee754_pow+0x22c>)
 80069f8:	429c      	cmp	r4, r3
 80069fa:	dd17      	ble.n	8006a2c <__ieee754_pow+0x23c>
 80069fc:	2f00      	cmp	r7, #0
 80069fe:	dcf4      	bgt.n	80069ea <__ieee754_pow+0x1fa>
 8006a00:	e778      	b.n	80068f4 <__ieee754_pow+0x104>
 8006a02:	bf00      	nop
 8006a04:	f3af 8000 	nop.w
 8006a08:	8800759c 	.word	0x8800759c
 8006a0c:	7e37e43c 	.word	0x7e37e43c
 8006a10:	7ff00000 	.word	0x7ff00000
 8006a14:	080078f8 	.word	0x080078f8
 8006a18:	433fffff 	.word	0x433fffff
 8006a1c:	3ff00000 	.word	0x3ff00000
 8006a20:	3fefffff 	.word	0x3fefffff
 8006a24:	3fe00000 	.word	0x3fe00000
 8006a28:	41e00000 	.word	0x41e00000
 8006a2c:	4b64      	ldr	r3, [pc, #400]	; (8006bc0 <__ieee754_pow+0x3d0>)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f7f9 fc2a 	bl	8000288 <__aeabi_dsub>
 8006a34:	a356      	add	r3, pc, #344	; (adr r3, 8006b90 <__ieee754_pow+0x3a0>)
 8006a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	460d      	mov	r5, r1
 8006a3e:	f7f9 fddb 	bl	80005f8 <__aeabi_dmul>
 8006a42:	a355      	add	r3, pc, #340	; (adr r3, 8006b98 <__ieee754_pow+0x3a8>)
 8006a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a48:	4606      	mov	r6, r0
 8006a4a:	460f      	mov	r7, r1
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	4629      	mov	r1, r5
 8006a50:	f7f9 fdd2 	bl	80005f8 <__aeabi_dmul>
 8006a54:	4b5b      	ldr	r3, [pc, #364]	; (8006bc4 <__ieee754_pow+0x3d4>)
 8006a56:	4682      	mov	sl, r0
 8006a58:	468b      	mov	fp, r1
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	4629      	mov	r1, r5
 8006a60:	f7f9 fdca 	bl	80005f8 <__aeabi_dmul>
 8006a64:	4602      	mov	r2, r0
 8006a66:	460b      	mov	r3, r1
 8006a68:	a14d      	add	r1, pc, #308	; (adr r1, 8006ba0 <__ieee754_pow+0x3b0>)
 8006a6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a6e:	f7f9 fc0b 	bl	8000288 <__aeabi_dsub>
 8006a72:	4622      	mov	r2, r4
 8006a74:	462b      	mov	r3, r5
 8006a76:	f7f9 fdbf 	bl	80005f8 <__aeabi_dmul>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	2000      	movs	r0, #0
 8006a80:	4951      	ldr	r1, [pc, #324]	; (8006bc8 <__ieee754_pow+0x3d8>)
 8006a82:	f7f9 fc01 	bl	8000288 <__aeabi_dsub>
 8006a86:	4622      	mov	r2, r4
 8006a88:	4680      	mov	r8, r0
 8006a8a:	4689      	mov	r9, r1
 8006a8c:	462b      	mov	r3, r5
 8006a8e:	4620      	mov	r0, r4
 8006a90:	4629      	mov	r1, r5
 8006a92:	f7f9 fdb1 	bl	80005f8 <__aeabi_dmul>
 8006a96:	4602      	mov	r2, r0
 8006a98:	460b      	mov	r3, r1
 8006a9a:	4640      	mov	r0, r8
 8006a9c:	4649      	mov	r1, r9
 8006a9e:	f7f9 fdab 	bl	80005f8 <__aeabi_dmul>
 8006aa2:	a341      	add	r3, pc, #260	; (adr r3, 8006ba8 <__ieee754_pow+0x3b8>)
 8006aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa8:	f7f9 fda6 	bl	80005f8 <__aeabi_dmul>
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	4650      	mov	r0, sl
 8006ab2:	4659      	mov	r1, fp
 8006ab4:	f7f9 fbe8 	bl	8000288 <__aeabi_dsub>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	460b      	mov	r3, r1
 8006abc:	4680      	mov	r8, r0
 8006abe:	4689      	mov	r9, r1
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	4639      	mov	r1, r7
 8006ac4:	f7f9 fbe2 	bl	800028c <__adddf3>
 8006ac8:	2400      	movs	r4, #0
 8006aca:	4632      	mov	r2, r6
 8006acc:	463b      	mov	r3, r7
 8006ace:	4620      	mov	r0, r4
 8006ad0:	460d      	mov	r5, r1
 8006ad2:	f7f9 fbd9 	bl	8000288 <__aeabi_dsub>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	460b      	mov	r3, r1
 8006ada:	4640      	mov	r0, r8
 8006adc:	4649      	mov	r1, r9
 8006ade:	f7f9 fbd3 	bl	8000288 <__aeabi_dsub>
 8006ae2:	9b00      	ldr	r3, [sp, #0]
 8006ae4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	4682      	mov	sl, r0
 8006aec:	468b      	mov	fp, r1
 8006aee:	f040 81f1 	bne.w	8006ed4 <__ieee754_pow+0x6e4>
 8006af2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8006bb0 <__ieee754_pow+0x3c0>
 8006af6:	eeb0 8a47 	vmov.f32	s16, s14
 8006afa:	eef0 8a67 	vmov.f32	s17, s15
 8006afe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006b02:	2600      	movs	r6, #0
 8006b04:	4632      	mov	r2, r6
 8006b06:	463b      	mov	r3, r7
 8006b08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b0c:	f7f9 fbbc 	bl	8000288 <__aeabi_dsub>
 8006b10:	4622      	mov	r2, r4
 8006b12:	462b      	mov	r3, r5
 8006b14:	f7f9 fd70 	bl	80005f8 <__aeabi_dmul>
 8006b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b1c:	4680      	mov	r8, r0
 8006b1e:	4689      	mov	r9, r1
 8006b20:	4650      	mov	r0, sl
 8006b22:	4659      	mov	r1, fp
 8006b24:	f7f9 fd68 	bl	80005f8 <__aeabi_dmul>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	4640      	mov	r0, r8
 8006b2e:	4649      	mov	r1, r9
 8006b30:	f7f9 fbac 	bl	800028c <__adddf3>
 8006b34:	4632      	mov	r2, r6
 8006b36:	463b      	mov	r3, r7
 8006b38:	4680      	mov	r8, r0
 8006b3a:	4689      	mov	r9, r1
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	4629      	mov	r1, r5
 8006b40:	f7f9 fd5a 	bl	80005f8 <__aeabi_dmul>
 8006b44:	460b      	mov	r3, r1
 8006b46:	4604      	mov	r4, r0
 8006b48:	460d      	mov	r5, r1
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	4649      	mov	r1, r9
 8006b4e:	4640      	mov	r0, r8
 8006b50:	f7f9 fb9c 	bl	800028c <__adddf3>
 8006b54:	4b1d      	ldr	r3, [pc, #116]	; (8006bcc <__ieee754_pow+0x3dc>)
 8006b56:	4299      	cmp	r1, r3
 8006b58:	ec45 4b19 	vmov	d9, r4, r5
 8006b5c:	4606      	mov	r6, r0
 8006b5e:	460f      	mov	r7, r1
 8006b60:	468b      	mov	fp, r1
 8006b62:	f340 82fe 	ble.w	8007162 <__ieee754_pow+0x972>
 8006b66:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006b6a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006b6e:	4303      	orrs	r3, r0
 8006b70:	f000 81f0 	beq.w	8006f54 <__ieee754_pow+0x764>
 8006b74:	a310      	add	r3, pc, #64	; (adr r3, 8006bb8 <__ieee754_pow+0x3c8>)
 8006b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7a:	ec51 0b18 	vmov	r0, r1, d8
 8006b7e:	f7f9 fd3b 	bl	80005f8 <__aeabi_dmul>
 8006b82:	a30d      	add	r3, pc, #52	; (adr r3, 8006bb8 <__ieee754_pow+0x3c8>)
 8006b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b88:	e6cb      	b.n	8006922 <__ieee754_pow+0x132>
 8006b8a:	bf00      	nop
 8006b8c:	f3af 8000 	nop.w
 8006b90:	60000000 	.word	0x60000000
 8006b94:	3ff71547 	.word	0x3ff71547
 8006b98:	f85ddf44 	.word	0xf85ddf44
 8006b9c:	3e54ae0b 	.word	0x3e54ae0b
 8006ba0:	55555555 	.word	0x55555555
 8006ba4:	3fd55555 	.word	0x3fd55555
 8006ba8:	652b82fe 	.word	0x652b82fe
 8006bac:	3ff71547 	.word	0x3ff71547
 8006bb0:	00000000 	.word	0x00000000
 8006bb4:	bff00000 	.word	0xbff00000
 8006bb8:	8800759c 	.word	0x8800759c
 8006bbc:	7e37e43c 	.word	0x7e37e43c
 8006bc0:	3ff00000 	.word	0x3ff00000
 8006bc4:	3fd00000 	.word	0x3fd00000
 8006bc8:	3fe00000 	.word	0x3fe00000
 8006bcc:	408fffff 	.word	0x408fffff
 8006bd0:	4bd7      	ldr	r3, [pc, #860]	; (8006f30 <__ieee754_pow+0x740>)
 8006bd2:	ea03 0309 	and.w	r3, r3, r9
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	b92b      	cbnz	r3, 8006be6 <__ieee754_pow+0x3f6>
 8006bda:	4bd6      	ldr	r3, [pc, #856]	; (8006f34 <__ieee754_pow+0x744>)
 8006bdc:	f7f9 fd0c 	bl	80005f8 <__aeabi_dmul>
 8006be0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006be4:	460c      	mov	r4, r1
 8006be6:	1523      	asrs	r3, r4, #20
 8006be8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006bec:	4413      	add	r3, r2
 8006bee:	9309      	str	r3, [sp, #36]	; 0x24
 8006bf0:	4bd1      	ldr	r3, [pc, #836]	; (8006f38 <__ieee754_pow+0x748>)
 8006bf2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006bf6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006bfa:	429c      	cmp	r4, r3
 8006bfc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006c00:	dd08      	ble.n	8006c14 <__ieee754_pow+0x424>
 8006c02:	4bce      	ldr	r3, [pc, #824]	; (8006f3c <__ieee754_pow+0x74c>)
 8006c04:	429c      	cmp	r4, r3
 8006c06:	f340 8163 	ble.w	8006ed0 <__ieee754_pow+0x6e0>
 8006c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c10:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006c14:	2400      	movs	r4, #0
 8006c16:	00e3      	lsls	r3, r4, #3
 8006c18:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c1a:	4bc9      	ldr	r3, [pc, #804]	; (8006f40 <__ieee754_pow+0x750>)
 8006c1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c20:	ed93 7b00 	vldr	d7, [r3]
 8006c24:	4629      	mov	r1, r5
 8006c26:	ec53 2b17 	vmov	r2, r3, d7
 8006c2a:	eeb0 8a47 	vmov.f32	s16, s14
 8006c2e:	eef0 8a67 	vmov.f32	s17, s15
 8006c32:	4682      	mov	sl, r0
 8006c34:	f7f9 fb28 	bl	8000288 <__aeabi_dsub>
 8006c38:	4652      	mov	r2, sl
 8006c3a:	4606      	mov	r6, r0
 8006c3c:	460f      	mov	r7, r1
 8006c3e:	462b      	mov	r3, r5
 8006c40:	ec51 0b18 	vmov	r0, r1, d8
 8006c44:	f7f9 fb22 	bl	800028c <__adddf3>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	49bd      	ldr	r1, [pc, #756]	; (8006f44 <__ieee754_pow+0x754>)
 8006c50:	f7f9 fdfc 	bl	800084c <__aeabi_ddiv>
 8006c54:	ec41 0b19 	vmov	d9, r0, r1
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	4639      	mov	r1, r7
 8006c60:	f7f9 fcca 	bl	80005f8 <__aeabi_dmul>
 8006c64:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006c68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c6c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c70:	2300      	movs	r3, #0
 8006c72:	9304      	str	r3, [sp, #16]
 8006c74:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006c78:	46ab      	mov	fp, r5
 8006c7a:	106d      	asrs	r5, r5, #1
 8006c7c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006c80:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006c84:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006c88:	2200      	movs	r2, #0
 8006c8a:	4640      	mov	r0, r8
 8006c8c:	4649      	mov	r1, r9
 8006c8e:	4614      	mov	r4, r2
 8006c90:	461d      	mov	r5, r3
 8006c92:	f7f9 fcb1 	bl	80005f8 <__aeabi_dmul>
 8006c96:	4602      	mov	r2, r0
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	4639      	mov	r1, r7
 8006c9e:	f7f9 faf3 	bl	8000288 <__aeabi_dsub>
 8006ca2:	ec53 2b18 	vmov	r2, r3, d8
 8006ca6:	4606      	mov	r6, r0
 8006ca8:	460f      	mov	r7, r1
 8006caa:	4620      	mov	r0, r4
 8006cac:	4629      	mov	r1, r5
 8006cae:	f7f9 faeb 	bl	8000288 <__aeabi_dsub>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4650      	mov	r0, sl
 8006cb8:	4659      	mov	r1, fp
 8006cba:	f7f9 fae5 	bl	8000288 <__aeabi_dsub>
 8006cbe:	4642      	mov	r2, r8
 8006cc0:	464b      	mov	r3, r9
 8006cc2:	f7f9 fc99 	bl	80005f8 <__aeabi_dmul>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	460b      	mov	r3, r1
 8006cca:	4630      	mov	r0, r6
 8006ccc:	4639      	mov	r1, r7
 8006cce:	f7f9 fadb 	bl	8000288 <__aeabi_dsub>
 8006cd2:	ec53 2b19 	vmov	r2, r3, d9
 8006cd6:	f7f9 fc8f 	bl	80005f8 <__aeabi_dmul>
 8006cda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cde:	ec41 0b18 	vmov	d8, r0, r1
 8006ce2:	4610      	mov	r0, r2
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	f7f9 fc87 	bl	80005f8 <__aeabi_dmul>
 8006cea:	a37d      	add	r3, pc, #500	; (adr r3, 8006ee0 <__ieee754_pow+0x6f0>)
 8006cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf0:	4604      	mov	r4, r0
 8006cf2:	460d      	mov	r5, r1
 8006cf4:	f7f9 fc80 	bl	80005f8 <__aeabi_dmul>
 8006cf8:	a37b      	add	r3, pc, #492	; (adr r3, 8006ee8 <__ieee754_pow+0x6f8>)
 8006cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfe:	f7f9 fac5 	bl	800028c <__adddf3>
 8006d02:	4622      	mov	r2, r4
 8006d04:	462b      	mov	r3, r5
 8006d06:	f7f9 fc77 	bl	80005f8 <__aeabi_dmul>
 8006d0a:	a379      	add	r3, pc, #484	; (adr r3, 8006ef0 <__ieee754_pow+0x700>)
 8006d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d10:	f7f9 fabc 	bl	800028c <__adddf3>
 8006d14:	4622      	mov	r2, r4
 8006d16:	462b      	mov	r3, r5
 8006d18:	f7f9 fc6e 	bl	80005f8 <__aeabi_dmul>
 8006d1c:	a376      	add	r3, pc, #472	; (adr r3, 8006ef8 <__ieee754_pow+0x708>)
 8006d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d22:	f7f9 fab3 	bl	800028c <__adddf3>
 8006d26:	4622      	mov	r2, r4
 8006d28:	462b      	mov	r3, r5
 8006d2a:	f7f9 fc65 	bl	80005f8 <__aeabi_dmul>
 8006d2e:	a374      	add	r3, pc, #464	; (adr r3, 8006f00 <__ieee754_pow+0x710>)
 8006d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d34:	f7f9 faaa 	bl	800028c <__adddf3>
 8006d38:	4622      	mov	r2, r4
 8006d3a:	462b      	mov	r3, r5
 8006d3c:	f7f9 fc5c 	bl	80005f8 <__aeabi_dmul>
 8006d40:	a371      	add	r3, pc, #452	; (adr r3, 8006f08 <__ieee754_pow+0x718>)
 8006d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d46:	f7f9 faa1 	bl	800028c <__adddf3>
 8006d4a:	4622      	mov	r2, r4
 8006d4c:	4606      	mov	r6, r0
 8006d4e:	460f      	mov	r7, r1
 8006d50:	462b      	mov	r3, r5
 8006d52:	4620      	mov	r0, r4
 8006d54:	4629      	mov	r1, r5
 8006d56:	f7f9 fc4f 	bl	80005f8 <__aeabi_dmul>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	4630      	mov	r0, r6
 8006d60:	4639      	mov	r1, r7
 8006d62:	f7f9 fc49 	bl	80005f8 <__aeabi_dmul>
 8006d66:	4642      	mov	r2, r8
 8006d68:	4604      	mov	r4, r0
 8006d6a:	460d      	mov	r5, r1
 8006d6c:	464b      	mov	r3, r9
 8006d6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d72:	f7f9 fa8b 	bl	800028c <__adddf3>
 8006d76:	ec53 2b18 	vmov	r2, r3, d8
 8006d7a:	f7f9 fc3d 	bl	80005f8 <__aeabi_dmul>
 8006d7e:	4622      	mov	r2, r4
 8006d80:	462b      	mov	r3, r5
 8006d82:	f7f9 fa83 	bl	800028c <__adddf3>
 8006d86:	4642      	mov	r2, r8
 8006d88:	4682      	mov	sl, r0
 8006d8a:	468b      	mov	fp, r1
 8006d8c:	464b      	mov	r3, r9
 8006d8e:	4640      	mov	r0, r8
 8006d90:	4649      	mov	r1, r9
 8006d92:	f7f9 fc31 	bl	80005f8 <__aeabi_dmul>
 8006d96:	4b6c      	ldr	r3, [pc, #432]	; (8006f48 <__ieee754_pow+0x758>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	4606      	mov	r6, r0
 8006d9c:	460f      	mov	r7, r1
 8006d9e:	f7f9 fa75 	bl	800028c <__adddf3>
 8006da2:	4652      	mov	r2, sl
 8006da4:	465b      	mov	r3, fp
 8006da6:	f7f9 fa71 	bl	800028c <__adddf3>
 8006daa:	9c04      	ldr	r4, [sp, #16]
 8006dac:	460d      	mov	r5, r1
 8006dae:	4622      	mov	r2, r4
 8006db0:	460b      	mov	r3, r1
 8006db2:	4640      	mov	r0, r8
 8006db4:	4649      	mov	r1, r9
 8006db6:	f7f9 fc1f 	bl	80005f8 <__aeabi_dmul>
 8006dba:	4b63      	ldr	r3, [pc, #396]	; (8006f48 <__ieee754_pow+0x758>)
 8006dbc:	4680      	mov	r8, r0
 8006dbe:	4689      	mov	r9, r1
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	4629      	mov	r1, r5
 8006dc6:	f7f9 fa5f 	bl	8000288 <__aeabi_dsub>
 8006dca:	4632      	mov	r2, r6
 8006dcc:	463b      	mov	r3, r7
 8006dce:	f7f9 fa5b 	bl	8000288 <__aeabi_dsub>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	4650      	mov	r0, sl
 8006dd8:	4659      	mov	r1, fp
 8006dda:	f7f9 fa55 	bl	8000288 <__aeabi_dsub>
 8006dde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006de2:	f7f9 fc09 	bl	80005f8 <__aeabi_dmul>
 8006de6:	4622      	mov	r2, r4
 8006de8:	4606      	mov	r6, r0
 8006dea:	460f      	mov	r7, r1
 8006dec:	462b      	mov	r3, r5
 8006dee:	ec51 0b18 	vmov	r0, r1, d8
 8006df2:	f7f9 fc01 	bl	80005f8 <__aeabi_dmul>
 8006df6:	4602      	mov	r2, r0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	4630      	mov	r0, r6
 8006dfc:	4639      	mov	r1, r7
 8006dfe:	f7f9 fa45 	bl	800028c <__adddf3>
 8006e02:	4606      	mov	r6, r0
 8006e04:	460f      	mov	r7, r1
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	4640      	mov	r0, r8
 8006e0c:	4649      	mov	r1, r9
 8006e0e:	f7f9 fa3d 	bl	800028c <__adddf3>
 8006e12:	9c04      	ldr	r4, [sp, #16]
 8006e14:	a33e      	add	r3, pc, #248	; (adr r3, 8006f10 <__ieee754_pow+0x720>)
 8006e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	460d      	mov	r5, r1
 8006e1e:	f7f9 fbeb 	bl	80005f8 <__aeabi_dmul>
 8006e22:	4642      	mov	r2, r8
 8006e24:	ec41 0b18 	vmov	d8, r0, r1
 8006e28:	464b      	mov	r3, r9
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	f7f9 fa2b 	bl	8000288 <__aeabi_dsub>
 8006e32:	4602      	mov	r2, r0
 8006e34:	460b      	mov	r3, r1
 8006e36:	4630      	mov	r0, r6
 8006e38:	4639      	mov	r1, r7
 8006e3a:	f7f9 fa25 	bl	8000288 <__aeabi_dsub>
 8006e3e:	a336      	add	r3, pc, #216	; (adr r3, 8006f18 <__ieee754_pow+0x728>)
 8006e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e44:	f7f9 fbd8 	bl	80005f8 <__aeabi_dmul>
 8006e48:	a335      	add	r3, pc, #212	; (adr r3, 8006f20 <__ieee754_pow+0x730>)
 8006e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4e:	4606      	mov	r6, r0
 8006e50:	460f      	mov	r7, r1
 8006e52:	4620      	mov	r0, r4
 8006e54:	4629      	mov	r1, r5
 8006e56:	f7f9 fbcf 	bl	80005f8 <__aeabi_dmul>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	4630      	mov	r0, r6
 8006e60:	4639      	mov	r1, r7
 8006e62:	f7f9 fa13 	bl	800028c <__adddf3>
 8006e66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e68:	4b38      	ldr	r3, [pc, #224]	; (8006f4c <__ieee754_pow+0x75c>)
 8006e6a:	4413      	add	r3, r2
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	f7f9 fa0c 	bl	800028c <__adddf3>
 8006e74:	4682      	mov	sl, r0
 8006e76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e78:	468b      	mov	fp, r1
 8006e7a:	f7f9 fb53 	bl	8000524 <__aeabi_i2d>
 8006e7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e80:	4b33      	ldr	r3, [pc, #204]	; (8006f50 <__ieee754_pow+0x760>)
 8006e82:	4413      	add	r3, r2
 8006e84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e88:	4606      	mov	r6, r0
 8006e8a:	460f      	mov	r7, r1
 8006e8c:	4652      	mov	r2, sl
 8006e8e:	465b      	mov	r3, fp
 8006e90:	ec51 0b18 	vmov	r0, r1, d8
 8006e94:	f7f9 f9fa 	bl	800028c <__adddf3>
 8006e98:	4642      	mov	r2, r8
 8006e9a:	464b      	mov	r3, r9
 8006e9c:	f7f9 f9f6 	bl	800028c <__adddf3>
 8006ea0:	4632      	mov	r2, r6
 8006ea2:	463b      	mov	r3, r7
 8006ea4:	f7f9 f9f2 	bl	800028c <__adddf3>
 8006ea8:	9c04      	ldr	r4, [sp, #16]
 8006eaa:	4632      	mov	r2, r6
 8006eac:	463b      	mov	r3, r7
 8006eae:	4620      	mov	r0, r4
 8006eb0:	460d      	mov	r5, r1
 8006eb2:	f7f9 f9e9 	bl	8000288 <__aeabi_dsub>
 8006eb6:	4642      	mov	r2, r8
 8006eb8:	464b      	mov	r3, r9
 8006eba:	f7f9 f9e5 	bl	8000288 <__aeabi_dsub>
 8006ebe:	ec53 2b18 	vmov	r2, r3, d8
 8006ec2:	f7f9 f9e1 	bl	8000288 <__aeabi_dsub>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	460b      	mov	r3, r1
 8006eca:	4650      	mov	r0, sl
 8006ecc:	4659      	mov	r1, fp
 8006ece:	e606      	b.n	8006ade <__ieee754_pow+0x2ee>
 8006ed0:	2401      	movs	r4, #1
 8006ed2:	e6a0      	b.n	8006c16 <__ieee754_pow+0x426>
 8006ed4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8006f28 <__ieee754_pow+0x738>
 8006ed8:	e60d      	b.n	8006af6 <__ieee754_pow+0x306>
 8006eda:	bf00      	nop
 8006edc:	f3af 8000 	nop.w
 8006ee0:	4a454eef 	.word	0x4a454eef
 8006ee4:	3fca7e28 	.word	0x3fca7e28
 8006ee8:	93c9db65 	.word	0x93c9db65
 8006eec:	3fcd864a 	.word	0x3fcd864a
 8006ef0:	a91d4101 	.word	0xa91d4101
 8006ef4:	3fd17460 	.word	0x3fd17460
 8006ef8:	518f264d 	.word	0x518f264d
 8006efc:	3fd55555 	.word	0x3fd55555
 8006f00:	db6fabff 	.word	0xdb6fabff
 8006f04:	3fdb6db6 	.word	0x3fdb6db6
 8006f08:	33333303 	.word	0x33333303
 8006f0c:	3fe33333 	.word	0x3fe33333
 8006f10:	e0000000 	.word	0xe0000000
 8006f14:	3feec709 	.word	0x3feec709
 8006f18:	dc3a03fd 	.word	0xdc3a03fd
 8006f1c:	3feec709 	.word	0x3feec709
 8006f20:	145b01f5 	.word	0x145b01f5
 8006f24:	be3e2fe0 	.word	0xbe3e2fe0
 8006f28:	00000000 	.word	0x00000000
 8006f2c:	3ff00000 	.word	0x3ff00000
 8006f30:	7ff00000 	.word	0x7ff00000
 8006f34:	43400000 	.word	0x43400000
 8006f38:	0003988e 	.word	0x0003988e
 8006f3c:	000bb679 	.word	0x000bb679
 8006f40:	08007a68 	.word	0x08007a68
 8006f44:	3ff00000 	.word	0x3ff00000
 8006f48:	40080000 	.word	0x40080000
 8006f4c:	08007a88 	.word	0x08007a88
 8006f50:	08007a78 	.word	0x08007a78
 8006f54:	a3b5      	add	r3, pc, #724	; (adr r3, 800722c <__ieee754_pow+0xa3c>)
 8006f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5a:	4640      	mov	r0, r8
 8006f5c:	4649      	mov	r1, r9
 8006f5e:	f7f9 f995 	bl	800028c <__adddf3>
 8006f62:	4622      	mov	r2, r4
 8006f64:	ec41 0b1a 	vmov	d10, r0, r1
 8006f68:	462b      	mov	r3, r5
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	4639      	mov	r1, r7
 8006f6e:	f7f9 f98b 	bl	8000288 <__aeabi_dsub>
 8006f72:	4602      	mov	r2, r0
 8006f74:	460b      	mov	r3, r1
 8006f76:	ec51 0b1a 	vmov	r0, r1, d10
 8006f7a:	f7f9 fdcd 	bl	8000b18 <__aeabi_dcmpgt>
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	f47f adf8 	bne.w	8006b74 <__ieee754_pow+0x384>
 8006f84:	4aa4      	ldr	r2, [pc, #656]	; (8007218 <__ieee754_pow+0xa28>)
 8006f86:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	f340 810b 	ble.w	80071a6 <__ieee754_pow+0x9b6>
 8006f90:	151b      	asrs	r3, r3, #20
 8006f92:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006f96:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006f9a:	fa4a f303 	asr.w	r3, sl, r3
 8006f9e:	445b      	add	r3, fp
 8006fa0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006fa4:	4e9d      	ldr	r6, [pc, #628]	; (800721c <__ieee754_pow+0xa2c>)
 8006fa6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006faa:	4116      	asrs	r6, r2
 8006fac:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	ea23 0106 	bic.w	r1, r3, r6
 8006fb6:	f1c2 0214 	rsb	r2, r2, #20
 8006fba:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006fbe:	fa4a fa02 	asr.w	sl, sl, r2
 8006fc2:	f1bb 0f00 	cmp.w	fp, #0
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	460b      	mov	r3, r1
 8006fca:	4620      	mov	r0, r4
 8006fcc:	4629      	mov	r1, r5
 8006fce:	bfb8      	it	lt
 8006fd0:	f1ca 0a00 	rsblt	sl, sl, #0
 8006fd4:	f7f9 f958 	bl	8000288 <__aeabi_dsub>
 8006fd8:	ec41 0b19 	vmov	d9, r0, r1
 8006fdc:	4642      	mov	r2, r8
 8006fde:	464b      	mov	r3, r9
 8006fe0:	ec51 0b19 	vmov	r0, r1, d9
 8006fe4:	f7f9 f952 	bl	800028c <__adddf3>
 8006fe8:	2400      	movs	r4, #0
 8006fea:	a379      	add	r3, pc, #484	; (adr r3, 80071d0 <__ieee754_pow+0x9e0>)
 8006fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	460d      	mov	r5, r1
 8006ff4:	f7f9 fb00 	bl	80005f8 <__aeabi_dmul>
 8006ff8:	ec53 2b19 	vmov	r2, r3, d9
 8006ffc:	4606      	mov	r6, r0
 8006ffe:	460f      	mov	r7, r1
 8007000:	4620      	mov	r0, r4
 8007002:	4629      	mov	r1, r5
 8007004:	f7f9 f940 	bl	8000288 <__aeabi_dsub>
 8007008:	4602      	mov	r2, r0
 800700a:	460b      	mov	r3, r1
 800700c:	4640      	mov	r0, r8
 800700e:	4649      	mov	r1, r9
 8007010:	f7f9 f93a 	bl	8000288 <__aeabi_dsub>
 8007014:	a370      	add	r3, pc, #448	; (adr r3, 80071d8 <__ieee754_pow+0x9e8>)
 8007016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701a:	f7f9 faed 	bl	80005f8 <__aeabi_dmul>
 800701e:	a370      	add	r3, pc, #448	; (adr r3, 80071e0 <__ieee754_pow+0x9f0>)
 8007020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007024:	4680      	mov	r8, r0
 8007026:	4689      	mov	r9, r1
 8007028:	4620      	mov	r0, r4
 800702a:	4629      	mov	r1, r5
 800702c:	f7f9 fae4 	bl	80005f8 <__aeabi_dmul>
 8007030:	4602      	mov	r2, r0
 8007032:	460b      	mov	r3, r1
 8007034:	4640      	mov	r0, r8
 8007036:	4649      	mov	r1, r9
 8007038:	f7f9 f928 	bl	800028c <__adddf3>
 800703c:	4604      	mov	r4, r0
 800703e:	460d      	mov	r5, r1
 8007040:	4602      	mov	r2, r0
 8007042:	460b      	mov	r3, r1
 8007044:	4630      	mov	r0, r6
 8007046:	4639      	mov	r1, r7
 8007048:	f7f9 f920 	bl	800028c <__adddf3>
 800704c:	4632      	mov	r2, r6
 800704e:	463b      	mov	r3, r7
 8007050:	4680      	mov	r8, r0
 8007052:	4689      	mov	r9, r1
 8007054:	f7f9 f918 	bl	8000288 <__aeabi_dsub>
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	4620      	mov	r0, r4
 800705e:	4629      	mov	r1, r5
 8007060:	f7f9 f912 	bl	8000288 <__aeabi_dsub>
 8007064:	4642      	mov	r2, r8
 8007066:	4606      	mov	r6, r0
 8007068:	460f      	mov	r7, r1
 800706a:	464b      	mov	r3, r9
 800706c:	4640      	mov	r0, r8
 800706e:	4649      	mov	r1, r9
 8007070:	f7f9 fac2 	bl	80005f8 <__aeabi_dmul>
 8007074:	a35c      	add	r3, pc, #368	; (adr r3, 80071e8 <__ieee754_pow+0x9f8>)
 8007076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707a:	4604      	mov	r4, r0
 800707c:	460d      	mov	r5, r1
 800707e:	f7f9 fabb 	bl	80005f8 <__aeabi_dmul>
 8007082:	a35b      	add	r3, pc, #364	; (adr r3, 80071f0 <__ieee754_pow+0xa00>)
 8007084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007088:	f7f9 f8fe 	bl	8000288 <__aeabi_dsub>
 800708c:	4622      	mov	r2, r4
 800708e:	462b      	mov	r3, r5
 8007090:	f7f9 fab2 	bl	80005f8 <__aeabi_dmul>
 8007094:	a358      	add	r3, pc, #352	; (adr r3, 80071f8 <__ieee754_pow+0xa08>)
 8007096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709a:	f7f9 f8f7 	bl	800028c <__adddf3>
 800709e:	4622      	mov	r2, r4
 80070a0:	462b      	mov	r3, r5
 80070a2:	f7f9 faa9 	bl	80005f8 <__aeabi_dmul>
 80070a6:	a356      	add	r3, pc, #344	; (adr r3, 8007200 <__ieee754_pow+0xa10>)
 80070a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ac:	f7f9 f8ec 	bl	8000288 <__aeabi_dsub>
 80070b0:	4622      	mov	r2, r4
 80070b2:	462b      	mov	r3, r5
 80070b4:	f7f9 faa0 	bl	80005f8 <__aeabi_dmul>
 80070b8:	a353      	add	r3, pc, #332	; (adr r3, 8007208 <__ieee754_pow+0xa18>)
 80070ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070be:	f7f9 f8e5 	bl	800028c <__adddf3>
 80070c2:	4622      	mov	r2, r4
 80070c4:	462b      	mov	r3, r5
 80070c6:	f7f9 fa97 	bl	80005f8 <__aeabi_dmul>
 80070ca:	4602      	mov	r2, r0
 80070cc:	460b      	mov	r3, r1
 80070ce:	4640      	mov	r0, r8
 80070d0:	4649      	mov	r1, r9
 80070d2:	f7f9 f8d9 	bl	8000288 <__aeabi_dsub>
 80070d6:	4604      	mov	r4, r0
 80070d8:	460d      	mov	r5, r1
 80070da:	4602      	mov	r2, r0
 80070dc:	460b      	mov	r3, r1
 80070de:	4640      	mov	r0, r8
 80070e0:	4649      	mov	r1, r9
 80070e2:	f7f9 fa89 	bl	80005f8 <__aeabi_dmul>
 80070e6:	2200      	movs	r2, #0
 80070e8:	ec41 0b19 	vmov	d9, r0, r1
 80070ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80070f0:	4620      	mov	r0, r4
 80070f2:	4629      	mov	r1, r5
 80070f4:	f7f9 f8c8 	bl	8000288 <__aeabi_dsub>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	ec51 0b19 	vmov	r0, r1, d9
 8007100:	f7f9 fba4 	bl	800084c <__aeabi_ddiv>
 8007104:	4632      	mov	r2, r6
 8007106:	4604      	mov	r4, r0
 8007108:	460d      	mov	r5, r1
 800710a:	463b      	mov	r3, r7
 800710c:	4640      	mov	r0, r8
 800710e:	4649      	mov	r1, r9
 8007110:	f7f9 fa72 	bl	80005f8 <__aeabi_dmul>
 8007114:	4632      	mov	r2, r6
 8007116:	463b      	mov	r3, r7
 8007118:	f7f9 f8b8 	bl	800028c <__adddf3>
 800711c:	4602      	mov	r2, r0
 800711e:	460b      	mov	r3, r1
 8007120:	4620      	mov	r0, r4
 8007122:	4629      	mov	r1, r5
 8007124:	f7f9 f8b0 	bl	8000288 <__aeabi_dsub>
 8007128:	4642      	mov	r2, r8
 800712a:	464b      	mov	r3, r9
 800712c:	f7f9 f8ac 	bl	8000288 <__aeabi_dsub>
 8007130:	460b      	mov	r3, r1
 8007132:	4602      	mov	r2, r0
 8007134:	493a      	ldr	r1, [pc, #232]	; (8007220 <__ieee754_pow+0xa30>)
 8007136:	2000      	movs	r0, #0
 8007138:	f7f9 f8a6 	bl	8000288 <__aeabi_dsub>
 800713c:	e9cd 0100 	strd	r0, r1, [sp]
 8007140:	9b01      	ldr	r3, [sp, #4]
 8007142:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800714a:	da2f      	bge.n	80071ac <__ieee754_pow+0x9bc>
 800714c:	4650      	mov	r0, sl
 800714e:	ed9d 0b00 	vldr	d0, [sp]
 8007152:	f000 f9cd 	bl	80074f0 <scalbn>
 8007156:	ec51 0b10 	vmov	r0, r1, d0
 800715a:	ec53 2b18 	vmov	r2, r3, d8
 800715e:	f7ff bbe0 	b.w	8006922 <__ieee754_pow+0x132>
 8007162:	4b30      	ldr	r3, [pc, #192]	; (8007224 <__ieee754_pow+0xa34>)
 8007164:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007168:	429e      	cmp	r6, r3
 800716a:	f77f af0b 	ble.w	8006f84 <__ieee754_pow+0x794>
 800716e:	4b2e      	ldr	r3, [pc, #184]	; (8007228 <__ieee754_pow+0xa38>)
 8007170:	440b      	add	r3, r1
 8007172:	4303      	orrs	r3, r0
 8007174:	d00b      	beq.n	800718e <__ieee754_pow+0x99e>
 8007176:	a326      	add	r3, pc, #152	; (adr r3, 8007210 <__ieee754_pow+0xa20>)
 8007178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717c:	ec51 0b18 	vmov	r0, r1, d8
 8007180:	f7f9 fa3a 	bl	80005f8 <__aeabi_dmul>
 8007184:	a322      	add	r3, pc, #136	; (adr r3, 8007210 <__ieee754_pow+0xa20>)
 8007186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718a:	f7ff bbca 	b.w	8006922 <__ieee754_pow+0x132>
 800718e:	4622      	mov	r2, r4
 8007190:	462b      	mov	r3, r5
 8007192:	f7f9 f879 	bl	8000288 <__aeabi_dsub>
 8007196:	4642      	mov	r2, r8
 8007198:	464b      	mov	r3, r9
 800719a:	f7f9 fcb3 	bl	8000b04 <__aeabi_dcmpge>
 800719e:	2800      	cmp	r0, #0
 80071a0:	f43f aef0 	beq.w	8006f84 <__ieee754_pow+0x794>
 80071a4:	e7e7      	b.n	8007176 <__ieee754_pow+0x986>
 80071a6:	f04f 0a00 	mov.w	sl, #0
 80071aa:	e717      	b.n	8006fdc <__ieee754_pow+0x7ec>
 80071ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071b0:	4619      	mov	r1, r3
 80071b2:	e7d2      	b.n	800715a <__ieee754_pow+0x96a>
 80071b4:	491a      	ldr	r1, [pc, #104]	; (8007220 <__ieee754_pow+0xa30>)
 80071b6:	2000      	movs	r0, #0
 80071b8:	f7ff bb9e 	b.w	80068f8 <__ieee754_pow+0x108>
 80071bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071c0:	f7ff bb9a 	b.w	80068f8 <__ieee754_pow+0x108>
 80071c4:	9000      	str	r0, [sp, #0]
 80071c6:	f7ff bb76 	b.w	80068b6 <__ieee754_pow+0xc6>
 80071ca:	2100      	movs	r1, #0
 80071cc:	f7ff bb60 	b.w	8006890 <__ieee754_pow+0xa0>
 80071d0:	00000000 	.word	0x00000000
 80071d4:	3fe62e43 	.word	0x3fe62e43
 80071d8:	fefa39ef 	.word	0xfefa39ef
 80071dc:	3fe62e42 	.word	0x3fe62e42
 80071e0:	0ca86c39 	.word	0x0ca86c39
 80071e4:	be205c61 	.word	0xbe205c61
 80071e8:	72bea4d0 	.word	0x72bea4d0
 80071ec:	3e663769 	.word	0x3e663769
 80071f0:	c5d26bf1 	.word	0xc5d26bf1
 80071f4:	3ebbbd41 	.word	0x3ebbbd41
 80071f8:	af25de2c 	.word	0xaf25de2c
 80071fc:	3f11566a 	.word	0x3f11566a
 8007200:	16bebd93 	.word	0x16bebd93
 8007204:	3f66c16c 	.word	0x3f66c16c
 8007208:	5555553e 	.word	0x5555553e
 800720c:	3fc55555 	.word	0x3fc55555
 8007210:	c2f8f359 	.word	0xc2f8f359
 8007214:	01a56e1f 	.word	0x01a56e1f
 8007218:	3fe00000 	.word	0x3fe00000
 800721c:	000fffff 	.word	0x000fffff
 8007220:	3ff00000 	.word	0x3ff00000
 8007224:	4090cbff 	.word	0x4090cbff
 8007228:	3f6f3400 	.word	0x3f6f3400
 800722c:	652b82fe 	.word	0x652b82fe
 8007230:	3c971547 	.word	0x3c971547

08007234 <__ieee754_sqrt>:
 8007234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007238:	ec55 4b10 	vmov	r4, r5, d0
 800723c:	4e56      	ldr	r6, [pc, #344]	; (8007398 <__ieee754_sqrt+0x164>)
 800723e:	43ae      	bics	r6, r5
 8007240:	ee10 0a10 	vmov	r0, s0
 8007244:	ee10 3a10 	vmov	r3, s0
 8007248:	4629      	mov	r1, r5
 800724a:	462a      	mov	r2, r5
 800724c:	d110      	bne.n	8007270 <__ieee754_sqrt+0x3c>
 800724e:	ee10 2a10 	vmov	r2, s0
 8007252:	462b      	mov	r3, r5
 8007254:	f7f9 f9d0 	bl	80005f8 <__aeabi_dmul>
 8007258:	4602      	mov	r2, r0
 800725a:	460b      	mov	r3, r1
 800725c:	4620      	mov	r0, r4
 800725e:	4629      	mov	r1, r5
 8007260:	f7f9 f814 	bl	800028c <__adddf3>
 8007264:	4604      	mov	r4, r0
 8007266:	460d      	mov	r5, r1
 8007268:	ec45 4b10 	vmov	d0, r4, r5
 800726c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007270:	2d00      	cmp	r5, #0
 8007272:	dc10      	bgt.n	8007296 <__ieee754_sqrt+0x62>
 8007274:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007278:	4330      	orrs	r0, r6
 800727a:	d0f5      	beq.n	8007268 <__ieee754_sqrt+0x34>
 800727c:	b15d      	cbz	r5, 8007296 <__ieee754_sqrt+0x62>
 800727e:	ee10 2a10 	vmov	r2, s0
 8007282:	462b      	mov	r3, r5
 8007284:	ee10 0a10 	vmov	r0, s0
 8007288:	f7f8 fffe 	bl	8000288 <__aeabi_dsub>
 800728c:	4602      	mov	r2, r0
 800728e:	460b      	mov	r3, r1
 8007290:	f7f9 fadc 	bl	800084c <__aeabi_ddiv>
 8007294:	e7e6      	b.n	8007264 <__ieee754_sqrt+0x30>
 8007296:	1509      	asrs	r1, r1, #20
 8007298:	d076      	beq.n	8007388 <__ieee754_sqrt+0x154>
 800729a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800729e:	07ce      	lsls	r6, r1, #31
 80072a0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80072a4:	bf5e      	ittt	pl
 80072a6:	0fda      	lsrpl	r2, r3, #31
 80072a8:	005b      	lslpl	r3, r3, #1
 80072aa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80072ae:	0fda      	lsrs	r2, r3, #31
 80072b0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80072b4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80072b8:	2000      	movs	r0, #0
 80072ba:	106d      	asrs	r5, r5, #1
 80072bc:	005b      	lsls	r3, r3, #1
 80072be:	f04f 0e16 	mov.w	lr, #22
 80072c2:	4684      	mov	ip, r0
 80072c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072c8:	eb0c 0401 	add.w	r4, ip, r1
 80072cc:	4294      	cmp	r4, r2
 80072ce:	bfde      	ittt	le
 80072d0:	1b12      	suble	r2, r2, r4
 80072d2:	eb04 0c01 	addle.w	ip, r4, r1
 80072d6:	1840      	addle	r0, r0, r1
 80072d8:	0052      	lsls	r2, r2, #1
 80072da:	f1be 0e01 	subs.w	lr, lr, #1
 80072de:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80072e2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80072e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80072ea:	d1ed      	bne.n	80072c8 <__ieee754_sqrt+0x94>
 80072ec:	4671      	mov	r1, lr
 80072ee:	2720      	movs	r7, #32
 80072f0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80072f4:	4562      	cmp	r2, ip
 80072f6:	eb04 060e 	add.w	r6, r4, lr
 80072fa:	dc02      	bgt.n	8007302 <__ieee754_sqrt+0xce>
 80072fc:	d113      	bne.n	8007326 <__ieee754_sqrt+0xf2>
 80072fe:	429e      	cmp	r6, r3
 8007300:	d811      	bhi.n	8007326 <__ieee754_sqrt+0xf2>
 8007302:	2e00      	cmp	r6, #0
 8007304:	eb06 0e04 	add.w	lr, r6, r4
 8007308:	da43      	bge.n	8007392 <__ieee754_sqrt+0x15e>
 800730a:	f1be 0f00 	cmp.w	lr, #0
 800730e:	db40      	blt.n	8007392 <__ieee754_sqrt+0x15e>
 8007310:	f10c 0801 	add.w	r8, ip, #1
 8007314:	eba2 020c 	sub.w	r2, r2, ip
 8007318:	429e      	cmp	r6, r3
 800731a:	bf88      	it	hi
 800731c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007320:	1b9b      	subs	r3, r3, r6
 8007322:	4421      	add	r1, r4
 8007324:	46c4      	mov	ip, r8
 8007326:	0052      	lsls	r2, r2, #1
 8007328:	3f01      	subs	r7, #1
 800732a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800732e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007332:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007336:	d1dd      	bne.n	80072f4 <__ieee754_sqrt+0xc0>
 8007338:	4313      	orrs	r3, r2
 800733a:	d006      	beq.n	800734a <__ieee754_sqrt+0x116>
 800733c:	1c4c      	adds	r4, r1, #1
 800733e:	bf13      	iteet	ne
 8007340:	3101      	addne	r1, #1
 8007342:	3001      	addeq	r0, #1
 8007344:	4639      	moveq	r1, r7
 8007346:	f021 0101 	bicne.w	r1, r1, #1
 800734a:	1043      	asrs	r3, r0, #1
 800734c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007350:	0849      	lsrs	r1, r1, #1
 8007352:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007356:	07c2      	lsls	r2, r0, #31
 8007358:	bf48      	it	mi
 800735a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800735e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007362:	460c      	mov	r4, r1
 8007364:	463d      	mov	r5, r7
 8007366:	e77f      	b.n	8007268 <__ieee754_sqrt+0x34>
 8007368:	0ada      	lsrs	r2, r3, #11
 800736a:	3815      	subs	r0, #21
 800736c:	055b      	lsls	r3, r3, #21
 800736e:	2a00      	cmp	r2, #0
 8007370:	d0fa      	beq.n	8007368 <__ieee754_sqrt+0x134>
 8007372:	02d7      	lsls	r7, r2, #11
 8007374:	d50a      	bpl.n	800738c <__ieee754_sqrt+0x158>
 8007376:	f1c1 0420 	rsb	r4, r1, #32
 800737a:	fa23 f404 	lsr.w	r4, r3, r4
 800737e:	1e4d      	subs	r5, r1, #1
 8007380:	408b      	lsls	r3, r1
 8007382:	4322      	orrs	r2, r4
 8007384:	1b41      	subs	r1, r0, r5
 8007386:	e788      	b.n	800729a <__ieee754_sqrt+0x66>
 8007388:	4608      	mov	r0, r1
 800738a:	e7f0      	b.n	800736e <__ieee754_sqrt+0x13a>
 800738c:	0052      	lsls	r2, r2, #1
 800738e:	3101      	adds	r1, #1
 8007390:	e7ef      	b.n	8007372 <__ieee754_sqrt+0x13e>
 8007392:	46e0      	mov	r8, ip
 8007394:	e7be      	b.n	8007314 <__ieee754_sqrt+0xe0>
 8007396:	bf00      	nop
 8007398:	7ff00000 	.word	0x7ff00000

0800739c <fabs>:
 800739c:	ec51 0b10 	vmov	r0, r1, d0
 80073a0:	ee10 2a10 	vmov	r2, s0
 80073a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80073a8:	ec43 2b10 	vmov	d0, r2, r3
 80073ac:	4770      	bx	lr

080073ae <finite>:
 80073ae:	b082      	sub	sp, #8
 80073b0:	ed8d 0b00 	vstr	d0, [sp]
 80073b4:	9801      	ldr	r0, [sp, #4]
 80073b6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80073ba:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80073be:	0fc0      	lsrs	r0, r0, #31
 80073c0:	b002      	add	sp, #8
 80073c2:	4770      	bx	lr
 80073c4:	0000      	movs	r0, r0
	...

080073c8 <nan>:
 80073c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80073d0 <nan+0x8>
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	00000000 	.word	0x00000000
 80073d4:	7ff80000 	.word	0x7ff80000

080073d8 <rint>:
 80073d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073da:	ec51 0b10 	vmov	r0, r1, d0
 80073de:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80073e2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80073e6:	2e13      	cmp	r6, #19
 80073e8:	ee10 4a10 	vmov	r4, s0
 80073ec:	460b      	mov	r3, r1
 80073ee:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80073f2:	dc58      	bgt.n	80074a6 <rint+0xce>
 80073f4:	2e00      	cmp	r6, #0
 80073f6:	da2b      	bge.n	8007450 <rint+0x78>
 80073f8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80073fc:	4302      	orrs	r2, r0
 80073fe:	d023      	beq.n	8007448 <rint+0x70>
 8007400:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007404:	4302      	orrs	r2, r0
 8007406:	4254      	negs	r4, r2
 8007408:	4314      	orrs	r4, r2
 800740a:	0c4b      	lsrs	r3, r1, #17
 800740c:	0b24      	lsrs	r4, r4, #12
 800740e:	045b      	lsls	r3, r3, #17
 8007410:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007414:	ea44 0103 	orr.w	r1, r4, r3
 8007418:	4b32      	ldr	r3, [pc, #200]	; (80074e4 <rint+0x10c>)
 800741a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800741e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	4630      	mov	r0, r6
 8007428:	4639      	mov	r1, r7
 800742a:	f7f8 ff2f 	bl	800028c <__adddf3>
 800742e:	e9cd 0100 	strd	r0, r1, [sp]
 8007432:	463b      	mov	r3, r7
 8007434:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007438:	4632      	mov	r2, r6
 800743a:	f7f8 ff25 	bl	8000288 <__aeabi_dsub>
 800743e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007442:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8007446:	4639      	mov	r1, r7
 8007448:	ec41 0b10 	vmov	d0, r0, r1
 800744c:	b003      	add	sp, #12
 800744e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007450:	4a25      	ldr	r2, [pc, #148]	; (80074e8 <rint+0x110>)
 8007452:	4132      	asrs	r2, r6
 8007454:	ea01 0702 	and.w	r7, r1, r2
 8007458:	4307      	orrs	r7, r0
 800745a:	d0f5      	beq.n	8007448 <rint+0x70>
 800745c:	0851      	lsrs	r1, r2, #1
 800745e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8007462:	4314      	orrs	r4, r2
 8007464:	d00c      	beq.n	8007480 <rint+0xa8>
 8007466:	ea23 0201 	bic.w	r2, r3, r1
 800746a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800746e:	2e13      	cmp	r6, #19
 8007470:	fa43 f606 	asr.w	r6, r3, r6
 8007474:	bf0c      	ite	eq
 8007476:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800747a:	2400      	movne	r4, #0
 800747c:	ea42 0306 	orr.w	r3, r2, r6
 8007480:	4918      	ldr	r1, [pc, #96]	; (80074e4 <rint+0x10c>)
 8007482:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007486:	4622      	mov	r2, r4
 8007488:	e9d5 4500 	ldrd	r4, r5, [r5]
 800748c:	4620      	mov	r0, r4
 800748e:	4629      	mov	r1, r5
 8007490:	f7f8 fefc 	bl	800028c <__adddf3>
 8007494:	e9cd 0100 	strd	r0, r1, [sp]
 8007498:	e9dd 0100 	ldrd	r0, r1, [sp]
 800749c:	4622      	mov	r2, r4
 800749e:	462b      	mov	r3, r5
 80074a0:	f7f8 fef2 	bl	8000288 <__aeabi_dsub>
 80074a4:	e7d0      	b.n	8007448 <rint+0x70>
 80074a6:	2e33      	cmp	r6, #51	; 0x33
 80074a8:	dd07      	ble.n	80074ba <rint+0xe2>
 80074aa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80074ae:	d1cb      	bne.n	8007448 <rint+0x70>
 80074b0:	ee10 2a10 	vmov	r2, s0
 80074b4:	f7f8 feea 	bl	800028c <__adddf3>
 80074b8:	e7c6      	b.n	8007448 <rint+0x70>
 80074ba:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80074be:	f04f 36ff 	mov.w	r6, #4294967295
 80074c2:	40d6      	lsrs	r6, r2
 80074c4:	4230      	tst	r0, r6
 80074c6:	d0bf      	beq.n	8007448 <rint+0x70>
 80074c8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80074cc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80074d0:	bf1f      	itttt	ne
 80074d2:	ea24 0101 	bicne.w	r1, r4, r1
 80074d6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80074da:	fa44 f202 	asrne.w	r2, r4, r2
 80074de:	ea41 0402 	orrne.w	r4, r1, r2
 80074e2:	e7cd      	b.n	8007480 <rint+0xa8>
 80074e4:	08007a98 	.word	0x08007a98
 80074e8:	000fffff 	.word	0x000fffff
 80074ec:	00000000 	.word	0x00000000

080074f0 <scalbn>:
 80074f0:	b570      	push	{r4, r5, r6, lr}
 80074f2:	ec55 4b10 	vmov	r4, r5, d0
 80074f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80074fa:	4606      	mov	r6, r0
 80074fc:	462b      	mov	r3, r5
 80074fe:	b99a      	cbnz	r2, 8007528 <scalbn+0x38>
 8007500:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007504:	4323      	orrs	r3, r4
 8007506:	d036      	beq.n	8007576 <scalbn+0x86>
 8007508:	4b39      	ldr	r3, [pc, #228]	; (80075f0 <scalbn+0x100>)
 800750a:	4629      	mov	r1, r5
 800750c:	ee10 0a10 	vmov	r0, s0
 8007510:	2200      	movs	r2, #0
 8007512:	f7f9 f871 	bl	80005f8 <__aeabi_dmul>
 8007516:	4b37      	ldr	r3, [pc, #220]	; (80075f4 <scalbn+0x104>)
 8007518:	429e      	cmp	r6, r3
 800751a:	4604      	mov	r4, r0
 800751c:	460d      	mov	r5, r1
 800751e:	da10      	bge.n	8007542 <scalbn+0x52>
 8007520:	a32b      	add	r3, pc, #172	; (adr r3, 80075d0 <scalbn+0xe0>)
 8007522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007526:	e03a      	b.n	800759e <scalbn+0xae>
 8007528:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800752c:	428a      	cmp	r2, r1
 800752e:	d10c      	bne.n	800754a <scalbn+0x5a>
 8007530:	ee10 2a10 	vmov	r2, s0
 8007534:	4620      	mov	r0, r4
 8007536:	4629      	mov	r1, r5
 8007538:	f7f8 fea8 	bl	800028c <__adddf3>
 800753c:	4604      	mov	r4, r0
 800753e:	460d      	mov	r5, r1
 8007540:	e019      	b.n	8007576 <scalbn+0x86>
 8007542:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007546:	460b      	mov	r3, r1
 8007548:	3a36      	subs	r2, #54	; 0x36
 800754a:	4432      	add	r2, r6
 800754c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007550:	428a      	cmp	r2, r1
 8007552:	dd08      	ble.n	8007566 <scalbn+0x76>
 8007554:	2d00      	cmp	r5, #0
 8007556:	a120      	add	r1, pc, #128	; (adr r1, 80075d8 <scalbn+0xe8>)
 8007558:	e9d1 0100 	ldrd	r0, r1, [r1]
 800755c:	da1c      	bge.n	8007598 <scalbn+0xa8>
 800755e:	a120      	add	r1, pc, #128	; (adr r1, 80075e0 <scalbn+0xf0>)
 8007560:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007564:	e018      	b.n	8007598 <scalbn+0xa8>
 8007566:	2a00      	cmp	r2, #0
 8007568:	dd08      	ble.n	800757c <scalbn+0x8c>
 800756a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800756e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007572:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007576:	ec45 4b10 	vmov	d0, r4, r5
 800757a:	bd70      	pop	{r4, r5, r6, pc}
 800757c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007580:	da19      	bge.n	80075b6 <scalbn+0xc6>
 8007582:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007586:	429e      	cmp	r6, r3
 8007588:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800758c:	dd0a      	ble.n	80075a4 <scalbn+0xb4>
 800758e:	a112      	add	r1, pc, #72	; (adr r1, 80075d8 <scalbn+0xe8>)
 8007590:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1e2      	bne.n	800755e <scalbn+0x6e>
 8007598:	a30f      	add	r3, pc, #60	; (adr r3, 80075d8 <scalbn+0xe8>)
 800759a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759e:	f7f9 f82b 	bl	80005f8 <__aeabi_dmul>
 80075a2:	e7cb      	b.n	800753c <scalbn+0x4c>
 80075a4:	a10a      	add	r1, pc, #40	; (adr r1, 80075d0 <scalbn+0xe0>)
 80075a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d0b8      	beq.n	8007520 <scalbn+0x30>
 80075ae:	a10e      	add	r1, pc, #56	; (adr r1, 80075e8 <scalbn+0xf8>)
 80075b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075b4:	e7b4      	b.n	8007520 <scalbn+0x30>
 80075b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80075ba:	3236      	adds	r2, #54	; 0x36
 80075bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80075c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80075c4:	4620      	mov	r0, r4
 80075c6:	4b0c      	ldr	r3, [pc, #48]	; (80075f8 <scalbn+0x108>)
 80075c8:	2200      	movs	r2, #0
 80075ca:	e7e8      	b.n	800759e <scalbn+0xae>
 80075cc:	f3af 8000 	nop.w
 80075d0:	c2f8f359 	.word	0xc2f8f359
 80075d4:	01a56e1f 	.word	0x01a56e1f
 80075d8:	8800759c 	.word	0x8800759c
 80075dc:	7e37e43c 	.word	0x7e37e43c
 80075e0:	8800759c 	.word	0x8800759c
 80075e4:	fe37e43c 	.word	0xfe37e43c
 80075e8:	c2f8f359 	.word	0xc2f8f359
 80075ec:	81a56e1f 	.word	0x81a56e1f
 80075f0:	43500000 	.word	0x43500000
 80075f4:	ffff3cb0 	.word	0xffff3cb0
 80075f8:	3c900000 	.word	0x3c900000

080075fc <_init>:
 80075fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fe:	bf00      	nop
 8007600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007602:	bc08      	pop	{r3}
 8007604:	469e      	mov	lr, r3
 8007606:	4770      	bx	lr

08007608 <_fini>:
 8007608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760a:	bf00      	nop
 800760c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800760e:	bc08      	pop	{r3}
 8007610:	469e      	mov	lr, r3
 8007612:	4770      	bx	lr

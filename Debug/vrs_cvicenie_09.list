
vrs_cvicenie_09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005be4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08005d78  08005d78  00015d78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061a4  080061a4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080061a4  080061a4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061a4  080061a4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061a4  080061a4  000161a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061a8  080061a8  000161a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080061ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000088  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000264  20000264  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dfa9  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000267b  00000000  00000000  0002e1b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000850  00000000  00000000  00030830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000738  00000000  00000000  00031080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019603  00000000  00000000  000317b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009333  00000000  00000000  0004adbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007cd93  00000000  00000000  000540ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000d0e81  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003190  00000000  00000000  000d0ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d5c 	.word	0x08005d5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08005d5c 	.word	0x08005d5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	683a      	ldr	r2, [r7, #0]
 8000bb6:	619a      	str	r2, [r3, #24]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <resetSegments>:
extern DisplayDigitData_ DisplayDigit_0;
extern DisplayDigitData_ DisplayDigit_1;
extern DisplayDigitData_ DisplayDigit_2;
extern DisplayDigitData_ DisplayDigit_3;
static uint8_t indexer = 0;
void resetSegments(void) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	SEGMENT_A_OFF;
 8000be4:	2102      	movs	r1, #2
 8000be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bea:	f7ff ffdd 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	SEGMENT_B_OFF;
 8000bee:	2101      	movs	r1, #1
 8000bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf4:	f7ff ffd8 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	SEGMENT_C_OFF;
 8000bf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c00:	f7ff ffd2 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	SEGMENT_D_OFF;
 8000c04:	2120      	movs	r1, #32
 8000c06:	480c      	ldr	r0, [pc, #48]	; (8000c38 <resetSegments+0x58>)
 8000c08:	f7ff ffce 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	SEGMENT_E_OFF;
 8000c0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c14:	f7ff ffc8 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	SEGMENT_F_OFF;
 8000c18:	2108      	movs	r1, #8
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1e:	f7ff ffc3 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	SEGMENT_G_OFF;
 8000c22:	2110      	movs	r1, #16
 8000c24:	4804      	ldr	r0, [pc, #16]	; (8000c38 <resetSegments+0x58>)
 8000c26:	f7ff ffbf 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	SEGMENT_DP_OFF;
 8000c2a:	2102      	movs	r1, #2
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <resetSegments+0x58>)
 8000c2e:	f7ff ffbb 	bl	8000ba8 <LL_GPIO_SetOutputPin>
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	48000400 	.word	0x48000400

08000c3c <resetDigits>:
	SEGMENT_F_ON;
	SEGMENT_G_ON;
	SEGMENT_DP_ON;
}

void resetDigits(void) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	DIGIT_0_OFF;
 8000c40:	2101      	movs	r1, #1
 8000c42:	480d      	ldr	r0, [pc, #52]	; (8000c78 <resetDigits+0x3c>)
 8000c44:	f7ff ffbe 	bl	8000bc4 <LL_GPIO_ResetOutputPin>
	DIGIT_1_OFF;
 8000c48:	2110      	movs	r1, #16
 8000c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4e:	f7ff ffb9 	bl	8000bc4 <LL_GPIO_ResetOutputPin>
	DIGIT_2_OFF;
 8000c52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5a:	f7ff ffb3 	bl	8000bc4 <LL_GPIO_ResetOutputPin>
	DIGIT_3_OFF;
 8000c5e:	2104      	movs	r1, #4
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c64:	f7ff ffae 	bl	8000bc4 <LL_GPIO_ResetOutputPin>
	DIGIT_TIME_OFF;
 8000c68:	2180      	movs	r1, #128	; 0x80
 8000c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6e:	f7ff ffa9 	bl	8000bc4 <LL_GPIO_ResetOutputPin>
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	48000400 	.word	0x48000400

08000c7c <segmentsOn>:
	DIGIT_2_ON;
	DIGIT_3_ON;
	DIGIT_TIME_ON;
}

void segmentsOn(uint8_t index, SegmentDigitStruct digitStruct) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	e883 0006 	stmia.w	r3, {r1, r2}
 8000c88:	4603      	mov	r3, r0
 8000c8a:	73fb      	strb	r3, [r7, #15]
//	resetSegments();
	if (digitStruct.sA)
 8000c8c:	793b      	ldrb	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d005      	beq.n	8000c9e <segmentsOn+0x22>
		SEGMENT_A_ON;
 8000c92:	2102      	movs	r1, #2
 8000c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c98:	f7ff ff94 	bl	8000bc4 <LL_GPIO_ResetOutputPin>
 8000c9c:	e004      	b.n	8000ca8 <segmentsOn+0x2c>
	else SEGMENT_A_OFF;
 8000c9e:	2102      	movs	r1, #2
 8000ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca4:	f7ff ff80 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	if (digitStruct.sB)
 8000ca8:	797b      	ldrb	r3, [r7, #5]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d005      	beq.n	8000cba <segmentsOn+0x3e>
		SEGMENT_B_ON;
 8000cae:	2101      	movs	r1, #1
 8000cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb4:	f7ff ff86 	bl	8000bc4 <LL_GPIO_ResetOutputPin>
 8000cb8:	e004      	b.n	8000cc4 <segmentsOn+0x48>
	else SEGMENT_B_OFF;
 8000cba:	2101      	movs	r1, #1
 8000cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc0:	f7ff ff72 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	if (digitStruct.sC)
 8000cc4:	79bb      	ldrb	r3, [r7, #6]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d006      	beq.n	8000cd8 <segmentsOn+0x5c>
		SEGMENT_C_ON;
 8000cca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd2:	f7ff ff77 	bl	8000bc4 <LL_GPIO_ResetOutputPin>
 8000cd6:	e005      	b.n	8000ce4 <segmentsOn+0x68>
	else SEGMENT_C_OFF;
 8000cd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce0:	f7ff ff62 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	if (digitStruct.sD)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d004      	beq.n	8000cf4 <segmentsOn+0x78>
		SEGMENT_D_ON;
 8000cea:	2120      	movs	r1, #32
 8000cec:	4833      	ldr	r0, [pc, #204]	; (8000dbc <segmentsOn+0x140>)
 8000cee:	f7ff ff69 	bl	8000bc4 <LL_GPIO_ResetOutputPin>
 8000cf2:	e003      	b.n	8000cfc <segmentsOn+0x80>
	else SEGMENT_D_OFF;
 8000cf4:	2120      	movs	r1, #32
 8000cf6:	4831      	ldr	r0, [pc, #196]	; (8000dbc <segmentsOn+0x140>)
 8000cf8:	f7ff ff56 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	if (digitStruct.sE)
 8000cfc:	7a3b      	ldrb	r3, [r7, #8]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d006      	beq.n	8000d10 <segmentsOn+0x94>
		SEGMENT_E_ON;
 8000d02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0a:	f7ff ff5b 	bl	8000bc4 <LL_GPIO_ResetOutputPin>
 8000d0e:	e005      	b.n	8000d1c <segmentsOn+0xa0>
	else SEGMENT_E_OFF;
 8000d10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d18:	f7ff ff46 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	if (digitStruct.sF)
 8000d1c:	7a7b      	ldrb	r3, [r7, #9]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d005      	beq.n	8000d2e <segmentsOn+0xb2>
		SEGMENT_F_ON;
 8000d22:	2108      	movs	r1, #8
 8000d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d28:	f7ff ff4c 	bl	8000bc4 <LL_GPIO_ResetOutputPin>
 8000d2c:	e004      	b.n	8000d38 <segmentsOn+0xbc>
	else SEGMENT_F_OFF;
 8000d2e:	2108      	movs	r1, #8
 8000d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d34:	f7ff ff38 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	if (digitStruct.sG)
 8000d38:	7abb      	ldrb	r3, [r7, #10]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d004      	beq.n	8000d48 <segmentsOn+0xcc>
		SEGMENT_G_ON;
 8000d3e:	2110      	movs	r1, #16
 8000d40:	481e      	ldr	r0, [pc, #120]	; (8000dbc <segmentsOn+0x140>)
 8000d42:	f7ff ff3f 	bl	8000bc4 <LL_GPIO_ResetOutputPin>
 8000d46:	e003      	b.n	8000d50 <segmentsOn+0xd4>
	else SEGMENT_G_OFF;
 8000d48:	2110      	movs	r1, #16
 8000d4a:	481c      	ldr	r0, [pc, #112]	; (8000dbc <segmentsOn+0x140>)
 8000d4c:	f7ff ff2c 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	if (digitStruct.sDot)
 8000d50:	7afb      	ldrb	r3, [r7, #11]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d004      	beq.n	8000d60 <segmentsOn+0xe4>
		SEGMENT_DP_ON;
 8000d56:	2102      	movs	r1, #2
 8000d58:	4818      	ldr	r0, [pc, #96]	; (8000dbc <segmentsOn+0x140>)
 8000d5a:	f7ff ff33 	bl	8000bc4 <LL_GPIO_ResetOutputPin>
 8000d5e:	e003      	b.n	8000d68 <segmentsOn+0xec>
	else SEGMENT_DP_OFF;
 8000d60:	2102      	movs	r1, #2
 8000d62:	4816      	ldr	r0, [pc, #88]	; (8000dbc <segmentsOn+0x140>)
 8000d64:	f7ff ff20 	bl	8000ba8 <LL_GPIO_SetOutputPin>

	resetDigits();
 8000d68:	f7ff ff68 	bl	8000c3c <resetDigits>
	if (index == 0)
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d104      	bne.n	8000d7c <segmentsOn+0x100>
		DIGIT_0_ON;
 8000d72:	2101      	movs	r1, #1
 8000d74:	4811      	ldr	r0, [pc, #68]	; (8000dbc <segmentsOn+0x140>)
 8000d76:	f7ff ff17 	bl	8000ba8 <LL_GPIO_SetOutputPin>
		DIGIT_1_ON;
	else if (index == 2)
		DIGIT_2_ON;
	else if (index == 3)
		DIGIT_3_ON;
}
 8000d7a:	e01a      	b.n	8000db2 <segmentsOn+0x136>
	else if (index == 1)
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d105      	bne.n	8000d8e <segmentsOn+0x112>
		DIGIT_1_ON;
 8000d82:	2110      	movs	r1, #16
 8000d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d88:	f7ff ff0e 	bl	8000ba8 <LL_GPIO_SetOutputPin>
}
 8000d8c:	e011      	b.n	8000db2 <segmentsOn+0x136>
	else if (index == 2)
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d106      	bne.n	8000da2 <segmentsOn+0x126>
		DIGIT_2_ON;
 8000d94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9c:	f7ff ff04 	bl	8000ba8 <LL_GPIO_SetOutputPin>
}
 8000da0:	e007      	b.n	8000db2 <segmentsOn+0x136>
	else if (index == 3)
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	d104      	bne.n	8000db2 <segmentsOn+0x136>
		DIGIT_3_ON;
 8000da8:	2104      	movs	r1, #4
 8000daa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dae:	f7ff fefb 	bl	8000ba8 <LL_GPIO_SetOutputPin>
}
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	48000400 	.word	0x48000400

08000dc0 <displayCharOnDigit>:

void displayCharOnDigit(DisplayDigitData_ digitData) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	80b8      	strh	r0, [r7, #4]
	SegmentDigitStruct digitStruct = GetSegmentDigit(digitData.chr);
 8000dc8:	797a      	ldrb	r2, [r7, #5]
 8000dca:	f107 0308 	add.w	r3, r7, #8
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 f879 	bl	8000ec8 <GetSegmentDigit>
	segmentsOn(digitData.index, digitStruct);
 8000dd6:	7938      	ldrb	r0, [r7, #4]
 8000dd8:	f107 0308 	add.w	r3, r7, #8
 8000ddc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000de0:	f7ff ff4c 	bl	8000c7c <segmentsOn>
}
 8000de4:	bf00      	nop
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <updateDisplay>:
void updateDisplay(void) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0

	switch (indexer) {
 8000df0:	4b30      	ldr	r3, [pc, #192]	; (8000eb4 <updateDisplay+0xc8>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b03      	cmp	r3, #3
 8000df6:	d80b      	bhi.n	8000e10 <updateDisplay+0x24>
 8000df8:	a201      	add	r2, pc, #4	; (adr r2, 8000e00 <updateDisplay+0x14>)
 8000dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfe:	bf00      	nop
 8000e00:	08000e21 	.word	0x08000e21
 8000e04:	08000e45 	.word	0x08000e45
 8000e08:	08000e69 	.word	0x08000e69
 8000e0c:	08000e8d 	.word	0x08000e8d
	default:
		resetDigits();
 8000e10:	f7ff ff14 	bl	8000c3c <resetDigits>
		resetSegments();
 8000e14:	f7ff fee4 	bl	8000be0 <resetSegments>
		indexer = 0;
 8000e18:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <updateDisplay+0xc8>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	701a      	strb	r2, [r3, #0]
		break;
 8000e1e:	e047      	b.n	8000eb0 <updateDisplay+0xc4>
	case 0:
		displayCharOnDigit(DisplayDigit_0);
 8000e20:	4b25      	ldr	r3, [pc, #148]	; (8000eb8 <updateDisplay+0xcc>)
 8000e22:	781a      	ldrb	r2, [r3, #0]
 8000e24:	785b      	ldrb	r3, [r3, #1]
 8000e26:	021b      	lsls	r3, r3, #8
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f362 030f 	bfi	r3, r2, #0, #16
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ffc5 	bl	8000dc0 <displayCharOnDigit>
		indexer++;
 8000e36:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <updateDisplay+0xc8>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <updateDisplay+0xc8>)
 8000e40:	701a      	strb	r2, [r3, #0]
		break;
 8000e42:	e035      	b.n	8000eb0 <updateDisplay+0xc4>
	case 1:
		displayCharOnDigit(DisplayDigit_1);
 8000e44:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <updateDisplay+0xd0>)
 8000e46:	781a      	ldrb	r2, [r3, #0]
 8000e48:	785b      	ldrb	r3, [r3, #1]
 8000e4a:	021b      	lsls	r3, r3, #8
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f362 030f 	bfi	r3, r2, #0, #16
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ffb3 	bl	8000dc0 <displayCharOnDigit>
		indexer++;
 8000e5a:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <updateDisplay+0xc8>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <updateDisplay+0xc8>)
 8000e64:	701a      	strb	r2, [r3, #0]
		break;
 8000e66:	e023      	b.n	8000eb0 <updateDisplay+0xc4>
	case 2:
		displayCharOnDigit(DisplayDigit_2);
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <updateDisplay+0xd4>)
 8000e6a:	781a      	ldrb	r2, [r3, #0]
 8000e6c:	785b      	ldrb	r3, [r3, #1]
 8000e6e:	021b      	lsls	r3, r3, #8
 8000e70:	431a      	orrs	r2, r3
 8000e72:	2300      	movs	r3, #0
 8000e74:	f362 030f 	bfi	r3, r2, #0, #16
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ffa1 	bl	8000dc0 <displayCharOnDigit>
		indexer++;
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <updateDisplay+0xc8>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	3301      	adds	r3, #1
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <updateDisplay+0xc8>)
 8000e88:	701a      	strb	r2, [r3, #0]
		break;
 8000e8a:	e011      	b.n	8000eb0 <updateDisplay+0xc4>
	case 3:
		displayCharOnDigit(DisplayDigit_3);
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <updateDisplay+0xd8>)
 8000e8e:	781a      	ldrb	r2, [r3, #0]
 8000e90:	785b      	ldrb	r3, [r3, #1]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	431a      	orrs	r2, r3
 8000e96:	2300      	movs	r3, #0
 8000e98:	f362 030f 	bfi	r3, r2, #0, #16
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff8f 	bl	8000dc0 <displayCharOnDigit>
		indexer++;
 8000ea2:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <updateDisplay+0xc8>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4b02      	ldr	r3, [pc, #8]	; (8000eb4 <updateDisplay+0xc8>)
 8000eac:	701a      	strb	r2, [r3, #0]
		break;
 8000eae:	bf00      	nop

	}
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	200001f8 	.word	0x200001f8
 8000eb8:	20000214 	.word	0x20000214
 8000ebc:	2000020c 	.word	0x2000020c
 8000ec0:	20000208 	.word	0x20000208
 8000ec4:	20000210 	.word	0x20000210

08000ec8 <GetSegmentDigit>:
		0x08, // _
		0x01, // -
		0x80, // .,
		};

SegmentDigitStruct GetSegmentDigit(uint8_t chr) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	70fb      	strb	r3, [r7, #3]
	SegmentDigitStruct result;
	if ((chr >= '0' && chr <= '9') || (chr >= 'A' && chr <= 'Z')
 8000ed4:	78fb      	ldrb	r3, [r7, #3]
 8000ed6:	2b2f      	cmp	r3, #47	; 0x2f
 8000ed8:	d902      	bls.n	8000ee0 <GetSegmentDigit+0x18>
 8000eda:	78fb      	ldrb	r3, [r7, #3]
 8000edc:	2b39      	cmp	r3, #57	; 0x39
 8000ede:	d912      	bls.n	8000f06 <GetSegmentDigit+0x3e>
 8000ee0:	78fb      	ldrb	r3, [r7, #3]
 8000ee2:	2b40      	cmp	r3, #64	; 0x40
 8000ee4:	d902      	bls.n	8000eec <GetSegmentDigit+0x24>
 8000ee6:	78fb      	ldrb	r3, [r7, #3]
 8000ee8:	2b5a      	cmp	r3, #90	; 0x5a
 8000eea:	d90c      	bls.n	8000f06 <GetSegmentDigit+0x3e>
			|| chr == '_' || chr == '.' || chr == ',' || chr == '-') {
 8000eec:	78fb      	ldrb	r3, [r7, #3]
 8000eee:	2b5f      	cmp	r3, #95	; 0x5f
 8000ef0:	d009      	beq.n	8000f06 <GetSegmentDigit+0x3e>
 8000ef2:	78fb      	ldrb	r3, [r7, #3]
 8000ef4:	2b2e      	cmp	r3, #46	; 0x2e
 8000ef6:	d006      	beq.n	8000f06 <GetSegmentDigit+0x3e>
 8000ef8:	78fb      	ldrb	r3, [r7, #3]
 8000efa:	2b2c      	cmp	r3, #44	; 0x2c
 8000efc:	d003      	beq.n	8000f06 <GetSegmentDigit+0x3e>
 8000efe:	78fb      	ldrb	r3, [r7, #3]
 8000f00:	2b2d      	cmp	r3, #45	; 0x2d
 8000f02:	f040 8086 	bne.w	8001012 <GetSegmentDigit+0x14a>
		uint8_t fontChar = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	75fb      	strb	r3, [r7, #23]
		uint8_t index = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	75bb      	strb	r3, [r7, #22]
		if (chr >= '0' && chr <= '9') {
 8000f0e:	78fb      	ldrb	r3, [r7, #3]
 8000f10:	2b2f      	cmp	r3, #47	; 0x2f
 8000f12:	d90a      	bls.n	8000f2a <GetSegmentDigit+0x62>
 8000f14:	78fb      	ldrb	r3, [r7, #3]
 8000f16:	2b39      	cmp	r3, #57	; 0x39
 8000f18:	d807      	bhi.n	8000f2a <GetSegmentDigit+0x62>
			index = chr - '0';
 8000f1a:	78fb      	ldrb	r3, [r7, #3]
 8000f1c:	3b30      	subs	r3, #48	; 0x30
 8000f1e:	75bb      	strb	r3, [r7, #22]
			fontChar = Font_Table[FONTS_DIGITS_START + index];
 8000f20:	7dbb      	ldrb	r3, [r7, #22]
 8000f22:	4a4a      	ldr	r2, [pc, #296]	; (800104c <GetSegmentDigit+0x184>)
 8000f24:	5cd3      	ldrb	r3, [r2, r3]
 8000f26:	75fb      	strb	r3, [r7, #23]
 8000f28:	e022      	b.n	8000f70 <GetSegmentDigit+0xa8>
		} else if (chr >= 'A' && chr <= 'Z') {
 8000f2a:	78fb      	ldrb	r3, [r7, #3]
 8000f2c:	2b40      	cmp	r3, #64	; 0x40
 8000f2e:	d90b      	bls.n	8000f48 <GetSegmentDigit+0x80>
 8000f30:	78fb      	ldrb	r3, [r7, #3]
 8000f32:	2b5a      	cmp	r3, #90	; 0x5a
 8000f34:	d808      	bhi.n	8000f48 <GetSegmentDigit+0x80>
			index = chr - 'A';
 8000f36:	78fb      	ldrb	r3, [r7, #3]
 8000f38:	3b41      	subs	r3, #65	; 0x41
 8000f3a:	75bb      	strb	r3, [r7, #22]
			fontChar = Font_Table[FONTS_CHARS_START + index];
 8000f3c:	7dbb      	ldrb	r3, [r7, #22]
 8000f3e:	330a      	adds	r3, #10
 8000f40:	4a42      	ldr	r2, [pc, #264]	; (800104c <GetSegmentDigit+0x184>)
 8000f42:	5cd3      	ldrb	r3, [r2, r3]
 8000f44:	75fb      	strb	r3, [r7, #23]
 8000f46:	e013      	b.n	8000f70 <GetSegmentDigit+0xa8>
		} else if (chr == '_') {
 8000f48:	78fb      	ldrb	r3, [r7, #3]
 8000f4a:	2b5f      	cmp	r3, #95	; 0x5f
 8000f4c:	d102      	bne.n	8000f54 <GetSegmentDigit+0x8c>
			fontChar = Font_Table[FONTS_UNDERSCORE];
 8000f4e:	2308      	movs	r3, #8
 8000f50:	75fb      	strb	r3, [r7, #23]
 8000f52:	e00d      	b.n	8000f70 <GetSegmentDigit+0xa8>
		}else if(chr == '-'){
 8000f54:	78fb      	ldrb	r3, [r7, #3]
 8000f56:	2b2d      	cmp	r3, #45	; 0x2d
 8000f58:	d102      	bne.n	8000f60 <GetSegmentDigit+0x98>
			fontChar = Font_Table[FONTS_MINUS];
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	75fb      	strb	r3, [r7, #23]
 8000f5e:	e007      	b.n	8000f70 <GetSegmentDigit+0xa8>
		}else if(chr == '.' || chr == ','){
 8000f60:	78fb      	ldrb	r3, [r7, #3]
 8000f62:	2b2e      	cmp	r3, #46	; 0x2e
 8000f64:	d002      	beq.n	8000f6c <GetSegmentDigit+0xa4>
 8000f66:	78fb      	ldrb	r3, [r7, #3]
 8000f68:	2b2c      	cmp	r3, #44	; 0x2c
 8000f6a:	d101      	bne.n	8000f70 <GetSegmentDigit+0xa8>
			fontChar = Font_Table[FONTS_DOT];
 8000f6c:	2380      	movs	r3, #128	; 0x80
 8000f6e:	75fb      	strb	r3, [r7, #23]
		}
		result.sA = fontChar & ConverterValue_SegmentA ? true : false;
 8000f70:	2240      	movs	r2, #64	; 0x40
 8000f72:	7dfb      	ldrb	r3, [r7, #23]
 8000f74:	4013      	ands	r3, r2
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	bf14      	ite	ne
 8000f7c:	2301      	movne	r3, #1
 8000f7e:	2300      	moveq	r3, #0
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	733b      	strb	r3, [r7, #12]
		result.sB = fontChar & ConverterValue_SegmentB ? true : false;
 8000f84:	2220      	movs	r2, #32
 8000f86:	7dfb      	ldrb	r3, [r7, #23]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	bf14      	ite	ne
 8000f90:	2301      	movne	r3, #1
 8000f92:	2300      	moveq	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	737b      	strb	r3, [r7, #13]
		result.sC = fontChar & ConverterValue_SegmentC ? true : false;
 8000f98:	2210      	movs	r2, #16
 8000f9a:	7dfb      	ldrb	r3, [r7, #23]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	bf14      	ite	ne
 8000fa4:	2301      	movne	r3, #1
 8000fa6:	2300      	moveq	r3, #0
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	73bb      	strb	r3, [r7, #14]
		result.sD = fontChar & ConverterValue_SegmentD ? true : false;
 8000fac:	2208      	movs	r2, #8
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	bf14      	ite	ne
 8000fb8:	2301      	movne	r3, #1
 8000fba:	2300      	moveq	r3, #0
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	73fb      	strb	r3, [r7, #15]
		result.sE = fontChar & ConverterValue_SegmentE ? true : false;
 8000fc0:	2204      	movs	r2, #4
 8000fc2:	7dfb      	ldrb	r3, [r7, #23]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	bf14      	ite	ne
 8000fcc:	2301      	movne	r3, #1
 8000fce:	2300      	moveq	r3, #0
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	743b      	strb	r3, [r7, #16]
		result.sF = fontChar & ConverterValue_SegmentF ? true : false;
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	7dfb      	ldrb	r3, [r7, #23]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	bf14      	ite	ne
 8000fe0:	2301      	movne	r3, #1
 8000fe2:	2300      	moveq	r3, #0
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	747b      	strb	r3, [r7, #17]
		result.sG = fontChar & ConverterValue_SegmentG ? true : false;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	7dfb      	ldrb	r3, [r7, #23]
 8000fec:	4013      	ands	r3, r2
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	bf14      	ite	ne
 8000ff4:	2301      	movne	r3, #1
 8000ff6:	2300      	moveq	r3, #0
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	74bb      	strb	r3, [r7, #18]
		result.sDot = fontChar & ConverterValue_SegmentDot ? true : false;
 8000ffc:	2280      	movs	r2, #128	; 0x80
 8000ffe:	7dfb      	ldrb	r3, [r7, #23]
 8001000:	4013      	ands	r3, r2
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	bf14      	ite	ne
 8001008:	2301      	movne	r3, #1
 800100a:	2300      	moveq	r3, #0
 800100c:	b2db      	uxtb	r3, r3
 800100e:	74fb      	strb	r3, [r7, #19]
			|| chr == '_' || chr == '.' || chr == ',' || chr == '-') {
 8001010:	e00f      	b.n	8001032 <GetSegmentDigit+0x16a>
	}
	else{
		result.sA = true;
 8001012:	2301      	movs	r3, #1
 8001014:	733b      	strb	r3, [r7, #12]
		result.sB = true;
 8001016:	2301      	movs	r3, #1
 8001018:	737b      	strb	r3, [r7, #13]
		result.sC = true;
 800101a:	2301      	movs	r3, #1
 800101c:	73bb      	strb	r3, [r7, #14]
		result.sD = true;
 800101e:	2301      	movs	r3, #1
 8001020:	73fb      	strb	r3, [r7, #15]
		result.sE = true;
 8001022:	2301      	movs	r3, #1
 8001024:	743b      	strb	r3, [r7, #16]
		result.sF = true;
 8001026:	2301      	movs	r3, #1
 8001028:	747b      	strb	r3, [r7, #17]
		result.sG = true;
 800102a:	2301      	movs	r3, #1
 800102c:	74bb      	strb	r3, [r7, #18]
		result.sDot = true;
 800102e:	2301      	movs	r3, #1
 8001030:	74fb      	strb	r3, [r7, #19]
	}
	return result;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	461a      	mov	r2, r3
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	cb03      	ldmia	r3!, {r0, r1}
 800103c:	6010      	str	r0, [r2, #0]
 800103e:	6051      	str	r1, [r2, #4]
}
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	371c      	adds	r7, #28
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	08005d78 	.word	0x08005d78

08001050 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800105a:	695a      	ldr	r2, [r3, #20]
 800105c:	4907      	ldr	r1, [pc, #28]	; (800107c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4313      	orrs	r3, r2
 8001062:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001066:	695a      	ldr	r2, [r3, #20]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4013      	ands	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	40021000 	.word	0x40021000

08001080 <LL_GPIO_ResetOutputPin>:
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a2:	463b      	mov	r3, r7
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
 80010b0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80010b2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80010b6:	f7ff ffcb 	bl	8001050 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80010ba:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80010be:	f7ff ffc7 	bl	8001050 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80010c2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80010c6:	f7ff ffc3 	bl	8001050 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, S_B_Pin|S_A_Pin|D_3_Pin|S_F_Pin
 80010ca:	f641 119f 	movw	r1, #6559	; 0x199f
 80010ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d2:	f7ff ffd5 	bl	8001080 <LL_GPIO_ResetOutputPin>
                          |D_1_Pin|D_T_Pin|S_C_Pin|S_E_Pin
                          |D_2_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, D_0_Pin|S_DP_Pin|S_G_Pin|S_D_Pin);
 80010d6:	2133      	movs	r1, #51	; 0x33
 80010d8:	4822      	ldr	r0, [pc, #136]	; (8001164 <MX_GPIO_Init+0xc8>)
 80010da:	f7ff ffd1 	bl	8001080 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = S_B_Pin|S_A_Pin|D_3_Pin|S_F_Pin
 80010de:	f641 139f 	movw	r3, #6559	; 0x199f
 80010e2:	603b      	str	r3, [r7, #0]
                          |D_1_Pin|D_T_Pin|S_C_Pin|S_E_Pin
                          |D_2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010e4:	2301      	movs	r3, #1
 80010e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	463b      	mov	r3, r7
 80010f6:	4619      	mov	r1, r3
 80010f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fc:	f001 f9ce 	bl	800249c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = D_0_Pin|S_DP_Pin|S_G_Pin|S_D_Pin;
 8001100:	2333      	movs	r3, #51	; 0x33
 8001102:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001104:	2301      	movs	r3, #1
 8001106:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001114:	463b      	mov	r3, r7
 8001116:	4619      	mov	r1, r3
 8001118:	4812      	ldr	r0, [pc, #72]	; (8001164 <MX_GPIO_Init+0xc8>)
 800111a:	f001 f9bf 	bl	800249c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 800111e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001122:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001124:	2302      	movs	r3, #2
 8001126:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001134:	2307      	movs	r3, #7
 8001136:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001138:	463b      	mov	r3, r7
 800113a:	4619      	mov	r1, r3
 800113c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001140:	f001 f9ac 	bl	800249c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TLACIDLO_Pin;
 8001144:	2308      	movs	r3, #8
 8001146:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001148:	2300      	movs	r3, #0
 800114a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800114c:	2301      	movs	r3, #1
 800114e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TLACIDLO_GPIO_Port, &GPIO_InitStruct);
 8001150:	463b      	mov	r3, r7
 8001152:	4619      	mov	r1, r3
 8001154:	4803      	ldr	r0, [pc, #12]	; (8001164 <MX_GPIO_Init+0xc8>)
 8001156:	f001 f9a1 	bl	800249c <LL_GPIO_Init>

}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	48000400 	.word	0x48000400

08001168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <__NVIC_GetPriorityGrouping+0x18>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	f003 0307 	and.w	r3, r3, #7
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	2b00      	cmp	r3, #0
 8001194:	db0b      	blt.n	80011ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	f003 021f 	and.w	r2, r3, #31
 800119c:	4907      	ldr	r1, [pc, #28]	; (80011bc <__NVIC_EnableIRQ+0x38>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	2001      	movs	r0, #1
 80011a6:	fa00 f202 	lsl.w	r2, r0, r2
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000e100 	.word	0xe000e100

080011c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	db0a      	blt.n	80011ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	490c      	ldr	r1, [pc, #48]	; (800120c <__NVIC_SetPriority+0x4c>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	0112      	lsls	r2, r2, #4
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	440b      	add	r3, r1
 80011e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e8:	e00a      	b.n	8001200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4908      	ldr	r1, [pc, #32]	; (8001210 <__NVIC_SetPriority+0x50>)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	3b04      	subs	r3, #4
 80011f8:	0112      	lsls	r2, r2, #4
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	440b      	add	r3, r1
 80011fe:	761a      	strb	r2, [r3, #24]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000e100 	.word	0xe000e100
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001214:	b480      	push	{r7}
 8001216:	b089      	sub	sp, #36	; 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f1c3 0307 	rsb	r3, r3, #7
 800122e:	2b04      	cmp	r3, #4
 8001230:	bf28      	it	cs
 8001232:	2304      	movcs	r3, #4
 8001234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3304      	adds	r3, #4
 800123a:	2b06      	cmp	r3, #6
 800123c:	d902      	bls.n	8001244 <NVIC_EncodePriority+0x30>
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3b03      	subs	r3, #3
 8001242:	e000      	b.n	8001246 <NVIC_EncodePriority+0x32>
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	f04f 32ff 	mov.w	r2, #4294967295
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43da      	mvns	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	401a      	ands	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800125c:	f04f 31ff 	mov.w	r1, #4294967295
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa01 f303 	lsl.w	r3, r1, r3
 8001266:	43d9      	mvns	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	4313      	orrs	r3, r2
         );
}
 800126e:	4618      	mov	r0, r3
 8001270:	3724      	adds	r7, #36	; 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f043 0201 	orr.w	r2, r3, #1
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	601a      	str	r2, [r3, #0]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	601a      	str	r2, [r3, #0]
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	601a      	str	r2, [r3, #0]
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80012da:	b480      	push	{r7}
 80012dc:	b085      	sub	sp, #20
 80012de:	af00      	add	r7, sp, #0
 80012e0:	60f8      	str	r0, [r7, #12]
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80012ee:	f023 0306 	bic.w	r3, r3, #6
 80012f2:	68b9      	ldr	r1, [r7, #8]
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	430a      	orrs	r2, r1
 80012f8:	431a      	orrs	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	60da      	str	r2, [r3, #12]
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	60da      	str	r2, [r3, #12]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f043 0204 	orr.w	r2, r3, #4
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	601a      	str	r2, [r3, #0]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f023 0204 	bic.w	r2, r3, #4
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	601a      	str	r2, [r3, #0]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b02      	cmp	r3, #2
 800137c:	d101      	bne.n	8001382 <LL_I2C_IsActiveFlag_TXIS+0x18>
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f003 0320 	and.w	r3, r3, #32
 80013a0:	2b20      	cmp	r3, #32
 80013a2:	d101      	bne.n	80013a8 <LL_I2C_IsActiveFlag_STOP+0x18>
 80013a4:	2301      	movs	r3, #1
 80013a6:	e000      	b.n	80013aa <LL_I2C_IsActiveFlag_STOP+0x1a>
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	f043 0220 	orr.w	r2, r3, #32
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	61da      	str	r2, [r3, #28]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	605a      	str	r2, [r3, #4]
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	0d5b      	lsrs	r3, r3, #21
 800140e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <LL_I2C_HandleTransfer+0x48>)
 8001414:	430b      	orrs	r3, r1
 8001416:	43db      	mvns	r3, r3
 8001418:	401a      	ands	r2, r3
 800141a:	68b9      	ldr	r1, [r7, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4319      	orrs	r1, r3
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	041b      	lsls	r3, r3, #16
 8001424:	4319      	orrs	r1, r3
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	4319      	orrs	r1, r3
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	430b      	orrs	r3, r1
 800142e:	431a      	orrs	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	03ff7bff 	.word	0x03ff7bff

08001444 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001450:	78fa      	ldrb	r2, [r7, #3]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <LL_AHB1_GRP1_EnableClock>:
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800146e:	695a      	ldr	r2, [r3, #20]
 8001470:	4907      	ldr	r1, [pc, #28]	; (8001490 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4313      	orrs	r3, r2
 8001476:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800147a:	695a      	ldr	r2, [r3, #20]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4013      	ands	r3, r2
 8001480:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001482:	68fb      	ldr	r3, [r7, #12]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	40021000 	.word	0x40021000

08001494 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800149e:	69da      	ldr	r2, [r3, #28]
 80014a0:	4907      	ldr	r1, [pc, #28]	; (80014c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80014aa:	69da      	ldr	r2, [r3, #28]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4013      	ands	r3, r2
 80014b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014b2:	68fb      	ldr	r3, [r7, #12]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	40021000 	.word	0x40021000

080014c4 <MX_I2C1_Init>:
extern volatile uint8_t ubReceiveIndex;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08e      	sub	sp, #56	; 0x38
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
 80014d8:	611a      	str	r2, [r3, #16]
 80014da:	615a      	str	r2, [r3, #20]
 80014dc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
 80014ec:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80014ee:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80014f2:	f7ff ffb7 	bl	8001464 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80014f6:	23c0      	movs	r3, #192	; 0xc0
 80014f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80014fa:	2302      	movs	r3, #2
 80014fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80014fe:	2303      	movs	r3, #3
 8001500:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001502:	2301      	movs	r3, #1
 8001504:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001506:	2301      	movs	r3, #1
 8001508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800150a:	2304      	movs	r3, #4
 800150c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	4619      	mov	r1, r3
 8001512:	4821      	ldr	r0, [pc, #132]	; (8001598 <MX_I2C1_Init+0xd4>)
 8001514:	f000 ffc2 	bl	800249c <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001518:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800151c:	f7ff ffba 	bl	8001494 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001520:	f7ff fe22 	bl	8001168 <__NVIC_GetPriorityGrouping>
 8001524:	4603      	mov	r3, r0
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fe72 	bl	8001214 <NVIC_EncodePriority>
 8001530:	4603      	mov	r3, r0
 8001532:	4619      	mov	r1, r3
 8001534:	201f      	movs	r0, #31
 8001536:	f7ff fe43 	bl	80011c0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800153a:	201f      	movs	r0, #31
 800153c:	f7ff fe22 	bl	8001184 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001540:	4816      	ldr	r0, [pc, #88]	; (800159c <MX_I2C1_Init+0xd8>)
 8001542:	f7ff ff48 	bl	80013d6 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8001546:	4815      	ldr	r0, [pc, #84]	; (800159c <MX_I2C1_Init+0xd8>)
 8001548:	f7ff fedf 	bl	800130a <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800154c:	4813      	ldr	r0, [pc, #76]	; (800159c <MX_I2C1_Init+0xd8>)
 800154e:	f7ff feb4 	bl	80012ba <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001552:	4812      	ldr	r0, [pc, #72]	; (800159c <MX_I2C1_Init+0xd8>)
 8001554:	f7ff fea1 	bl	800129a <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 800155c:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <MX_I2C1_Init+0xdc>)
 800155e:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8001568:	2302      	movs	r3, #2
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800156c:	2300      	movs	r3, #0
 800156e:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001570:	2300      	movs	r3, #0
 8001572:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	4619      	mov	r1, r3
 800157a:	4808      	ldr	r0, [pc, #32]	; (800159c <MX_I2C1_Init+0xd8>)
 800157c:	f001 f8a1 	bl	80026c2 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001580:	2200      	movs	r2, #0
 8001582:	2100      	movs	r1, #0
 8001584:	4805      	ldr	r0, [pc, #20]	; (800159c <MX_I2C1_Init+0xd8>)
 8001586:	f7ff fea8 	bl	80012da <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 800158a:	4804      	ldr	r0, [pc, #16]	; (800159c <MX_I2C1_Init+0xd8>)
 800158c:	f7ff fe75 	bl	800127a <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8001590:	bf00      	nop
 8001592:	3738      	adds	r7, #56	; 0x38
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	48000400 	.word	0x48000400
 800159c:	40005400 	.word	0x40005400
 80015a0:	2000090e 	.word	0x2000090e

080015a4 <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af02      	add	r7, sp, #8
 80015aa:	4604      	mov	r4, r0
 80015ac:	4608      	mov	r0, r1
 80015ae:	4611      	mov	r1, r2
 80015b0:	461a      	mov	r2, r3
 80015b2:	4623      	mov	r3, r4
 80015b4:	71fb      	strb	r3, [r7, #7]
 80015b6:	4603      	mov	r3, r0
 80015b8:	71bb      	strb	r3, [r7, #6]
 80015ba:	460b      	mov	r3, r1
 80015bc:	717b      	strb	r3, [r7, #5]
 80015be:	4613      	mov	r3, r2
 80015c0:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 80015c2:	793b      	ldrb	r3, [r7, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 80015c8:	79bb      	ldrb	r3, [r7, #6]
 80015ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015ce:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80015d0:	7979      	ldrb	r1, [r7, #5]
 80015d2:	4b14      	ldr	r3, [pc, #80]	; (8001624 <i2c_master_write+0x80>)
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2302      	movs	r3, #2
 80015de:	2200      	movs	r2, #0
 80015e0:	4811      	ldr	r0, [pc, #68]	; (8001628 <i2c_master_write+0x84>)
 80015e2:	f7ff ff09 	bl	80013f8 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 80015e6:	79bb      	ldrb	r3, [r7, #6]
 80015e8:	4619      	mov	r1, r3
 80015ea:	480f      	ldr	r0, [pc, #60]	; (8001628 <i2c_master_write+0x84>)
 80015ec:	f7ff ff2a 	bl	8001444 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80015f0:	e00a      	b.n	8001608 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 80015f2:	480d      	ldr	r0, [pc, #52]	; (8001628 <i2c_master_write+0x84>)
 80015f4:	f7ff feb9 	bl	800136a <LL_I2C_IsActiveFlag_TXIS>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d004      	beq.n	8001608 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	4619      	mov	r1, r3
 8001602:	4809      	ldr	r0, [pc, #36]	; (8001628 <i2c_master_write+0x84>)
 8001604:	f7ff ff1e 	bl	8001444 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001608:	4807      	ldr	r0, [pc, #28]	; (8001628 <i2c_master_write+0x84>)
 800160a:	f7ff fec1 	bl	8001390 <LL_I2C_IsActiveFlag_STOP>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0ee      	beq.n	80015f2 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001614:	4804      	ldr	r0, [pc, #16]	; (8001628 <i2c_master_write+0x84>)
 8001616:	f7ff fece 	bl	80013b6 <LL_I2C_ClearFlag_STOP>
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bd90      	pop	{r4, r7, pc}
 8001622:	bf00      	nop
 8001624:	80002000 	.word	0x80002000
 8001628:	40005400 	.word	0x40005400

0800162c <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af02      	add	r7, sp, #8
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	4608      	mov	r0, r1
 8001636:	4611      	mov	r1, r2
 8001638:	461a      	mov	r2, r3
 800163a:	4603      	mov	r3, r0
 800163c:	70fb      	strb	r3, [r7, #3]
 800163e:	460b      	mov	r3, r1
 8001640:	70bb      	strb	r3, [r7, #2]
 8001642:	4613      	mov	r3, r2
 8001644:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 8001646:	4a30      	ldr	r2, [pc, #192]	; (8001708 <i2c_master_read+0xdc>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6013      	str	r3, [r2, #0]

	if(read_flag)
 800164c:	7c3b      	ldrb	r3, [r7, #16]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8001652:	78bb      	ldrb	r3, [r7, #2]
 8001654:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001658:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 800165a:	4b2c      	ldr	r3, [pc, #176]	; (800170c <i2c_master_read+0xe0>)
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8001660:	482b      	ldr	r0, [pc, #172]	; (8001710 <i2c_master_read+0xe4>)
 8001662:	f7ff fe62 	bl	800132a <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001666:	7879      	ldrb	r1, [r7, #1]
 8001668:	4b2a      	ldr	r3, [pc, #168]	; (8001714 <i2c_master_read+0xe8>)
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2301      	movs	r3, #1
 8001674:	2200      	movs	r2, #0
 8001676:	4826      	ldr	r0, [pc, #152]	; (8001710 <i2c_master_read+0xe4>)
 8001678:	f7ff febe 	bl	80013f8 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800167c:	e00a      	b.n	8001694 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 800167e:	4824      	ldr	r0, [pc, #144]	; (8001710 <i2c_master_read+0xe4>)
 8001680:	f7ff fe73 	bl	800136a <LL_I2C_IsActiveFlag_TXIS>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d004      	beq.n	8001694 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 800168a:	78bb      	ldrb	r3, [r7, #2]
 800168c:	4619      	mov	r1, r3
 800168e:	4820      	ldr	r0, [pc, #128]	; (8001710 <i2c_master_read+0xe4>)
 8001690:	f7ff fed8 	bl	8001444 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001694:	481e      	ldr	r0, [pc, #120]	; (8001710 <i2c_master_read+0xe4>)
 8001696:	f7ff fe7b 	bl	8001390 <LL_I2C_IsActiveFlag_STOP>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0ee      	beq.n	800167e <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80016a0:	481b      	ldr	r0, [pc, #108]	; (8001710 <i2c_master_read+0xe4>)
 80016a2:	f7ff fe88 	bl	80013b6 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 80016a6:	bf00      	nop
 80016a8:	4819      	ldr	r0, [pc, #100]	; (8001710 <i2c_master_read+0xe4>)
 80016aa:	f7ff fe71 	bl	8001390 <LL_I2C_IsActiveFlag_STOP>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f9      	bne.n	80016a8 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 80016b4:	7879      	ldrb	r1, [r7, #1]
 80016b6:	78fb      	ldrb	r3, [r7, #3]
 80016b8:	4a17      	ldr	r2, [pc, #92]	; (8001718 <i2c_master_read+0xec>)
 80016ba:	9201      	str	r2, [sp, #4]
 80016bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016c0:	9200      	str	r2, [sp, #0]
 80016c2:	2200      	movs	r2, #0
 80016c4:	4812      	ldr	r0, [pc, #72]	; (8001710 <i2c_master_read+0xe4>)
 80016c6:	f7ff fe97 	bl	80013f8 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 80016ca:	bf00      	nop
 80016cc:	4810      	ldr	r0, [pc, #64]	; (8001710 <i2c_master_read+0xe4>)
 80016ce:	f7ff fe5f 	bl	8001390 <LL_I2C_IsActiveFlag_STOP>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f9      	beq.n	80016cc <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 80016d8:	480d      	ldr	r0, [pc, #52]	; (8001710 <i2c_master_read+0xe4>)
 80016da:	f7ff fe6c 	bl	80013b6 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 80016de:	480c      	ldr	r0, [pc, #48]	; (8001710 <i2c_master_read+0xe4>)
 80016e0:	f7ff fe33 	bl	800134a <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <i2c_master_read+0xe4>)
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	4a09      	ldr	r2, [pc, #36]	; (8001710 <i2c_master_read+0xe4>)
 80016ea:	f043 0310 	orr.w	r3, r3, #16
 80016ee:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 80016f0:	4b0a      	ldr	r3, [pc, #40]	; (800171c <i2c_master_read+0xf0>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 80016f6:	4b05      	ldr	r3, [pc, #20]	; (800170c <i2c_master_read+0xe0>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 80016fc:	4b02      	ldr	r3, [pc, #8]	; (8001708 <i2c_master_read+0xdc>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	2000021c 	.word	0x2000021c
 800170c:	20000220 	.word	0x20000220
 8001710:	40005400 	.word	0x40005400
 8001714:	80002000 	.word	0x80002000
 8001718:	80002400 	.word	0x80002400
 800171c:	20000218 	.word	0x20000218

08001720 <__NVIC_SetPriorityGrouping>:
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <__NVIC_SetPriorityGrouping+0x44>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800173c:	4013      	ands	r3, r2
 800173e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800174c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001752:	4a04      	ldr	r2, [pc, #16]	; (8001764 <__NVIC_SetPriorityGrouping+0x44>)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	60d3      	str	r3, [r2, #12]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800176c:	4b05      	ldr	r3, [pc, #20]	; (8001784 <LL_RCC_HSI_Enable+0x1c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a04      	ldr	r2, [pc, #16]	; (8001784 <LL_RCC_HSI_Enable+0x1c>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	6013      	str	r3, [r2, #0]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000

08001788 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <LL_RCC_HSI_IsReady+0x20>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b02      	cmp	r3, #2
 8001796:	bf0c      	ite	eq
 8001798:	2301      	moveq	r3, #1
 800179a:	2300      	movne	r3, #0
 800179c:	b2db      	uxtb	r3, r3
}
 800179e:	4618      	mov	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	40021000 	.word	0x40021000

080017ac <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	4904      	ldr	r1, [pc, #16]	; (80017d4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	600b      	str	r3, [r1, #0]
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000

080017d8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <LL_RCC_SetSysClkSource+0x24>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f023 0203 	bic.w	r2, r3, #3
 80017e8:	4904      	ldr	r1, [pc, #16]	; (80017fc <LL_RCC_SetSysClkSource+0x24>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	604b      	str	r3, [r1, #4]
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	40021000 	.word	0x40021000

08001800 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <LL_RCC_GetSysClkSource+0x18>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 030c 	and.w	r3, r3, #12
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40021000 	.word	0x40021000

0800181c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <LL_RCC_SetAHBPrescaler+0x24>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800182c:	4904      	ldr	r1, [pc, #16]	; (8001840 <LL_RCC_SetAHBPrescaler+0x24>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	40021000 	.word	0x40021000

08001844 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <LL_RCC_SetAPB1Prescaler+0x24>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001854:	4904      	ldr	r1, [pc, #16]	; (8001868 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4313      	orrs	r3, r2
 800185a:	604b      	str	r3, [r1, #4]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	40021000 	.word	0x40021000

0800186c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800187c:	4904      	ldr	r1, [pc, #16]	; (8001890 <LL_RCC_SetAPB2Prescaler+0x24>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4313      	orrs	r3, r2
 8001882:	604b      	str	r3, [r1, #4]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	40021000 	.word	0x40021000

08001894 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <LL_RCC_SetI2CClockSource+0x2c>)
 800189e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	0e1b      	lsrs	r3, r3, #24
 80018a4:	43db      	mvns	r3, r3
 80018a6:	401a      	ands	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80018ae:	4904      	ldr	r1, [pc, #16]	; (80018c0 <LL_RCC_SetI2CClockSource+0x2c>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	630b      	str	r3, [r1, #48]	; 0x30
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	40021000 	.word	0x40021000

080018c4 <LL_APB1_GRP1_EnableClock>:
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80018cc:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018ce:	69da      	ldr	r2, [r3, #28]
 80018d0:	4907      	ldr	r1, [pc, #28]	; (80018f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018da:	69da      	ldr	r2, [r3, #28]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4013      	ands	r3, r2
 80018e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018e2:	68fb      	ldr	r3, [r7, #12]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	40021000 	.word	0x40021000

080018f4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018fe:	699a      	ldr	r2, [r3, #24]
 8001900:	4907      	ldr	r1, [pc, #28]	; (8001920 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4313      	orrs	r3, r2
 8001906:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <LL_APB2_GRP1_EnableClock+0x2c>)
 800190a:	699a      	ldr	r2, [r3, #24]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4013      	ands	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001912:	68fb      	ldr	r3, [r7, #12]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40021000 	.word	0x40021000

08001924 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <LL_FLASH_SetLatency+0x24>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f023 0207 	bic.w	r2, r3, #7
 8001934:	4904      	ldr	r1, [pc, #16]	; (8001948 <LL_FLASH_SetLatency+0x24>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4313      	orrs	r3, r2
 800193a:	600b      	str	r3, [r1, #0]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	40022000 	.word	0x40022000

0800194c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <LL_FLASH_GetLatency+0x18>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0307 	and.w	r3, r3, #7
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40022000 	.word	0x40022000

08001968 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	DisplayDigit_0.index = 0;
 800196e:	4b56      	ldr	r3, [pc, #344]	; (8001ac8 <main+0x160>)
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]
	DisplayDigit_0.chr = 0;
 8001974:	4b54      	ldr	r3, [pc, #336]	; (8001ac8 <main+0x160>)
 8001976:	2200      	movs	r2, #0
 8001978:	705a      	strb	r2, [r3, #1]
	DisplayDigit_1.index = 1;
 800197a:	4b54      	ldr	r3, [pc, #336]	; (8001acc <main+0x164>)
 800197c:	2201      	movs	r2, #1
 800197e:	701a      	strb	r2, [r3, #0]
	DisplayDigit_1.chr = 0;
 8001980:	4b52      	ldr	r3, [pc, #328]	; (8001acc <main+0x164>)
 8001982:	2200      	movs	r2, #0
 8001984:	705a      	strb	r2, [r3, #1]
	DisplayDigit_2.index = 2;
 8001986:	4b52      	ldr	r3, [pc, #328]	; (8001ad0 <main+0x168>)
 8001988:	2202      	movs	r2, #2
 800198a:	701a      	strb	r2, [r3, #0]
	DisplayDigit_2.chr = 0;
 800198c:	4b50      	ldr	r3, [pc, #320]	; (8001ad0 <main+0x168>)
 800198e:	2200      	movs	r2, #0
 8001990:	705a      	strb	r2, [r3, #1]
	DisplayDigit_3.index = 3;
 8001992:	4b50      	ldr	r3, [pc, #320]	; (8001ad4 <main+0x16c>)
 8001994:	2203      	movs	r2, #3
 8001996:	701a      	strb	r2, [r3, #0]
	DisplayDigit_3.chr = 0;
 8001998:	4b4e      	ldr	r3, [pc, #312]	; (8001ad4 <main+0x16c>)
 800199a:	2200      	movs	r2, #0
 800199c:	705a      	strb	r2, [r3, #1]
	nextStringSequence = false;
 800199e:	4b4e      	ldr	r3, [pc, #312]	; (8001ad8 <main+0x170>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
	Direction_ direction = Direction_DownUp;
 80019a4:	2300      	movs	r3, #0
 80019a6:	75fb      	strb	r3, [r7, #23]
	//*aReceiveBuffer_read = 0;
	end_of_read_flag = 0;
 80019a8:	4b4c      	ldr	r3, [pc, #304]	; (8001adc <main+0x174>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
	ubReceiveIndex = 0;
 80019ae:	4b4c      	ldr	r3, [pc, #304]	; (8001ae0 <main+0x178>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80019b4:	2001      	movs	r0, #1
 80019b6:	f7ff ff9d 	bl	80018f4 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80019ba:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80019be:	f7ff ff81 	bl	80018c4 <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c2:	2003      	movs	r0, #3
 80019c4:	f7ff feac 	bl	8001720 <__NVIC_SetPriorityGrouping>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80019c8:	f000 f89e 	bl	8001b08 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80019cc:	f7ff fb66 	bl	800109c <MX_GPIO_Init>
	MX_I2C1_Init();
 80019d0:	f7ff fd78 	bl	80014c4 <MX_I2C1_Init>
	MX_TIM6_Init();
 80019d4:	f000 fbb4 	bl	8002140 <MX_TIM6_Init>
	MX_TIM7_Init();
 80019d8:	f000 fbf2 	bl	80021c0 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */
	lsm6ds0_init();
 80019dc:	f001 f862 	bl	8002aa4 <lsm6ds0_init>
	hts221_init();
 80019e0:	f001 f8da 	bl	8002b98 <hts221_init>
	lps25hb_init();
 80019e4:	f001 fa8e 	bl	8002f04 <lps25hb_init>
	uint8_t index = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	75bb      	strb	r3, [r7, #22]
	uint8_t string[STR_LEN] = { 0 };
 80019ec:	2300      	movs	r3, #0
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]
	uint8_t lenString = STR_LEN;
 80019fc:	2314      	movs	r3, #20
 80019fe:	757b      	strb	r3, [r7, #21]
	setString(string, TEMPERATURE_STR_TEXT, TEMPERATURE_STR_PROT, temperature);
 8001a00:	4b38      	ldr	r3, [pc, #224]	; (8001ae4 <main+0x17c>)
 8001a02:	edd3 7a00 	vldr	s15, [r3]
 8001a06:	463b      	mov	r3, r7
 8001a08:	eeb0 0a67 	vmov.f32	s0, s15
 8001a0c:	4a36      	ldr	r2, [pc, #216]	; (8001ae8 <main+0x180>)
 8001a0e:	4937      	ldr	r1, [pc, #220]	; (8001aec <main+0x184>)
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 f8af 	bl	8001b74 <setString>
	lenString = strlen((const char*) string);
 8001a16:	463b      	mov	r3, r7
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe fbd9 	bl	80001d0 <strlen>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	757b      	strb	r3, [r7, #21]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (nextStringSequence) {
 8001a22:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <main+0x170>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0fb      	beq.n	8001a22 <main+0xba>
			nextStringSequence = false;
 8001a2a:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <main+0x170>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
			lsm6ds0_get_acc(acc, (acc + 1), (acc + 2));
 8001a30:	4b2f      	ldr	r3, [pc, #188]	; (8001af0 <main+0x188>)
 8001a32:	4a30      	ldr	r2, [pc, #192]	; (8001af4 <main+0x18c>)
 8001a34:	4619      	mov	r1, r3
 8001a36:	4830      	ldr	r0, [pc, #192]	; (8001af8 <main+0x190>)
 8001a38:	f000 ffd2 	bl	80029e0 <lsm6ds0_get_acc>
			hts221_get_humidity(&humidity);
 8001a3c:	482f      	ldr	r0, [pc, #188]	; (8001afc <main+0x194>)
 8001a3e:	f001 f8f9 	bl	8002c34 <hts221_get_humidity>
			hts221_get_temperature(&temperature);
 8001a42:	4828      	ldr	r0, [pc, #160]	; (8001ae4 <main+0x17c>)
 8001a44:	f001 f946 	bl	8002cd4 <hts221_get_temperature>
			setString(string, HUMIDITY_STR_TEXT, HUMIDITY_STR_PROT, humidity);
 8001a48:	4b2c      	ldr	r3, [pc, #176]	; (8001afc <main+0x194>)
 8001a4a:	edd3 7a00 	vldr	s15, [r3]
 8001a4e:	463b      	mov	r3, r7
 8001a50:	eeb0 0a67 	vmov.f32	s0, s15
 8001a54:	4a2a      	ldr	r2, [pc, #168]	; (8001b00 <main+0x198>)
 8001a56:	492b      	ldr	r1, [pc, #172]	; (8001b04 <main+0x19c>)
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f000 f88b 	bl	8001b74 <setString>
			lenString = strlen((const char*) string);
 8001a5e:	463b      	mov	r3, r7
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7fe fbb5 	bl	80001d0 <strlen>
 8001a66:	4603      	mov	r3, r0
 8001a68:	757b      	strb	r3, [r7, #21]
			displayString(index, string, lenString);
 8001a6a:	7d7a      	ldrb	r2, [r7, #21]
 8001a6c:	4639      	mov	r1, r7
 8001a6e:	7dbb      	ldrb	r3, [r7, #22]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 f8a1 	bl	8001bb8 <displayString>
			if (index + STR_DISP_LEN < lenString
 8001a76:	7dbb      	ldrb	r3, [r7, #22]
 8001a78:	1d1a      	adds	r2, r3, #4
 8001a7a:	7d7b      	ldrb	r3, [r7, #21]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	da06      	bge.n	8001a8e <main+0x126>
					&& direction == Direction_DownUp) {
 8001a80:	7dfb      	ldrb	r3, [r7, #23]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d103      	bne.n	8001a8e <main+0x126>
				index++;
 8001a86:	7dbb      	ldrb	r3, [r7, #22]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	75bb      	strb	r3, [r7, #22]
 8001a8c:	e009      	b.n	8001aa2 <main+0x13a>
			} else if (index + STR_DISP_LEN >= lenString
 8001a8e:	7dbb      	ldrb	r3, [r7, #22]
 8001a90:	1d1a      	adds	r2, r3, #4
 8001a92:	7d7b      	ldrb	r3, [r7, #21]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	db04      	blt.n	8001aa2 <main+0x13a>
					&& direction == Direction_DownUp) {
 8001a98:	7dfb      	ldrb	r3, [r7, #23]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <main+0x13a>
				direction = Direction_UpDown;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	75fb      	strb	r3, [r7, #23]
			}
			if (index > 0 && direction == Direction_UpDown) {
 8001aa2:	7dbb      	ldrb	r3, [r7, #22]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d006      	beq.n	8001ab6 <main+0x14e>
 8001aa8:	7dfb      	ldrb	r3, [r7, #23]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d103      	bne.n	8001ab6 <main+0x14e>
				index--;
 8001aae:	7dbb      	ldrb	r3, [r7, #22]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	75bb      	strb	r3, [r7, #22]
 8001ab4:	e007      	b.n	8001ac6 <main+0x15e>
			} else if (index == 0 && direction == Direction_UpDown) {
 8001ab6:	7dbb      	ldrb	r3, [r7, #22]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1b2      	bne.n	8001a22 <main+0xba>
 8001abc:	7dfb      	ldrb	r3, [r7, #23]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d1af      	bne.n	8001a22 <main+0xba>
				direction = Direction_DownUp;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	75fb      	strb	r3, [r7, #23]
		if (nextStringSequence) {
 8001ac6:	e7ac      	b.n	8001a22 <main+0xba>
 8001ac8:	20000214 	.word	0x20000214
 8001acc:	2000020c 	.word	0x2000020c
 8001ad0:	20000208 	.word	0x20000208
 8001ad4:	20000210 	.word	0x20000210
 8001ad8:	20000230 	.word	0x20000230
 8001adc:	20000220 	.word	0x20000220
 8001ae0:	20000218 	.word	0x20000218
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	08005da8 	.word	0x08005da8
 8001aec:	08005da0 	.word	0x08005da0
 8001af0:	20000228 	.word	0x20000228
 8001af4:	2000022c 	.word	0x2000022c
 8001af8:	20000224 	.word	0x20000224
 8001afc:	20000234 	.word	0x20000234
 8001b00:	08005db8 	.word	0x08005db8
 8001b04:	08005db0 	.word	0x08005db0

08001b08 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f7ff ff09 	bl	8001924 <LL_FLASH_SetLatency>
	while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0) {
 8001b12:	bf00      	nop
 8001b14:	f7ff ff1a 	bl	800194c <LL_FLASH_GetLatency>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1fa      	bne.n	8001b14 <SystemClock_Config+0xc>
	}
	LL_RCC_HSI_Enable();
 8001b1e:	f7ff fe23 	bl	8001768 <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while (LL_RCC_HSI_IsReady() != 1) {
 8001b22:	bf00      	nop
 8001b24:	f7ff fe30 	bl	8001788 <LL_RCC_HSI_IsReady>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d1fa      	bne.n	8001b24 <SystemClock_Config+0x1c>

	}
	LL_RCC_HSI_SetCalibTrimming(16);
 8001b2e:	2010      	movs	r0, #16
 8001b30:	f7ff fe3c 	bl	80017ac <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001b34:	2000      	movs	r0, #0
 8001b36:	f7ff fe71 	bl	800181c <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f7ff fe82 	bl	8001844 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001b40:	2000      	movs	r0, #0
 8001b42:	f7ff fe93 	bl	800186c <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001b46:	2000      	movs	r0, #0
 8001b48:	f7ff fe46 	bl	80017d8 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8001b4c:	bf00      	nop
 8001b4e:	f7ff fe57 	bl	8001800 <LL_RCC_GetSysClkSource>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1fa      	bne.n	8001b4e <SystemClock_Config+0x46>

	}
	LL_Init1msTick(8000000);
 8001b58:	4805      	ldr	r0, [pc, #20]	; (8001b70 <SystemClock_Config+0x68>)
 8001b5a:	f000 feb5 	bl	80028c8 <LL_Init1msTick>
	LL_SetSystemCoreClock(8000000);
 8001b5e:	4804      	ldr	r0, [pc, #16]	; (8001b70 <SystemClock_Config+0x68>)
 8001b60:	f000 fee6 	bl	8002930 <LL_SetSystemCoreClock>
	LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001b64:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001b68:	f7ff fe94 	bl	8001894 <LL_RCC_SetI2CClockSource>
}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	007a1200 	.word	0x007a1200

08001b74 <setString>:

/* USER CODE BEGIN 4 */
void setString(uint8_t *str, const uint8_t *strText, const uint8_t *strProt,
		float value) {
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	ed87 0a00 	vstr	s0, [r7]
	strcpy((char*) str, (const char*) strText);
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f001 fed6 	bl	8003938 <strcpy>
	uint16_t len = strlen((const char*) str);
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f7fe fb1f 	bl	80001d0 <strlen>
 8001b92:	4603      	mov	r3, r0
 8001b94:	82fb      	strh	r3, [r7, #22]
	sprintf((char*) (str+len), (const char*) strProt, value);
 8001b96:	8afb      	ldrh	r3, [r7, #22]
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	18d4      	adds	r4, r2, r3
 8001b9c:	6838      	ldr	r0, [r7, #0]
 8001b9e:	f7fe fcd3 	bl	8000548 <__aeabi_f2d>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	4620      	mov	r0, r4
 8001baa:	f001 fea5 	bl	80038f8 <siprintf>
}
 8001bae:	bf00      	nop
 8001bb0:	371c      	adds	r7, #28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd90      	pop	{r4, r7, pc}
	...

08001bb8 <displayString>:
uint8_t displayString(uint8_t index, uint8_t *str, uint8_t length) {
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	6039      	str	r1, [r7, #0]
 8001bc2:	71fb      	strb	r3, [r7, #7]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	71bb      	strb	r3, [r7, #6]
	uint8_t result = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	73fb      	strb	r3, [r7, #15]
	if (index + STR_DISP_LEN <= length) {
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	1cda      	adds	r2, r3, #3
 8001bd0:	79bb      	ldrb	r3, [r7, #6]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	da15      	bge.n	8001c02 <displayString+0x4a>
		uint8_t dispStr[STR_DISP_LEN] = { 0 };
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
		memcpy(dispStr, str + index, STR_DISP_LEN);
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	4413      	add	r3, r2
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	60bb      	str	r3, [r7, #8]
		result = index + STR_DISP_LEN;
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	3304      	adds	r3, #4
 8001be8:	73fb      	strb	r3, [r7, #15]
		DisplayDigit_0.chr = dispStr[0];
 8001bea:	7a3a      	ldrb	r2, [r7, #8]
 8001bec:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <displayString+0x58>)
 8001bee:	705a      	strb	r2, [r3, #1]
		DisplayDigit_1.chr = dispStr[1];
 8001bf0:	7a7a      	ldrb	r2, [r7, #9]
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <displayString+0x5c>)
 8001bf4:	705a      	strb	r2, [r3, #1]
		DisplayDigit_2.chr = dispStr[2];
 8001bf6:	7aba      	ldrb	r2, [r7, #10]
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <displayString+0x60>)
 8001bfa:	705a      	strb	r2, [r3, #1]
		DisplayDigit_3.chr = dispStr[3];
 8001bfc:	7afa      	ldrb	r2, [r7, #11]
 8001bfe:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <displayString+0x64>)
 8001c00:	705a      	strb	r2, [r3, #1]

	}
	return result;
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	20000214 	.word	0x20000214
 8001c14:	2000020c 	.word	0x2000020c
 8001c18:	20000208 	.word	0x20000208
 8001c1c:	20000210 	.word	0x20000210

08001c20 <LL_I2C_IsActiveFlag_RXNE>:
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d101      	bne.n	8001c38 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8001c34:	2301      	movs	r3, #1
 8001c36:	e000      	b.n	8001c3a <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <LL_I2C_ReceiveData8>:
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	b2db      	uxtb	r3, r3
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f06f 0201 	mvn.w	r2, #1
 8001c6e:	611a      	str	r2, [r3, #16]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d101      	bne.n	8001c94 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001ca6:	e7fe      	b.n	8001ca6 <NMI_Handler+0x4>

08001ca8 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8001cac:	e7fe      	b.n	8001cac <HardFault_Handler+0x4>

08001cae <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001cb2:	e7fe      	b.n	8001cb2 <MemManage_Handler+0x4>

08001cb4 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8001cb8:	e7fe      	b.n	8001cb8 <BusFault_Handler+0x4>

08001cba <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8001cbe:	e7fe      	b.n	8001cbe <UsageFault_Handler+0x4>

08001cc0 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0
	/* USER CODE END SysTick_IRQn 0 */

	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <I2C1_EV_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
 */
void I2C1_EV_IRQHandler(void) {
 8001cf8:	b598      	push	{r3, r4, r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C1_EV_IRQn 0 */
	if (LL_I2C_IsActiveFlag_RXNE(I2C1)) {
 8001cfc:	4812      	ldr	r0, [pc, #72]	; (8001d48 <I2C1_EV_IRQHandler+0x50>)
 8001cfe:	f7ff ff8f 	bl	8001c20 <LL_I2C_IsActiveFlag_RXNE>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d01c      	beq.n	8001d42 <I2C1_EV_IRQHandler+0x4a>
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8001d08:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <I2C1_EV_IRQHandler+0x54>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <I2C1_EV_IRQHandler+0x58>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	1c59      	adds	r1, r3, #1
 8001d14:	b2c8      	uxtb	r0, r1
 8001d16:	490e      	ldr	r1, [pc, #56]	; (8001d50 <I2C1_EV_IRQHandler+0x58>)
 8001d18:	7008      	strb	r0, [r1, #0]
 8001d1a:	18d4      	adds	r4, r2, r3
 8001d1c:	480a      	ldr	r0, [pc, #40]	; (8001d48 <I2C1_EV_IRQHandler+0x50>)
 8001d1e:	f7ff ff92 	bl	8001c46 <LL_I2C_ReceiveData8>
 8001d22:	4603      	mov	r3, r0
 8001d24:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <I2C1_EV_IRQHandler+0x58>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b13      	cmp	r3, #19
 8001d2e:	d903      	bls.n	8001d38 <I2C1_EV_IRQHandler+0x40>
 8001d30:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <I2C1_EV_IRQHandler+0x58>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
 8001d36:	e001      	b.n	8001d3c <I2C1_EV_IRQHandler+0x44>
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <I2C1_EV_IRQHandler+0x58>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <I2C1_EV_IRQHandler+0x5c>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
	/* USER CODE END I2C1_EV_IRQn 0 */

	/* USER CODE BEGIN I2C1_EV_IRQn 1 */

	/* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd98      	pop	{r3, r4, r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40005400 	.word	0x40005400
 8001d4c:	2000021c 	.word	0x2000021c
 8001d50:	20000218 	.word	0x20000218
 8001d54:	20000220 	.word	0x20000220

08001d58 <TIM6_DAC1_IRQHandler>:

/**
 * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
 */
void TIM6_DAC1_IRQHandler(void) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC1_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM6)) {
 8001d5c:	4806      	ldr	r0, [pc, #24]	; (8001d78 <TIM6_DAC1_IRQHandler+0x20>)
 8001d5e:	f7ff ff8d 	bl	8001c7c <LL_TIM_IsActiveFlag_UPDATE>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <TIM6_DAC1_IRQHandler+0x14>
		updateDisplay();
 8001d68:	f7ff f840 	bl	8000dec <updateDisplay>
	}
	/* USER CODE END TIM6_DAC1_IRQn 0 */

	/* USER CODE BEGIN TIM6_DAC1_IRQn 1 */
	LL_TIM_ClearFlag_UPDATE(TIM6);
 8001d6c:	4802      	ldr	r0, [pc, #8]	; (8001d78 <TIM6_DAC1_IRQHandler+0x20>)
 8001d6e:	f7ff ff77 	bl	8001c60 <LL_TIM_ClearFlag_UPDATE>
	/* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40001000 	.word	0x40001000

08001d7c <TIM7_DAC2_IRQHandler>:

/**
 * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
 */
void TIM7_DAC2_IRQHandler(void) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM7_DAC2_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM7)) {
 8001d80:	4806      	ldr	r0, [pc, #24]	; (8001d9c <TIM7_DAC2_IRQHandler+0x20>)
 8001d82:	f7ff ff7b 	bl	8001c7c <LL_TIM_IsActiveFlag_UPDATE>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <TIM7_DAC2_IRQHandler+0x16>
		nextStringSequence = true;
 8001d8c:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <TIM7_DAC2_IRQHandler+0x24>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END TIM7_DAC2_IRQn 0 */

	/* USER CODE BEGIN TIM7_DAC2_IRQn 1 */
	LL_TIM_ClearFlag_UPDATE(TIM7);
 8001d92:	4802      	ldr	r0, [pc, #8]	; (8001d9c <TIM7_DAC2_IRQHandler+0x20>)
 8001d94:	f7ff ff64 	bl	8001c60 <LL_TIM_ClearFlag_UPDATE>
	/* USER CODE END TIM7_DAC2_IRQn 1 */
}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40001400 	.word	0x40001400
 8001da0:	20000230 	.word	0x20000230

08001da4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
	return 1;
 8001da8:	2301      	movs	r3, #1
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <_kill>:

int _kill(int pid, int sig)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dbe:	f001 f8ff 	bl	8002fc0 <__errno>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2216      	movs	r2, #22
 8001dc6:	601a      	str	r2, [r3, #0]
	return -1;
 8001dc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_exit>:

void _exit (int status)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff ffe7 	bl	8001db4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001de6:	e7fe      	b.n	8001de6 <_exit+0x12>

08001de8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	e00a      	b.n	8001e10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dfa:	f3af 8000 	nop.w
 8001dfe:	4601      	mov	r1, r0
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	60ba      	str	r2, [r7, #8]
 8001e06:	b2ca      	uxtb	r2, r1
 8001e08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	dbf0      	blt.n	8001dfa <_read+0x12>
	}

return len;
 8001e18:	687b      	ldr	r3, [r7, #4]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	e009      	b.n	8001e48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	60ba      	str	r2, [r7, #8]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	3301      	adds	r3, #1
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	dbf1      	blt.n	8001e34 <_write+0x12>
	}
	return len;
 8001e50:	687b      	ldr	r3, [r7, #4]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <_close>:

int _close(int file)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
	return -1;
 8001e62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e82:	605a      	str	r2, [r3, #4]
	return 0;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <_isatty>:

int _isatty(int file)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
	return 1;
 8001e9a:	2301      	movs	r3, #1
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
	return 0;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ecc:	4a14      	ldr	r2, [pc, #80]	; (8001f20 <_sbrk+0x5c>)
 8001ece:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <_sbrk+0x60>)
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed8:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <_sbrk+0x64>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d102      	bne.n	8001ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <_sbrk+0x64>)
 8001ee2:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <_sbrk+0x68>)
 8001ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <_sbrk+0x64>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d207      	bcs.n	8001f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ef4:	f001 f864 	bl	8002fc0 <__errno>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	220c      	movs	r2, #12
 8001efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295
 8001f02:	e009      	b.n	8001f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f04:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <_sbrk+0x64>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f0a:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <_sbrk+0x64>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	4a05      	ldr	r2, [pc, #20]	; (8001f28 <_sbrk+0x64>)
 8001f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f16:	68fb      	ldr	r3, [r7, #12]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20003000 	.word	0x20003000
 8001f24:	00000400 	.word	0x00000400
 8001f28:	200001fc 	.word	0x200001fc
 8001f2c:	20000268 	.word	0x20000268

08001f30 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <SystemInit+0x20>)
 8001f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3a:	4a05      	ldr	r2, [pc, #20]	; (8001f50 <SystemInit+0x20>)
 8001f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <__NVIC_GetPriorityGrouping>:
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f58:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <__NVIC_GetPriorityGrouping+0x18>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	0a1b      	lsrs	r3, r3, #8
 8001f5e:	f003 0307 	and.w	r3, r3, #7
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <__NVIC_EnableIRQ>:
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	db0b      	blt.n	8001f9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	f003 021f 	and.w	r2, r3, #31
 8001f88:	4907      	ldr	r1, [pc, #28]	; (8001fa8 <__NVIC_EnableIRQ+0x38>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	2001      	movs	r0, #1
 8001f92:	fa00 f202 	lsl.w	r2, r0, r2
 8001f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000e100 	.word	0xe000e100

08001fac <__NVIC_SetPriority>:
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	6039      	str	r1, [r7, #0]
 8001fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	db0a      	blt.n	8001fd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	490c      	ldr	r1, [pc, #48]	; (8001ff8 <__NVIC_SetPriority+0x4c>)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	0112      	lsls	r2, r2, #4
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	440b      	add	r3, r1
 8001fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001fd4:	e00a      	b.n	8001fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4908      	ldr	r1, [pc, #32]	; (8001ffc <__NVIC_SetPriority+0x50>)
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	3b04      	subs	r3, #4
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	440b      	add	r3, r1
 8001fea:	761a      	strb	r2, [r3, #24]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000e100 	.word	0xe000e100
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <NVIC_EncodePriority>:
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	; 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f1c3 0307 	rsb	r3, r3, #7
 800201a:	2b04      	cmp	r3, #4
 800201c:	bf28      	it	cs
 800201e:	2304      	movcs	r3, #4
 8002020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3304      	adds	r3, #4
 8002026:	2b06      	cmp	r3, #6
 8002028:	d902      	bls.n	8002030 <NVIC_EncodePriority+0x30>
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3b03      	subs	r3, #3
 800202e:	e000      	b.n	8002032 <NVIC_EncodePriority+0x32>
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	f04f 32ff 	mov.w	r2, #4294967295
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43da      	mvns	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	401a      	ands	r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002048:	f04f 31ff 	mov.w	r1, #4294967295
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	43d9      	mvns	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	4313      	orrs	r3, r2
}
 800205a:	4618      	mov	r0, r3
 800205c:	3724      	adds	r7, #36	; 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <LL_APB1_GRP1_EnableClock>:
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002072:	69da      	ldr	r2, [r3, #28]
 8002074:	4907      	ldr	r1, [pc, #28]	; (8002094 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4313      	orrs	r3, r2
 800207a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <LL_APB1_GRP1_EnableClock+0x2c>)
 800207e:	69da      	ldr	r2, [r3, #28]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4013      	ands	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002086:	68fb      	ldr	r3, [r7, #12]
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	40021000 	.word	0x40021000

08002098 <LL_TIM_EnableCounter>:
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f043 0201 	orr.w	r2, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	601a      	str	r2, [r3, #0]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_TIM_DisableARRPreload>:
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	601a      	str	r2, [r3, #0]
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <LL_TIM_SetTriggerOutput>:
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	431a      	orrs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	605a      	str	r2, [r3, #4]
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <LL_TIM_DisableMasterSlaveMode>:
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	609a      	str	r2, [r3, #8]
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	f043 0201 	orr.w	r2, r3, #1
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	60da      	str	r2, [r3, #12]
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <MX_TIM6_Init>:

/* USER CODE END 0 */

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8002154:	2010      	movs	r0, #16
 8002156:	f7ff ff87 	bl	8002068 <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_DAC1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800215a:	f7ff fefb 	bl	8001f54 <__NVIC_GetPriorityGrouping>
 800215e:	4603      	mov	r3, r0
 8002160:	2200      	movs	r2, #0
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff4b 	bl	8002000 <NVIC_EncodePriority>
 800216a:	4603      	mov	r3, r0
 800216c:	4619      	mov	r1, r3
 800216e:	2036      	movs	r0, #54	; 0x36
 8002170:	f7ff ff1c 	bl	8001fac <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8002174:	2036      	movs	r0, #54	; 0x36
 8002176:	f7ff fefb 	bl	8001f70 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 800217a:	f240 331f 	movw	r3, #799	; 0x31f
 800217e:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002180:	2300      	movs	r3, #0
 8002182:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 49;
 8002184:	2331      	movs	r3, #49	; 0x31
 8002186:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8002188:	1d3b      	adds	r3, r7, #4
 800218a:	4619      	mov	r1, r3
 800218c:	480b      	ldr	r0, [pc, #44]	; (80021bc <MX_TIM6_Init+0x7c>)
 800218e:	f000 fb0f 	bl	80027b0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 8002192:	480a      	ldr	r0, [pc, #40]	; (80021bc <MX_TIM6_Init+0x7c>)
 8002194:	f7ff ff90 	bl	80020b8 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8002198:	2100      	movs	r1, #0
 800219a:	4808      	ldr	r0, [pc, #32]	; (80021bc <MX_TIM6_Init+0x7c>)
 800219c:	f7ff ff9c 	bl	80020d8 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 80021a0:	4806      	ldr	r0, [pc, #24]	; (80021bc <MX_TIM6_Init+0x7c>)
 80021a2:	f7ff ffac 	bl	80020fe <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */
	LL_TIM_EnableIT_UPDATE(TIM6);
 80021a6:	4805      	ldr	r0, [pc, #20]	; (80021bc <MX_TIM6_Init+0x7c>)
 80021a8:	f7ff ffb9 	bl	800211e <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM6);
 80021ac:	4803      	ldr	r0, [pc, #12]	; (80021bc <MX_TIM6_Init+0x7c>)
 80021ae:	f7ff ff73 	bl	8002098 <LL_TIM_EnableCounter>
  /* USER CODE END TIM6_Init 2 */

}
 80021b2:	bf00      	nop
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40001000 	.word	0x40001000

080021c0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80021c6:	1d3b      	adds	r3, r7, #4
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 80021d4:	2020      	movs	r0, #32
 80021d6:	f7ff ff47 	bl	8002068 <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_DAC2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80021da:	f7ff febb 	bl	8001f54 <__NVIC_GetPriorityGrouping>
 80021de:	4603      	mov	r3, r0
 80021e0:	2200      	movs	r2, #0
 80021e2:	2100      	movs	r1, #0
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff0b 	bl	8002000 <NVIC_EncodePriority>
 80021ea:	4603      	mov	r3, r0
 80021ec:	4619      	mov	r1, r3
 80021ee:	2037      	movs	r0, #55	; 0x37
 80021f0:	f7ff fedc 	bl	8001fac <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 80021f4:	2037      	movs	r0, #55	; 0x37
 80021f6:	f7ff febb 	bl	8001f70 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 7999;
 80021fa:	f641 733f 	movw	r3, #7999	; 0x1f3f
 80021fe:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002200:	2300      	movs	r3, #0
 8002202:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 999;
 8002204:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002208:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	4619      	mov	r1, r3
 800220e:	480b      	ldr	r0, [pc, #44]	; (800223c <MX_TIM7_Init+0x7c>)
 8002210:	f000 face 	bl	80027b0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM7);
 8002214:	4809      	ldr	r0, [pc, #36]	; (800223c <MX_TIM7_Init+0x7c>)
 8002216:	f7ff ff4f 	bl	80020b8 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 800221a:	2100      	movs	r1, #0
 800221c:	4807      	ldr	r0, [pc, #28]	; (800223c <MX_TIM7_Init+0x7c>)
 800221e:	f7ff ff5b 	bl	80020d8 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 8002222:	4806      	ldr	r0, [pc, #24]	; (800223c <MX_TIM7_Init+0x7c>)
 8002224:	f7ff ff6b 	bl	80020fe <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */
	LL_TIM_EnableIT_UPDATE(TIM7);
 8002228:	4804      	ldr	r0, [pc, #16]	; (800223c <MX_TIM7_Init+0x7c>)
 800222a:	f7ff ff78 	bl	800211e <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM7);
 800222e:	4803      	ldr	r0, [pc, #12]	; (800223c <MX_TIM7_Init+0x7c>)
 8002230:	f7ff ff32 	bl	8002098 <LL_TIM_EnableCounter>
  /* USER CODE END TIM7_Init 2 */

}
 8002234:	bf00      	nop
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40001400 	.word	0x40001400

08002240 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002278 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002244:	480d      	ldr	r0, [pc, #52]	; (800227c <LoopForever+0x6>)
  ldr r1, =_edata
 8002246:	490e      	ldr	r1, [pc, #56]	; (8002280 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002248:	4a0e      	ldr	r2, [pc, #56]	; (8002284 <LoopForever+0xe>)
  movs r3, #0
 800224a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800224c:	e002      	b.n	8002254 <LoopCopyDataInit>

0800224e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800224e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002252:	3304      	adds	r3, #4

08002254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002258:	d3f9      	bcc.n	800224e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800225a:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <LoopForever+0x12>)
  ldr r4, =_ebss
 800225c:	4c0b      	ldr	r4, [pc, #44]	; (800228c <LoopForever+0x16>)
  movs r3, #0
 800225e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002260:	e001      	b.n	8002266 <LoopFillZerobss>

08002262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002264:	3204      	adds	r2, #4

08002266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002268:	d3fb      	bcc.n	8002262 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800226a:	f7ff fe61 	bl	8001f30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800226e:	f000 fead 	bl	8002fcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002272:	f7ff fb79 	bl	8001968 <main>

08002276 <LoopForever>:

LoopForever:
    b LoopForever
 8002276:	e7fe      	b.n	8002276 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002278:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800227c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002280:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002284:	080061ac 	.word	0x080061ac
  ldr r2, =_sbss
 8002288:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800228c:	20000264 	.word	0x20000264

08002290 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002290:	e7fe      	b.n	8002290 <ADC1_2_IRQHandler>

08002292 <LL_GPIO_SetPinMode>:
{
 8002292:	b480      	push	{r7}
 8002294:	b089      	sub	sp, #36	; 0x24
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	fab3 f383 	clz	r3, r3
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	2103      	movs	r1, #3
 80022ba:	fa01 f303 	lsl.w	r3, r1, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	401a      	ands	r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	fa93 f3a3 	rbit	r3, r3
 80022cc:	61bb      	str	r3, [r7, #24]
  return result;
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	fab3 f383 	clz	r3, r3
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	fa01 f303 	lsl.w	r3, r1, r3
 80022de:	431a      	orrs	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	601a      	str	r2, [r3, #0]
}
 80022e4:	bf00      	nop
 80022e6:	3724      	adds	r7, #36	; 0x24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_GPIO_SetPinOutputType>:
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	43db      	mvns	r3, r3
 8002304:	401a      	ands	r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	fb01 f303 	mul.w	r3, r1, r3
 800230e:	431a      	orrs	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	605a      	str	r2, [r3, #4]
}
 8002314:	bf00      	nop
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <LL_GPIO_SetPinSpeed>:
{
 8002320:	b480      	push	{r7}
 8002322:	b089      	sub	sp, #36	; 0x24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	fa93 f3a3 	rbit	r3, r3
 800233a:	613b      	str	r3, [r7, #16]
  return result;
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	2103      	movs	r1, #3
 8002348:	fa01 f303 	lsl.w	r3, r1, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	401a      	ands	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	61bb      	str	r3, [r7, #24]
  return result;
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	fa01 f303 	lsl.w	r3, r1, r3
 800236c:	431a      	orrs	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	609a      	str	r2, [r3, #8]
}
 8002372:	bf00      	nop
 8002374:	3724      	adds	r7, #36	; 0x24
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <LL_GPIO_SetPinPull>:
{
 800237e:	b480      	push	{r7}
 8002380:	b089      	sub	sp, #36	; 0x24
 8002382:	af00      	add	r7, sp, #0
 8002384:	60f8      	str	r0, [r7, #12]
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	613b      	str	r3, [r7, #16]
  return result;
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	fab3 f383 	clz	r3, r3
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	2103      	movs	r1, #3
 80023a6:	fa01 f303 	lsl.w	r3, r1, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	401a      	ands	r2, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	fa93 f3a3 	rbit	r3, r3
 80023b8:	61bb      	str	r3, [r7, #24]
  return result;
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	fab3 f383 	clz	r3, r3
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	431a      	orrs	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	60da      	str	r2, [r3, #12]
}
 80023d0:	bf00      	nop
 80023d2:	3724      	adds	r7, #36	; 0x24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <LL_GPIO_SetAFPin_0_7>:
{
 80023dc:	b480      	push	{r7}
 80023de:	b089      	sub	sp, #36	; 0x24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6a1a      	ldr	r2, [r3, #32]
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	fa93 f3a3 	rbit	r3, r3
 80023f6:	613b      	str	r3, [r7, #16]
  return result;
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	fab3 f383 	clz	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	210f      	movs	r1, #15
 8002404:	fa01 f303 	lsl.w	r3, r1, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	401a      	ands	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	61bb      	str	r3, [r7, #24]
  return result;
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	fab3 f383 	clz	r3, r3
 800241e:	b2db      	uxtb	r3, r3
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	fa01 f303 	lsl.w	r3, r1, r3
 8002428:	431a      	orrs	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	621a      	str	r2, [r3, #32]
}
 800242e:	bf00      	nop
 8002430:	3724      	adds	r7, #36	; 0x24
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <LL_GPIO_SetAFPin_8_15>:
{
 800243a:	b480      	push	{r7}
 800243c:	b089      	sub	sp, #36	; 0x24
 800243e:	af00      	add	r7, sp, #0
 8002440:	60f8      	str	r0, [r7, #12]
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	0a1b      	lsrs	r3, r3, #8
 800244e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	613b      	str	r3, [r7, #16]
  return result;
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	210f      	movs	r1, #15
 8002464:	fa01 f303 	lsl.w	r3, r1, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	401a      	ands	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	0a1b      	lsrs	r3, r3, #8
 8002470:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	fa93 f3a3 	rbit	r3, r3
 8002478:	61bb      	str	r3, [r7, #24]
  return result;
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	fab3 f383 	clz	r3, r3
 8002480:	b2db      	uxtb	r3, r3
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	431a      	orrs	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002490:	bf00      	nop
 8002492:	3724      	adds	r7, #36	; 0x24
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	fa93 f3a3 	rbit	r3, r3
 80024b2:	613b      	str	r3, [r7, #16]
  return result;
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	fab3 f383 	clz	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80024be:	e051      	b.n	8002564 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	2101      	movs	r1, #1
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	fa01 f303 	lsl.w	r3, r1, r3
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d043      	beq.n	800255e <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d003      	beq.n	80024e6 <LL_GPIO_Init+0x4a>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d10e      	bne.n	8002504 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	461a      	mov	r2, r3
 80024ec:	69b9      	ldr	r1, [r7, #24]
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff ff16 	bl	8002320 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	6819      	ldr	r1, [r3, #0]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	461a      	mov	r2, r3
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff fef6 	bl	80022f0 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	461a      	mov	r2, r3
 800250a:	69b9      	ldr	r1, [r7, #24]
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff ff36 	bl	800237e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d11a      	bne.n	8002550 <LL_GPIO_Init+0xb4>
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	fa93 f3a3 	rbit	r3, r3
 8002524:	60bb      	str	r3, [r7, #8]
  return result;
 8002526:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002528:	fab3 f383 	clz	r3, r3
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b07      	cmp	r3, #7
 8002530:	d807      	bhi.n	8002542 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	461a      	mov	r2, r3
 8002538:	69b9      	ldr	r1, [r7, #24]
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ff4e 	bl	80023dc <LL_GPIO_SetAFPin_0_7>
 8002540:	e006      	b.n	8002550 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	461a      	mov	r2, r3
 8002548:	69b9      	ldr	r1, [r7, #24]
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff ff75 	bl	800243a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	461a      	mov	r2, r3
 8002556:	69b9      	ldr	r1, [r7, #24]
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff fe9a 	bl	8002292 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3301      	adds	r3, #1
 8002562:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	fa22 f303 	lsr.w	r3, r2, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1a6      	bne.n	80024c0 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3720      	adds	r7, #32
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <LL_I2C_Enable>:
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f043 0201 	orr.w	r2, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	601a      	str	r2, [r3, #0]
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <LL_I2C_Disable>:
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f023 0201 	bic.w	r2, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	601a      	str	r2, [r3, #0]
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <LL_I2C_ConfigFilters>:
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	0219      	lsls	r1, r3, #8
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	430b      	orrs	r3, r1
 80025d8:	431a      	orrs	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	601a      	str	r2, [r3, #0]
}
 80025de:	bf00      	nop
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <LL_I2C_SetOwnAddress1>:
{
 80025ea:	b480      	push	{r7}
 80025ec:	b085      	sub	sp, #20
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	60f8      	str	r0, [r7, #12]
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80025fe:	f023 0307 	bic.w	r3, r3, #7
 8002602:	68b9      	ldr	r1, [r7, #8]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	430a      	orrs	r2, r1
 8002608:	431a      	orrs	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	609a      	str	r2, [r3, #8]
}
 800260e:	bf00      	nop
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <LL_I2C_EnableOwnAddress1>:
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	609a      	str	r2, [r3, #8]
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <LL_I2C_DisableOwnAddress1>:
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	609a      	str	r2, [r3, #8]
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <LL_I2C_SetTiming>:
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	611a      	str	r2, [r3, #16]
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <LL_I2C_SetMode>:
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	601a      	str	r2, [r3, #0]
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <LL_I2C_AcknowledgeNextData>:
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	605a      	str	r2, [r3, #4]
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ff65 	bl	800259c <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	6899      	ldr	r1, [r3, #8]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	461a      	mov	r2, r3
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff ff6d 	bl	80025bc <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	4619      	mov	r1, r3
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7ff ffb6 	bl	800265a <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff ff44 	bl	800257c <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff ffa0 	bl	800263a <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	6919      	ldr	r1, [r3, #16]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	461a      	mov	r2, r3
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7ff ff70 	bl	80025ea <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7ff ff81 	bl	800261a <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4619      	mov	r1, r3
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff ffa9 	bl	8002676 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	4619      	mov	r1, r3
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff ffb6 	bl	800269c <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <LL_TIM_SetPrescaler>:
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	629a      	str	r2, [r3, #40]	; 0x28
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <LL_TIM_SetAutoReload>:
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <LL_TIM_SetRepetitionCounter>:
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f043 0201 	orr.w	r2, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	615a      	str	r2, [r3, #20]
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a2f      	ldr	r2, [pc, #188]	; (8002880 <LL_TIM_Init+0xd0>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d007      	beq.n	80027d8 <LL_TIM_Init+0x28>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ce:	d003      	beq.n	80027d8 <LL_TIM_Init+0x28>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a2c      	ldr	r2, [pc, #176]	; (8002884 <LL_TIM_Init+0xd4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d106      	bne.n	80027e6 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a25      	ldr	r2, [pc, #148]	; (8002880 <LL_TIM_Init+0xd0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d013      	beq.n	8002816 <LL_TIM_Init+0x66>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f4:	d00f      	beq.n	8002816 <LL_TIM_Init+0x66>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a22      	ldr	r2, [pc, #136]	; (8002884 <LL_TIM_Init+0xd4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d00b      	beq.n	8002816 <LL_TIM_Init+0x66>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a21      	ldr	r2, [pc, #132]	; (8002888 <LL_TIM_Init+0xd8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d007      	beq.n	8002816 <LL_TIM_Init+0x66>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a20      	ldr	r2, [pc, #128]	; (800288c <LL_TIM_Init+0xdc>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d003      	beq.n	8002816 <LL_TIM_Init+0x66>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a1f      	ldr	r2, [pc, #124]	; (8002890 <LL_TIM_Init+0xe0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d106      	bne.n	8002824 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	4313      	orrs	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	4619      	mov	r1, r3
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff ff90 	bl	8002756 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	4619      	mov	r1, r3
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7ff ff7c 	bl	800273a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a0e      	ldr	r2, [pc, #56]	; (8002880 <LL_TIM_Init+0xd0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d00b      	beq.n	8002862 <LL_TIM_Init+0xb2>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a0e      	ldr	r2, [pc, #56]	; (8002888 <LL_TIM_Init+0xd8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d007      	beq.n	8002862 <LL_TIM_Init+0xb2>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a0d      	ldr	r2, [pc, #52]	; (800288c <LL_TIM_Init+0xdc>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d003      	beq.n	8002862 <LL_TIM_Init+0xb2>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a0c      	ldr	r2, [pc, #48]	; (8002890 <LL_TIM_Init+0xe0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d105      	bne.n	800286e <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	4619      	mov	r1, r3
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff ff82 	bl	8002772 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff ff8d 	bl	800278e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40012c00 	.word	0x40012c00
 8002884:	40000400 	.word	0x40000400
 8002888:	40014000 	.word	0x40014000
 800288c:	40014400 	.word	0x40014400
 8002890:	40014800 	.word	0x40014800

08002894 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a6:	4a07      	ldr	r2, [pc, #28]	; (80028c4 <LL_InitTick+0x30>)
 80028a8:	3b01      	subs	r3, #1
 80028aa:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80028ac:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <LL_InitTick+0x30>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028b2:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <LL_InitTick+0x30>)
 80028b4:	2205      	movs	r2, #5
 80028b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	e000e010 	.word	0xe000e010

080028c8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80028d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ffdd 	bl	8002894 <LL_InitTick>
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80028ec:	4b0f      	ldr	r3, [pc, #60]	; (800292c <LL_mDelay+0x48>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80028f2:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fa:	d00c      	beq.n	8002916 <LL_mDelay+0x32>
  {
    Delay++;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3301      	adds	r3, #1
 8002900:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002902:	e008      	b.n	8002916 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002904:	4b09      	ldr	r3, [pc, #36]	; (800292c <LL_mDelay+0x48>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <LL_mDelay+0x32>
    {
      Delay--;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3b01      	subs	r3, #1
 8002914:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f3      	bne.n	8002904 <LL_mDelay+0x20>
    }
  }
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	e000e010 	.word	0xe000e010

08002930 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002938:	4a04      	ldr	r2, [pc, #16]	; (800294c <LL_SetSystemCoreClock+0x1c>)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6013      	str	r3, [r2, #0]
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	20000004 	.word	0x20000004

08002950 <lsm6ds0_read_byte>:
#include "lsm6ds0.h"

uint8_t addres = LSM6DS0_DEVICE_ADDRESS_0;

uint8_t lsm6ds0_read_byte(uint8_t reg_addr)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af02      	add	r7, sp, #8
 8002956:	4603      	mov	r3, r0
 8002958:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800295a:	2300      	movs	r3, #0
 800295c:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres, 0));
 800295e:	4b08      	ldr	r3, [pc, #32]	; (8002980 <lsm6ds0_read_byte+0x30>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	79fa      	ldrb	r2, [r7, #7]
 8002964:	f107 000f 	add.w	r0, r7, #15
 8002968:	2100      	movs	r1, #0
 800296a:	9100      	str	r1, [sp, #0]
 800296c:	2101      	movs	r1, #1
 800296e:	f7fe fe5d 	bl	800162c <i2c_master_read>
 8002972:	4603      	mov	r3, r0
 8002974:	781b      	ldrb	r3, [r3, #0]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000008 	.word	0x20000008

08002984 <lsm6ds0_write_byte>:


void lsm6ds0_write_byte(uint8_t reg_addr, uint8_t value)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	460a      	mov	r2, r1
 800298e:	71fb      	strb	r3, [r7, #7]
 8002990:	4613      	mov	r3, r2
 8002992:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres, 0);
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <lsm6ds0_write_byte+0x28>)
 8002996:	781a      	ldrb	r2, [r3, #0]
 8002998:	79f9      	ldrb	r1, [r7, #7]
 800299a:	79b8      	ldrb	r0, [r7, #6]
 800299c:	2300      	movs	r3, #0
 800299e:	f7fe fe01 	bl	80015a4 <i2c_master_write>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000008 	.word	0x20000008

080029b0 <lsm6ds0_readArray>:


void lsm6ds0_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af02      	add	r7, sp, #8
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	70fb      	strb	r3, [r7, #3]
 80029bc:	4613      	mov	r3, r2
 80029be:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addres, 1);
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <lsm6ds0_readArray+0x2c>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	78fa      	ldrb	r2, [r7, #3]
 80029c6:	78b9      	ldrb	r1, [r7, #2]
 80029c8:	2001      	movs	r0, #1
 80029ca:	9000      	str	r0, [sp, #0]
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7fe fe2d 	bl	800162c <i2c_master_read>
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000008 	.word	0x20000008

080029e0 <lsm6ds0_get_acc>:
	return (((int16_t)((temp[1] << 8) | temp[0])) >> 3)  + 25;
}


void lsm6ds0_get_acc(float* x, float* y, float* z)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
	int16_t xx, yy, zz;

	uint8_t temp;

	//get current scale and use it for final calculation
    temp = lsm6ds0_read_byte(LSM6DS0_ADDRESS_CTRL1);
 80029ec:	2010      	movs	r0, #16
 80029ee:	f7ff ffaf 	bl	8002950 <lsm6ds0_read_byte>
 80029f2:	4603      	mov	r3, r0
 80029f4:	77fb      	strb	r3, [r7, #31]

	temp = temp >> 2;
 80029f6:	7ffb      	ldrb	r3, [r7, #31]
 80029f8:	089b      	lsrs	r3, r3, #2
 80029fa:	77fb      	strb	r3, [r7, #31]
    temp &= 0x03;			//full scale bits exctracted
 80029fc:	7ffb      	ldrb	r3, [r7, #31]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	77fb      	strb	r3, [r7, #31]

	lsm6ds0_readArray(data, LSM6DS0_ADDRESS_ACCX, 6);
 8002a04:	f107 0310 	add.w	r3, r7, #16
 8002a08:	2206      	movs	r2, #6
 8002a0a:	2128      	movs	r1, #40	; 0x28
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ffcf 	bl	80029b0 <lsm6ds0_readArray>

	xx = ((uint16_t)data[1]) << 8 | data[0];
 8002a12:	7c7b      	ldrb	r3, [r7, #17]
 8002a14:	021b      	lsls	r3, r3, #8
 8002a16:	b21a      	sxth	r2, r3
 8002a18:	7c3b      	ldrb	r3, [r7, #16]
 8002a1a:	b21b      	sxth	r3, r3
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	83bb      	strh	r3, [r7, #28]
	yy = ((uint16_t)data[3]) << 8 | data[2];
 8002a20:	7cfb      	ldrb	r3, [r7, #19]
 8002a22:	021b      	lsls	r3, r3, #8
 8002a24:	b21a      	sxth	r2, r3
 8002a26:	7cbb      	ldrb	r3, [r7, #18]
 8002a28:	b21b      	sxth	r3, r3
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	837b      	strh	r3, [r7, #26]
	zz = ((uint16_t)data[5]) << 8 | data[4];
 8002a2e:	7d7b      	ldrb	r3, [r7, #21]
 8002a30:	021b      	lsls	r3, r3, #8
 8002a32:	b21a      	sxth	r2, r3
 8002a34:	7d3b      	ldrb	r3, [r7, #20]
 8002a36:	b21b      	sxth	r3, r3
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	833b      	strh	r3, [r7, #24]

	*x = (xx >> 4) / 1000.0f;
 8002a3c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002a40:	111b      	asrs	r3, r3, #4
 8002a42:	b21b      	sxth	r3, r3
 8002a44:	ee07 3a90 	vmov	s15, r3
 8002a48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a4c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002aa0 <lsm6ds0_get_acc+0xc0>
 8002a50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	edc3 7a00 	vstr	s15, [r3]
	*y = (yy >> 4) / 1000.0f;
 8002a5a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002a5e:	111b      	asrs	r3, r3, #4
 8002a60:	b21b      	sxth	r3, r3
 8002a62:	ee07 3a90 	vmov	s15, r3
 8002a66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a6a:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8002aa0 <lsm6ds0_get_acc+0xc0>
 8002a6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	edc3 7a00 	vstr	s15, [r3]
	*z = (zz >> 4) / 1000.0f;
 8002a78:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002a7c:	111b      	asrs	r3, r3, #4
 8002a7e:	b21b      	sxth	r3, r3
 8002a80:	ee07 3a90 	vmov	s15, r3
 8002a84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a88:	eddf 6a05 	vldr	s13, [pc, #20]	; 8002aa0 <lsm6ds0_get_acc+0xc0>
 8002a8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	edc3 7a00 	vstr	s15, [r3]
}
 8002a96:	bf00      	nop
 8002a98:	3720      	adds	r7, #32
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	447a0000 	.word	0x447a0000

08002aa4 <lsm6ds0_init>:


uint8_t lsm6ds0_init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8002aae:	2064      	movs	r0, #100	; 0x64
 8002ab0:	f7ff ff18 	bl	80028e4 <LL_mDelay>

	uint8_t val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8002ab4:	200f      	movs	r0, #15
 8002ab6:	f7ff ff4b 	bl	8002950 <lsm6ds0_read_byte>
 8002aba:	4603      	mov	r3, r0
 8002abc:	71bb      	strb	r3, [r7, #6]

	if(val == LSM6DS0_WHO_AM_I_VALUE)
 8002abe:	79bb      	ldrb	r3, [r7, #6]
 8002ac0:	2b68      	cmp	r3, #104	; 0x68
 8002ac2:	d102      	bne.n	8002aca <lsm6ds0_init+0x26>
	{
		status = 1;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	71fb      	strb	r3, [r7, #7]
 8002ac8:	e00f      	b.n	8002aea <lsm6ds0_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres = LSM6DS0_DEVICE_ADDRESS_1;
 8002aca:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <lsm6ds0_init+0x60>)
 8002acc:	22d6      	movs	r2, #214	; 0xd6
 8002ace:	701a      	strb	r2, [r3, #0]
		val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8002ad0:	200f      	movs	r0, #15
 8002ad2:	f7ff ff3d 	bl	8002950 <lsm6ds0_read_byte>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	71bb      	strb	r3, [r7, #6]
		if(val == LSM6DS0_WHO_AM_I_VALUE)
 8002ada:	79bb      	ldrb	r3, [r7, #6]
 8002adc:	2b68      	cmp	r3, #104	; 0x68
 8002ade:	d102      	bne.n	8002ae6 <lsm6ds0_init+0x42>
		{
			status = 1;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	71fb      	strb	r3, [r7, #7]
 8002ae4:	e001      	b.n	8002aea <lsm6ds0_init+0x46>
		}
		else
		{
			status = 0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	71fb      	strb	r3, [r7, #7]
		}
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 8002aea:	2380      	movs	r3, #128	; 0x80
 8002aec:	717b      	strb	r3, [r7, #5]
	lsm6ds0_write_byte(LSM6DS0_ADDRESS_CTRL1, ctrl1);
 8002aee:	797b      	ldrb	r3, [r7, #5]
 8002af0:	4619      	mov	r1, r3
 8002af2:	2010      	movs	r0, #16
 8002af4:	f7ff ff46 	bl	8002984 <lsm6ds0_write_byte>

	return status;
 8002af8:	79fb      	ldrb	r3, [r7, #7]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20000008 	.word	0x20000008

08002b08 <hts221_read_byte>:

uint8_t addresHTS221 = HTS221_DEVICE_ADDRESS;
Hts221HumidityStruct HumidityFactoryCoef;
Hts221TemperatureStruct TemperatureFactoryCoef;

uint8_t hts221_read_byte(uint8_t reg_addr) {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af02      	add	r7, sp, #8
 8002b0e:	4603      	mov	r3, r0
 8002b10:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8002b12:	2300      	movs	r3, #0
 8002b14:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addresHTS221, 0));
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <hts221_read_byte+0x30>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	79fa      	ldrb	r2, [r7, #7]
 8002b1c:	f107 000f 	add.w	r0, r7, #15
 8002b20:	2100      	movs	r1, #0
 8002b22:	9100      	str	r1, [sp, #0]
 8002b24:	2101      	movs	r1, #1
 8002b26:	f7fe fd81 	bl	800162c <i2c_master_read>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	781b      	ldrb	r3, [r3, #0]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000009 	.word	0x20000009

08002b3c <hts221_write_byte>:

void hts221_write_byte(uint8_t reg_addr, uint8_t value) {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	460a      	mov	r2, r1
 8002b46:	71fb      	strb	r3, [r7, #7]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addresHTS221, 0);
 8002b4c:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <hts221_write_byte+0x28>)
 8002b4e:	781a      	ldrb	r2, [r3, #0]
 8002b50:	79f9      	ldrb	r1, [r7, #7]
 8002b52:	79b8      	ldrb	r0, [r7, #6]
 8002b54:	2300      	movs	r3, #0
 8002b56:	f7fe fd25 	bl	80015a4 <i2c_master_write>
}
 8002b5a:	bf00      	nop
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000009 	.word	0x20000009

08002b68 <hts221_readArray>:

void hts221_readArray(uint8_t *data, uint8_t reg, uint8_t length) {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	70fb      	strb	r3, [r7, #3]
 8002b74:	4613      	mov	r3, r2
 8002b76:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addresHTS221, 1);
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <hts221_readArray+0x2c>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	78fa      	ldrb	r2, [r7, #3]
 8002b7e:	78b9      	ldrb	r1, [r7, #2]
 8002b80:	2001      	movs	r0, #1
 8002b82:	9000      	str	r0, [sp, #0]
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7fe fd51 	bl	800162c <i2c_master_read>
}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20000009 	.word	0x20000009

08002b98 <hts221_init>:

uint8_t hts221_init(void) {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
	uint8_t result = 0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	71fb      	strb	r3, [r7, #7]
	LL_mDelay(100);
 8002ba2:	2064      	movs	r0, #100	; 0x64
 8002ba4:	f7ff fe9e 	bl	80028e4 <LL_mDelay>
	uint8_t val = hts221_read_byte(HTS221_WHO_AM_I_ADDRES);
 8002ba8:	200f      	movs	r0, #15
 8002baa:	f7ff ffad 	bl	8002b08 <hts221_read_byte>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71bb      	strb	r3, [r7, #6]
	if (val == HTS221_WHO_AM_I_VALUE) {
 8002bb2:	79bb      	ldrb	r3, [r7, #6]
 8002bb4:	2bbc      	cmp	r3, #188	; 0xbc
 8002bb6:	d134      	bne.n	8002c22 <hts221_init+0x8a>
		result = 1;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	71fb      	strb	r3, [r7, #7]
		//load reserved bits from device
		uint8_t control1 = hts221_read_byte(HTS221_ADDRESS_CTRL1);
 8002bbc:	2020      	movs	r0, #32
 8002bbe:	f7ff ffa3 	bl	8002b08 <hts221_read_byte>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	717b      	strb	r3, [r7, #5]
		//active mode
		control1 &= ~HTS221_PD_MASK;
 8002bc6:	797b      	ldrb	r3, [r7, #5]
 8002bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bcc:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 1) << HTS221_PD_BIT;
 8002bce:	797b      	ldrb	r3, [r7, #5]
 8002bd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bd4:	717b      	strb	r3, [r7, #5]
		//output registers not updated until MSB and LSB reading
		control1 &= ~HTS221_BDU_MASK;
 8002bd6:	797b      	ldrb	r3, [r7, #5]
 8002bd8:	f023 0304 	bic.w	r3, r3, #4
 8002bdc:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 1) << HTS221_BDU_BIT;
 8002bde:	797b      	ldrb	r3, [r7, #5]
 8002be0:	f043 0304 	orr.w	r3, r3, #4
 8002be4:	717b      	strb	r3, [r7, #5]
		//ODR register sampling
		control1 &= ~HTS221_ODR_MASK;
 8002be6:	797b      	ldrb	r3, [r7, #5]
 8002be8:	f023 0303 	bic.w	r3, r3, #3
 8002bec:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 2) << HTS221_ODR_BIT;
 8002bee:	797b      	ldrb	r3, [r7, #5]
 8002bf0:	f043 0302 	orr.w	r3, r3, #2
 8002bf4:	717b      	strb	r3, [r7, #5]
		//Write config. to device
		hts221_write_byte(HTS221_ADDRESS_CTRL1, control1);
 8002bf6:	797b      	ldrb	r3, [r7, #5]
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	2020      	movs	r0, #32
 8002bfc:	f7ff ff9e 	bl	8002b3c <hts221_write_byte>
		val = hts221_read_byte(HTS221_ADDRESS_CTRL1);
 8002c00:	2020      	movs	r0, #32
 8002c02:	f7ff ff81 	bl	8002b08 <hts221_read_byte>
 8002c06:	4603      	mov	r3, r0
 8002c08:	71bb      	strb	r3, [r7, #6]
		result = val == control1 ? 1 : 0;
 8002c0a:	79ba      	ldrb	r2, [r7, #6]
 8002c0c:	797b      	ldrb	r3, [r7, #5]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	bf0c      	ite	eq
 8002c12:	2301      	moveq	r3, #1
 8002c14:	2300      	movne	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	71fb      	strb	r3, [r7, #7]
		hts221_get_factory_coef(&HumidityFactoryCoef, &TemperatureFactoryCoef);
 8002c1a:	4904      	ldr	r1, [pc, #16]	; (8002c2c <hts221_init+0x94>)
 8002c1c:	4804      	ldr	r0, [pc, #16]	; (8002c30 <hts221_init+0x98>)
 8002c1e:	f000 f8ad 	bl	8002d7c <hts221_get_factory_coef>
	}
	return result;
 8002c22:	79fb      	ldrb	r3, [r7, #7]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20000244 	.word	0x20000244
 8002c30:	2000024c 	.word	0x2000024c

08002c34 <hts221_get_humidity>:

void hts221_get_humidity(float *humidity) {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2] = { 0 };
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	81bb      	strh	r3, [r7, #12]
	hts221_readArray(buffer, HTS221_ADDRESS_H_OUT_L, 2);
 8002c40:	f107 030c 	add.w	r3, r7, #12
 8002c44:	2202      	movs	r2, #2
 8002c46:	2128      	movs	r1, #40	; 0x28
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff ff8d 	bl	8002b68 <hts221_readArray>
	int16_t hOut = ((int16_t) buffer[1]) << 8 | buffer[0];
 8002c4e:	7b7b      	ldrb	r3, [r7, #13]
 8002c50:	021b      	lsls	r3, r3, #8
 8002c52:	b21a      	sxth	r2, r3
 8002c54:	7b3b      	ldrb	r3, [r7, #12]
 8002c56:	b21b      	sxth	r3, r3
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	82fb      	strh	r3, [r7, #22]
	int16_t h0Rh = HumidityFactoryCoef.h0Rh;
 8002c5c:	4b1c      	ldr	r3, [pc, #112]	; (8002cd0 <hts221_get_humidity+0x9c>)
 8002c5e:	881b      	ldrh	r3, [r3, #0]
 8002c60:	82bb      	strh	r3, [r7, #20]
	int16_t h1Rh = HumidityFactoryCoef.h1Rh;
 8002c62:	4b1b      	ldr	r3, [pc, #108]	; (8002cd0 <hts221_get_humidity+0x9c>)
 8002c64:	885b      	ldrh	r3, [r3, #2]
 8002c66:	827b      	strh	r3, [r7, #18]
	int16_t h0T0 = HumidityFactoryCoef.h0Out;
 8002c68:	4b19      	ldr	r3, [pc, #100]	; (8002cd0 <hts221_get_humidity+0x9c>)
 8002c6a:	889b      	ldrh	r3, [r3, #4]
 8002c6c:	823b      	strh	r3, [r7, #16]
	int16_t h1T0 = HumidityFactoryCoef.h1Out;
 8002c6e:	4b18      	ldr	r3, [pc, #96]	; (8002cd0 <hts221_get_humidity+0x9c>)
 8002c70:	88db      	ldrh	r3, [r3, #6]
 8002c72:	81fb      	strh	r3, [r7, #14]
	*humidity = ((float)(h1Rh - h0Rh) * (float)(hOut - h0T0)) / (float)(h1T0 - h0T0) + h0Rh;
 8002c74:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002c78:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	ee07 3a90 	vmov	s15, r3
 8002c82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c86:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002c8a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	ee07 3a90 	vmov	s15, r3
 8002c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c98:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002c9c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002ca0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	ee07 3a90 	vmov	s15, r3
 8002caa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cb2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002cb6:	ee07 3a90 	vmov	s15, r3
 8002cba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	edc3 7a00 	vstr	s15, [r3]
}
 8002cc8:	bf00      	nop
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	2000024c 	.word	0x2000024c

08002cd4 <hts221_get_temperature>:

void hts221_get_temperature(float *temperature) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2] = { 0 };
 8002cdc:	2300      	movs	r3, #0
 8002cde:	81bb      	strh	r3, [r7, #12]
	//hts221_readArray(buffer, HTS221_ADDRESS_T_OUT_L, 2);
	buffer[0] = hts221_read_byte(HTS221_ADDRESS_T_OUT_L);
 8002ce0:	202a      	movs	r0, #42	; 0x2a
 8002ce2:	f7ff ff11 	bl	8002b08 <hts221_read_byte>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	733b      	strb	r3, [r7, #12]
	buffer[1] = hts221_read_byte(HTS221_ADDRESS_T_OUT_H);
 8002cea:	202b      	movs	r0, #43	; 0x2b
 8002cec:	f7ff ff0c 	bl	8002b08 <hts221_read_byte>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	737b      	strb	r3, [r7, #13]
	int16_t tOut = ((int16_t) buffer[1]) << 8 | buffer[0];
 8002cf4:	7b7b      	ldrb	r3, [r7, #13]
 8002cf6:	021b      	lsls	r3, r3, #8
 8002cf8:	b21a      	sxth	r2, r3
 8002cfa:	7b3b      	ldrb	r3, [r7, #12]
 8002cfc:	b21b      	sxth	r3, r3
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	82fb      	strh	r3, [r7, #22]
	int16_t t0Deg = TemperatureFactoryCoef.t0DegC;
 8002d02:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <hts221_get_temperature+0xa4>)
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	82bb      	strh	r3, [r7, #20]
	int16_t t1Deg = TemperatureFactoryCoef.t1DegC;
 8002d08:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <hts221_get_temperature+0xa4>)
 8002d0a:	885b      	ldrh	r3, [r3, #2]
 8002d0c:	827b      	strh	r3, [r7, #18]
	int16_t t0Out = TemperatureFactoryCoef.t0Out;
 8002d0e:	4b1a      	ldr	r3, [pc, #104]	; (8002d78 <hts221_get_temperature+0xa4>)
 8002d10:	889b      	ldrh	r3, [r3, #4]
 8002d12:	823b      	strh	r3, [r7, #16]
	int16_t t1Out = TemperatureFactoryCoef.t1Out;
 8002d14:	4b18      	ldr	r3, [pc, #96]	; (8002d78 <hts221_get_temperature+0xa4>)
 8002d16:	88db      	ldrh	r3, [r3, #6]
 8002d18:	81fb      	strh	r3, [r7, #14]
	*temperature = ((float)(t1Deg - t0Deg) * (float)(tOut - t0Out)) / (float)(t1Out - t0Out) + t0Deg;
 8002d1a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002d1e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	ee07 3a90 	vmov	s15, r3
 8002d28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d2c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002d30:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	ee07 3a90 	vmov	s15, r3
 8002d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d3e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002d42:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002d46:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	ee07 3a90 	vmov	s15, r3
 8002d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d58:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002d5c:	ee07 3a90 	vmov	s15, r3
 8002d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	edc3 7a00 	vstr	s15, [r3]
}
 8002d6e:	bf00      	nop
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000244 	.word	0x20000244

08002d7c <hts221_get_factory_coef>:

void hts221_get_factory_coef(Hts221HumidityStruct *humidityStruct,
		Hts221TemperatureStruct *temperatureStruct) {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
	//Get humidity factory coef.
	int16_t h0RhX2 = (int16_t)hts221_read_byte(HTS221_ADDRESS_H0_rH_x2);
 8002d86:	2030      	movs	r0, #48	; 0x30
 8002d88:	f7ff febe 	bl	8002b08 <hts221_read_byte>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	83fb      	strh	r3, [r7, #30]
	int16_t h1RhX2 = (int16_t)hts221_read_byte(HTS221_ADDRESS_H1_rH_x2);
 8002d90:	2031      	movs	r0, #49	; 0x31
 8002d92:	f7ff feb9 	bl	8002b08 <hts221_read_byte>
 8002d96:	4603      	mov	r3, r0
 8002d98:	83bb      	strh	r3, [r7, #28]
	uint8_t buffer[4] = { 0 };
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60bb      	str	r3, [r7, #8]
	hts221_readArray(buffer, HTS221_ADDRESS_H0_OUT_L, 2);
 8002d9e:	f107 0308 	add.w	r3, r7, #8
 8002da2:	2202      	movs	r2, #2
 8002da4:	2136      	movs	r1, #54	; 0x36
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff fede 	bl	8002b68 <hts221_readArray>
	hts221_readArray(buffer + 2, HTS221_ADDRESS_H1_OUT_L, 2);
 8002dac:	f107 0308 	add.w	r3, r7, #8
 8002db0:	3302      	adds	r3, #2
 8002db2:	2202      	movs	r2, #2
 8002db4:	213a      	movs	r1, #58	; 0x3a
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff fed6 	bl	8002b68 <hts221_readArray>
	int16_t h0Out = ((int16_t) buffer[1]) << 8 | (int16_t)buffer[0];
 8002dbc:	7a7b      	ldrb	r3, [r7, #9]
 8002dbe:	021b      	lsls	r3, r3, #8
 8002dc0:	b21a      	sxth	r2, r3
 8002dc2:	7a3b      	ldrb	r3, [r7, #8]
 8002dc4:	b21b      	sxth	r3, r3
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	837b      	strh	r3, [r7, #26]
	int16_t h1Out = ((int16_t) buffer[3]) << 8 | (int16_t)buffer[2];
 8002dca:	7afb      	ldrb	r3, [r7, #11]
 8002dcc:	021b      	lsls	r3, r3, #8
 8002dce:	b21a      	sxth	r2, r3
 8002dd0:	7abb      	ldrb	r3, [r7, #10]
 8002dd2:	b21b      	sxth	r3, r3
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	833b      	strh	r3, [r7, #24]

	humidityStruct->h0Rh = h0RhX2 >> 1;
 8002dd8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002ddc:	105b      	asrs	r3, r3, #1
 8002dde:	b21a      	sxth	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	801a      	strh	r2, [r3, #0]
	humidityStruct->h1Rh = h1RhX2 >> 1;
 8002de4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002de8:	105b      	asrs	r3, r3, #1
 8002dea:	b21a      	sxth	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	805a      	strh	r2, [r3, #2]
	humidityStruct->h0Out = h0Out;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	8b7a      	ldrh	r2, [r7, #26]
 8002df4:	809a      	strh	r2, [r3, #4]
	humidityStruct->h1Out = h1Out;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	8b3a      	ldrh	r2, [r7, #24]
 8002dfa:	80da      	strh	r2, [r3, #6]
	//Get temperature factory coef.
	buffer[0] = hts221_read_byte(HTS221_ADDRESS_T0_degC_x8);
 8002dfc:	2032      	movs	r0, #50	; 0x32
 8002dfe:	f7ff fe83 	bl	8002b08 <hts221_read_byte>
 8002e02:	4603      	mov	r3, r0
 8002e04:	723b      	strb	r3, [r7, #8]
	buffer[2] = hts221_read_byte(HTS221_ADDRESS_T1_degC_x8);
 8002e06:	2033      	movs	r0, #51	; 0x33
 8002e08:	f7ff fe7e 	bl	8002b08 <hts221_read_byte>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	72bb      	strb	r3, [r7, #10]
	int16_t t0t1Msb = (int16_t)hts221_read_byte(HTS221_ADDRESS_T1_T0_MSB);
 8002e10:	2035      	movs	r0, #53	; 0x35
 8002e12:	f7ff fe79 	bl	8002b08 <hts221_read_byte>
 8002e16:	4603      	mov	r3, r0
 8002e18:	82fb      	strh	r3, [r7, #22]
	buffer[1] = t0t1Msb & 0x03;
 8002e1a:	8afb      	ldrh	r3, [r7, #22]
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	727b      	strb	r3, [r7, #9]
	buffer[3] = t0t1Msb & 0x0C;
 8002e26:	8afb      	ldrh	r3, [r7, #22]
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	72fb      	strb	r3, [r7, #11]
	int16_t t0DegX8 = ((int16_t) buffer[1]) << 8 | (int16_t)buffer[0];
 8002e32:	7a7b      	ldrb	r3, [r7, #9]
 8002e34:	021b      	lsls	r3, r3, #8
 8002e36:	b21a      	sxth	r2, r3
 8002e38:	7a3b      	ldrb	r3, [r7, #8]
 8002e3a:	b21b      	sxth	r3, r3
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	82bb      	strh	r3, [r7, #20]
	int16_t t1DegX8 = ((int16_t) buffer[3]) << 6 | (int16_t)buffer[2];
 8002e40:	7afb      	ldrb	r3, [r7, #11]
 8002e42:	019b      	lsls	r3, r3, #6
 8002e44:	b21a      	sxth	r2, r3
 8002e46:	7abb      	ldrb	r3, [r7, #10]
 8002e48:	b21b      	sxth	r3, r3
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	827b      	strh	r3, [r7, #18]
	hts221_readArray(buffer, HTS221_ADDRESS_T0_OUT_L, 4);
 8002e4e:	f107 0308 	add.w	r3, r7, #8
 8002e52:	2204      	movs	r2, #4
 8002e54:	213c      	movs	r1, #60	; 0x3c
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff fe86 	bl	8002b68 <hts221_readArray>
	//hts221_readArray(buffer + 2, HTS221_ADDRESS_T1_OUT_L, 2);
	int16_t t0Out = ((int16_t) buffer[1]) << 8 | (int16_t)buffer[0];
 8002e5c:	7a7b      	ldrb	r3, [r7, #9]
 8002e5e:	021b      	lsls	r3, r3, #8
 8002e60:	b21a      	sxth	r2, r3
 8002e62:	7a3b      	ldrb	r3, [r7, #8]
 8002e64:	b21b      	sxth	r3, r3
 8002e66:	4313      	orrs	r3, r2
 8002e68:	823b      	strh	r3, [r7, #16]
	int16_t t1Out = ((int16_t) buffer[3]) << 8 | (int16_t)buffer[2];
 8002e6a:	7afb      	ldrb	r3, [r7, #11]
 8002e6c:	021b      	lsls	r3, r3, #8
 8002e6e:	b21a      	sxth	r2, r3
 8002e70:	7abb      	ldrb	r3, [r7, #10]
 8002e72:	b21b      	sxth	r3, r3
 8002e74:	4313      	orrs	r3, r2
 8002e76:	81fb      	strh	r3, [r7, #14]

	temperatureStruct->t0DegC = t0DegX8 >> 3;
 8002e78:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e7c:	10db      	asrs	r3, r3, #3
 8002e7e:	b21a      	sxth	r2, r3
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	801a      	strh	r2, [r3, #0]
	temperatureStruct->t1DegC = t1DegX8 >> 3;
 8002e84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e88:	10db      	asrs	r3, r3, #3
 8002e8a:	b21a      	sxth	r2, r3
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	805a      	strh	r2, [r3, #2]
	temperatureStruct->t0Out = t0Out;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	8a3a      	ldrh	r2, [r7, #16]
 8002e94:	809a      	strh	r2, [r3, #4]
	temperatureStruct->t1Out = t1Out;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	89fa      	ldrh	r2, [r7, #14]
 8002e9a:	80da      	strh	r2, [r3, #6]
}
 8002e9c:	bf00      	nop
 8002e9e:	3720      	adds	r7, #32
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <lps25hb_read_byte>:

#include "lps25hb.h"

uint8_t addresLPS25HB = LPS25HB_DEVICE_ADDRESS_0;

uint8_t lps25hb_read_byte(uint8_t reg_addr) {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af02      	add	r7, sp, #8
 8002eaa:	4603      	mov	r3, r0
 8002eac:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addresLPS25HB, 0));
 8002eb2:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <lps25hb_read_byte+0x30>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	79fa      	ldrb	r2, [r7, #7]
 8002eb8:	f107 000f 	add.w	r0, r7, #15
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	9100      	str	r1, [sp, #0]
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	f7fe fbb3 	bl	800162c <i2c_master_read>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	781b      	ldrb	r3, [r3, #0]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	2000000a 	.word	0x2000000a

08002ed8 <lps25hb_write_byte>:

void lps25hb_write_byte(uint8_t reg_addr, uint8_t value) {
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	460a      	mov	r2, r1
 8002ee2:	71fb      	strb	r3, [r7, #7]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addresLPS25HB, 0);
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <lps25hb_write_byte+0x28>)
 8002eea:	781a      	ldrb	r2, [r3, #0]
 8002eec:	79f9      	ldrb	r1, [r7, #7]
 8002eee:	79b8      	ldrb	r0, [r7, #6]
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f7fe fb57 	bl	80015a4 <i2c_master_write>
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	2000000a 	.word	0x2000000a

08002f04 <lps25hb_init>:

void lps25hb_readArray(uint8_t *data, uint8_t reg, uint8_t length) {
	i2c_master_read(data, length, reg, addresLPS25HB, 1);
}

uint8_t lps25hb_init(void) {
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
	uint8_t result = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	71fb      	strb	r3, [r7, #7]
	LL_mDelay(100);
 8002f0e:	2064      	movs	r0, #100	; 0x64
 8002f10:	f7ff fce8 	bl	80028e4 <LL_mDelay>
	uint8_t val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRES);
 8002f14:	200f      	movs	r0, #15
 8002f16:	f7ff ffc5 	bl	8002ea4 <lps25hb_read_byte>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	71bb      	strb	r3, [r7, #6]
	if (val == LPS25HB_WHO_AM_I_VALUE) {
 8002f1e:	79bb      	ldrb	r3, [r7, #6]
 8002f20:	2bbd      	cmp	r3, #189	; 0xbd
 8002f22:	d102      	bne.n	8002f2a <lps25hb_init+0x26>
		result = 1;
 8002f24:	2301      	movs	r3, #1
 8002f26:	71fb      	strb	r3, [r7, #7]
 8002f28:	e00f      	b.n	8002f4a <lps25hb_init+0x46>
	} else
	//if the device is not found on one address, try another one
	{
		addresLPS25HB = LPS25HB_DEVICE_ADDRESS_1;
 8002f2a:	4b24      	ldr	r3, [pc, #144]	; (8002fbc <lps25hb_init+0xb8>)
 8002f2c:	22ba      	movs	r2, #186	; 0xba
 8002f2e:	701a      	strb	r2, [r3, #0]
		val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRES);
 8002f30:	200f      	movs	r0, #15
 8002f32:	f7ff ffb7 	bl	8002ea4 <lps25hb_read_byte>
 8002f36:	4603      	mov	r3, r0
 8002f38:	71bb      	strb	r3, [r7, #6]
		if (val == LPS25HB_WHO_AM_I_VALUE)
 8002f3a:	79bb      	ldrb	r3, [r7, #6]
 8002f3c:	2bbd      	cmp	r3, #189	; 0xbd
 8002f3e:	d102      	bne.n	8002f46 <lps25hb_init+0x42>
			result = 1;
 8002f40:	2301      	movs	r3, #1
 8002f42:	71fb      	strb	r3, [r7, #7]
 8002f44:	e001      	b.n	8002f4a <lps25hb_init+0x46>
		else
			result = 0;
 8002f46:	2300      	movs	r3, #0
 8002f48:	71fb      	strb	r3, [r7, #7]
	}
	if (result == 1) {
 8002f4a:	79fb      	ldrb	r3, [r7, #7]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d130      	bne.n	8002fb2 <lps25hb_init+0xae>
		//load reserved bits from device
		uint8_t control1 = lps25hb_read_byte(LPS25HB_ADDRESS_CTRL1);
 8002f50:	2020      	movs	r0, #32
 8002f52:	f7ff ffa7 	bl	8002ea4 <lps25hb_read_byte>
 8002f56:	4603      	mov	r3, r0
 8002f58:	717b      	strb	r3, [r7, #5]
		//active mode
		control1 &= ~LPS25HB_PD_MASK;
 8002f5a:	797b      	ldrb	r3, [r7, #5]
 8002f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f60:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 1) << LPS25HB_PD_BIT;
 8002f62:	797b      	ldrb	r3, [r7, #5]
 8002f64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f68:	717b      	strb	r3, [r7, #5]
		//output registers not updated until MSB and LSB reading
		control1 &= ~LPS25HB_BDU_MASK;
 8002f6a:	797b      	ldrb	r3, [r7, #5]
 8002f6c:	f023 0304 	bic.w	r3, r3, #4
 8002f70:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 1) << LPS25HB_BDU_BIT;
 8002f72:	797b      	ldrb	r3, [r7, #5]
 8002f74:	f043 0304 	orr.w	r3, r3, #4
 8002f78:	717b      	strb	r3, [r7, #5]
		//ODR register sampling
		control1 &= ~LPS25HB_ODR_MASK;
 8002f7a:	797b      	ldrb	r3, [r7, #5]
 8002f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f80:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 2) << LPS25HB_ODR_BIT;
 8002f82:	797b      	ldrb	r3, [r7, #5]
 8002f84:	f043 0320 	orr.w	r3, r3, #32
 8002f88:	717b      	strb	r3, [r7, #5]
		val = control1;
 8002f8a:	797b      	ldrb	r3, [r7, #5]
 8002f8c:	71bb      	strb	r3, [r7, #6]
		//Write config. to device
		lps25hb_write_byte(LPS25HB_ADDRESS_CTRL1, control1);
 8002f8e:	797b      	ldrb	r3, [r7, #5]
 8002f90:	4619      	mov	r1, r3
 8002f92:	2020      	movs	r0, #32
 8002f94:	f7ff ffa0 	bl	8002ed8 <lps25hb_write_byte>
		val = lps25hb_read_byte(LPS25HB_ADDRESS_CTRL1);
 8002f98:	2020      	movs	r0, #32
 8002f9a:	f7ff ff83 	bl	8002ea4 <lps25hb_read_byte>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	71bb      	strb	r3, [r7, #6]
		result = val == control1 ? 1 : 0;
 8002fa2:	79ba      	ldrb	r2, [r7, #6]
 8002fa4:	797b      	ldrb	r3, [r7, #5]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	bf0c      	ite	eq
 8002faa:	2301      	moveq	r3, #1
 8002fac:	2300      	movne	r3, #0
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	71fb      	strb	r3, [r7, #7]
		//hts221_get_factory_coef(&HumidityFactoryCoef, &TemperatureFactoryCoef);
	}
	return result;
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	2000000a 	.word	0x2000000a

08002fc0 <__errno>:
 8002fc0:	4b01      	ldr	r3, [pc, #4]	; (8002fc8 <__errno+0x8>)
 8002fc2:	6818      	ldr	r0, [r3, #0]
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	2000000c 	.word	0x2000000c

08002fcc <__libc_init_array>:
 8002fcc:	b570      	push	{r4, r5, r6, lr}
 8002fce:	4d0d      	ldr	r5, [pc, #52]	; (8003004 <__libc_init_array+0x38>)
 8002fd0:	4c0d      	ldr	r4, [pc, #52]	; (8003008 <__libc_init_array+0x3c>)
 8002fd2:	1b64      	subs	r4, r4, r5
 8002fd4:	10a4      	asrs	r4, r4, #2
 8002fd6:	2600      	movs	r6, #0
 8002fd8:	42a6      	cmp	r6, r4
 8002fda:	d109      	bne.n	8002ff0 <__libc_init_array+0x24>
 8002fdc:	4d0b      	ldr	r5, [pc, #44]	; (800300c <__libc_init_array+0x40>)
 8002fde:	4c0c      	ldr	r4, [pc, #48]	; (8003010 <__libc_init_array+0x44>)
 8002fe0:	f002 febc 	bl	8005d5c <_init>
 8002fe4:	1b64      	subs	r4, r4, r5
 8002fe6:	10a4      	asrs	r4, r4, #2
 8002fe8:	2600      	movs	r6, #0
 8002fea:	42a6      	cmp	r6, r4
 8002fec:	d105      	bne.n	8002ffa <__libc_init_array+0x2e>
 8002fee:	bd70      	pop	{r4, r5, r6, pc}
 8002ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ff4:	4798      	blx	r3
 8002ff6:	3601      	adds	r6, #1
 8002ff8:	e7ee      	b.n	8002fd8 <__libc_init_array+0xc>
 8002ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ffe:	4798      	blx	r3
 8003000:	3601      	adds	r6, #1
 8003002:	e7f2      	b.n	8002fea <__libc_init_array+0x1e>
 8003004:	080061a4 	.word	0x080061a4
 8003008:	080061a4 	.word	0x080061a4
 800300c:	080061a4 	.word	0x080061a4
 8003010:	080061a8 	.word	0x080061a8

08003014 <memset>:
 8003014:	4402      	add	r2, r0
 8003016:	4603      	mov	r3, r0
 8003018:	4293      	cmp	r3, r2
 800301a:	d100      	bne.n	800301e <memset+0xa>
 800301c:	4770      	bx	lr
 800301e:	f803 1b01 	strb.w	r1, [r3], #1
 8003022:	e7f9      	b.n	8003018 <memset+0x4>

08003024 <__cvt>:
 8003024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003028:	ec55 4b10 	vmov	r4, r5, d0
 800302c:	2d00      	cmp	r5, #0
 800302e:	460e      	mov	r6, r1
 8003030:	4619      	mov	r1, r3
 8003032:	462b      	mov	r3, r5
 8003034:	bfbb      	ittet	lt
 8003036:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800303a:	461d      	movlt	r5, r3
 800303c:	2300      	movge	r3, #0
 800303e:	232d      	movlt	r3, #45	; 0x2d
 8003040:	700b      	strb	r3, [r1, #0]
 8003042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003044:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003048:	4691      	mov	r9, r2
 800304a:	f023 0820 	bic.w	r8, r3, #32
 800304e:	bfbc      	itt	lt
 8003050:	4622      	movlt	r2, r4
 8003052:	4614      	movlt	r4, r2
 8003054:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003058:	d005      	beq.n	8003066 <__cvt+0x42>
 800305a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800305e:	d100      	bne.n	8003062 <__cvt+0x3e>
 8003060:	3601      	adds	r6, #1
 8003062:	2102      	movs	r1, #2
 8003064:	e000      	b.n	8003068 <__cvt+0x44>
 8003066:	2103      	movs	r1, #3
 8003068:	ab03      	add	r3, sp, #12
 800306a:	9301      	str	r3, [sp, #4]
 800306c:	ab02      	add	r3, sp, #8
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	ec45 4b10 	vmov	d0, r4, r5
 8003074:	4653      	mov	r3, sl
 8003076:	4632      	mov	r2, r6
 8003078:	f000 fcf2 	bl	8003a60 <_dtoa_r>
 800307c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003080:	4607      	mov	r7, r0
 8003082:	d102      	bne.n	800308a <__cvt+0x66>
 8003084:	f019 0f01 	tst.w	r9, #1
 8003088:	d022      	beq.n	80030d0 <__cvt+0xac>
 800308a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800308e:	eb07 0906 	add.w	r9, r7, r6
 8003092:	d110      	bne.n	80030b6 <__cvt+0x92>
 8003094:	783b      	ldrb	r3, [r7, #0]
 8003096:	2b30      	cmp	r3, #48	; 0x30
 8003098:	d10a      	bne.n	80030b0 <__cvt+0x8c>
 800309a:	2200      	movs	r2, #0
 800309c:	2300      	movs	r3, #0
 800309e:	4620      	mov	r0, r4
 80030a0:	4629      	mov	r1, r5
 80030a2:	f7fd fd11 	bl	8000ac8 <__aeabi_dcmpeq>
 80030a6:	b918      	cbnz	r0, 80030b0 <__cvt+0x8c>
 80030a8:	f1c6 0601 	rsb	r6, r6, #1
 80030ac:	f8ca 6000 	str.w	r6, [sl]
 80030b0:	f8da 3000 	ldr.w	r3, [sl]
 80030b4:	4499      	add	r9, r3
 80030b6:	2200      	movs	r2, #0
 80030b8:	2300      	movs	r3, #0
 80030ba:	4620      	mov	r0, r4
 80030bc:	4629      	mov	r1, r5
 80030be:	f7fd fd03 	bl	8000ac8 <__aeabi_dcmpeq>
 80030c2:	b108      	cbz	r0, 80030c8 <__cvt+0xa4>
 80030c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80030c8:	2230      	movs	r2, #48	; 0x30
 80030ca:	9b03      	ldr	r3, [sp, #12]
 80030cc:	454b      	cmp	r3, r9
 80030ce:	d307      	bcc.n	80030e0 <__cvt+0xbc>
 80030d0:	9b03      	ldr	r3, [sp, #12]
 80030d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80030d4:	1bdb      	subs	r3, r3, r7
 80030d6:	4638      	mov	r0, r7
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	b004      	add	sp, #16
 80030dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030e0:	1c59      	adds	r1, r3, #1
 80030e2:	9103      	str	r1, [sp, #12]
 80030e4:	701a      	strb	r2, [r3, #0]
 80030e6:	e7f0      	b.n	80030ca <__cvt+0xa6>

080030e8 <__exponent>:
 80030e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030ea:	4603      	mov	r3, r0
 80030ec:	2900      	cmp	r1, #0
 80030ee:	bfb8      	it	lt
 80030f0:	4249      	neglt	r1, r1
 80030f2:	f803 2b02 	strb.w	r2, [r3], #2
 80030f6:	bfb4      	ite	lt
 80030f8:	222d      	movlt	r2, #45	; 0x2d
 80030fa:	222b      	movge	r2, #43	; 0x2b
 80030fc:	2909      	cmp	r1, #9
 80030fe:	7042      	strb	r2, [r0, #1]
 8003100:	dd2a      	ble.n	8003158 <__exponent+0x70>
 8003102:	f10d 0407 	add.w	r4, sp, #7
 8003106:	46a4      	mov	ip, r4
 8003108:	270a      	movs	r7, #10
 800310a:	46a6      	mov	lr, r4
 800310c:	460a      	mov	r2, r1
 800310e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003112:	fb07 1516 	mls	r5, r7, r6, r1
 8003116:	3530      	adds	r5, #48	; 0x30
 8003118:	2a63      	cmp	r2, #99	; 0x63
 800311a:	f104 34ff 	add.w	r4, r4, #4294967295
 800311e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003122:	4631      	mov	r1, r6
 8003124:	dcf1      	bgt.n	800310a <__exponent+0x22>
 8003126:	3130      	adds	r1, #48	; 0x30
 8003128:	f1ae 0502 	sub.w	r5, lr, #2
 800312c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003130:	1c44      	adds	r4, r0, #1
 8003132:	4629      	mov	r1, r5
 8003134:	4561      	cmp	r1, ip
 8003136:	d30a      	bcc.n	800314e <__exponent+0x66>
 8003138:	f10d 0209 	add.w	r2, sp, #9
 800313c:	eba2 020e 	sub.w	r2, r2, lr
 8003140:	4565      	cmp	r5, ip
 8003142:	bf88      	it	hi
 8003144:	2200      	movhi	r2, #0
 8003146:	4413      	add	r3, r2
 8003148:	1a18      	subs	r0, r3, r0
 800314a:	b003      	add	sp, #12
 800314c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800314e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003152:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003156:	e7ed      	b.n	8003134 <__exponent+0x4c>
 8003158:	2330      	movs	r3, #48	; 0x30
 800315a:	3130      	adds	r1, #48	; 0x30
 800315c:	7083      	strb	r3, [r0, #2]
 800315e:	70c1      	strb	r1, [r0, #3]
 8003160:	1d03      	adds	r3, r0, #4
 8003162:	e7f1      	b.n	8003148 <__exponent+0x60>

08003164 <_printf_float>:
 8003164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003168:	ed2d 8b02 	vpush	{d8}
 800316c:	b08d      	sub	sp, #52	; 0x34
 800316e:	460c      	mov	r4, r1
 8003170:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003174:	4616      	mov	r6, r2
 8003176:	461f      	mov	r7, r3
 8003178:	4605      	mov	r5, r0
 800317a:	f001 fa5d 	bl	8004638 <_localeconv_r>
 800317e:	f8d0 a000 	ldr.w	sl, [r0]
 8003182:	4650      	mov	r0, sl
 8003184:	f7fd f824 	bl	80001d0 <strlen>
 8003188:	2300      	movs	r3, #0
 800318a:	930a      	str	r3, [sp, #40]	; 0x28
 800318c:	6823      	ldr	r3, [r4, #0]
 800318e:	9305      	str	r3, [sp, #20]
 8003190:	f8d8 3000 	ldr.w	r3, [r8]
 8003194:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003198:	3307      	adds	r3, #7
 800319a:	f023 0307 	bic.w	r3, r3, #7
 800319e:	f103 0208 	add.w	r2, r3, #8
 80031a2:	f8c8 2000 	str.w	r2, [r8]
 80031a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031aa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80031ae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80031b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80031b6:	9307      	str	r3, [sp, #28]
 80031b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80031bc:	ee08 0a10 	vmov	s16, r0
 80031c0:	4b9f      	ldr	r3, [pc, #636]	; (8003440 <_printf_float+0x2dc>)
 80031c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80031c6:	f04f 32ff 	mov.w	r2, #4294967295
 80031ca:	f7fd fcaf 	bl	8000b2c <__aeabi_dcmpun>
 80031ce:	bb88      	cbnz	r0, 8003234 <_printf_float+0xd0>
 80031d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80031d4:	4b9a      	ldr	r3, [pc, #616]	; (8003440 <_printf_float+0x2dc>)
 80031d6:	f04f 32ff 	mov.w	r2, #4294967295
 80031da:	f7fd fc89 	bl	8000af0 <__aeabi_dcmple>
 80031de:	bb48      	cbnz	r0, 8003234 <_printf_float+0xd0>
 80031e0:	2200      	movs	r2, #0
 80031e2:	2300      	movs	r3, #0
 80031e4:	4640      	mov	r0, r8
 80031e6:	4649      	mov	r1, r9
 80031e8:	f7fd fc78 	bl	8000adc <__aeabi_dcmplt>
 80031ec:	b110      	cbz	r0, 80031f4 <_printf_float+0x90>
 80031ee:	232d      	movs	r3, #45	; 0x2d
 80031f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031f4:	4b93      	ldr	r3, [pc, #588]	; (8003444 <_printf_float+0x2e0>)
 80031f6:	4894      	ldr	r0, [pc, #592]	; (8003448 <_printf_float+0x2e4>)
 80031f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80031fc:	bf94      	ite	ls
 80031fe:	4698      	movls	r8, r3
 8003200:	4680      	movhi	r8, r0
 8003202:	2303      	movs	r3, #3
 8003204:	6123      	str	r3, [r4, #16]
 8003206:	9b05      	ldr	r3, [sp, #20]
 8003208:	f023 0204 	bic.w	r2, r3, #4
 800320c:	6022      	str	r2, [r4, #0]
 800320e:	f04f 0900 	mov.w	r9, #0
 8003212:	9700      	str	r7, [sp, #0]
 8003214:	4633      	mov	r3, r6
 8003216:	aa0b      	add	r2, sp, #44	; 0x2c
 8003218:	4621      	mov	r1, r4
 800321a:	4628      	mov	r0, r5
 800321c:	f000 f9d8 	bl	80035d0 <_printf_common>
 8003220:	3001      	adds	r0, #1
 8003222:	f040 8090 	bne.w	8003346 <_printf_float+0x1e2>
 8003226:	f04f 30ff 	mov.w	r0, #4294967295
 800322a:	b00d      	add	sp, #52	; 0x34
 800322c:	ecbd 8b02 	vpop	{d8}
 8003230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003234:	4642      	mov	r2, r8
 8003236:	464b      	mov	r3, r9
 8003238:	4640      	mov	r0, r8
 800323a:	4649      	mov	r1, r9
 800323c:	f7fd fc76 	bl	8000b2c <__aeabi_dcmpun>
 8003240:	b140      	cbz	r0, 8003254 <_printf_float+0xf0>
 8003242:	464b      	mov	r3, r9
 8003244:	2b00      	cmp	r3, #0
 8003246:	bfbc      	itt	lt
 8003248:	232d      	movlt	r3, #45	; 0x2d
 800324a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800324e:	487f      	ldr	r0, [pc, #508]	; (800344c <_printf_float+0x2e8>)
 8003250:	4b7f      	ldr	r3, [pc, #508]	; (8003450 <_printf_float+0x2ec>)
 8003252:	e7d1      	b.n	80031f8 <_printf_float+0x94>
 8003254:	6863      	ldr	r3, [r4, #4]
 8003256:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800325a:	9206      	str	r2, [sp, #24]
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	d13f      	bne.n	80032e0 <_printf_float+0x17c>
 8003260:	2306      	movs	r3, #6
 8003262:	6063      	str	r3, [r4, #4]
 8003264:	9b05      	ldr	r3, [sp, #20]
 8003266:	6861      	ldr	r1, [r4, #4]
 8003268:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800326c:	2300      	movs	r3, #0
 800326e:	9303      	str	r3, [sp, #12]
 8003270:	ab0a      	add	r3, sp, #40	; 0x28
 8003272:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003276:	ab09      	add	r3, sp, #36	; 0x24
 8003278:	ec49 8b10 	vmov	d0, r8, r9
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	6022      	str	r2, [r4, #0]
 8003280:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003284:	4628      	mov	r0, r5
 8003286:	f7ff fecd 	bl	8003024 <__cvt>
 800328a:	9b06      	ldr	r3, [sp, #24]
 800328c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800328e:	2b47      	cmp	r3, #71	; 0x47
 8003290:	4680      	mov	r8, r0
 8003292:	d108      	bne.n	80032a6 <_printf_float+0x142>
 8003294:	1cc8      	adds	r0, r1, #3
 8003296:	db02      	blt.n	800329e <_printf_float+0x13a>
 8003298:	6863      	ldr	r3, [r4, #4]
 800329a:	4299      	cmp	r1, r3
 800329c:	dd41      	ble.n	8003322 <_printf_float+0x1be>
 800329e:	f1ab 0b02 	sub.w	fp, fp, #2
 80032a2:	fa5f fb8b 	uxtb.w	fp, fp
 80032a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80032aa:	d820      	bhi.n	80032ee <_printf_float+0x18a>
 80032ac:	3901      	subs	r1, #1
 80032ae:	465a      	mov	r2, fp
 80032b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80032b4:	9109      	str	r1, [sp, #36]	; 0x24
 80032b6:	f7ff ff17 	bl	80030e8 <__exponent>
 80032ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80032bc:	1813      	adds	r3, r2, r0
 80032be:	2a01      	cmp	r2, #1
 80032c0:	4681      	mov	r9, r0
 80032c2:	6123      	str	r3, [r4, #16]
 80032c4:	dc02      	bgt.n	80032cc <_printf_float+0x168>
 80032c6:	6822      	ldr	r2, [r4, #0]
 80032c8:	07d2      	lsls	r2, r2, #31
 80032ca:	d501      	bpl.n	80032d0 <_printf_float+0x16c>
 80032cc:	3301      	adds	r3, #1
 80032ce:	6123      	str	r3, [r4, #16]
 80032d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d09c      	beq.n	8003212 <_printf_float+0xae>
 80032d8:	232d      	movs	r3, #45	; 0x2d
 80032da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032de:	e798      	b.n	8003212 <_printf_float+0xae>
 80032e0:	9a06      	ldr	r2, [sp, #24]
 80032e2:	2a47      	cmp	r2, #71	; 0x47
 80032e4:	d1be      	bne.n	8003264 <_printf_float+0x100>
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1bc      	bne.n	8003264 <_printf_float+0x100>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e7b9      	b.n	8003262 <_printf_float+0xfe>
 80032ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80032f2:	d118      	bne.n	8003326 <_printf_float+0x1c2>
 80032f4:	2900      	cmp	r1, #0
 80032f6:	6863      	ldr	r3, [r4, #4]
 80032f8:	dd0b      	ble.n	8003312 <_printf_float+0x1ae>
 80032fa:	6121      	str	r1, [r4, #16]
 80032fc:	b913      	cbnz	r3, 8003304 <_printf_float+0x1a0>
 80032fe:	6822      	ldr	r2, [r4, #0]
 8003300:	07d0      	lsls	r0, r2, #31
 8003302:	d502      	bpl.n	800330a <_printf_float+0x1a6>
 8003304:	3301      	adds	r3, #1
 8003306:	440b      	add	r3, r1
 8003308:	6123      	str	r3, [r4, #16]
 800330a:	65a1      	str	r1, [r4, #88]	; 0x58
 800330c:	f04f 0900 	mov.w	r9, #0
 8003310:	e7de      	b.n	80032d0 <_printf_float+0x16c>
 8003312:	b913      	cbnz	r3, 800331a <_printf_float+0x1b6>
 8003314:	6822      	ldr	r2, [r4, #0]
 8003316:	07d2      	lsls	r2, r2, #31
 8003318:	d501      	bpl.n	800331e <_printf_float+0x1ba>
 800331a:	3302      	adds	r3, #2
 800331c:	e7f4      	b.n	8003308 <_printf_float+0x1a4>
 800331e:	2301      	movs	r3, #1
 8003320:	e7f2      	b.n	8003308 <_printf_float+0x1a4>
 8003322:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003328:	4299      	cmp	r1, r3
 800332a:	db05      	blt.n	8003338 <_printf_float+0x1d4>
 800332c:	6823      	ldr	r3, [r4, #0]
 800332e:	6121      	str	r1, [r4, #16]
 8003330:	07d8      	lsls	r0, r3, #31
 8003332:	d5ea      	bpl.n	800330a <_printf_float+0x1a6>
 8003334:	1c4b      	adds	r3, r1, #1
 8003336:	e7e7      	b.n	8003308 <_printf_float+0x1a4>
 8003338:	2900      	cmp	r1, #0
 800333a:	bfd4      	ite	le
 800333c:	f1c1 0202 	rsble	r2, r1, #2
 8003340:	2201      	movgt	r2, #1
 8003342:	4413      	add	r3, r2
 8003344:	e7e0      	b.n	8003308 <_printf_float+0x1a4>
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	055a      	lsls	r2, r3, #21
 800334a:	d407      	bmi.n	800335c <_printf_float+0x1f8>
 800334c:	6923      	ldr	r3, [r4, #16]
 800334e:	4642      	mov	r2, r8
 8003350:	4631      	mov	r1, r6
 8003352:	4628      	mov	r0, r5
 8003354:	47b8      	blx	r7
 8003356:	3001      	adds	r0, #1
 8003358:	d12c      	bne.n	80033b4 <_printf_float+0x250>
 800335a:	e764      	b.n	8003226 <_printf_float+0xc2>
 800335c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003360:	f240 80e0 	bls.w	8003524 <_printf_float+0x3c0>
 8003364:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003368:	2200      	movs	r2, #0
 800336a:	2300      	movs	r3, #0
 800336c:	f7fd fbac 	bl	8000ac8 <__aeabi_dcmpeq>
 8003370:	2800      	cmp	r0, #0
 8003372:	d034      	beq.n	80033de <_printf_float+0x27a>
 8003374:	4a37      	ldr	r2, [pc, #220]	; (8003454 <_printf_float+0x2f0>)
 8003376:	2301      	movs	r3, #1
 8003378:	4631      	mov	r1, r6
 800337a:	4628      	mov	r0, r5
 800337c:	47b8      	blx	r7
 800337e:	3001      	adds	r0, #1
 8003380:	f43f af51 	beq.w	8003226 <_printf_float+0xc2>
 8003384:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003388:	429a      	cmp	r2, r3
 800338a:	db02      	blt.n	8003392 <_printf_float+0x22e>
 800338c:	6823      	ldr	r3, [r4, #0]
 800338e:	07d8      	lsls	r0, r3, #31
 8003390:	d510      	bpl.n	80033b4 <_printf_float+0x250>
 8003392:	ee18 3a10 	vmov	r3, s16
 8003396:	4652      	mov	r2, sl
 8003398:	4631      	mov	r1, r6
 800339a:	4628      	mov	r0, r5
 800339c:	47b8      	blx	r7
 800339e:	3001      	adds	r0, #1
 80033a0:	f43f af41 	beq.w	8003226 <_printf_float+0xc2>
 80033a4:	f04f 0800 	mov.w	r8, #0
 80033a8:	f104 091a 	add.w	r9, r4, #26
 80033ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033ae:	3b01      	subs	r3, #1
 80033b0:	4543      	cmp	r3, r8
 80033b2:	dc09      	bgt.n	80033c8 <_printf_float+0x264>
 80033b4:	6823      	ldr	r3, [r4, #0]
 80033b6:	079b      	lsls	r3, r3, #30
 80033b8:	f100 8105 	bmi.w	80035c6 <_printf_float+0x462>
 80033bc:	68e0      	ldr	r0, [r4, #12]
 80033be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80033c0:	4298      	cmp	r0, r3
 80033c2:	bfb8      	it	lt
 80033c4:	4618      	movlt	r0, r3
 80033c6:	e730      	b.n	800322a <_printf_float+0xc6>
 80033c8:	2301      	movs	r3, #1
 80033ca:	464a      	mov	r2, r9
 80033cc:	4631      	mov	r1, r6
 80033ce:	4628      	mov	r0, r5
 80033d0:	47b8      	blx	r7
 80033d2:	3001      	adds	r0, #1
 80033d4:	f43f af27 	beq.w	8003226 <_printf_float+0xc2>
 80033d8:	f108 0801 	add.w	r8, r8, #1
 80033dc:	e7e6      	b.n	80033ac <_printf_float+0x248>
 80033de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	dc39      	bgt.n	8003458 <_printf_float+0x2f4>
 80033e4:	4a1b      	ldr	r2, [pc, #108]	; (8003454 <_printf_float+0x2f0>)
 80033e6:	2301      	movs	r3, #1
 80033e8:	4631      	mov	r1, r6
 80033ea:	4628      	mov	r0, r5
 80033ec:	47b8      	blx	r7
 80033ee:	3001      	adds	r0, #1
 80033f0:	f43f af19 	beq.w	8003226 <_printf_float+0xc2>
 80033f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80033f8:	4313      	orrs	r3, r2
 80033fa:	d102      	bne.n	8003402 <_printf_float+0x29e>
 80033fc:	6823      	ldr	r3, [r4, #0]
 80033fe:	07d9      	lsls	r1, r3, #31
 8003400:	d5d8      	bpl.n	80033b4 <_printf_float+0x250>
 8003402:	ee18 3a10 	vmov	r3, s16
 8003406:	4652      	mov	r2, sl
 8003408:	4631      	mov	r1, r6
 800340a:	4628      	mov	r0, r5
 800340c:	47b8      	blx	r7
 800340e:	3001      	adds	r0, #1
 8003410:	f43f af09 	beq.w	8003226 <_printf_float+0xc2>
 8003414:	f04f 0900 	mov.w	r9, #0
 8003418:	f104 0a1a 	add.w	sl, r4, #26
 800341c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800341e:	425b      	negs	r3, r3
 8003420:	454b      	cmp	r3, r9
 8003422:	dc01      	bgt.n	8003428 <_printf_float+0x2c4>
 8003424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003426:	e792      	b.n	800334e <_printf_float+0x1ea>
 8003428:	2301      	movs	r3, #1
 800342a:	4652      	mov	r2, sl
 800342c:	4631      	mov	r1, r6
 800342e:	4628      	mov	r0, r5
 8003430:	47b8      	blx	r7
 8003432:	3001      	adds	r0, #1
 8003434:	f43f aef7 	beq.w	8003226 <_printf_float+0xc2>
 8003438:	f109 0901 	add.w	r9, r9, #1
 800343c:	e7ee      	b.n	800341c <_printf_float+0x2b8>
 800343e:	bf00      	nop
 8003440:	7fefffff 	.word	0x7fefffff
 8003444:	08005dc4 	.word	0x08005dc4
 8003448:	08005dc8 	.word	0x08005dc8
 800344c:	08005dd0 	.word	0x08005dd0
 8003450:	08005dcc 	.word	0x08005dcc
 8003454:	08005dd4 	.word	0x08005dd4
 8003458:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800345a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800345c:	429a      	cmp	r2, r3
 800345e:	bfa8      	it	ge
 8003460:	461a      	movge	r2, r3
 8003462:	2a00      	cmp	r2, #0
 8003464:	4691      	mov	r9, r2
 8003466:	dc37      	bgt.n	80034d8 <_printf_float+0x374>
 8003468:	f04f 0b00 	mov.w	fp, #0
 800346c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003470:	f104 021a 	add.w	r2, r4, #26
 8003474:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003476:	9305      	str	r3, [sp, #20]
 8003478:	eba3 0309 	sub.w	r3, r3, r9
 800347c:	455b      	cmp	r3, fp
 800347e:	dc33      	bgt.n	80034e8 <_printf_float+0x384>
 8003480:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003484:	429a      	cmp	r2, r3
 8003486:	db3b      	blt.n	8003500 <_printf_float+0x39c>
 8003488:	6823      	ldr	r3, [r4, #0]
 800348a:	07da      	lsls	r2, r3, #31
 800348c:	d438      	bmi.n	8003500 <_printf_float+0x39c>
 800348e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003490:	9b05      	ldr	r3, [sp, #20]
 8003492:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	eba2 0901 	sub.w	r9, r2, r1
 800349a:	4599      	cmp	r9, r3
 800349c:	bfa8      	it	ge
 800349e:	4699      	movge	r9, r3
 80034a0:	f1b9 0f00 	cmp.w	r9, #0
 80034a4:	dc35      	bgt.n	8003512 <_printf_float+0x3ae>
 80034a6:	f04f 0800 	mov.w	r8, #0
 80034aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80034ae:	f104 0a1a 	add.w	sl, r4, #26
 80034b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	eba3 0309 	sub.w	r3, r3, r9
 80034bc:	4543      	cmp	r3, r8
 80034be:	f77f af79 	ble.w	80033b4 <_printf_float+0x250>
 80034c2:	2301      	movs	r3, #1
 80034c4:	4652      	mov	r2, sl
 80034c6:	4631      	mov	r1, r6
 80034c8:	4628      	mov	r0, r5
 80034ca:	47b8      	blx	r7
 80034cc:	3001      	adds	r0, #1
 80034ce:	f43f aeaa 	beq.w	8003226 <_printf_float+0xc2>
 80034d2:	f108 0801 	add.w	r8, r8, #1
 80034d6:	e7ec      	b.n	80034b2 <_printf_float+0x34e>
 80034d8:	4613      	mov	r3, r2
 80034da:	4631      	mov	r1, r6
 80034dc:	4642      	mov	r2, r8
 80034de:	4628      	mov	r0, r5
 80034e0:	47b8      	blx	r7
 80034e2:	3001      	adds	r0, #1
 80034e4:	d1c0      	bne.n	8003468 <_printf_float+0x304>
 80034e6:	e69e      	b.n	8003226 <_printf_float+0xc2>
 80034e8:	2301      	movs	r3, #1
 80034ea:	4631      	mov	r1, r6
 80034ec:	4628      	mov	r0, r5
 80034ee:	9205      	str	r2, [sp, #20]
 80034f0:	47b8      	blx	r7
 80034f2:	3001      	adds	r0, #1
 80034f4:	f43f ae97 	beq.w	8003226 <_printf_float+0xc2>
 80034f8:	9a05      	ldr	r2, [sp, #20]
 80034fa:	f10b 0b01 	add.w	fp, fp, #1
 80034fe:	e7b9      	b.n	8003474 <_printf_float+0x310>
 8003500:	ee18 3a10 	vmov	r3, s16
 8003504:	4652      	mov	r2, sl
 8003506:	4631      	mov	r1, r6
 8003508:	4628      	mov	r0, r5
 800350a:	47b8      	blx	r7
 800350c:	3001      	adds	r0, #1
 800350e:	d1be      	bne.n	800348e <_printf_float+0x32a>
 8003510:	e689      	b.n	8003226 <_printf_float+0xc2>
 8003512:	9a05      	ldr	r2, [sp, #20]
 8003514:	464b      	mov	r3, r9
 8003516:	4442      	add	r2, r8
 8003518:	4631      	mov	r1, r6
 800351a:	4628      	mov	r0, r5
 800351c:	47b8      	blx	r7
 800351e:	3001      	adds	r0, #1
 8003520:	d1c1      	bne.n	80034a6 <_printf_float+0x342>
 8003522:	e680      	b.n	8003226 <_printf_float+0xc2>
 8003524:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003526:	2a01      	cmp	r2, #1
 8003528:	dc01      	bgt.n	800352e <_printf_float+0x3ca>
 800352a:	07db      	lsls	r3, r3, #31
 800352c:	d538      	bpl.n	80035a0 <_printf_float+0x43c>
 800352e:	2301      	movs	r3, #1
 8003530:	4642      	mov	r2, r8
 8003532:	4631      	mov	r1, r6
 8003534:	4628      	mov	r0, r5
 8003536:	47b8      	blx	r7
 8003538:	3001      	adds	r0, #1
 800353a:	f43f ae74 	beq.w	8003226 <_printf_float+0xc2>
 800353e:	ee18 3a10 	vmov	r3, s16
 8003542:	4652      	mov	r2, sl
 8003544:	4631      	mov	r1, r6
 8003546:	4628      	mov	r0, r5
 8003548:	47b8      	blx	r7
 800354a:	3001      	adds	r0, #1
 800354c:	f43f ae6b 	beq.w	8003226 <_printf_float+0xc2>
 8003550:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003554:	2200      	movs	r2, #0
 8003556:	2300      	movs	r3, #0
 8003558:	f7fd fab6 	bl	8000ac8 <__aeabi_dcmpeq>
 800355c:	b9d8      	cbnz	r0, 8003596 <_printf_float+0x432>
 800355e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003560:	f108 0201 	add.w	r2, r8, #1
 8003564:	3b01      	subs	r3, #1
 8003566:	4631      	mov	r1, r6
 8003568:	4628      	mov	r0, r5
 800356a:	47b8      	blx	r7
 800356c:	3001      	adds	r0, #1
 800356e:	d10e      	bne.n	800358e <_printf_float+0x42a>
 8003570:	e659      	b.n	8003226 <_printf_float+0xc2>
 8003572:	2301      	movs	r3, #1
 8003574:	4652      	mov	r2, sl
 8003576:	4631      	mov	r1, r6
 8003578:	4628      	mov	r0, r5
 800357a:	47b8      	blx	r7
 800357c:	3001      	adds	r0, #1
 800357e:	f43f ae52 	beq.w	8003226 <_printf_float+0xc2>
 8003582:	f108 0801 	add.w	r8, r8, #1
 8003586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003588:	3b01      	subs	r3, #1
 800358a:	4543      	cmp	r3, r8
 800358c:	dcf1      	bgt.n	8003572 <_printf_float+0x40e>
 800358e:	464b      	mov	r3, r9
 8003590:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003594:	e6dc      	b.n	8003350 <_printf_float+0x1ec>
 8003596:	f04f 0800 	mov.w	r8, #0
 800359a:	f104 0a1a 	add.w	sl, r4, #26
 800359e:	e7f2      	b.n	8003586 <_printf_float+0x422>
 80035a0:	2301      	movs	r3, #1
 80035a2:	4642      	mov	r2, r8
 80035a4:	e7df      	b.n	8003566 <_printf_float+0x402>
 80035a6:	2301      	movs	r3, #1
 80035a8:	464a      	mov	r2, r9
 80035aa:	4631      	mov	r1, r6
 80035ac:	4628      	mov	r0, r5
 80035ae:	47b8      	blx	r7
 80035b0:	3001      	adds	r0, #1
 80035b2:	f43f ae38 	beq.w	8003226 <_printf_float+0xc2>
 80035b6:	f108 0801 	add.w	r8, r8, #1
 80035ba:	68e3      	ldr	r3, [r4, #12]
 80035bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80035be:	1a5b      	subs	r3, r3, r1
 80035c0:	4543      	cmp	r3, r8
 80035c2:	dcf0      	bgt.n	80035a6 <_printf_float+0x442>
 80035c4:	e6fa      	b.n	80033bc <_printf_float+0x258>
 80035c6:	f04f 0800 	mov.w	r8, #0
 80035ca:	f104 0919 	add.w	r9, r4, #25
 80035ce:	e7f4      	b.n	80035ba <_printf_float+0x456>

080035d0 <_printf_common>:
 80035d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035d4:	4616      	mov	r6, r2
 80035d6:	4699      	mov	r9, r3
 80035d8:	688a      	ldr	r2, [r1, #8]
 80035da:	690b      	ldr	r3, [r1, #16]
 80035dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035e0:	4293      	cmp	r3, r2
 80035e2:	bfb8      	it	lt
 80035e4:	4613      	movlt	r3, r2
 80035e6:	6033      	str	r3, [r6, #0]
 80035e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035ec:	4607      	mov	r7, r0
 80035ee:	460c      	mov	r4, r1
 80035f0:	b10a      	cbz	r2, 80035f6 <_printf_common+0x26>
 80035f2:	3301      	adds	r3, #1
 80035f4:	6033      	str	r3, [r6, #0]
 80035f6:	6823      	ldr	r3, [r4, #0]
 80035f8:	0699      	lsls	r1, r3, #26
 80035fa:	bf42      	ittt	mi
 80035fc:	6833      	ldrmi	r3, [r6, #0]
 80035fe:	3302      	addmi	r3, #2
 8003600:	6033      	strmi	r3, [r6, #0]
 8003602:	6825      	ldr	r5, [r4, #0]
 8003604:	f015 0506 	ands.w	r5, r5, #6
 8003608:	d106      	bne.n	8003618 <_printf_common+0x48>
 800360a:	f104 0a19 	add.w	sl, r4, #25
 800360e:	68e3      	ldr	r3, [r4, #12]
 8003610:	6832      	ldr	r2, [r6, #0]
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	42ab      	cmp	r3, r5
 8003616:	dc26      	bgt.n	8003666 <_printf_common+0x96>
 8003618:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800361c:	1e13      	subs	r3, r2, #0
 800361e:	6822      	ldr	r2, [r4, #0]
 8003620:	bf18      	it	ne
 8003622:	2301      	movne	r3, #1
 8003624:	0692      	lsls	r2, r2, #26
 8003626:	d42b      	bmi.n	8003680 <_printf_common+0xb0>
 8003628:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800362c:	4649      	mov	r1, r9
 800362e:	4638      	mov	r0, r7
 8003630:	47c0      	blx	r8
 8003632:	3001      	adds	r0, #1
 8003634:	d01e      	beq.n	8003674 <_printf_common+0xa4>
 8003636:	6823      	ldr	r3, [r4, #0]
 8003638:	68e5      	ldr	r5, [r4, #12]
 800363a:	6832      	ldr	r2, [r6, #0]
 800363c:	f003 0306 	and.w	r3, r3, #6
 8003640:	2b04      	cmp	r3, #4
 8003642:	bf08      	it	eq
 8003644:	1aad      	subeq	r5, r5, r2
 8003646:	68a3      	ldr	r3, [r4, #8]
 8003648:	6922      	ldr	r2, [r4, #16]
 800364a:	bf0c      	ite	eq
 800364c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003650:	2500      	movne	r5, #0
 8003652:	4293      	cmp	r3, r2
 8003654:	bfc4      	itt	gt
 8003656:	1a9b      	subgt	r3, r3, r2
 8003658:	18ed      	addgt	r5, r5, r3
 800365a:	2600      	movs	r6, #0
 800365c:	341a      	adds	r4, #26
 800365e:	42b5      	cmp	r5, r6
 8003660:	d11a      	bne.n	8003698 <_printf_common+0xc8>
 8003662:	2000      	movs	r0, #0
 8003664:	e008      	b.n	8003678 <_printf_common+0xa8>
 8003666:	2301      	movs	r3, #1
 8003668:	4652      	mov	r2, sl
 800366a:	4649      	mov	r1, r9
 800366c:	4638      	mov	r0, r7
 800366e:	47c0      	blx	r8
 8003670:	3001      	adds	r0, #1
 8003672:	d103      	bne.n	800367c <_printf_common+0xac>
 8003674:	f04f 30ff 	mov.w	r0, #4294967295
 8003678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800367c:	3501      	adds	r5, #1
 800367e:	e7c6      	b.n	800360e <_printf_common+0x3e>
 8003680:	18e1      	adds	r1, r4, r3
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	2030      	movs	r0, #48	; 0x30
 8003686:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800368a:	4422      	add	r2, r4
 800368c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003690:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003694:	3302      	adds	r3, #2
 8003696:	e7c7      	b.n	8003628 <_printf_common+0x58>
 8003698:	2301      	movs	r3, #1
 800369a:	4622      	mov	r2, r4
 800369c:	4649      	mov	r1, r9
 800369e:	4638      	mov	r0, r7
 80036a0:	47c0      	blx	r8
 80036a2:	3001      	adds	r0, #1
 80036a4:	d0e6      	beq.n	8003674 <_printf_common+0xa4>
 80036a6:	3601      	adds	r6, #1
 80036a8:	e7d9      	b.n	800365e <_printf_common+0x8e>
	...

080036ac <_printf_i>:
 80036ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036b0:	460c      	mov	r4, r1
 80036b2:	4691      	mov	r9, r2
 80036b4:	7e27      	ldrb	r7, [r4, #24]
 80036b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80036b8:	2f78      	cmp	r7, #120	; 0x78
 80036ba:	4680      	mov	r8, r0
 80036bc:	469a      	mov	sl, r3
 80036be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036c2:	d807      	bhi.n	80036d4 <_printf_i+0x28>
 80036c4:	2f62      	cmp	r7, #98	; 0x62
 80036c6:	d80a      	bhi.n	80036de <_printf_i+0x32>
 80036c8:	2f00      	cmp	r7, #0
 80036ca:	f000 80d8 	beq.w	800387e <_printf_i+0x1d2>
 80036ce:	2f58      	cmp	r7, #88	; 0x58
 80036d0:	f000 80a3 	beq.w	800381a <_printf_i+0x16e>
 80036d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80036d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036dc:	e03a      	b.n	8003754 <_printf_i+0xa8>
 80036de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036e2:	2b15      	cmp	r3, #21
 80036e4:	d8f6      	bhi.n	80036d4 <_printf_i+0x28>
 80036e6:	a001      	add	r0, pc, #4	; (adr r0, 80036ec <_printf_i+0x40>)
 80036e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80036ec:	08003745 	.word	0x08003745
 80036f0:	08003759 	.word	0x08003759
 80036f4:	080036d5 	.word	0x080036d5
 80036f8:	080036d5 	.word	0x080036d5
 80036fc:	080036d5 	.word	0x080036d5
 8003700:	080036d5 	.word	0x080036d5
 8003704:	08003759 	.word	0x08003759
 8003708:	080036d5 	.word	0x080036d5
 800370c:	080036d5 	.word	0x080036d5
 8003710:	080036d5 	.word	0x080036d5
 8003714:	080036d5 	.word	0x080036d5
 8003718:	08003865 	.word	0x08003865
 800371c:	08003789 	.word	0x08003789
 8003720:	08003847 	.word	0x08003847
 8003724:	080036d5 	.word	0x080036d5
 8003728:	080036d5 	.word	0x080036d5
 800372c:	08003887 	.word	0x08003887
 8003730:	080036d5 	.word	0x080036d5
 8003734:	08003789 	.word	0x08003789
 8003738:	080036d5 	.word	0x080036d5
 800373c:	080036d5 	.word	0x080036d5
 8003740:	0800384f 	.word	0x0800384f
 8003744:	680b      	ldr	r3, [r1, #0]
 8003746:	1d1a      	adds	r2, r3, #4
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	600a      	str	r2, [r1, #0]
 800374c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003750:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003754:	2301      	movs	r3, #1
 8003756:	e0a3      	b.n	80038a0 <_printf_i+0x1f4>
 8003758:	6825      	ldr	r5, [r4, #0]
 800375a:	6808      	ldr	r0, [r1, #0]
 800375c:	062e      	lsls	r6, r5, #24
 800375e:	f100 0304 	add.w	r3, r0, #4
 8003762:	d50a      	bpl.n	800377a <_printf_i+0xce>
 8003764:	6805      	ldr	r5, [r0, #0]
 8003766:	600b      	str	r3, [r1, #0]
 8003768:	2d00      	cmp	r5, #0
 800376a:	da03      	bge.n	8003774 <_printf_i+0xc8>
 800376c:	232d      	movs	r3, #45	; 0x2d
 800376e:	426d      	negs	r5, r5
 8003770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003774:	485e      	ldr	r0, [pc, #376]	; (80038f0 <_printf_i+0x244>)
 8003776:	230a      	movs	r3, #10
 8003778:	e019      	b.n	80037ae <_printf_i+0x102>
 800377a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800377e:	6805      	ldr	r5, [r0, #0]
 8003780:	600b      	str	r3, [r1, #0]
 8003782:	bf18      	it	ne
 8003784:	b22d      	sxthne	r5, r5
 8003786:	e7ef      	b.n	8003768 <_printf_i+0xbc>
 8003788:	680b      	ldr	r3, [r1, #0]
 800378a:	6825      	ldr	r5, [r4, #0]
 800378c:	1d18      	adds	r0, r3, #4
 800378e:	6008      	str	r0, [r1, #0]
 8003790:	0628      	lsls	r0, r5, #24
 8003792:	d501      	bpl.n	8003798 <_printf_i+0xec>
 8003794:	681d      	ldr	r5, [r3, #0]
 8003796:	e002      	b.n	800379e <_printf_i+0xf2>
 8003798:	0669      	lsls	r1, r5, #25
 800379a:	d5fb      	bpl.n	8003794 <_printf_i+0xe8>
 800379c:	881d      	ldrh	r5, [r3, #0]
 800379e:	4854      	ldr	r0, [pc, #336]	; (80038f0 <_printf_i+0x244>)
 80037a0:	2f6f      	cmp	r7, #111	; 0x6f
 80037a2:	bf0c      	ite	eq
 80037a4:	2308      	moveq	r3, #8
 80037a6:	230a      	movne	r3, #10
 80037a8:	2100      	movs	r1, #0
 80037aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037ae:	6866      	ldr	r6, [r4, #4]
 80037b0:	60a6      	str	r6, [r4, #8]
 80037b2:	2e00      	cmp	r6, #0
 80037b4:	bfa2      	ittt	ge
 80037b6:	6821      	ldrge	r1, [r4, #0]
 80037b8:	f021 0104 	bicge.w	r1, r1, #4
 80037bc:	6021      	strge	r1, [r4, #0]
 80037be:	b90d      	cbnz	r5, 80037c4 <_printf_i+0x118>
 80037c0:	2e00      	cmp	r6, #0
 80037c2:	d04d      	beq.n	8003860 <_printf_i+0x1b4>
 80037c4:	4616      	mov	r6, r2
 80037c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80037ca:	fb03 5711 	mls	r7, r3, r1, r5
 80037ce:	5dc7      	ldrb	r7, [r0, r7]
 80037d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80037d4:	462f      	mov	r7, r5
 80037d6:	42bb      	cmp	r3, r7
 80037d8:	460d      	mov	r5, r1
 80037da:	d9f4      	bls.n	80037c6 <_printf_i+0x11a>
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d10b      	bne.n	80037f8 <_printf_i+0x14c>
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	07df      	lsls	r7, r3, #31
 80037e4:	d508      	bpl.n	80037f8 <_printf_i+0x14c>
 80037e6:	6923      	ldr	r3, [r4, #16]
 80037e8:	6861      	ldr	r1, [r4, #4]
 80037ea:	4299      	cmp	r1, r3
 80037ec:	bfde      	ittt	le
 80037ee:	2330      	movle	r3, #48	; 0x30
 80037f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80037f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80037f8:	1b92      	subs	r2, r2, r6
 80037fa:	6122      	str	r2, [r4, #16]
 80037fc:	f8cd a000 	str.w	sl, [sp]
 8003800:	464b      	mov	r3, r9
 8003802:	aa03      	add	r2, sp, #12
 8003804:	4621      	mov	r1, r4
 8003806:	4640      	mov	r0, r8
 8003808:	f7ff fee2 	bl	80035d0 <_printf_common>
 800380c:	3001      	adds	r0, #1
 800380e:	d14c      	bne.n	80038aa <_printf_i+0x1fe>
 8003810:	f04f 30ff 	mov.w	r0, #4294967295
 8003814:	b004      	add	sp, #16
 8003816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800381a:	4835      	ldr	r0, [pc, #212]	; (80038f0 <_printf_i+0x244>)
 800381c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003820:	6823      	ldr	r3, [r4, #0]
 8003822:	680e      	ldr	r6, [r1, #0]
 8003824:	061f      	lsls	r7, r3, #24
 8003826:	f856 5b04 	ldr.w	r5, [r6], #4
 800382a:	600e      	str	r6, [r1, #0]
 800382c:	d514      	bpl.n	8003858 <_printf_i+0x1ac>
 800382e:	07d9      	lsls	r1, r3, #31
 8003830:	bf44      	itt	mi
 8003832:	f043 0320 	orrmi.w	r3, r3, #32
 8003836:	6023      	strmi	r3, [r4, #0]
 8003838:	b91d      	cbnz	r5, 8003842 <_printf_i+0x196>
 800383a:	6823      	ldr	r3, [r4, #0]
 800383c:	f023 0320 	bic.w	r3, r3, #32
 8003840:	6023      	str	r3, [r4, #0]
 8003842:	2310      	movs	r3, #16
 8003844:	e7b0      	b.n	80037a8 <_printf_i+0xfc>
 8003846:	6823      	ldr	r3, [r4, #0]
 8003848:	f043 0320 	orr.w	r3, r3, #32
 800384c:	6023      	str	r3, [r4, #0]
 800384e:	2378      	movs	r3, #120	; 0x78
 8003850:	4828      	ldr	r0, [pc, #160]	; (80038f4 <_printf_i+0x248>)
 8003852:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003856:	e7e3      	b.n	8003820 <_printf_i+0x174>
 8003858:	065e      	lsls	r6, r3, #25
 800385a:	bf48      	it	mi
 800385c:	b2ad      	uxthmi	r5, r5
 800385e:	e7e6      	b.n	800382e <_printf_i+0x182>
 8003860:	4616      	mov	r6, r2
 8003862:	e7bb      	b.n	80037dc <_printf_i+0x130>
 8003864:	680b      	ldr	r3, [r1, #0]
 8003866:	6826      	ldr	r6, [r4, #0]
 8003868:	6960      	ldr	r0, [r4, #20]
 800386a:	1d1d      	adds	r5, r3, #4
 800386c:	600d      	str	r5, [r1, #0]
 800386e:	0635      	lsls	r5, r6, #24
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	d501      	bpl.n	8003878 <_printf_i+0x1cc>
 8003874:	6018      	str	r0, [r3, #0]
 8003876:	e002      	b.n	800387e <_printf_i+0x1d2>
 8003878:	0671      	lsls	r1, r6, #25
 800387a:	d5fb      	bpl.n	8003874 <_printf_i+0x1c8>
 800387c:	8018      	strh	r0, [r3, #0]
 800387e:	2300      	movs	r3, #0
 8003880:	6123      	str	r3, [r4, #16]
 8003882:	4616      	mov	r6, r2
 8003884:	e7ba      	b.n	80037fc <_printf_i+0x150>
 8003886:	680b      	ldr	r3, [r1, #0]
 8003888:	1d1a      	adds	r2, r3, #4
 800388a:	600a      	str	r2, [r1, #0]
 800388c:	681e      	ldr	r6, [r3, #0]
 800388e:	6862      	ldr	r2, [r4, #4]
 8003890:	2100      	movs	r1, #0
 8003892:	4630      	mov	r0, r6
 8003894:	f7fc fca4 	bl	80001e0 <memchr>
 8003898:	b108      	cbz	r0, 800389e <_printf_i+0x1f2>
 800389a:	1b80      	subs	r0, r0, r6
 800389c:	6060      	str	r0, [r4, #4]
 800389e:	6863      	ldr	r3, [r4, #4]
 80038a0:	6123      	str	r3, [r4, #16]
 80038a2:	2300      	movs	r3, #0
 80038a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038a8:	e7a8      	b.n	80037fc <_printf_i+0x150>
 80038aa:	6923      	ldr	r3, [r4, #16]
 80038ac:	4632      	mov	r2, r6
 80038ae:	4649      	mov	r1, r9
 80038b0:	4640      	mov	r0, r8
 80038b2:	47d0      	blx	sl
 80038b4:	3001      	adds	r0, #1
 80038b6:	d0ab      	beq.n	8003810 <_printf_i+0x164>
 80038b8:	6823      	ldr	r3, [r4, #0]
 80038ba:	079b      	lsls	r3, r3, #30
 80038bc:	d413      	bmi.n	80038e6 <_printf_i+0x23a>
 80038be:	68e0      	ldr	r0, [r4, #12]
 80038c0:	9b03      	ldr	r3, [sp, #12]
 80038c2:	4298      	cmp	r0, r3
 80038c4:	bfb8      	it	lt
 80038c6:	4618      	movlt	r0, r3
 80038c8:	e7a4      	b.n	8003814 <_printf_i+0x168>
 80038ca:	2301      	movs	r3, #1
 80038cc:	4632      	mov	r2, r6
 80038ce:	4649      	mov	r1, r9
 80038d0:	4640      	mov	r0, r8
 80038d2:	47d0      	blx	sl
 80038d4:	3001      	adds	r0, #1
 80038d6:	d09b      	beq.n	8003810 <_printf_i+0x164>
 80038d8:	3501      	adds	r5, #1
 80038da:	68e3      	ldr	r3, [r4, #12]
 80038dc:	9903      	ldr	r1, [sp, #12]
 80038de:	1a5b      	subs	r3, r3, r1
 80038e0:	42ab      	cmp	r3, r5
 80038e2:	dcf2      	bgt.n	80038ca <_printf_i+0x21e>
 80038e4:	e7eb      	b.n	80038be <_printf_i+0x212>
 80038e6:	2500      	movs	r5, #0
 80038e8:	f104 0619 	add.w	r6, r4, #25
 80038ec:	e7f5      	b.n	80038da <_printf_i+0x22e>
 80038ee:	bf00      	nop
 80038f0:	08005dd6 	.word	0x08005dd6
 80038f4:	08005de7 	.word	0x08005de7

080038f8 <siprintf>:
 80038f8:	b40e      	push	{r1, r2, r3}
 80038fa:	b500      	push	{lr}
 80038fc:	b09c      	sub	sp, #112	; 0x70
 80038fe:	ab1d      	add	r3, sp, #116	; 0x74
 8003900:	9002      	str	r0, [sp, #8]
 8003902:	9006      	str	r0, [sp, #24]
 8003904:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003908:	4809      	ldr	r0, [pc, #36]	; (8003930 <siprintf+0x38>)
 800390a:	9107      	str	r1, [sp, #28]
 800390c:	9104      	str	r1, [sp, #16]
 800390e:	4909      	ldr	r1, [pc, #36]	; (8003934 <siprintf+0x3c>)
 8003910:	f853 2b04 	ldr.w	r2, [r3], #4
 8003914:	9105      	str	r1, [sp, #20]
 8003916:	6800      	ldr	r0, [r0, #0]
 8003918:	9301      	str	r3, [sp, #4]
 800391a:	a902      	add	r1, sp, #8
 800391c:	f001 fb3a 	bl	8004f94 <_svfiprintf_r>
 8003920:	9b02      	ldr	r3, [sp, #8]
 8003922:	2200      	movs	r2, #0
 8003924:	701a      	strb	r2, [r3, #0]
 8003926:	b01c      	add	sp, #112	; 0x70
 8003928:	f85d eb04 	ldr.w	lr, [sp], #4
 800392c:	b003      	add	sp, #12
 800392e:	4770      	bx	lr
 8003930:	2000000c 	.word	0x2000000c
 8003934:	ffff0208 	.word	0xffff0208

08003938 <strcpy>:
 8003938:	4603      	mov	r3, r0
 800393a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800393e:	f803 2b01 	strb.w	r2, [r3], #1
 8003942:	2a00      	cmp	r2, #0
 8003944:	d1f9      	bne.n	800393a <strcpy+0x2>
 8003946:	4770      	bx	lr

08003948 <quorem>:
 8003948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800394c:	6903      	ldr	r3, [r0, #16]
 800394e:	690c      	ldr	r4, [r1, #16]
 8003950:	42a3      	cmp	r3, r4
 8003952:	4607      	mov	r7, r0
 8003954:	f2c0 8081 	blt.w	8003a5a <quorem+0x112>
 8003958:	3c01      	subs	r4, #1
 800395a:	f101 0814 	add.w	r8, r1, #20
 800395e:	f100 0514 	add.w	r5, r0, #20
 8003962:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003966:	9301      	str	r3, [sp, #4]
 8003968:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800396c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003970:	3301      	adds	r3, #1
 8003972:	429a      	cmp	r2, r3
 8003974:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003978:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800397c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003980:	d331      	bcc.n	80039e6 <quorem+0x9e>
 8003982:	f04f 0e00 	mov.w	lr, #0
 8003986:	4640      	mov	r0, r8
 8003988:	46ac      	mov	ip, r5
 800398a:	46f2      	mov	sl, lr
 800398c:	f850 2b04 	ldr.w	r2, [r0], #4
 8003990:	b293      	uxth	r3, r2
 8003992:	fb06 e303 	mla	r3, r6, r3, lr
 8003996:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800399a:	b29b      	uxth	r3, r3
 800399c:	ebaa 0303 	sub.w	r3, sl, r3
 80039a0:	0c12      	lsrs	r2, r2, #16
 80039a2:	f8dc a000 	ldr.w	sl, [ip]
 80039a6:	fb06 e202 	mla	r2, r6, r2, lr
 80039aa:	fa13 f38a 	uxtah	r3, r3, sl
 80039ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80039b2:	fa1f fa82 	uxth.w	sl, r2
 80039b6:	f8dc 2000 	ldr.w	r2, [ip]
 80039ba:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80039be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80039c8:	4581      	cmp	r9, r0
 80039ca:	f84c 3b04 	str.w	r3, [ip], #4
 80039ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80039d2:	d2db      	bcs.n	800398c <quorem+0x44>
 80039d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80039d8:	b92b      	cbnz	r3, 80039e6 <quorem+0x9e>
 80039da:	9b01      	ldr	r3, [sp, #4]
 80039dc:	3b04      	subs	r3, #4
 80039de:	429d      	cmp	r5, r3
 80039e0:	461a      	mov	r2, r3
 80039e2:	d32e      	bcc.n	8003a42 <quorem+0xfa>
 80039e4:	613c      	str	r4, [r7, #16]
 80039e6:	4638      	mov	r0, r7
 80039e8:	f001 f8be 	bl	8004b68 <__mcmp>
 80039ec:	2800      	cmp	r0, #0
 80039ee:	db24      	blt.n	8003a3a <quorem+0xf2>
 80039f0:	3601      	adds	r6, #1
 80039f2:	4628      	mov	r0, r5
 80039f4:	f04f 0c00 	mov.w	ip, #0
 80039f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80039fc:	f8d0 e000 	ldr.w	lr, [r0]
 8003a00:	b293      	uxth	r3, r2
 8003a02:	ebac 0303 	sub.w	r3, ip, r3
 8003a06:	0c12      	lsrs	r2, r2, #16
 8003a08:	fa13 f38e 	uxtah	r3, r3, lr
 8003a0c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003a10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a1a:	45c1      	cmp	r9, r8
 8003a1c:	f840 3b04 	str.w	r3, [r0], #4
 8003a20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003a24:	d2e8      	bcs.n	80039f8 <quorem+0xb0>
 8003a26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003a2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003a2e:	b922      	cbnz	r2, 8003a3a <quorem+0xf2>
 8003a30:	3b04      	subs	r3, #4
 8003a32:	429d      	cmp	r5, r3
 8003a34:	461a      	mov	r2, r3
 8003a36:	d30a      	bcc.n	8003a4e <quorem+0x106>
 8003a38:	613c      	str	r4, [r7, #16]
 8003a3a:	4630      	mov	r0, r6
 8003a3c:	b003      	add	sp, #12
 8003a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a42:	6812      	ldr	r2, [r2, #0]
 8003a44:	3b04      	subs	r3, #4
 8003a46:	2a00      	cmp	r2, #0
 8003a48:	d1cc      	bne.n	80039e4 <quorem+0x9c>
 8003a4a:	3c01      	subs	r4, #1
 8003a4c:	e7c7      	b.n	80039de <quorem+0x96>
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	3b04      	subs	r3, #4
 8003a52:	2a00      	cmp	r2, #0
 8003a54:	d1f0      	bne.n	8003a38 <quorem+0xf0>
 8003a56:	3c01      	subs	r4, #1
 8003a58:	e7eb      	b.n	8003a32 <quorem+0xea>
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	e7ee      	b.n	8003a3c <quorem+0xf4>
	...

08003a60 <_dtoa_r>:
 8003a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a64:	ed2d 8b02 	vpush	{d8}
 8003a68:	ec57 6b10 	vmov	r6, r7, d0
 8003a6c:	b095      	sub	sp, #84	; 0x54
 8003a6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003a70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003a74:	9105      	str	r1, [sp, #20]
 8003a76:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003a7a:	4604      	mov	r4, r0
 8003a7c:	9209      	str	r2, [sp, #36]	; 0x24
 8003a7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003a80:	b975      	cbnz	r5, 8003aa0 <_dtoa_r+0x40>
 8003a82:	2010      	movs	r0, #16
 8003a84:	f000 fddc 	bl	8004640 <malloc>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	6260      	str	r0, [r4, #36]	; 0x24
 8003a8c:	b920      	cbnz	r0, 8003a98 <_dtoa_r+0x38>
 8003a8e:	4bb2      	ldr	r3, [pc, #712]	; (8003d58 <_dtoa_r+0x2f8>)
 8003a90:	21ea      	movs	r1, #234	; 0xea
 8003a92:	48b2      	ldr	r0, [pc, #712]	; (8003d5c <_dtoa_r+0x2fc>)
 8003a94:	f001 fb8e 	bl	80051b4 <__assert_func>
 8003a98:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003a9c:	6005      	str	r5, [r0, #0]
 8003a9e:	60c5      	str	r5, [r0, #12]
 8003aa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003aa2:	6819      	ldr	r1, [r3, #0]
 8003aa4:	b151      	cbz	r1, 8003abc <_dtoa_r+0x5c>
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	604a      	str	r2, [r1, #4]
 8003aaa:	2301      	movs	r3, #1
 8003aac:	4093      	lsls	r3, r2
 8003aae:	608b      	str	r3, [r1, #8]
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	f000 fe1b 	bl	80046ec <_Bfree>
 8003ab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	1e3b      	subs	r3, r7, #0
 8003abe:	bfb9      	ittee	lt
 8003ac0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003ac4:	9303      	strlt	r3, [sp, #12]
 8003ac6:	2300      	movge	r3, #0
 8003ac8:	f8c8 3000 	strge.w	r3, [r8]
 8003acc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003ad0:	4ba3      	ldr	r3, [pc, #652]	; (8003d60 <_dtoa_r+0x300>)
 8003ad2:	bfbc      	itt	lt
 8003ad4:	2201      	movlt	r2, #1
 8003ad6:	f8c8 2000 	strlt.w	r2, [r8]
 8003ada:	ea33 0309 	bics.w	r3, r3, r9
 8003ade:	d11b      	bne.n	8003b18 <_dtoa_r+0xb8>
 8003ae0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003ae2:	f242 730f 	movw	r3, #9999	; 0x270f
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003aec:	4333      	orrs	r3, r6
 8003aee:	f000 857a 	beq.w	80045e6 <_dtoa_r+0xb86>
 8003af2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003af4:	b963      	cbnz	r3, 8003b10 <_dtoa_r+0xb0>
 8003af6:	4b9b      	ldr	r3, [pc, #620]	; (8003d64 <_dtoa_r+0x304>)
 8003af8:	e024      	b.n	8003b44 <_dtoa_r+0xe4>
 8003afa:	4b9b      	ldr	r3, [pc, #620]	; (8003d68 <_dtoa_r+0x308>)
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	3308      	adds	r3, #8
 8003b00:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003b02:	6013      	str	r3, [r2, #0]
 8003b04:	9800      	ldr	r0, [sp, #0]
 8003b06:	b015      	add	sp, #84	; 0x54
 8003b08:	ecbd 8b02 	vpop	{d8}
 8003b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b10:	4b94      	ldr	r3, [pc, #592]	; (8003d64 <_dtoa_r+0x304>)
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	3303      	adds	r3, #3
 8003b16:	e7f3      	b.n	8003b00 <_dtoa_r+0xa0>
 8003b18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	ec51 0b17 	vmov	r0, r1, d7
 8003b22:	2300      	movs	r3, #0
 8003b24:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003b28:	f7fc ffce 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b2c:	4680      	mov	r8, r0
 8003b2e:	b158      	cbz	r0, 8003b48 <_dtoa_r+0xe8>
 8003b30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003b32:	2301      	movs	r3, #1
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 8551 	beq.w	80045e0 <_dtoa_r+0xb80>
 8003b3e:	488b      	ldr	r0, [pc, #556]	; (8003d6c <_dtoa_r+0x30c>)
 8003b40:	6018      	str	r0, [r3, #0]
 8003b42:	1e43      	subs	r3, r0, #1
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	e7dd      	b.n	8003b04 <_dtoa_r+0xa4>
 8003b48:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8003b4c:	aa12      	add	r2, sp, #72	; 0x48
 8003b4e:	a913      	add	r1, sp, #76	; 0x4c
 8003b50:	4620      	mov	r0, r4
 8003b52:	f001 f8ad 	bl	8004cb0 <__d2b>
 8003b56:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003b5a:	4683      	mov	fp, r0
 8003b5c:	2d00      	cmp	r5, #0
 8003b5e:	d07c      	beq.n	8003c5a <_dtoa_r+0x1fa>
 8003b60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b62:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8003b66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b6a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8003b6e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003b72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8003b76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003b7a:	4b7d      	ldr	r3, [pc, #500]	; (8003d70 <_dtoa_r+0x310>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	4630      	mov	r0, r6
 8003b80:	4639      	mov	r1, r7
 8003b82:	f7fc fb81 	bl	8000288 <__aeabi_dsub>
 8003b86:	a36e      	add	r3, pc, #440	; (adr r3, 8003d40 <_dtoa_r+0x2e0>)
 8003b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8c:	f7fc fd34 	bl	80005f8 <__aeabi_dmul>
 8003b90:	a36d      	add	r3, pc, #436	; (adr r3, 8003d48 <_dtoa_r+0x2e8>)
 8003b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b96:	f7fc fb79 	bl	800028c <__adddf3>
 8003b9a:	4606      	mov	r6, r0
 8003b9c:	4628      	mov	r0, r5
 8003b9e:	460f      	mov	r7, r1
 8003ba0:	f7fc fcc0 	bl	8000524 <__aeabi_i2d>
 8003ba4:	a36a      	add	r3, pc, #424	; (adr r3, 8003d50 <_dtoa_r+0x2f0>)
 8003ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003baa:	f7fc fd25 	bl	80005f8 <__aeabi_dmul>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4630      	mov	r0, r6
 8003bb4:	4639      	mov	r1, r7
 8003bb6:	f7fc fb69 	bl	800028c <__adddf3>
 8003bba:	4606      	mov	r6, r0
 8003bbc:	460f      	mov	r7, r1
 8003bbe:	f7fc ffcb 	bl	8000b58 <__aeabi_d2iz>
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	4682      	mov	sl, r0
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	4630      	mov	r0, r6
 8003bca:	4639      	mov	r1, r7
 8003bcc:	f7fc ff86 	bl	8000adc <__aeabi_dcmplt>
 8003bd0:	b148      	cbz	r0, 8003be6 <_dtoa_r+0x186>
 8003bd2:	4650      	mov	r0, sl
 8003bd4:	f7fc fca6 	bl	8000524 <__aeabi_i2d>
 8003bd8:	4632      	mov	r2, r6
 8003bda:	463b      	mov	r3, r7
 8003bdc:	f7fc ff74 	bl	8000ac8 <__aeabi_dcmpeq>
 8003be0:	b908      	cbnz	r0, 8003be6 <_dtoa_r+0x186>
 8003be2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003be6:	f1ba 0f16 	cmp.w	sl, #22
 8003bea:	d854      	bhi.n	8003c96 <_dtoa_r+0x236>
 8003bec:	4b61      	ldr	r3, [pc, #388]	; (8003d74 <_dtoa_r+0x314>)
 8003bee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003bfa:	f7fc ff6f 	bl	8000adc <__aeabi_dcmplt>
 8003bfe:	2800      	cmp	r0, #0
 8003c00:	d04b      	beq.n	8003c9a <_dtoa_r+0x23a>
 8003c02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003c06:	2300      	movs	r3, #0
 8003c08:	930e      	str	r3, [sp, #56]	; 0x38
 8003c0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003c0c:	1b5d      	subs	r5, r3, r5
 8003c0e:	1e6b      	subs	r3, r5, #1
 8003c10:	9304      	str	r3, [sp, #16]
 8003c12:	bf43      	ittte	mi
 8003c14:	2300      	movmi	r3, #0
 8003c16:	f1c5 0801 	rsbmi	r8, r5, #1
 8003c1a:	9304      	strmi	r3, [sp, #16]
 8003c1c:	f04f 0800 	movpl.w	r8, #0
 8003c20:	f1ba 0f00 	cmp.w	sl, #0
 8003c24:	db3b      	blt.n	8003c9e <_dtoa_r+0x23e>
 8003c26:	9b04      	ldr	r3, [sp, #16]
 8003c28:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8003c2c:	4453      	add	r3, sl
 8003c2e:	9304      	str	r3, [sp, #16]
 8003c30:	2300      	movs	r3, #0
 8003c32:	9306      	str	r3, [sp, #24]
 8003c34:	9b05      	ldr	r3, [sp, #20]
 8003c36:	2b09      	cmp	r3, #9
 8003c38:	d869      	bhi.n	8003d0e <_dtoa_r+0x2ae>
 8003c3a:	2b05      	cmp	r3, #5
 8003c3c:	bfc4      	itt	gt
 8003c3e:	3b04      	subgt	r3, #4
 8003c40:	9305      	strgt	r3, [sp, #20]
 8003c42:	9b05      	ldr	r3, [sp, #20]
 8003c44:	f1a3 0302 	sub.w	r3, r3, #2
 8003c48:	bfcc      	ite	gt
 8003c4a:	2500      	movgt	r5, #0
 8003c4c:	2501      	movle	r5, #1
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d869      	bhi.n	8003d26 <_dtoa_r+0x2c6>
 8003c52:	e8df f003 	tbb	[pc, r3]
 8003c56:	4e2c      	.short	0x4e2c
 8003c58:	5a4c      	.short	0x5a4c
 8003c5a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003c5e:	441d      	add	r5, r3
 8003c60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	bfc1      	itttt	gt
 8003c68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003c6c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8003c70:	fa09 f303 	lslgt.w	r3, r9, r3
 8003c74:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003c78:	bfda      	itte	le
 8003c7a:	f1c3 0320 	rsble	r3, r3, #32
 8003c7e:	fa06 f003 	lslle.w	r0, r6, r3
 8003c82:	4318      	orrgt	r0, r3
 8003c84:	f7fc fc3e 	bl	8000504 <__aeabi_ui2d>
 8003c88:	2301      	movs	r3, #1
 8003c8a:	4606      	mov	r6, r0
 8003c8c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8003c90:	3d01      	subs	r5, #1
 8003c92:	9310      	str	r3, [sp, #64]	; 0x40
 8003c94:	e771      	b.n	8003b7a <_dtoa_r+0x11a>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e7b6      	b.n	8003c08 <_dtoa_r+0x1a8>
 8003c9a:	900e      	str	r0, [sp, #56]	; 0x38
 8003c9c:	e7b5      	b.n	8003c0a <_dtoa_r+0x1aa>
 8003c9e:	f1ca 0300 	rsb	r3, sl, #0
 8003ca2:	9306      	str	r3, [sp, #24]
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	eba8 080a 	sub.w	r8, r8, sl
 8003caa:	930d      	str	r3, [sp, #52]	; 0x34
 8003cac:	e7c2      	b.n	8003c34 <_dtoa_r+0x1d4>
 8003cae:	2300      	movs	r3, #0
 8003cb0:	9308      	str	r3, [sp, #32]
 8003cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	dc39      	bgt.n	8003d2c <_dtoa_r+0x2cc>
 8003cb8:	f04f 0901 	mov.w	r9, #1
 8003cbc:	f8cd 9004 	str.w	r9, [sp, #4]
 8003cc0:	464b      	mov	r3, r9
 8003cc2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003cc6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003cc8:	2200      	movs	r2, #0
 8003cca:	6042      	str	r2, [r0, #4]
 8003ccc:	2204      	movs	r2, #4
 8003cce:	f102 0614 	add.w	r6, r2, #20
 8003cd2:	429e      	cmp	r6, r3
 8003cd4:	6841      	ldr	r1, [r0, #4]
 8003cd6:	d92f      	bls.n	8003d38 <_dtoa_r+0x2d8>
 8003cd8:	4620      	mov	r0, r4
 8003cda:	f000 fcc7 	bl	800466c <_Balloc>
 8003cde:	9000      	str	r0, [sp, #0]
 8003ce0:	2800      	cmp	r0, #0
 8003ce2:	d14b      	bne.n	8003d7c <_dtoa_r+0x31c>
 8003ce4:	4b24      	ldr	r3, [pc, #144]	; (8003d78 <_dtoa_r+0x318>)
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003cec:	e6d1      	b.n	8003a92 <_dtoa_r+0x32>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e7de      	b.n	8003cb0 <_dtoa_r+0x250>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	9308      	str	r3, [sp, #32]
 8003cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cf8:	eb0a 0903 	add.w	r9, sl, r3
 8003cfc:	f109 0301 	add.w	r3, r9, #1
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	9301      	str	r3, [sp, #4]
 8003d04:	bfb8      	it	lt
 8003d06:	2301      	movlt	r3, #1
 8003d08:	e7dd      	b.n	8003cc6 <_dtoa_r+0x266>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e7f2      	b.n	8003cf4 <_dtoa_r+0x294>
 8003d0e:	2501      	movs	r5, #1
 8003d10:	2300      	movs	r3, #0
 8003d12:	9305      	str	r3, [sp, #20]
 8003d14:	9508      	str	r5, [sp, #32]
 8003d16:	f04f 39ff 	mov.w	r9, #4294967295
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003d20:	2312      	movs	r3, #18
 8003d22:	9209      	str	r2, [sp, #36]	; 0x24
 8003d24:	e7cf      	b.n	8003cc6 <_dtoa_r+0x266>
 8003d26:	2301      	movs	r3, #1
 8003d28:	9308      	str	r3, [sp, #32]
 8003d2a:	e7f4      	b.n	8003d16 <_dtoa_r+0x2b6>
 8003d2c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003d30:	f8cd 9004 	str.w	r9, [sp, #4]
 8003d34:	464b      	mov	r3, r9
 8003d36:	e7c6      	b.n	8003cc6 <_dtoa_r+0x266>
 8003d38:	3101      	adds	r1, #1
 8003d3a:	6041      	str	r1, [r0, #4]
 8003d3c:	0052      	lsls	r2, r2, #1
 8003d3e:	e7c6      	b.n	8003cce <_dtoa_r+0x26e>
 8003d40:	636f4361 	.word	0x636f4361
 8003d44:	3fd287a7 	.word	0x3fd287a7
 8003d48:	8b60c8b3 	.word	0x8b60c8b3
 8003d4c:	3fc68a28 	.word	0x3fc68a28
 8003d50:	509f79fb 	.word	0x509f79fb
 8003d54:	3fd34413 	.word	0x3fd34413
 8003d58:	08005e05 	.word	0x08005e05
 8003d5c:	08005e1c 	.word	0x08005e1c
 8003d60:	7ff00000 	.word	0x7ff00000
 8003d64:	08005e01 	.word	0x08005e01
 8003d68:	08005df8 	.word	0x08005df8
 8003d6c:	08005dd5 	.word	0x08005dd5
 8003d70:	3ff80000 	.word	0x3ff80000
 8003d74:	08005f18 	.word	0x08005f18
 8003d78:	08005e7b 	.word	0x08005e7b
 8003d7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d7e:	9a00      	ldr	r2, [sp, #0]
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	9b01      	ldr	r3, [sp, #4]
 8003d84:	2b0e      	cmp	r3, #14
 8003d86:	f200 80ad 	bhi.w	8003ee4 <_dtoa_r+0x484>
 8003d8a:	2d00      	cmp	r5, #0
 8003d8c:	f000 80aa 	beq.w	8003ee4 <_dtoa_r+0x484>
 8003d90:	f1ba 0f00 	cmp.w	sl, #0
 8003d94:	dd36      	ble.n	8003e04 <_dtoa_r+0x3a4>
 8003d96:	4ac3      	ldr	r2, [pc, #780]	; (80040a4 <_dtoa_r+0x644>)
 8003d98:	f00a 030f 	and.w	r3, sl, #15
 8003d9c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003da0:	ed93 7b00 	vldr	d7, [r3]
 8003da4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8003da8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8003dac:	eeb0 8a47 	vmov.f32	s16, s14
 8003db0:	eef0 8a67 	vmov.f32	s17, s15
 8003db4:	d016      	beq.n	8003de4 <_dtoa_r+0x384>
 8003db6:	4bbc      	ldr	r3, [pc, #752]	; (80040a8 <_dtoa_r+0x648>)
 8003db8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003dbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003dc0:	f7fc fd44 	bl	800084c <__aeabi_ddiv>
 8003dc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003dc8:	f007 070f 	and.w	r7, r7, #15
 8003dcc:	2503      	movs	r5, #3
 8003dce:	4eb6      	ldr	r6, [pc, #728]	; (80040a8 <_dtoa_r+0x648>)
 8003dd0:	b957      	cbnz	r7, 8003de8 <_dtoa_r+0x388>
 8003dd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003dd6:	ec53 2b18 	vmov	r2, r3, d8
 8003dda:	f7fc fd37 	bl	800084c <__aeabi_ddiv>
 8003dde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003de2:	e029      	b.n	8003e38 <_dtoa_r+0x3d8>
 8003de4:	2502      	movs	r5, #2
 8003de6:	e7f2      	b.n	8003dce <_dtoa_r+0x36e>
 8003de8:	07f9      	lsls	r1, r7, #31
 8003dea:	d508      	bpl.n	8003dfe <_dtoa_r+0x39e>
 8003dec:	ec51 0b18 	vmov	r0, r1, d8
 8003df0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003df4:	f7fc fc00 	bl	80005f8 <__aeabi_dmul>
 8003df8:	ec41 0b18 	vmov	d8, r0, r1
 8003dfc:	3501      	adds	r5, #1
 8003dfe:	107f      	asrs	r7, r7, #1
 8003e00:	3608      	adds	r6, #8
 8003e02:	e7e5      	b.n	8003dd0 <_dtoa_r+0x370>
 8003e04:	f000 80a6 	beq.w	8003f54 <_dtoa_r+0x4f4>
 8003e08:	f1ca 0600 	rsb	r6, sl, #0
 8003e0c:	4ba5      	ldr	r3, [pc, #660]	; (80040a4 <_dtoa_r+0x644>)
 8003e0e:	4fa6      	ldr	r7, [pc, #664]	; (80040a8 <_dtoa_r+0x648>)
 8003e10:	f006 020f 	and.w	r2, r6, #15
 8003e14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003e20:	f7fc fbea 	bl	80005f8 <__aeabi_dmul>
 8003e24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e28:	1136      	asrs	r6, r6, #4
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	2502      	movs	r5, #2
 8003e2e:	2e00      	cmp	r6, #0
 8003e30:	f040 8085 	bne.w	8003f3e <_dtoa_r+0x4de>
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1d2      	bne.n	8003dde <_dtoa_r+0x37e>
 8003e38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 808c 	beq.w	8003f58 <_dtoa_r+0x4f8>
 8003e40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003e44:	4b99      	ldr	r3, [pc, #612]	; (80040ac <_dtoa_r+0x64c>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	4630      	mov	r0, r6
 8003e4a:	4639      	mov	r1, r7
 8003e4c:	f7fc fe46 	bl	8000adc <__aeabi_dcmplt>
 8003e50:	2800      	cmp	r0, #0
 8003e52:	f000 8081 	beq.w	8003f58 <_dtoa_r+0x4f8>
 8003e56:	9b01      	ldr	r3, [sp, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d07d      	beq.n	8003f58 <_dtoa_r+0x4f8>
 8003e5c:	f1b9 0f00 	cmp.w	r9, #0
 8003e60:	dd3c      	ble.n	8003edc <_dtoa_r+0x47c>
 8003e62:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003e66:	9307      	str	r3, [sp, #28]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	4b91      	ldr	r3, [pc, #580]	; (80040b0 <_dtoa_r+0x650>)
 8003e6c:	4630      	mov	r0, r6
 8003e6e:	4639      	mov	r1, r7
 8003e70:	f7fc fbc2 	bl	80005f8 <__aeabi_dmul>
 8003e74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e78:	3501      	adds	r5, #1
 8003e7a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8003e7e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003e82:	4628      	mov	r0, r5
 8003e84:	f7fc fb4e 	bl	8000524 <__aeabi_i2d>
 8003e88:	4632      	mov	r2, r6
 8003e8a:	463b      	mov	r3, r7
 8003e8c:	f7fc fbb4 	bl	80005f8 <__aeabi_dmul>
 8003e90:	4b88      	ldr	r3, [pc, #544]	; (80040b4 <_dtoa_r+0x654>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	f7fc f9fa 	bl	800028c <__adddf3>
 8003e98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8003e9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ea0:	9303      	str	r3, [sp, #12]
 8003ea2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d15c      	bne.n	8003f62 <_dtoa_r+0x502>
 8003ea8:	4b83      	ldr	r3, [pc, #524]	; (80040b8 <_dtoa_r+0x658>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	4630      	mov	r0, r6
 8003eae:	4639      	mov	r1, r7
 8003eb0:	f7fc f9ea 	bl	8000288 <__aeabi_dsub>
 8003eb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003eb8:	4606      	mov	r6, r0
 8003eba:	460f      	mov	r7, r1
 8003ebc:	f7fc fe2c 	bl	8000b18 <__aeabi_dcmpgt>
 8003ec0:	2800      	cmp	r0, #0
 8003ec2:	f040 8296 	bne.w	80043f2 <_dtoa_r+0x992>
 8003ec6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8003eca:	4630      	mov	r0, r6
 8003ecc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003ed0:	4639      	mov	r1, r7
 8003ed2:	f7fc fe03 	bl	8000adc <__aeabi_dcmplt>
 8003ed6:	2800      	cmp	r0, #0
 8003ed8:	f040 8288 	bne.w	80043ec <_dtoa_r+0x98c>
 8003edc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003ee0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ee4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f2c0 8158 	blt.w	800419c <_dtoa_r+0x73c>
 8003eec:	f1ba 0f0e 	cmp.w	sl, #14
 8003ef0:	f300 8154 	bgt.w	800419c <_dtoa_r+0x73c>
 8003ef4:	4b6b      	ldr	r3, [pc, #428]	; (80040a4 <_dtoa_r+0x644>)
 8003ef6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003efa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f280 80e3 	bge.w	80040cc <_dtoa_r+0x66c>
 8003f06:	9b01      	ldr	r3, [sp, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f300 80df 	bgt.w	80040cc <_dtoa_r+0x66c>
 8003f0e:	f040 826d 	bne.w	80043ec <_dtoa_r+0x98c>
 8003f12:	4b69      	ldr	r3, [pc, #420]	; (80040b8 <_dtoa_r+0x658>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	4640      	mov	r0, r8
 8003f18:	4649      	mov	r1, r9
 8003f1a:	f7fc fb6d 	bl	80005f8 <__aeabi_dmul>
 8003f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f22:	f7fc fdef 	bl	8000b04 <__aeabi_dcmpge>
 8003f26:	9e01      	ldr	r6, [sp, #4]
 8003f28:	4637      	mov	r7, r6
 8003f2a:	2800      	cmp	r0, #0
 8003f2c:	f040 8243 	bne.w	80043b6 <_dtoa_r+0x956>
 8003f30:	9d00      	ldr	r5, [sp, #0]
 8003f32:	2331      	movs	r3, #49	; 0x31
 8003f34:	f805 3b01 	strb.w	r3, [r5], #1
 8003f38:	f10a 0a01 	add.w	sl, sl, #1
 8003f3c:	e23f      	b.n	80043be <_dtoa_r+0x95e>
 8003f3e:	07f2      	lsls	r2, r6, #31
 8003f40:	d505      	bpl.n	8003f4e <_dtoa_r+0x4ee>
 8003f42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f46:	f7fc fb57 	bl	80005f8 <__aeabi_dmul>
 8003f4a:	3501      	adds	r5, #1
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	1076      	asrs	r6, r6, #1
 8003f50:	3708      	adds	r7, #8
 8003f52:	e76c      	b.n	8003e2e <_dtoa_r+0x3ce>
 8003f54:	2502      	movs	r5, #2
 8003f56:	e76f      	b.n	8003e38 <_dtoa_r+0x3d8>
 8003f58:	9b01      	ldr	r3, [sp, #4]
 8003f5a:	f8cd a01c 	str.w	sl, [sp, #28]
 8003f5e:	930c      	str	r3, [sp, #48]	; 0x30
 8003f60:	e78d      	b.n	8003e7e <_dtoa_r+0x41e>
 8003f62:	9900      	ldr	r1, [sp, #0]
 8003f64:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003f66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f68:	4b4e      	ldr	r3, [pc, #312]	; (80040a4 <_dtoa_r+0x644>)
 8003f6a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003f6e:	4401      	add	r1, r0
 8003f70:	9102      	str	r1, [sp, #8]
 8003f72:	9908      	ldr	r1, [sp, #32]
 8003f74:	eeb0 8a47 	vmov.f32	s16, s14
 8003f78:	eef0 8a67 	vmov.f32	s17, s15
 8003f7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003f80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003f84:	2900      	cmp	r1, #0
 8003f86:	d045      	beq.n	8004014 <_dtoa_r+0x5b4>
 8003f88:	494c      	ldr	r1, [pc, #304]	; (80040bc <_dtoa_r+0x65c>)
 8003f8a:	2000      	movs	r0, #0
 8003f8c:	f7fc fc5e 	bl	800084c <__aeabi_ddiv>
 8003f90:	ec53 2b18 	vmov	r2, r3, d8
 8003f94:	f7fc f978 	bl	8000288 <__aeabi_dsub>
 8003f98:	9d00      	ldr	r5, [sp, #0]
 8003f9a:	ec41 0b18 	vmov	d8, r0, r1
 8003f9e:	4639      	mov	r1, r7
 8003fa0:	4630      	mov	r0, r6
 8003fa2:	f7fc fdd9 	bl	8000b58 <__aeabi_d2iz>
 8003fa6:	900c      	str	r0, [sp, #48]	; 0x30
 8003fa8:	f7fc fabc 	bl	8000524 <__aeabi_i2d>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4630      	mov	r0, r6
 8003fb2:	4639      	mov	r1, r7
 8003fb4:	f7fc f968 	bl	8000288 <__aeabi_dsub>
 8003fb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003fba:	3330      	adds	r3, #48	; 0x30
 8003fbc:	f805 3b01 	strb.w	r3, [r5], #1
 8003fc0:	ec53 2b18 	vmov	r2, r3, d8
 8003fc4:	4606      	mov	r6, r0
 8003fc6:	460f      	mov	r7, r1
 8003fc8:	f7fc fd88 	bl	8000adc <__aeabi_dcmplt>
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	d165      	bne.n	800409c <_dtoa_r+0x63c>
 8003fd0:	4632      	mov	r2, r6
 8003fd2:	463b      	mov	r3, r7
 8003fd4:	4935      	ldr	r1, [pc, #212]	; (80040ac <_dtoa_r+0x64c>)
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	f7fc f956 	bl	8000288 <__aeabi_dsub>
 8003fdc:	ec53 2b18 	vmov	r2, r3, d8
 8003fe0:	f7fc fd7c 	bl	8000adc <__aeabi_dcmplt>
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	f040 80b9 	bne.w	800415c <_dtoa_r+0x6fc>
 8003fea:	9b02      	ldr	r3, [sp, #8]
 8003fec:	429d      	cmp	r5, r3
 8003fee:	f43f af75 	beq.w	8003edc <_dtoa_r+0x47c>
 8003ff2:	4b2f      	ldr	r3, [pc, #188]	; (80040b0 <_dtoa_r+0x650>)
 8003ff4:	ec51 0b18 	vmov	r0, r1, d8
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f7fc fafd 	bl	80005f8 <__aeabi_dmul>
 8003ffe:	4b2c      	ldr	r3, [pc, #176]	; (80040b0 <_dtoa_r+0x650>)
 8004000:	ec41 0b18 	vmov	d8, r0, r1
 8004004:	2200      	movs	r2, #0
 8004006:	4630      	mov	r0, r6
 8004008:	4639      	mov	r1, r7
 800400a:	f7fc faf5 	bl	80005f8 <__aeabi_dmul>
 800400e:	4606      	mov	r6, r0
 8004010:	460f      	mov	r7, r1
 8004012:	e7c4      	b.n	8003f9e <_dtoa_r+0x53e>
 8004014:	ec51 0b17 	vmov	r0, r1, d7
 8004018:	f7fc faee 	bl	80005f8 <__aeabi_dmul>
 800401c:	9b02      	ldr	r3, [sp, #8]
 800401e:	9d00      	ldr	r5, [sp, #0]
 8004020:	930c      	str	r3, [sp, #48]	; 0x30
 8004022:	ec41 0b18 	vmov	d8, r0, r1
 8004026:	4639      	mov	r1, r7
 8004028:	4630      	mov	r0, r6
 800402a:	f7fc fd95 	bl	8000b58 <__aeabi_d2iz>
 800402e:	9011      	str	r0, [sp, #68]	; 0x44
 8004030:	f7fc fa78 	bl	8000524 <__aeabi_i2d>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4630      	mov	r0, r6
 800403a:	4639      	mov	r1, r7
 800403c:	f7fc f924 	bl	8000288 <__aeabi_dsub>
 8004040:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004042:	3330      	adds	r3, #48	; 0x30
 8004044:	f805 3b01 	strb.w	r3, [r5], #1
 8004048:	9b02      	ldr	r3, [sp, #8]
 800404a:	429d      	cmp	r5, r3
 800404c:	4606      	mov	r6, r0
 800404e:	460f      	mov	r7, r1
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	d134      	bne.n	80040c0 <_dtoa_r+0x660>
 8004056:	4b19      	ldr	r3, [pc, #100]	; (80040bc <_dtoa_r+0x65c>)
 8004058:	ec51 0b18 	vmov	r0, r1, d8
 800405c:	f7fc f916 	bl	800028c <__adddf3>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	4630      	mov	r0, r6
 8004066:	4639      	mov	r1, r7
 8004068:	f7fc fd56 	bl	8000b18 <__aeabi_dcmpgt>
 800406c:	2800      	cmp	r0, #0
 800406e:	d175      	bne.n	800415c <_dtoa_r+0x6fc>
 8004070:	ec53 2b18 	vmov	r2, r3, d8
 8004074:	4911      	ldr	r1, [pc, #68]	; (80040bc <_dtoa_r+0x65c>)
 8004076:	2000      	movs	r0, #0
 8004078:	f7fc f906 	bl	8000288 <__aeabi_dsub>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4630      	mov	r0, r6
 8004082:	4639      	mov	r1, r7
 8004084:	f7fc fd2a 	bl	8000adc <__aeabi_dcmplt>
 8004088:	2800      	cmp	r0, #0
 800408a:	f43f af27 	beq.w	8003edc <_dtoa_r+0x47c>
 800408e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004090:	1e6b      	subs	r3, r5, #1
 8004092:	930c      	str	r3, [sp, #48]	; 0x30
 8004094:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004098:	2b30      	cmp	r3, #48	; 0x30
 800409a:	d0f8      	beq.n	800408e <_dtoa_r+0x62e>
 800409c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80040a0:	e04a      	b.n	8004138 <_dtoa_r+0x6d8>
 80040a2:	bf00      	nop
 80040a4:	08005f18 	.word	0x08005f18
 80040a8:	08005ef0 	.word	0x08005ef0
 80040ac:	3ff00000 	.word	0x3ff00000
 80040b0:	40240000 	.word	0x40240000
 80040b4:	401c0000 	.word	0x401c0000
 80040b8:	40140000 	.word	0x40140000
 80040bc:	3fe00000 	.word	0x3fe00000
 80040c0:	4baf      	ldr	r3, [pc, #700]	; (8004380 <_dtoa_r+0x920>)
 80040c2:	f7fc fa99 	bl	80005f8 <__aeabi_dmul>
 80040c6:	4606      	mov	r6, r0
 80040c8:	460f      	mov	r7, r1
 80040ca:	e7ac      	b.n	8004026 <_dtoa_r+0x5c6>
 80040cc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80040d0:	9d00      	ldr	r5, [sp, #0]
 80040d2:	4642      	mov	r2, r8
 80040d4:	464b      	mov	r3, r9
 80040d6:	4630      	mov	r0, r6
 80040d8:	4639      	mov	r1, r7
 80040da:	f7fc fbb7 	bl	800084c <__aeabi_ddiv>
 80040de:	f7fc fd3b 	bl	8000b58 <__aeabi_d2iz>
 80040e2:	9002      	str	r0, [sp, #8]
 80040e4:	f7fc fa1e 	bl	8000524 <__aeabi_i2d>
 80040e8:	4642      	mov	r2, r8
 80040ea:	464b      	mov	r3, r9
 80040ec:	f7fc fa84 	bl	80005f8 <__aeabi_dmul>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4630      	mov	r0, r6
 80040f6:	4639      	mov	r1, r7
 80040f8:	f7fc f8c6 	bl	8000288 <__aeabi_dsub>
 80040fc:	9e02      	ldr	r6, [sp, #8]
 80040fe:	9f01      	ldr	r7, [sp, #4]
 8004100:	3630      	adds	r6, #48	; 0x30
 8004102:	f805 6b01 	strb.w	r6, [r5], #1
 8004106:	9e00      	ldr	r6, [sp, #0]
 8004108:	1bae      	subs	r6, r5, r6
 800410a:	42b7      	cmp	r7, r6
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	d137      	bne.n	8004182 <_dtoa_r+0x722>
 8004112:	f7fc f8bb 	bl	800028c <__adddf3>
 8004116:	4642      	mov	r2, r8
 8004118:	464b      	mov	r3, r9
 800411a:	4606      	mov	r6, r0
 800411c:	460f      	mov	r7, r1
 800411e:	f7fc fcfb 	bl	8000b18 <__aeabi_dcmpgt>
 8004122:	b9c8      	cbnz	r0, 8004158 <_dtoa_r+0x6f8>
 8004124:	4642      	mov	r2, r8
 8004126:	464b      	mov	r3, r9
 8004128:	4630      	mov	r0, r6
 800412a:	4639      	mov	r1, r7
 800412c:	f7fc fccc 	bl	8000ac8 <__aeabi_dcmpeq>
 8004130:	b110      	cbz	r0, 8004138 <_dtoa_r+0x6d8>
 8004132:	9b02      	ldr	r3, [sp, #8]
 8004134:	07d9      	lsls	r1, r3, #31
 8004136:	d40f      	bmi.n	8004158 <_dtoa_r+0x6f8>
 8004138:	4620      	mov	r0, r4
 800413a:	4659      	mov	r1, fp
 800413c:	f000 fad6 	bl	80046ec <_Bfree>
 8004140:	2300      	movs	r3, #0
 8004142:	702b      	strb	r3, [r5, #0]
 8004144:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004146:	f10a 0001 	add.w	r0, sl, #1
 800414a:	6018      	str	r0, [r3, #0]
 800414c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800414e:	2b00      	cmp	r3, #0
 8004150:	f43f acd8 	beq.w	8003b04 <_dtoa_r+0xa4>
 8004154:	601d      	str	r5, [r3, #0]
 8004156:	e4d5      	b.n	8003b04 <_dtoa_r+0xa4>
 8004158:	f8cd a01c 	str.w	sl, [sp, #28]
 800415c:	462b      	mov	r3, r5
 800415e:	461d      	mov	r5, r3
 8004160:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004164:	2a39      	cmp	r2, #57	; 0x39
 8004166:	d108      	bne.n	800417a <_dtoa_r+0x71a>
 8004168:	9a00      	ldr	r2, [sp, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d1f7      	bne.n	800415e <_dtoa_r+0x6fe>
 800416e:	9a07      	ldr	r2, [sp, #28]
 8004170:	9900      	ldr	r1, [sp, #0]
 8004172:	3201      	adds	r2, #1
 8004174:	9207      	str	r2, [sp, #28]
 8004176:	2230      	movs	r2, #48	; 0x30
 8004178:	700a      	strb	r2, [r1, #0]
 800417a:	781a      	ldrb	r2, [r3, #0]
 800417c:	3201      	adds	r2, #1
 800417e:	701a      	strb	r2, [r3, #0]
 8004180:	e78c      	b.n	800409c <_dtoa_r+0x63c>
 8004182:	4b7f      	ldr	r3, [pc, #508]	; (8004380 <_dtoa_r+0x920>)
 8004184:	2200      	movs	r2, #0
 8004186:	f7fc fa37 	bl	80005f8 <__aeabi_dmul>
 800418a:	2200      	movs	r2, #0
 800418c:	2300      	movs	r3, #0
 800418e:	4606      	mov	r6, r0
 8004190:	460f      	mov	r7, r1
 8004192:	f7fc fc99 	bl	8000ac8 <__aeabi_dcmpeq>
 8004196:	2800      	cmp	r0, #0
 8004198:	d09b      	beq.n	80040d2 <_dtoa_r+0x672>
 800419a:	e7cd      	b.n	8004138 <_dtoa_r+0x6d8>
 800419c:	9a08      	ldr	r2, [sp, #32]
 800419e:	2a00      	cmp	r2, #0
 80041a0:	f000 80c4 	beq.w	800432c <_dtoa_r+0x8cc>
 80041a4:	9a05      	ldr	r2, [sp, #20]
 80041a6:	2a01      	cmp	r2, #1
 80041a8:	f300 80a8 	bgt.w	80042fc <_dtoa_r+0x89c>
 80041ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80041ae:	2a00      	cmp	r2, #0
 80041b0:	f000 80a0 	beq.w	80042f4 <_dtoa_r+0x894>
 80041b4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80041b8:	9e06      	ldr	r6, [sp, #24]
 80041ba:	4645      	mov	r5, r8
 80041bc:	9a04      	ldr	r2, [sp, #16]
 80041be:	2101      	movs	r1, #1
 80041c0:	441a      	add	r2, r3
 80041c2:	4620      	mov	r0, r4
 80041c4:	4498      	add	r8, r3
 80041c6:	9204      	str	r2, [sp, #16]
 80041c8:	f000 fb4c 	bl	8004864 <__i2b>
 80041cc:	4607      	mov	r7, r0
 80041ce:	2d00      	cmp	r5, #0
 80041d0:	dd0b      	ble.n	80041ea <_dtoa_r+0x78a>
 80041d2:	9b04      	ldr	r3, [sp, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	dd08      	ble.n	80041ea <_dtoa_r+0x78a>
 80041d8:	42ab      	cmp	r3, r5
 80041da:	9a04      	ldr	r2, [sp, #16]
 80041dc:	bfa8      	it	ge
 80041de:	462b      	movge	r3, r5
 80041e0:	eba8 0803 	sub.w	r8, r8, r3
 80041e4:	1aed      	subs	r5, r5, r3
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	9304      	str	r3, [sp, #16]
 80041ea:	9b06      	ldr	r3, [sp, #24]
 80041ec:	b1fb      	cbz	r3, 800422e <_dtoa_r+0x7ce>
 80041ee:	9b08      	ldr	r3, [sp, #32]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 809f 	beq.w	8004334 <_dtoa_r+0x8d4>
 80041f6:	2e00      	cmp	r6, #0
 80041f8:	dd11      	ble.n	800421e <_dtoa_r+0x7be>
 80041fa:	4639      	mov	r1, r7
 80041fc:	4632      	mov	r2, r6
 80041fe:	4620      	mov	r0, r4
 8004200:	f000 fbec 	bl	80049dc <__pow5mult>
 8004204:	465a      	mov	r2, fp
 8004206:	4601      	mov	r1, r0
 8004208:	4607      	mov	r7, r0
 800420a:	4620      	mov	r0, r4
 800420c:	f000 fb40 	bl	8004890 <__multiply>
 8004210:	4659      	mov	r1, fp
 8004212:	9007      	str	r0, [sp, #28]
 8004214:	4620      	mov	r0, r4
 8004216:	f000 fa69 	bl	80046ec <_Bfree>
 800421a:	9b07      	ldr	r3, [sp, #28]
 800421c:	469b      	mov	fp, r3
 800421e:	9b06      	ldr	r3, [sp, #24]
 8004220:	1b9a      	subs	r2, r3, r6
 8004222:	d004      	beq.n	800422e <_dtoa_r+0x7ce>
 8004224:	4659      	mov	r1, fp
 8004226:	4620      	mov	r0, r4
 8004228:	f000 fbd8 	bl	80049dc <__pow5mult>
 800422c:	4683      	mov	fp, r0
 800422e:	2101      	movs	r1, #1
 8004230:	4620      	mov	r0, r4
 8004232:	f000 fb17 	bl	8004864 <__i2b>
 8004236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004238:	2b00      	cmp	r3, #0
 800423a:	4606      	mov	r6, r0
 800423c:	dd7c      	ble.n	8004338 <_dtoa_r+0x8d8>
 800423e:	461a      	mov	r2, r3
 8004240:	4601      	mov	r1, r0
 8004242:	4620      	mov	r0, r4
 8004244:	f000 fbca 	bl	80049dc <__pow5mult>
 8004248:	9b05      	ldr	r3, [sp, #20]
 800424a:	2b01      	cmp	r3, #1
 800424c:	4606      	mov	r6, r0
 800424e:	dd76      	ble.n	800433e <_dtoa_r+0x8de>
 8004250:	2300      	movs	r3, #0
 8004252:	9306      	str	r3, [sp, #24]
 8004254:	6933      	ldr	r3, [r6, #16]
 8004256:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800425a:	6918      	ldr	r0, [r3, #16]
 800425c:	f000 fab2 	bl	80047c4 <__hi0bits>
 8004260:	f1c0 0020 	rsb	r0, r0, #32
 8004264:	9b04      	ldr	r3, [sp, #16]
 8004266:	4418      	add	r0, r3
 8004268:	f010 001f 	ands.w	r0, r0, #31
 800426c:	f000 8086 	beq.w	800437c <_dtoa_r+0x91c>
 8004270:	f1c0 0320 	rsb	r3, r0, #32
 8004274:	2b04      	cmp	r3, #4
 8004276:	dd7f      	ble.n	8004378 <_dtoa_r+0x918>
 8004278:	f1c0 001c 	rsb	r0, r0, #28
 800427c:	9b04      	ldr	r3, [sp, #16]
 800427e:	4403      	add	r3, r0
 8004280:	4480      	add	r8, r0
 8004282:	4405      	add	r5, r0
 8004284:	9304      	str	r3, [sp, #16]
 8004286:	f1b8 0f00 	cmp.w	r8, #0
 800428a:	dd05      	ble.n	8004298 <_dtoa_r+0x838>
 800428c:	4659      	mov	r1, fp
 800428e:	4642      	mov	r2, r8
 8004290:	4620      	mov	r0, r4
 8004292:	f000 fbfd 	bl	8004a90 <__lshift>
 8004296:	4683      	mov	fp, r0
 8004298:	9b04      	ldr	r3, [sp, #16]
 800429a:	2b00      	cmp	r3, #0
 800429c:	dd05      	ble.n	80042aa <_dtoa_r+0x84a>
 800429e:	4631      	mov	r1, r6
 80042a0:	461a      	mov	r2, r3
 80042a2:	4620      	mov	r0, r4
 80042a4:	f000 fbf4 	bl	8004a90 <__lshift>
 80042a8:	4606      	mov	r6, r0
 80042aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d069      	beq.n	8004384 <_dtoa_r+0x924>
 80042b0:	4631      	mov	r1, r6
 80042b2:	4658      	mov	r0, fp
 80042b4:	f000 fc58 	bl	8004b68 <__mcmp>
 80042b8:	2800      	cmp	r0, #0
 80042ba:	da63      	bge.n	8004384 <_dtoa_r+0x924>
 80042bc:	2300      	movs	r3, #0
 80042be:	4659      	mov	r1, fp
 80042c0:	220a      	movs	r2, #10
 80042c2:	4620      	mov	r0, r4
 80042c4:	f000 fa34 	bl	8004730 <__multadd>
 80042c8:	9b08      	ldr	r3, [sp, #32]
 80042ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80042ce:	4683      	mov	fp, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 818f 	beq.w	80045f4 <_dtoa_r+0xb94>
 80042d6:	4639      	mov	r1, r7
 80042d8:	2300      	movs	r3, #0
 80042da:	220a      	movs	r2, #10
 80042dc:	4620      	mov	r0, r4
 80042de:	f000 fa27 	bl	8004730 <__multadd>
 80042e2:	f1b9 0f00 	cmp.w	r9, #0
 80042e6:	4607      	mov	r7, r0
 80042e8:	f300 808e 	bgt.w	8004408 <_dtoa_r+0x9a8>
 80042ec:	9b05      	ldr	r3, [sp, #20]
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	dc50      	bgt.n	8004394 <_dtoa_r+0x934>
 80042f2:	e089      	b.n	8004408 <_dtoa_r+0x9a8>
 80042f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80042f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80042fa:	e75d      	b.n	80041b8 <_dtoa_r+0x758>
 80042fc:	9b01      	ldr	r3, [sp, #4]
 80042fe:	1e5e      	subs	r6, r3, #1
 8004300:	9b06      	ldr	r3, [sp, #24]
 8004302:	42b3      	cmp	r3, r6
 8004304:	bfbf      	itttt	lt
 8004306:	9b06      	ldrlt	r3, [sp, #24]
 8004308:	9606      	strlt	r6, [sp, #24]
 800430a:	1af2      	sublt	r2, r6, r3
 800430c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800430e:	bfb6      	itet	lt
 8004310:	189b      	addlt	r3, r3, r2
 8004312:	1b9e      	subge	r6, r3, r6
 8004314:	930d      	strlt	r3, [sp, #52]	; 0x34
 8004316:	9b01      	ldr	r3, [sp, #4]
 8004318:	bfb8      	it	lt
 800431a:	2600      	movlt	r6, #0
 800431c:	2b00      	cmp	r3, #0
 800431e:	bfb5      	itete	lt
 8004320:	eba8 0503 	sublt.w	r5, r8, r3
 8004324:	9b01      	ldrge	r3, [sp, #4]
 8004326:	2300      	movlt	r3, #0
 8004328:	4645      	movge	r5, r8
 800432a:	e747      	b.n	80041bc <_dtoa_r+0x75c>
 800432c:	9e06      	ldr	r6, [sp, #24]
 800432e:	9f08      	ldr	r7, [sp, #32]
 8004330:	4645      	mov	r5, r8
 8004332:	e74c      	b.n	80041ce <_dtoa_r+0x76e>
 8004334:	9a06      	ldr	r2, [sp, #24]
 8004336:	e775      	b.n	8004224 <_dtoa_r+0x7c4>
 8004338:	9b05      	ldr	r3, [sp, #20]
 800433a:	2b01      	cmp	r3, #1
 800433c:	dc18      	bgt.n	8004370 <_dtoa_r+0x910>
 800433e:	9b02      	ldr	r3, [sp, #8]
 8004340:	b9b3      	cbnz	r3, 8004370 <_dtoa_r+0x910>
 8004342:	9b03      	ldr	r3, [sp, #12]
 8004344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004348:	b9a3      	cbnz	r3, 8004374 <_dtoa_r+0x914>
 800434a:	9b03      	ldr	r3, [sp, #12]
 800434c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004350:	0d1b      	lsrs	r3, r3, #20
 8004352:	051b      	lsls	r3, r3, #20
 8004354:	b12b      	cbz	r3, 8004362 <_dtoa_r+0x902>
 8004356:	9b04      	ldr	r3, [sp, #16]
 8004358:	3301      	adds	r3, #1
 800435a:	9304      	str	r3, [sp, #16]
 800435c:	f108 0801 	add.w	r8, r8, #1
 8004360:	2301      	movs	r3, #1
 8004362:	9306      	str	r3, [sp, #24]
 8004364:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004366:	2b00      	cmp	r3, #0
 8004368:	f47f af74 	bne.w	8004254 <_dtoa_r+0x7f4>
 800436c:	2001      	movs	r0, #1
 800436e:	e779      	b.n	8004264 <_dtoa_r+0x804>
 8004370:	2300      	movs	r3, #0
 8004372:	e7f6      	b.n	8004362 <_dtoa_r+0x902>
 8004374:	9b02      	ldr	r3, [sp, #8]
 8004376:	e7f4      	b.n	8004362 <_dtoa_r+0x902>
 8004378:	d085      	beq.n	8004286 <_dtoa_r+0x826>
 800437a:	4618      	mov	r0, r3
 800437c:	301c      	adds	r0, #28
 800437e:	e77d      	b.n	800427c <_dtoa_r+0x81c>
 8004380:	40240000 	.word	0x40240000
 8004384:	9b01      	ldr	r3, [sp, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	dc38      	bgt.n	80043fc <_dtoa_r+0x99c>
 800438a:	9b05      	ldr	r3, [sp, #20]
 800438c:	2b02      	cmp	r3, #2
 800438e:	dd35      	ble.n	80043fc <_dtoa_r+0x99c>
 8004390:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004394:	f1b9 0f00 	cmp.w	r9, #0
 8004398:	d10d      	bne.n	80043b6 <_dtoa_r+0x956>
 800439a:	4631      	mov	r1, r6
 800439c:	464b      	mov	r3, r9
 800439e:	2205      	movs	r2, #5
 80043a0:	4620      	mov	r0, r4
 80043a2:	f000 f9c5 	bl	8004730 <__multadd>
 80043a6:	4601      	mov	r1, r0
 80043a8:	4606      	mov	r6, r0
 80043aa:	4658      	mov	r0, fp
 80043ac:	f000 fbdc 	bl	8004b68 <__mcmp>
 80043b0:	2800      	cmp	r0, #0
 80043b2:	f73f adbd 	bgt.w	8003f30 <_dtoa_r+0x4d0>
 80043b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043b8:	9d00      	ldr	r5, [sp, #0]
 80043ba:	ea6f 0a03 	mvn.w	sl, r3
 80043be:	f04f 0800 	mov.w	r8, #0
 80043c2:	4631      	mov	r1, r6
 80043c4:	4620      	mov	r0, r4
 80043c6:	f000 f991 	bl	80046ec <_Bfree>
 80043ca:	2f00      	cmp	r7, #0
 80043cc:	f43f aeb4 	beq.w	8004138 <_dtoa_r+0x6d8>
 80043d0:	f1b8 0f00 	cmp.w	r8, #0
 80043d4:	d005      	beq.n	80043e2 <_dtoa_r+0x982>
 80043d6:	45b8      	cmp	r8, r7
 80043d8:	d003      	beq.n	80043e2 <_dtoa_r+0x982>
 80043da:	4641      	mov	r1, r8
 80043dc:	4620      	mov	r0, r4
 80043de:	f000 f985 	bl	80046ec <_Bfree>
 80043e2:	4639      	mov	r1, r7
 80043e4:	4620      	mov	r0, r4
 80043e6:	f000 f981 	bl	80046ec <_Bfree>
 80043ea:	e6a5      	b.n	8004138 <_dtoa_r+0x6d8>
 80043ec:	2600      	movs	r6, #0
 80043ee:	4637      	mov	r7, r6
 80043f0:	e7e1      	b.n	80043b6 <_dtoa_r+0x956>
 80043f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80043f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80043f8:	4637      	mov	r7, r6
 80043fa:	e599      	b.n	8003f30 <_dtoa_r+0x4d0>
 80043fc:	9b08      	ldr	r3, [sp, #32]
 80043fe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 80fd 	beq.w	8004602 <_dtoa_r+0xba2>
 8004408:	2d00      	cmp	r5, #0
 800440a:	dd05      	ble.n	8004418 <_dtoa_r+0x9b8>
 800440c:	4639      	mov	r1, r7
 800440e:	462a      	mov	r2, r5
 8004410:	4620      	mov	r0, r4
 8004412:	f000 fb3d 	bl	8004a90 <__lshift>
 8004416:	4607      	mov	r7, r0
 8004418:	9b06      	ldr	r3, [sp, #24]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d05c      	beq.n	80044d8 <_dtoa_r+0xa78>
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	4620      	mov	r0, r4
 8004422:	f000 f923 	bl	800466c <_Balloc>
 8004426:	4605      	mov	r5, r0
 8004428:	b928      	cbnz	r0, 8004436 <_dtoa_r+0x9d6>
 800442a:	4b80      	ldr	r3, [pc, #512]	; (800462c <_dtoa_r+0xbcc>)
 800442c:	4602      	mov	r2, r0
 800442e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004432:	f7ff bb2e 	b.w	8003a92 <_dtoa_r+0x32>
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	3202      	adds	r2, #2
 800443a:	0092      	lsls	r2, r2, #2
 800443c:	f107 010c 	add.w	r1, r7, #12
 8004440:	300c      	adds	r0, #12
 8004442:	f000 f905 	bl	8004650 <memcpy>
 8004446:	2201      	movs	r2, #1
 8004448:	4629      	mov	r1, r5
 800444a:	4620      	mov	r0, r4
 800444c:	f000 fb20 	bl	8004a90 <__lshift>
 8004450:	9b00      	ldr	r3, [sp, #0]
 8004452:	3301      	adds	r3, #1
 8004454:	9301      	str	r3, [sp, #4]
 8004456:	9b00      	ldr	r3, [sp, #0]
 8004458:	444b      	add	r3, r9
 800445a:	9307      	str	r3, [sp, #28]
 800445c:	9b02      	ldr	r3, [sp, #8]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	46b8      	mov	r8, r7
 8004464:	9306      	str	r3, [sp, #24]
 8004466:	4607      	mov	r7, r0
 8004468:	9b01      	ldr	r3, [sp, #4]
 800446a:	4631      	mov	r1, r6
 800446c:	3b01      	subs	r3, #1
 800446e:	4658      	mov	r0, fp
 8004470:	9302      	str	r3, [sp, #8]
 8004472:	f7ff fa69 	bl	8003948 <quorem>
 8004476:	4603      	mov	r3, r0
 8004478:	3330      	adds	r3, #48	; 0x30
 800447a:	9004      	str	r0, [sp, #16]
 800447c:	4641      	mov	r1, r8
 800447e:	4658      	mov	r0, fp
 8004480:	9308      	str	r3, [sp, #32]
 8004482:	f000 fb71 	bl	8004b68 <__mcmp>
 8004486:	463a      	mov	r2, r7
 8004488:	4681      	mov	r9, r0
 800448a:	4631      	mov	r1, r6
 800448c:	4620      	mov	r0, r4
 800448e:	f000 fb87 	bl	8004ba0 <__mdiff>
 8004492:	68c2      	ldr	r2, [r0, #12]
 8004494:	9b08      	ldr	r3, [sp, #32]
 8004496:	4605      	mov	r5, r0
 8004498:	bb02      	cbnz	r2, 80044dc <_dtoa_r+0xa7c>
 800449a:	4601      	mov	r1, r0
 800449c:	4658      	mov	r0, fp
 800449e:	f000 fb63 	bl	8004b68 <__mcmp>
 80044a2:	9b08      	ldr	r3, [sp, #32]
 80044a4:	4602      	mov	r2, r0
 80044a6:	4629      	mov	r1, r5
 80044a8:	4620      	mov	r0, r4
 80044aa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80044ae:	f000 f91d 	bl	80046ec <_Bfree>
 80044b2:	9b05      	ldr	r3, [sp, #20]
 80044b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044b6:	9d01      	ldr	r5, [sp, #4]
 80044b8:	ea43 0102 	orr.w	r1, r3, r2
 80044bc:	9b06      	ldr	r3, [sp, #24]
 80044be:	430b      	orrs	r3, r1
 80044c0:	9b08      	ldr	r3, [sp, #32]
 80044c2:	d10d      	bne.n	80044e0 <_dtoa_r+0xa80>
 80044c4:	2b39      	cmp	r3, #57	; 0x39
 80044c6:	d029      	beq.n	800451c <_dtoa_r+0xabc>
 80044c8:	f1b9 0f00 	cmp.w	r9, #0
 80044cc:	dd01      	ble.n	80044d2 <_dtoa_r+0xa72>
 80044ce:	9b04      	ldr	r3, [sp, #16]
 80044d0:	3331      	adds	r3, #49	; 0x31
 80044d2:	9a02      	ldr	r2, [sp, #8]
 80044d4:	7013      	strb	r3, [r2, #0]
 80044d6:	e774      	b.n	80043c2 <_dtoa_r+0x962>
 80044d8:	4638      	mov	r0, r7
 80044da:	e7b9      	b.n	8004450 <_dtoa_r+0x9f0>
 80044dc:	2201      	movs	r2, #1
 80044de:	e7e2      	b.n	80044a6 <_dtoa_r+0xa46>
 80044e0:	f1b9 0f00 	cmp.w	r9, #0
 80044e4:	db06      	blt.n	80044f4 <_dtoa_r+0xa94>
 80044e6:	9905      	ldr	r1, [sp, #20]
 80044e8:	ea41 0909 	orr.w	r9, r1, r9
 80044ec:	9906      	ldr	r1, [sp, #24]
 80044ee:	ea59 0101 	orrs.w	r1, r9, r1
 80044f2:	d120      	bne.n	8004536 <_dtoa_r+0xad6>
 80044f4:	2a00      	cmp	r2, #0
 80044f6:	ddec      	ble.n	80044d2 <_dtoa_r+0xa72>
 80044f8:	4659      	mov	r1, fp
 80044fa:	2201      	movs	r2, #1
 80044fc:	4620      	mov	r0, r4
 80044fe:	9301      	str	r3, [sp, #4]
 8004500:	f000 fac6 	bl	8004a90 <__lshift>
 8004504:	4631      	mov	r1, r6
 8004506:	4683      	mov	fp, r0
 8004508:	f000 fb2e 	bl	8004b68 <__mcmp>
 800450c:	2800      	cmp	r0, #0
 800450e:	9b01      	ldr	r3, [sp, #4]
 8004510:	dc02      	bgt.n	8004518 <_dtoa_r+0xab8>
 8004512:	d1de      	bne.n	80044d2 <_dtoa_r+0xa72>
 8004514:	07da      	lsls	r2, r3, #31
 8004516:	d5dc      	bpl.n	80044d2 <_dtoa_r+0xa72>
 8004518:	2b39      	cmp	r3, #57	; 0x39
 800451a:	d1d8      	bne.n	80044ce <_dtoa_r+0xa6e>
 800451c:	9a02      	ldr	r2, [sp, #8]
 800451e:	2339      	movs	r3, #57	; 0x39
 8004520:	7013      	strb	r3, [r2, #0]
 8004522:	462b      	mov	r3, r5
 8004524:	461d      	mov	r5, r3
 8004526:	3b01      	subs	r3, #1
 8004528:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800452c:	2a39      	cmp	r2, #57	; 0x39
 800452e:	d050      	beq.n	80045d2 <_dtoa_r+0xb72>
 8004530:	3201      	adds	r2, #1
 8004532:	701a      	strb	r2, [r3, #0]
 8004534:	e745      	b.n	80043c2 <_dtoa_r+0x962>
 8004536:	2a00      	cmp	r2, #0
 8004538:	dd03      	ble.n	8004542 <_dtoa_r+0xae2>
 800453a:	2b39      	cmp	r3, #57	; 0x39
 800453c:	d0ee      	beq.n	800451c <_dtoa_r+0xabc>
 800453e:	3301      	adds	r3, #1
 8004540:	e7c7      	b.n	80044d2 <_dtoa_r+0xa72>
 8004542:	9a01      	ldr	r2, [sp, #4]
 8004544:	9907      	ldr	r1, [sp, #28]
 8004546:	f802 3c01 	strb.w	r3, [r2, #-1]
 800454a:	428a      	cmp	r2, r1
 800454c:	d02a      	beq.n	80045a4 <_dtoa_r+0xb44>
 800454e:	4659      	mov	r1, fp
 8004550:	2300      	movs	r3, #0
 8004552:	220a      	movs	r2, #10
 8004554:	4620      	mov	r0, r4
 8004556:	f000 f8eb 	bl	8004730 <__multadd>
 800455a:	45b8      	cmp	r8, r7
 800455c:	4683      	mov	fp, r0
 800455e:	f04f 0300 	mov.w	r3, #0
 8004562:	f04f 020a 	mov.w	r2, #10
 8004566:	4641      	mov	r1, r8
 8004568:	4620      	mov	r0, r4
 800456a:	d107      	bne.n	800457c <_dtoa_r+0xb1c>
 800456c:	f000 f8e0 	bl	8004730 <__multadd>
 8004570:	4680      	mov	r8, r0
 8004572:	4607      	mov	r7, r0
 8004574:	9b01      	ldr	r3, [sp, #4]
 8004576:	3301      	adds	r3, #1
 8004578:	9301      	str	r3, [sp, #4]
 800457a:	e775      	b.n	8004468 <_dtoa_r+0xa08>
 800457c:	f000 f8d8 	bl	8004730 <__multadd>
 8004580:	4639      	mov	r1, r7
 8004582:	4680      	mov	r8, r0
 8004584:	2300      	movs	r3, #0
 8004586:	220a      	movs	r2, #10
 8004588:	4620      	mov	r0, r4
 800458a:	f000 f8d1 	bl	8004730 <__multadd>
 800458e:	4607      	mov	r7, r0
 8004590:	e7f0      	b.n	8004574 <_dtoa_r+0xb14>
 8004592:	f1b9 0f00 	cmp.w	r9, #0
 8004596:	9a00      	ldr	r2, [sp, #0]
 8004598:	bfcc      	ite	gt
 800459a:	464d      	movgt	r5, r9
 800459c:	2501      	movle	r5, #1
 800459e:	4415      	add	r5, r2
 80045a0:	f04f 0800 	mov.w	r8, #0
 80045a4:	4659      	mov	r1, fp
 80045a6:	2201      	movs	r2, #1
 80045a8:	4620      	mov	r0, r4
 80045aa:	9301      	str	r3, [sp, #4]
 80045ac:	f000 fa70 	bl	8004a90 <__lshift>
 80045b0:	4631      	mov	r1, r6
 80045b2:	4683      	mov	fp, r0
 80045b4:	f000 fad8 	bl	8004b68 <__mcmp>
 80045b8:	2800      	cmp	r0, #0
 80045ba:	dcb2      	bgt.n	8004522 <_dtoa_r+0xac2>
 80045bc:	d102      	bne.n	80045c4 <_dtoa_r+0xb64>
 80045be:	9b01      	ldr	r3, [sp, #4]
 80045c0:	07db      	lsls	r3, r3, #31
 80045c2:	d4ae      	bmi.n	8004522 <_dtoa_r+0xac2>
 80045c4:	462b      	mov	r3, r5
 80045c6:	461d      	mov	r5, r3
 80045c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80045cc:	2a30      	cmp	r2, #48	; 0x30
 80045ce:	d0fa      	beq.n	80045c6 <_dtoa_r+0xb66>
 80045d0:	e6f7      	b.n	80043c2 <_dtoa_r+0x962>
 80045d2:	9a00      	ldr	r2, [sp, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d1a5      	bne.n	8004524 <_dtoa_r+0xac4>
 80045d8:	f10a 0a01 	add.w	sl, sl, #1
 80045dc:	2331      	movs	r3, #49	; 0x31
 80045de:	e779      	b.n	80044d4 <_dtoa_r+0xa74>
 80045e0:	4b13      	ldr	r3, [pc, #76]	; (8004630 <_dtoa_r+0xbd0>)
 80045e2:	f7ff baaf 	b.w	8003b44 <_dtoa_r+0xe4>
 80045e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f47f aa86 	bne.w	8003afa <_dtoa_r+0x9a>
 80045ee:	4b11      	ldr	r3, [pc, #68]	; (8004634 <_dtoa_r+0xbd4>)
 80045f0:	f7ff baa8 	b.w	8003b44 <_dtoa_r+0xe4>
 80045f4:	f1b9 0f00 	cmp.w	r9, #0
 80045f8:	dc03      	bgt.n	8004602 <_dtoa_r+0xba2>
 80045fa:	9b05      	ldr	r3, [sp, #20]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	f73f aec9 	bgt.w	8004394 <_dtoa_r+0x934>
 8004602:	9d00      	ldr	r5, [sp, #0]
 8004604:	4631      	mov	r1, r6
 8004606:	4658      	mov	r0, fp
 8004608:	f7ff f99e 	bl	8003948 <quorem>
 800460c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004610:	f805 3b01 	strb.w	r3, [r5], #1
 8004614:	9a00      	ldr	r2, [sp, #0]
 8004616:	1aaa      	subs	r2, r5, r2
 8004618:	4591      	cmp	r9, r2
 800461a:	ddba      	ble.n	8004592 <_dtoa_r+0xb32>
 800461c:	4659      	mov	r1, fp
 800461e:	2300      	movs	r3, #0
 8004620:	220a      	movs	r2, #10
 8004622:	4620      	mov	r0, r4
 8004624:	f000 f884 	bl	8004730 <__multadd>
 8004628:	4683      	mov	fp, r0
 800462a:	e7eb      	b.n	8004604 <_dtoa_r+0xba4>
 800462c:	08005e7b 	.word	0x08005e7b
 8004630:	08005dd4 	.word	0x08005dd4
 8004634:	08005df8 	.word	0x08005df8

08004638 <_localeconv_r>:
 8004638:	4800      	ldr	r0, [pc, #0]	; (800463c <_localeconv_r+0x4>)
 800463a:	4770      	bx	lr
 800463c:	20000160 	.word	0x20000160

08004640 <malloc>:
 8004640:	4b02      	ldr	r3, [pc, #8]	; (800464c <malloc+0xc>)
 8004642:	4601      	mov	r1, r0
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	f000 bbef 	b.w	8004e28 <_malloc_r>
 800464a:	bf00      	nop
 800464c:	2000000c 	.word	0x2000000c

08004650 <memcpy>:
 8004650:	440a      	add	r2, r1
 8004652:	4291      	cmp	r1, r2
 8004654:	f100 33ff 	add.w	r3, r0, #4294967295
 8004658:	d100      	bne.n	800465c <memcpy+0xc>
 800465a:	4770      	bx	lr
 800465c:	b510      	push	{r4, lr}
 800465e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004662:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004666:	4291      	cmp	r1, r2
 8004668:	d1f9      	bne.n	800465e <memcpy+0xe>
 800466a:	bd10      	pop	{r4, pc}

0800466c <_Balloc>:
 800466c:	b570      	push	{r4, r5, r6, lr}
 800466e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004670:	4604      	mov	r4, r0
 8004672:	460d      	mov	r5, r1
 8004674:	b976      	cbnz	r6, 8004694 <_Balloc+0x28>
 8004676:	2010      	movs	r0, #16
 8004678:	f7ff ffe2 	bl	8004640 <malloc>
 800467c:	4602      	mov	r2, r0
 800467e:	6260      	str	r0, [r4, #36]	; 0x24
 8004680:	b920      	cbnz	r0, 800468c <_Balloc+0x20>
 8004682:	4b18      	ldr	r3, [pc, #96]	; (80046e4 <_Balloc+0x78>)
 8004684:	4818      	ldr	r0, [pc, #96]	; (80046e8 <_Balloc+0x7c>)
 8004686:	2166      	movs	r1, #102	; 0x66
 8004688:	f000 fd94 	bl	80051b4 <__assert_func>
 800468c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004690:	6006      	str	r6, [r0, #0]
 8004692:	60c6      	str	r6, [r0, #12]
 8004694:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004696:	68f3      	ldr	r3, [r6, #12]
 8004698:	b183      	cbz	r3, 80046bc <_Balloc+0x50>
 800469a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80046a2:	b9b8      	cbnz	r0, 80046d4 <_Balloc+0x68>
 80046a4:	2101      	movs	r1, #1
 80046a6:	fa01 f605 	lsl.w	r6, r1, r5
 80046aa:	1d72      	adds	r2, r6, #5
 80046ac:	0092      	lsls	r2, r2, #2
 80046ae:	4620      	mov	r0, r4
 80046b0:	f000 fb5a 	bl	8004d68 <_calloc_r>
 80046b4:	b160      	cbz	r0, 80046d0 <_Balloc+0x64>
 80046b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80046ba:	e00e      	b.n	80046da <_Balloc+0x6e>
 80046bc:	2221      	movs	r2, #33	; 0x21
 80046be:	2104      	movs	r1, #4
 80046c0:	4620      	mov	r0, r4
 80046c2:	f000 fb51 	bl	8004d68 <_calloc_r>
 80046c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046c8:	60f0      	str	r0, [r6, #12]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e4      	bne.n	800469a <_Balloc+0x2e>
 80046d0:	2000      	movs	r0, #0
 80046d2:	bd70      	pop	{r4, r5, r6, pc}
 80046d4:	6802      	ldr	r2, [r0, #0]
 80046d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80046da:	2300      	movs	r3, #0
 80046dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80046e0:	e7f7      	b.n	80046d2 <_Balloc+0x66>
 80046e2:	bf00      	nop
 80046e4:	08005e05 	.word	0x08005e05
 80046e8:	08005e8c 	.word	0x08005e8c

080046ec <_Bfree>:
 80046ec:	b570      	push	{r4, r5, r6, lr}
 80046ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80046f0:	4605      	mov	r5, r0
 80046f2:	460c      	mov	r4, r1
 80046f4:	b976      	cbnz	r6, 8004714 <_Bfree+0x28>
 80046f6:	2010      	movs	r0, #16
 80046f8:	f7ff ffa2 	bl	8004640 <malloc>
 80046fc:	4602      	mov	r2, r0
 80046fe:	6268      	str	r0, [r5, #36]	; 0x24
 8004700:	b920      	cbnz	r0, 800470c <_Bfree+0x20>
 8004702:	4b09      	ldr	r3, [pc, #36]	; (8004728 <_Bfree+0x3c>)
 8004704:	4809      	ldr	r0, [pc, #36]	; (800472c <_Bfree+0x40>)
 8004706:	218a      	movs	r1, #138	; 0x8a
 8004708:	f000 fd54 	bl	80051b4 <__assert_func>
 800470c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004710:	6006      	str	r6, [r0, #0]
 8004712:	60c6      	str	r6, [r0, #12]
 8004714:	b13c      	cbz	r4, 8004726 <_Bfree+0x3a>
 8004716:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004718:	6862      	ldr	r2, [r4, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004720:	6021      	str	r1, [r4, #0]
 8004722:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004726:	bd70      	pop	{r4, r5, r6, pc}
 8004728:	08005e05 	.word	0x08005e05
 800472c:	08005e8c 	.word	0x08005e8c

08004730 <__multadd>:
 8004730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004734:	690e      	ldr	r6, [r1, #16]
 8004736:	4607      	mov	r7, r0
 8004738:	4698      	mov	r8, r3
 800473a:	460c      	mov	r4, r1
 800473c:	f101 0014 	add.w	r0, r1, #20
 8004740:	2300      	movs	r3, #0
 8004742:	6805      	ldr	r5, [r0, #0]
 8004744:	b2a9      	uxth	r1, r5
 8004746:	fb02 8101 	mla	r1, r2, r1, r8
 800474a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800474e:	0c2d      	lsrs	r5, r5, #16
 8004750:	fb02 c505 	mla	r5, r2, r5, ip
 8004754:	b289      	uxth	r1, r1
 8004756:	3301      	adds	r3, #1
 8004758:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800475c:	429e      	cmp	r6, r3
 800475e:	f840 1b04 	str.w	r1, [r0], #4
 8004762:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004766:	dcec      	bgt.n	8004742 <__multadd+0x12>
 8004768:	f1b8 0f00 	cmp.w	r8, #0
 800476c:	d022      	beq.n	80047b4 <__multadd+0x84>
 800476e:	68a3      	ldr	r3, [r4, #8]
 8004770:	42b3      	cmp	r3, r6
 8004772:	dc19      	bgt.n	80047a8 <__multadd+0x78>
 8004774:	6861      	ldr	r1, [r4, #4]
 8004776:	4638      	mov	r0, r7
 8004778:	3101      	adds	r1, #1
 800477a:	f7ff ff77 	bl	800466c <_Balloc>
 800477e:	4605      	mov	r5, r0
 8004780:	b928      	cbnz	r0, 800478e <__multadd+0x5e>
 8004782:	4602      	mov	r2, r0
 8004784:	4b0d      	ldr	r3, [pc, #52]	; (80047bc <__multadd+0x8c>)
 8004786:	480e      	ldr	r0, [pc, #56]	; (80047c0 <__multadd+0x90>)
 8004788:	21b5      	movs	r1, #181	; 0xb5
 800478a:	f000 fd13 	bl	80051b4 <__assert_func>
 800478e:	6922      	ldr	r2, [r4, #16]
 8004790:	3202      	adds	r2, #2
 8004792:	f104 010c 	add.w	r1, r4, #12
 8004796:	0092      	lsls	r2, r2, #2
 8004798:	300c      	adds	r0, #12
 800479a:	f7ff ff59 	bl	8004650 <memcpy>
 800479e:	4621      	mov	r1, r4
 80047a0:	4638      	mov	r0, r7
 80047a2:	f7ff ffa3 	bl	80046ec <_Bfree>
 80047a6:	462c      	mov	r4, r5
 80047a8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80047ac:	3601      	adds	r6, #1
 80047ae:	f8c3 8014 	str.w	r8, [r3, #20]
 80047b2:	6126      	str	r6, [r4, #16]
 80047b4:	4620      	mov	r0, r4
 80047b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047ba:	bf00      	nop
 80047bc:	08005e7b 	.word	0x08005e7b
 80047c0:	08005e8c 	.word	0x08005e8c

080047c4 <__hi0bits>:
 80047c4:	0c03      	lsrs	r3, r0, #16
 80047c6:	041b      	lsls	r3, r3, #16
 80047c8:	b9d3      	cbnz	r3, 8004800 <__hi0bits+0x3c>
 80047ca:	0400      	lsls	r0, r0, #16
 80047cc:	2310      	movs	r3, #16
 80047ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80047d2:	bf04      	itt	eq
 80047d4:	0200      	lsleq	r0, r0, #8
 80047d6:	3308      	addeq	r3, #8
 80047d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80047dc:	bf04      	itt	eq
 80047de:	0100      	lsleq	r0, r0, #4
 80047e0:	3304      	addeq	r3, #4
 80047e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80047e6:	bf04      	itt	eq
 80047e8:	0080      	lsleq	r0, r0, #2
 80047ea:	3302      	addeq	r3, #2
 80047ec:	2800      	cmp	r0, #0
 80047ee:	db05      	blt.n	80047fc <__hi0bits+0x38>
 80047f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80047f4:	f103 0301 	add.w	r3, r3, #1
 80047f8:	bf08      	it	eq
 80047fa:	2320      	moveq	r3, #32
 80047fc:	4618      	mov	r0, r3
 80047fe:	4770      	bx	lr
 8004800:	2300      	movs	r3, #0
 8004802:	e7e4      	b.n	80047ce <__hi0bits+0xa>

08004804 <__lo0bits>:
 8004804:	6803      	ldr	r3, [r0, #0]
 8004806:	f013 0207 	ands.w	r2, r3, #7
 800480a:	4601      	mov	r1, r0
 800480c:	d00b      	beq.n	8004826 <__lo0bits+0x22>
 800480e:	07da      	lsls	r2, r3, #31
 8004810:	d424      	bmi.n	800485c <__lo0bits+0x58>
 8004812:	0798      	lsls	r0, r3, #30
 8004814:	bf49      	itett	mi
 8004816:	085b      	lsrmi	r3, r3, #1
 8004818:	089b      	lsrpl	r3, r3, #2
 800481a:	2001      	movmi	r0, #1
 800481c:	600b      	strmi	r3, [r1, #0]
 800481e:	bf5c      	itt	pl
 8004820:	600b      	strpl	r3, [r1, #0]
 8004822:	2002      	movpl	r0, #2
 8004824:	4770      	bx	lr
 8004826:	b298      	uxth	r0, r3
 8004828:	b9b0      	cbnz	r0, 8004858 <__lo0bits+0x54>
 800482a:	0c1b      	lsrs	r3, r3, #16
 800482c:	2010      	movs	r0, #16
 800482e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004832:	bf04      	itt	eq
 8004834:	0a1b      	lsreq	r3, r3, #8
 8004836:	3008      	addeq	r0, #8
 8004838:	071a      	lsls	r2, r3, #28
 800483a:	bf04      	itt	eq
 800483c:	091b      	lsreq	r3, r3, #4
 800483e:	3004      	addeq	r0, #4
 8004840:	079a      	lsls	r2, r3, #30
 8004842:	bf04      	itt	eq
 8004844:	089b      	lsreq	r3, r3, #2
 8004846:	3002      	addeq	r0, #2
 8004848:	07da      	lsls	r2, r3, #31
 800484a:	d403      	bmi.n	8004854 <__lo0bits+0x50>
 800484c:	085b      	lsrs	r3, r3, #1
 800484e:	f100 0001 	add.w	r0, r0, #1
 8004852:	d005      	beq.n	8004860 <__lo0bits+0x5c>
 8004854:	600b      	str	r3, [r1, #0]
 8004856:	4770      	bx	lr
 8004858:	4610      	mov	r0, r2
 800485a:	e7e8      	b.n	800482e <__lo0bits+0x2a>
 800485c:	2000      	movs	r0, #0
 800485e:	4770      	bx	lr
 8004860:	2020      	movs	r0, #32
 8004862:	4770      	bx	lr

08004864 <__i2b>:
 8004864:	b510      	push	{r4, lr}
 8004866:	460c      	mov	r4, r1
 8004868:	2101      	movs	r1, #1
 800486a:	f7ff feff 	bl	800466c <_Balloc>
 800486e:	4602      	mov	r2, r0
 8004870:	b928      	cbnz	r0, 800487e <__i2b+0x1a>
 8004872:	4b05      	ldr	r3, [pc, #20]	; (8004888 <__i2b+0x24>)
 8004874:	4805      	ldr	r0, [pc, #20]	; (800488c <__i2b+0x28>)
 8004876:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800487a:	f000 fc9b 	bl	80051b4 <__assert_func>
 800487e:	2301      	movs	r3, #1
 8004880:	6144      	str	r4, [r0, #20]
 8004882:	6103      	str	r3, [r0, #16]
 8004884:	bd10      	pop	{r4, pc}
 8004886:	bf00      	nop
 8004888:	08005e7b 	.word	0x08005e7b
 800488c:	08005e8c 	.word	0x08005e8c

08004890 <__multiply>:
 8004890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004894:	4614      	mov	r4, r2
 8004896:	690a      	ldr	r2, [r1, #16]
 8004898:	6923      	ldr	r3, [r4, #16]
 800489a:	429a      	cmp	r2, r3
 800489c:	bfb8      	it	lt
 800489e:	460b      	movlt	r3, r1
 80048a0:	460d      	mov	r5, r1
 80048a2:	bfbc      	itt	lt
 80048a4:	4625      	movlt	r5, r4
 80048a6:	461c      	movlt	r4, r3
 80048a8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80048ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80048b0:	68ab      	ldr	r3, [r5, #8]
 80048b2:	6869      	ldr	r1, [r5, #4]
 80048b4:	eb0a 0709 	add.w	r7, sl, r9
 80048b8:	42bb      	cmp	r3, r7
 80048ba:	b085      	sub	sp, #20
 80048bc:	bfb8      	it	lt
 80048be:	3101      	addlt	r1, #1
 80048c0:	f7ff fed4 	bl	800466c <_Balloc>
 80048c4:	b930      	cbnz	r0, 80048d4 <__multiply+0x44>
 80048c6:	4602      	mov	r2, r0
 80048c8:	4b42      	ldr	r3, [pc, #264]	; (80049d4 <__multiply+0x144>)
 80048ca:	4843      	ldr	r0, [pc, #268]	; (80049d8 <__multiply+0x148>)
 80048cc:	f240 115d 	movw	r1, #349	; 0x15d
 80048d0:	f000 fc70 	bl	80051b4 <__assert_func>
 80048d4:	f100 0614 	add.w	r6, r0, #20
 80048d8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80048dc:	4633      	mov	r3, r6
 80048de:	2200      	movs	r2, #0
 80048e0:	4543      	cmp	r3, r8
 80048e2:	d31e      	bcc.n	8004922 <__multiply+0x92>
 80048e4:	f105 0c14 	add.w	ip, r5, #20
 80048e8:	f104 0314 	add.w	r3, r4, #20
 80048ec:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80048f0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80048f4:	9202      	str	r2, [sp, #8]
 80048f6:	ebac 0205 	sub.w	r2, ip, r5
 80048fa:	3a15      	subs	r2, #21
 80048fc:	f022 0203 	bic.w	r2, r2, #3
 8004900:	3204      	adds	r2, #4
 8004902:	f105 0115 	add.w	r1, r5, #21
 8004906:	458c      	cmp	ip, r1
 8004908:	bf38      	it	cc
 800490a:	2204      	movcc	r2, #4
 800490c:	9201      	str	r2, [sp, #4]
 800490e:	9a02      	ldr	r2, [sp, #8]
 8004910:	9303      	str	r3, [sp, #12]
 8004912:	429a      	cmp	r2, r3
 8004914:	d808      	bhi.n	8004928 <__multiply+0x98>
 8004916:	2f00      	cmp	r7, #0
 8004918:	dc55      	bgt.n	80049c6 <__multiply+0x136>
 800491a:	6107      	str	r7, [r0, #16]
 800491c:	b005      	add	sp, #20
 800491e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004922:	f843 2b04 	str.w	r2, [r3], #4
 8004926:	e7db      	b.n	80048e0 <__multiply+0x50>
 8004928:	f8b3 a000 	ldrh.w	sl, [r3]
 800492c:	f1ba 0f00 	cmp.w	sl, #0
 8004930:	d020      	beq.n	8004974 <__multiply+0xe4>
 8004932:	f105 0e14 	add.w	lr, r5, #20
 8004936:	46b1      	mov	r9, r6
 8004938:	2200      	movs	r2, #0
 800493a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800493e:	f8d9 b000 	ldr.w	fp, [r9]
 8004942:	b2a1      	uxth	r1, r4
 8004944:	fa1f fb8b 	uxth.w	fp, fp
 8004948:	fb0a b101 	mla	r1, sl, r1, fp
 800494c:	4411      	add	r1, r2
 800494e:	f8d9 2000 	ldr.w	r2, [r9]
 8004952:	0c24      	lsrs	r4, r4, #16
 8004954:	0c12      	lsrs	r2, r2, #16
 8004956:	fb0a 2404 	mla	r4, sl, r4, r2
 800495a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800495e:	b289      	uxth	r1, r1
 8004960:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004964:	45f4      	cmp	ip, lr
 8004966:	f849 1b04 	str.w	r1, [r9], #4
 800496a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800496e:	d8e4      	bhi.n	800493a <__multiply+0xaa>
 8004970:	9901      	ldr	r1, [sp, #4]
 8004972:	5072      	str	r2, [r6, r1]
 8004974:	9a03      	ldr	r2, [sp, #12]
 8004976:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800497a:	3304      	adds	r3, #4
 800497c:	f1b9 0f00 	cmp.w	r9, #0
 8004980:	d01f      	beq.n	80049c2 <__multiply+0x132>
 8004982:	6834      	ldr	r4, [r6, #0]
 8004984:	f105 0114 	add.w	r1, r5, #20
 8004988:	46b6      	mov	lr, r6
 800498a:	f04f 0a00 	mov.w	sl, #0
 800498e:	880a      	ldrh	r2, [r1, #0]
 8004990:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004994:	fb09 b202 	mla	r2, r9, r2, fp
 8004998:	4492      	add	sl, r2
 800499a:	b2a4      	uxth	r4, r4
 800499c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80049a0:	f84e 4b04 	str.w	r4, [lr], #4
 80049a4:	f851 4b04 	ldr.w	r4, [r1], #4
 80049a8:	f8be 2000 	ldrh.w	r2, [lr]
 80049ac:	0c24      	lsrs	r4, r4, #16
 80049ae:	fb09 2404 	mla	r4, r9, r4, r2
 80049b2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80049b6:	458c      	cmp	ip, r1
 80049b8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80049bc:	d8e7      	bhi.n	800498e <__multiply+0xfe>
 80049be:	9a01      	ldr	r2, [sp, #4]
 80049c0:	50b4      	str	r4, [r6, r2]
 80049c2:	3604      	adds	r6, #4
 80049c4:	e7a3      	b.n	800490e <__multiply+0x7e>
 80049c6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1a5      	bne.n	800491a <__multiply+0x8a>
 80049ce:	3f01      	subs	r7, #1
 80049d0:	e7a1      	b.n	8004916 <__multiply+0x86>
 80049d2:	bf00      	nop
 80049d4:	08005e7b 	.word	0x08005e7b
 80049d8:	08005e8c 	.word	0x08005e8c

080049dc <__pow5mult>:
 80049dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049e0:	4615      	mov	r5, r2
 80049e2:	f012 0203 	ands.w	r2, r2, #3
 80049e6:	4606      	mov	r6, r0
 80049e8:	460f      	mov	r7, r1
 80049ea:	d007      	beq.n	80049fc <__pow5mult+0x20>
 80049ec:	4c25      	ldr	r4, [pc, #148]	; (8004a84 <__pow5mult+0xa8>)
 80049ee:	3a01      	subs	r2, #1
 80049f0:	2300      	movs	r3, #0
 80049f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80049f6:	f7ff fe9b 	bl	8004730 <__multadd>
 80049fa:	4607      	mov	r7, r0
 80049fc:	10ad      	asrs	r5, r5, #2
 80049fe:	d03d      	beq.n	8004a7c <__pow5mult+0xa0>
 8004a00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004a02:	b97c      	cbnz	r4, 8004a24 <__pow5mult+0x48>
 8004a04:	2010      	movs	r0, #16
 8004a06:	f7ff fe1b 	bl	8004640 <malloc>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	6270      	str	r0, [r6, #36]	; 0x24
 8004a0e:	b928      	cbnz	r0, 8004a1c <__pow5mult+0x40>
 8004a10:	4b1d      	ldr	r3, [pc, #116]	; (8004a88 <__pow5mult+0xac>)
 8004a12:	481e      	ldr	r0, [pc, #120]	; (8004a8c <__pow5mult+0xb0>)
 8004a14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004a18:	f000 fbcc 	bl	80051b4 <__assert_func>
 8004a1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004a20:	6004      	str	r4, [r0, #0]
 8004a22:	60c4      	str	r4, [r0, #12]
 8004a24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004a28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004a2c:	b94c      	cbnz	r4, 8004a42 <__pow5mult+0x66>
 8004a2e:	f240 2171 	movw	r1, #625	; 0x271
 8004a32:	4630      	mov	r0, r6
 8004a34:	f7ff ff16 	bl	8004864 <__i2b>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8004a3e:	4604      	mov	r4, r0
 8004a40:	6003      	str	r3, [r0, #0]
 8004a42:	f04f 0900 	mov.w	r9, #0
 8004a46:	07eb      	lsls	r3, r5, #31
 8004a48:	d50a      	bpl.n	8004a60 <__pow5mult+0x84>
 8004a4a:	4639      	mov	r1, r7
 8004a4c:	4622      	mov	r2, r4
 8004a4e:	4630      	mov	r0, r6
 8004a50:	f7ff ff1e 	bl	8004890 <__multiply>
 8004a54:	4639      	mov	r1, r7
 8004a56:	4680      	mov	r8, r0
 8004a58:	4630      	mov	r0, r6
 8004a5a:	f7ff fe47 	bl	80046ec <_Bfree>
 8004a5e:	4647      	mov	r7, r8
 8004a60:	106d      	asrs	r5, r5, #1
 8004a62:	d00b      	beq.n	8004a7c <__pow5mult+0xa0>
 8004a64:	6820      	ldr	r0, [r4, #0]
 8004a66:	b938      	cbnz	r0, 8004a78 <__pow5mult+0x9c>
 8004a68:	4622      	mov	r2, r4
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	f7ff ff0f 	bl	8004890 <__multiply>
 8004a72:	6020      	str	r0, [r4, #0]
 8004a74:	f8c0 9000 	str.w	r9, [r0]
 8004a78:	4604      	mov	r4, r0
 8004a7a:	e7e4      	b.n	8004a46 <__pow5mult+0x6a>
 8004a7c:	4638      	mov	r0, r7
 8004a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a82:	bf00      	nop
 8004a84:	08005fe0 	.word	0x08005fe0
 8004a88:	08005e05 	.word	0x08005e05
 8004a8c:	08005e8c 	.word	0x08005e8c

08004a90 <__lshift>:
 8004a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a94:	460c      	mov	r4, r1
 8004a96:	6849      	ldr	r1, [r1, #4]
 8004a98:	6923      	ldr	r3, [r4, #16]
 8004a9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004a9e:	68a3      	ldr	r3, [r4, #8]
 8004aa0:	4607      	mov	r7, r0
 8004aa2:	4691      	mov	r9, r2
 8004aa4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004aa8:	f108 0601 	add.w	r6, r8, #1
 8004aac:	42b3      	cmp	r3, r6
 8004aae:	db0b      	blt.n	8004ac8 <__lshift+0x38>
 8004ab0:	4638      	mov	r0, r7
 8004ab2:	f7ff fddb 	bl	800466c <_Balloc>
 8004ab6:	4605      	mov	r5, r0
 8004ab8:	b948      	cbnz	r0, 8004ace <__lshift+0x3e>
 8004aba:	4602      	mov	r2, r0
 8004abc:	4b28      	ldr	r3, [pc, #160]	; (8004b60 <__lshift+0xd0>)
 8004abe:	4829      	ldr	r0, [pc, #164]	; (8004b64 <__lshift+0xd4>)
 8004ac0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004ac4:	f000 fb76 	bl	80051b4 <__assert_func>
 8004ac8:	3101      	adds	r1, #1
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	e7ee      	b.n	8004aac <__lshift+0x1c>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	f100 0114 	add.w	r1, r0, #20
 8004ad4:	f100 0210 	add.w	r2, r0, #16
 8004ad8:	4618      	mov	r0, r3
 8004ada:	4553      	cmp	r3, sl
 8004adc:	db33      	blt.n	8004b46 <__lshift+0xb6>
 8004ade:	6920      	ldr	r0, [r4, #16]
 8004ae0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ae4:	f104 0314 	add.w	r3, r4, #20
 8004ae8:	f019 091f 	ands.w	r9, r9, #31
 8004aec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004af0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004af4:	d02b      	beq.n	8004b4e <__lshift+0xbe>
 8004af6:	f1c9 0e20 	rsb	lr, r9, #32
 8004afa:	468a      	mov	sl, r1
 8004afc:	2200      	movs	r2, #0
 8004afe:	6818      	ldr	r0, [r3, #0]
 8004b00:	fa00 f009 	lsl.w	r0, r0, r9
 8004b04:	4302      	orrs	r2, r0
 8004b06:	f84a 2b04 	str.w	r2, [sl], #4
 8004b0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b0e:	459c      	cmp	ip, r3
 8004b10:	fa22 f20e 	lsr.w	r2, r2, lr
 8004b14:	d8f3      	bhi.n	8004afe <__lshift+0x6e>
 8004b16:	ebac 0304 	sub.w	r3, ip, r4
 8004b1a:	3b15      	subs	r3, #21
 8004b1c:	f023 0303 	bic.w	r3, r3, #3
 8004b20:	3304      	adds	r3, #4
 8004b22:	f104 0015 	add.w	r0, r4, #21
 8004b26:	4584      	cmp	ip, r0
 8004b28:	bf38      	it	cc
 8004b2a:	2304      	movcc	r3, #4
 8004b2c:	50ca      	str	r2, [r1, r3]
 8004b2e:	b10a      	cbz	r2, 8004b34 <__lshift+0xa4>
 8004b30:	f108 0602 	add.w	r6, r8, #2
 8004b34:	3e01      	subs	r6, #1
 8004b36:	4638      	mov	r0, r7
 8004b38:	612e      	str	r6, [r5, #16]
 8004b3a:	4621      	mov	r1, r4
 8004b3c:	f7ff fdd6 	bl	80046ec <_Bfree>
 8004b40:	4628      	mov	r0, r5
 8004b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b46:	f842 0f04 	str.w	r0, [r2, #4]!
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	e7c5      	b.n	8004ada <__lshift+0x4a>
 8004b4e:	3904      	subs	r1, #4
 8004b50:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b54:	f841 2f04 	str.w	r2, [r1, #4]!
 8004b58:	459c      	cmp	ip, r3
 8004b5a:	d8f9      	bhi.n	8004b50 <__lshift+0xc0>
 8004b5c:	e7ea      	b.n	8004b34 <__lshift+0xa4>
 8004b5e:	bf00      	nop
 8004b60:	08005e7b 	.word	0x08005e7b
 8004b64:	08005e8c 	.word	0x08005e8c

08004b68 <__mcmp>:
 8004b68:	b530      	push	{r4, r5, lr}
 8004b6a:	6902      	ldr	r2, [r0, #16]
 8004b6c:	690c      	ldr	r4, [r1, #16]
 8004b6e:	1b12      	subs	r2, r2, r4
 8004b70:	d10e      	bne.n	8004b90 <__mcmp+0x28>
 8004b72:	f100 0314 	add.w	r3, r0, #20
 8004b76:	3114      	adds	r1, #20
 8004b78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004b7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004b80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004b84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004b88:	42a5      	cmp	r5, r4
 8004b8a:	d003      	beq.n	8004b94 <__mcmp+0x2c>
 8004b8c:	d305      	bcc.n	8004b9a <__mcmp+0x32>
 8004b8e:	2201      	movs	r2, #1
 8004b90:	4610      	mov	r0, r2
 8004b92:	bd30      	pop	{r4, r5, pc}
 8004b94:	4283      	cmp	r3, r0
 8004b96:	d3f3      	bcc.n	8004b80 <__mcmp+0x18>
 8004b98:	e7fa      	b.n	8004b90 <__mcmp+0x28>
 8004b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b9e:	e7f7      	b.n	8004b90 <__mcmp+0x28>

08004ba0 <__mdiff>:
 8004ba0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ba4:	460c      	mov	r4, r1
 8004ba6:	4606      	mov	r6, r0
 8004ba8:	4611      	mov	r1, r2
 8004baa:	4620      	mov	r0, r4
 8004bac:	4617      	mov	r7, r2
 8004bae:	f7ff ffdb 	bl	8004b68 <__mcmp>
 8004bb2:	1e05      	subs	r5, r0, #0
 8004bb4:	d110      	bne.n	8004bd8 <__mdiff+0x38>
 8004bb6:	4629      	mov	r1, r5
 8004bb8:	4630      	mov	r0, r6
 8004bba:	f7ff fd57 	bl	800466c <_Balloc>
 8004bbe:	b930      	cbnz	r0, 8004bce <__mdiff+0x2e>
 8004bc0:	4b39      	ldr	r3, [pc, #228]	; (8004ca8 <__mdiff+0x108>)
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	f240 2132 	movw	r1, #562	; 0x232
 8004bc8:	4838      	ldr	r0, [pc, #224]	; (8004cac <__mdiff+0x10c>)
 8004bca:	f000 faf3 	bl	80051b4 <__assert_func>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004bd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bd8:	bfa4      	itt	ge
 8004bda:	463b      	movge	r3, r7
 8004bdc:	4627      	movge	r7, r4
 8004bde:	4630      	mov	r0, r6
 8004be0:	6879      	ldr	r1, [r7, #4]
 8004be2:	bfa6      	itte	ge
 8004be4:	461c      	movge	r4, r3
 8004be6:	2500      	movge	r5, #0
 8004be8:	2501      	movlt	r5, #1
 8004bea:	f7ff fd3f 	bl	800466c <_Balloc>
 8004bee:	b920      	cbnz	r0, 8004bfa <__mdiff+0x5a>
 8004bf0:	4b2d      	ldr	r3, [pc, #180]	; (8004ca8 <__mdiff+0x108>)
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004bf8:	e7e6      	b.n	8004bc8 <__mdiff+0x28>
 8004bfa:	693e      	ldr	r6, [r7, #16]
 8004bfc:	60c5      	str	r5, [r0, #12]
 8004bfe:	6925      	ldr	r5, [r4, #16]
 8004c00:	f107 0114 	add.w	r1, r7, #20
 8004c04:	f104 0914 	add.w	r9, r4, #20
 8004c08:	f100 0e14 	add.w	lr, r0, #20
 8004c0c:	f107 0210 	add.w	r2, r7, #16
 8004c10:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8004c14:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8004c18:	46f2      	mov	sl, lr
 8004c1a:	2700      	movs	r7, #0
 8004c1c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004c20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004c24:	fa1f f883 	uxth.w	r8, r3
 8004c28:	fa17 f78b 	uxtah	r7, r7, fp
 8004c2c:	0c1b      	lsrs	r3, r3, #16
 8004c2e:	eba7 0808 	sub.w	r8, r7, r8
 8004c32:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004c36:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004c3a:	fa1f f888 	uxth.w	r8, r8
 8004c3e:	141f      	asrs	r7, r3, #16
 8004c40:	454d      	cmp	r5, r9
 8004c42:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004c46:	f84a 3b04 	str.w	r3, [sl], #4
 8004c4a:	d8e7      	bhi.n	8004c1c <__mdiff+0x7c>
 8004c4c:	1b2b      	subs	r3, r5, r4
 8004c4e:	3b15      	subs	r3, #21
 8004c50:	f023 0303 	bic.w	r3, r3, #3
 8004c54:	3304      	adds	r3, #4
 8004c56:	3415      	adds	r4, #21
 8004c58:	42a5      	cmp	r5, r4
 8004c5a:	bf38      	it	cc
 8004c5c:	2304      	movcc	r3, #4
 8004c5e:	4419      	add	r1, r3
 8004c60:	4473      	add	r3, lr
 8004c62:	469e      	mov	lr, r3
 8004c64:	460d      	mov	r5, r1
 8004c66:	4565      	cmp	r5, ip
 8004c68:	d30e      	bcc.n	8004c88 <__mdiff+0xe8>
 8004c6a:	f10c 0203 	add.w	r2, ip, #3
 8004c6e:	1a52      	subs	r2, r2, r1
 8004c70:	f022 0203 	bic.w	r2, r2, #3
 8004c74:	3903      	subs	r1, #3
 8004c76:	458c      	cmp	ip, r1
 8004c78:	bf38      	it	cc
 8004c7a:	2200      	movcc	r2, #0
 8004c7c:	441a      	add	r2, r3
 8004c7e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004c82:	b17b      	cbz	r3, 8004ca4 <__mdiff+0x104>
 8004c84:	6106      	str	r6, [r0, #16]
 8004c86:	e7a5      	b.n	8004bd4 <__mdiff+0x34>
 8004c88:	f855 8b04 	ldr.w	r8, [r5], #4
 8004c8c:	fa17 f488 	uxtah	r4, r7, r8
 8004c90:	1422      	asrs	r2, r4, #16
 8004c92:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8004c96:	b2a4      	uxth	r4, r4
 8004c98:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004c9c:	f84e 4b04 	str.w	r4, [lr], #4
 8004ca0:	1417      	asrs	r7, r2, #16
 8004ca2:	e7e0      	b.n	8004c66 <__mdiff+0xc6>
 8004ca4:	3e01      	subs	r6, #1
 8004ca6:	e7ea      	b.n	8004c7e <__mdiff+0xde>
 8004ca8:	08005e7b 	.word	0x08005e7b
 8004cac:	08005e8c 	.word	0x08005e8c

08004cb0 <__d2b>:
 8004cb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004cb4:	4689      	mov	r9, r1
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	ec57 6b10 	vmov	r6, r7, d0
 8004cbc:	4690      	mov	r8, r2
 8004cbe:	f7ff fcd5 	bl	800466c <_Balloc>
 8004cc2:	4604      	mov	r4, r0
 8004cc4:	b930      	cbnz	r0, 8004cd4 <__d2b+0x24>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	4b25      	ldr	r3, [pc, #148]	; (8004d60 <__d2b+0xb0>)
 8004cca:	4826      	ldr	r0, [pc, #152]	; (8004d64 <__d2b+0xb4>)
 8004ccc:	f240 310a 	movw	r1, #778	; 0x30a
 8004cd0:	f000 fa70 	bl	80051b4 <__assert_func>
 8004cd4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004cd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004cdc:	bb35      	cbnz	r5, 8004d2c <__d2b+0x7c>
 8004cde:	2e00      	cmp	r6, #0
 8004ce0:	9301      	str	r3, [sp, #4]
 8004ce2:	d028      	beq.n	8004d36 <__d2b+0x86>
 8004ce4:	4668      	mov	r0, sp
 8004ce6:	9600      	str	r6, [sp, #0]
 8004ce8:	f7ff fd8c 	bl	8004804 <__lo0bits>
 8004cec:	9900      	ldr	r1, [sp, #0]
 8004cee:	b300      	cbz	r0, 8004d32 <__d2b+0x82>
 8004cf0:	9a01      	ldr	r2, [sp, #4]
 8004cf2:	f1c0 0320 	rsb	r3, r0, #32
 8004cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfa:	430b      	orrs	r3, r1
 8004cfc:	40c2      	lsrs	r2, r0
 8004cfe:	6163      	str	r3, [r4, #20]
 8004d00:	9201      	str	r2, [sp, #4]
 8004d02:	9b01      	ldr	r3, [sp, #4]
 8004d04:	61a3      	str	r3, [r4, #24]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	bf14      	ite	ne
 8004d0a:	2202      	movne	r2, #2
 8004d0c:	2201      	moveq	r2, #1
 8004d0e:	6122      	str	r2, [r4, #16]
 8004d10:	b1d5      	cbz	r5, 8004d48 <__d2b+0x98>
 8004d12:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004d16:	4405      	add	r5, r0
 8004d18:	f8c9 5000 	str.w	r5, [r9]
 8004d1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004d20:	f8c8 0000 	str.w	r0, [r8]
 8004d24:	4620      	mov	r0, r4
 8004d26:	b003      	add	sp, #12
 8004d28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d30:	e7d5      	b.n	8004cde <__d2b+0x2e>
 8004d32:	6161      	str	r1, [r4, #20]
 8004d34:	e7e5      	b.n	8004d02 <__d2b+0x52>
 8004d36:	a801      	add	r0, sp, #4
 8004d38:	f7ff fd64 	bl	8004804 <__lo0bits>
 8004d3c:	9b01      	ldr	r3, [sp, #4]
 8004d3e:	6163      	str	r3, [r4, #20]
 8004d40:	2201      	movs	r2, #1
 8004d42:	6122      	str	r2, [r4, #16]
 8004d44:	3020      	adds	r0, #32
 8004d46:	e7e3      	b.n	8004d10 <__d2b+0x60>
 8004d48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004d4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004d50:	f8c9 0000 	str.w	r0, [r9]
 8004d54:	6918      	ldr	r0, [r3, #16]
 8004d56:	f7ff fd35 	bl	80047c4 <__hi0bits>
 8004d5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004d5e:	e7df      	b.n	8004d20 <__d2b+0x70>
 8004d60:	08005e7b 	.word	0x08005e7b
 8004d64:	08005e8c 	.word	0x08005e8c

08004d68 <_calloc_r>:
 8004d68:	b513      	push	{r0, r1, r4, lr}
 8004d6a:	434a      	muls	r2, r1
 8004d6c:	4611      	mov	r1, r2
 8004d6e:	9201      	str	r2, [sp, #4]
 8004d70:	f000 f85a 	bl	8004e28 <_malloc_r>
 8004d74:	4604      	mov	r4, r0
 8004d76:	b118      	cbz	r0, 8004d80 <_calloc_r+0x18>
 8004d78:	9a01      	ldr	r2, [sp, #4]
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	f7fe f94a 	bl	8003014 <memset>
 8004d80:	4620      	mov	r0, r4
 8004d82:	b002      	add	sp, #8
 8004d84:	bd10      	pop	{r4, pc}
	...

08004d88 <_free_r>:
 8004d88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d8a:	2900      	cmp	r1, #0
 8004d8c:	d048      	beq.n	8004e20 <_free_r+0x98>
 8004d8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d92:	9001      	str	r0, [sp, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f1a1 0404 	sub.w	r4, r1, #4
 8004d9a:	bfb8      	it	lt
 8004d9c:	18e4      	addlt	r4, r4, r3
 8004d9e:	f000 fa65 	bl	800526c <__malloc_lock>
 8004da2:	4a20      	ldr	r2, [pc, #128]	; (8004e24 <_free_r+0x9c>)
 8004da4:	9801      	ldr	r0, [sp, #4]
 8004da6:	6813      	ldr	r3, [r2, #0]
 8004da8:	4615      	mov	r5, r2
 8004daa:	b933      	cbnz	r3, 8004dba <_free_r+0x32>
 8004dac:	6063      	str	r3, [r4, #4]
 8004dae:	6014      	str	r4, [r2, #0]
 8004db0:	b003      	add	sp, #12
 8004db2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004db6:	f000 ba5f 	b.w	8005278 <__malloc_unlock>
 8004dba:	42a3      	cmp	r3, r4
 8004dbc:	d90b      	bls.n	8004dd6 <_free_r+0x4e>
 8004dbe:	6821      	ldr	r1, [r4, #0]
 8004dc0:	1862      	adds	r2, r4, r1
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	bf04      	itt	eq
 8004dc6:	681a      	ldreq	r2, [r3, #0]
 8004dc8:	685b      	ldreq	r3, [r3, #4]
 8004dca:	6063      	str	r3, [r4, #4]
 8004dcc:	bf04      	itt	eq
 8004dce:	1852      	addeq	r2, r2, r1
 8004dd0:	6022      	streq	r2, [r4, #0]
 8004dd2:	602c      	str	r4, [r5, #0]
 8004dd4:	e7ec      	b.n	8004db0 <_free_r+0x28>
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	b10b      	cbz	r3, 8004de0 <_free_r+0x58>
 8004ddc:	42a3      	cmp	r3, r4
 8004dde:	d9fa      	bls.n	8004dd6 <_free_r+0x4e>
 8004de0:	6811      	ldr	r1, [r2, #0]
 8004de2:	1855      	adds	r5, r2, r1
 8004de4:	42a5      	cmp	r5, r4
 8004de6:	d10b      	bne.n	8004e00 <_free_r+0x78>
 8004de8:	6824      	ldr	r4, [r4, #0]
 8004dea:	4421      	add	r1, r4
 8004dec:	1854      	adds	r4, r2, r1
 8004dee:	42a3      	cmp	r3, r4
 8004df0:	6011      	str	r1, [r2, #0]
 8004df2:	d1dd      	bne.n	8004db0 <_free_r+0x28>
 8004df4:	681c      	ldr	r4, [r3, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	6053      	str	r3, [r2, #4]
 8004dfa:	4421      	add	r1, r4
 8004dfc:	6011      	str	r1, [r2, #0]
 8004dfe:	e7d7      	b.n	8004db0 <_free_r+0x28>
 8004e00:	d902      	bls.n	8004e08 <_free_r+0x80>
 8004e02:	230c      	movs	r3, #12
 8004e04:	6003      	str	r3, [r0, #0]
 8004e06:	e7d3      	b.n	8004db0 <_free_r+0x28>
 8004e08:	6825      	ldr	r5, [r4, #0]
 8004e0a:	1961      	adds	r1, r4, r5
 8004e0c:	428b      	cmp	r3, r1
 8004e0e:	bf04      	itt	eq
 8004e10:	6819      	ldreq	r1, [r3, #0]
 8004e12:	685b      	ldreq	r3, [r3, #4]
 8004e14:	6063      	str	r3, [r4, #4]
 8004e16:	bf04      	itt	eq
 8004e18:	1949      	addeq	r1, r1, r5
 8004e1a:	6021      	streq	r1, [r4, #0]
 8004e1c:	6054      	str	r4, [r2, #4]
 8004e1e:	e7c7      	b.n	8004db0 <_free_r+0x28>
 8004e20:	b003      	add	sp, #12
 8004e22:	bd30      	pop	{r4, r5, pc}
 8004e24:	20000200 	.word	0x20000200

08004e28 <_malloc_r>:
 8004e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2a:	1ccd      	adds	r5, r1, #3
 8004e2c:	f025 0503 	bic.w	r5, r5, #3
 8004e30:	3508      	adds	r5, #8
 8004e32:	2d0c      	cmp	r5, #12
 8004e34:	bf38      	it	cc
 8004e36:	250c      	movcc	r5, #12
 8004e38:	2d00      	cmp	r5, #0
 8004e3a:	4606      	mov	r6, r0
 8004e3c:	db01      	blt.n	8004e42 <_malloc_r+0x1a>
 8004e3e:	42a9      	cmp	r1, r5
 8004e40:	d903      	bls.n	8004e4a <_malloc_r+0x22>
 8004e42:	230c      	movs	r3, #12
 8004e44:	6033      	str	r3, [r6, #0]
 8004e46:	2000      	movs	r0, #0
 8004e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e4a:	f000 fa0f 	bl	800526c <__malloc_lock>
 8004e4e:	4921      	ldr	r1, [pc, #132]	; (8004ed4 <_malloc_r+0xac>)
 8004e50:	680a      	ldr	r2, [r1, #0]
 8004e52:	4614      	mov	r4, r2
 8004e54:	b99c      	cbnz	r4, 8004e7e <_malloc_r+0x56>
 8004e56:	4f20      	ldr	r7, [pc, #128]	; (8004ed8 <_malloc_r+0xb0>)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	b923      	cbnz	r3, 8004e66 <_malloc_r+0x3e>
 8004e5c:	4621      	mov	r1, r4
 8004e5e:	4630      	mov	r0, r6
 8004e60:	f000 f998 	bl	8005194 <_sbrk_r>
 8004e64:	6038      	str	r0, [r7, #0]
 8004e66:	4629      	mov	r1, r5
 8004e68:	4630      	mov	r0, r6
 8004e6a:	f000 f993 	bl	8005194 <_sbrk_r>
 8004e6e:	1c43      	adds	r3, r0, #1
 8004e70:	d123      	bne.n	8004eba <_malloc_r+0x92>
 8004e72:	230c      	movs	r3, #12
 8004e74:	6033      	str	r3, [r6, #0]
 8004e76:	4630      	mov	r0, r6
 8004e78:	f000 f9fe 	bl	8005278 <__malloc_unlock>
 8004e7c:	e7e3      	b.n	8004e46 <_malloc_r+0x1e>
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	1b5b      	subs	r3, r3, r5
 8004e82:	d417      	bmi.n	8004eb4 <_malloc_r+0x8c>
 8004e84:	2b0b      	cmp	r3, #11
 8004e86:	d903      	bls.n	8004e90 <_malloc_r+0x68>
 8004e88:	6023      	str	r3, [r4, #0]
 8004e8a:	441c      	add	r4, r3
 8004e8c:	6025      	str	r5, [r4, #0]
 8004e8e:	e004      	b.n	8004e9a <_malloc_r+0x72>
 8004e90:	6863      	ldr	r3, [r4, #4]
 8004e92:	42a2      	cmp	r2, r4
 8004e94:	bf0c      	ite	eq
 8004e96:	600b      	streq	r3, [r1, #0]
 8004e98:	6053      	strne	r3, [r2, #4]
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	f000 f9ec 	bl	8005278 <__malloc_unlock>
 8004ea0:	f104 000b 	add.w	r0, r4, #11
 8004ea4:	1d23      	adds	r3, r4, #4
 8004ea6:	f020 0007 	bic.w	r0, r0, #7
 8004eaa:	1ac2      	subs	r2, r0, r3
 8004eac:	d0cc      	beq.n	8004e48 <_malloc_r+0x20>
 8004eae:	1a1b      	subs	r3, r3, r0
 8004eb0:	50a3      	str	r3, [r4, r2]
 8004eb2:	e7c9      	b.n	8004e48 <_malloc_r+0x20>
 8004eb4:	4622      	mov	r2, r4
 8004eb6:	6864      	ldr	r4, [r4, #4]
 8004eb8:	e7cc      	b.n	8004e54 <_malloc_r+0x2c>
 8004eba:	1cc4      	adds	r4, r0, #3
 8004ebc:	f024 0403 	bic.w	r4, r4, #3
 8004ec0:	42a0      	cmp	r0, r4
 8004ec2:	d0e3      	beq.n	8004e8c <_malloc_r+0x64>
 8004ec4:	1a21      	subs	r1, r4, r0
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	f000 f964 	bl	8005194 <_sbrk_r>
 8004ecc:	3001      	adds	r0, #1
 8004ece:	d1dd      	bne.n	8004e8c <_malloc_r+0x64>
 8004ed0:	e7cf      	b.n	8004e72 <_malloc_r+0x4a>
 8004ed2:	bf00      	nop
 8004ed4:	20000200 	.word	0x20000200
 8004ed8:	20000204 	.word	0x20000204

08004edc <__ssputs_r>:
 8004edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee0:	688e      	ldr	r6, [r1, #8]
 8004ee2:	429e      	cmp	r6, r3
 8004ee4:	4682      	mov	sl, r0
 8004ee6:	460c      	mov	r4, r1
 8004ee8:	4690      	mov	r8, r2
 8004eea:	461f      	mov	r7, r3
 8004eec:	d838      	bhi.n	8004f60 <__ssputs_r+0x84>
 8004eee:	898a      	ldrh	r2, [r1, #12]
 8004ef0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ef4:	d032      	beq.n	8004f5c <__ssputs_r+0x80>
 8004ef6:	6825      	ldr	r5, [r4, #0]
 8004ef8:	6909      	ldr	r1, [r1, #16]
 8004efa:	eba5 0901 	sub.w	r9, r5, r1
 8004efe:	6965      	ldr	r5, [r4, #20]
 8004f00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f08:	3301      	adds	r3, #1
 8004f0a:	444b      	add	r3, r9
 8004f0c:	106d      	asrs	r5, r5, #1
 8004f0e:	429d      	cmp	r5, r3
 8004f10:	bf38      	it	cc
 8004f12:	461d      	movcc	r5, r3
 8004f14:	0553      	lsls	r3, r2, #21
 8004f16:	d531      	bpl.n	8004f7c <__ssputs_r+0xa0>
 8004f18:	4629      	mov	r1, r5
 8004f1a:	f7ff ff85 	bl	8004e28 <_malloc_r>
 8004f1e:	4606      	mov	r6, r0
 8004f20:	b950      	cbnz	r0, 8004f38 <__ssputs_r+0x5c>
 8004f22:	230c      	movs	r3, #12
 8004f24:	f8ca 3000 	str.w	r3, [sl]
 8004f28:	89a3      	ldrh	r3, [r4, #12]
 8004f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f2e:	81a3      	strh	r3, [r4, #12]
 8004f30:	f04f 30ff 	mov.w	r0, #4294967295
 8004f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f38:	6921      	ldr	r1, [r4, #16]
 8004f3a:	464a      	mov	r2, r9
 8004f3c:	f7ff fb88 	bl	8004650 <memcpy>
 8004f40:	89a3      	ldrh	r3, [r4, #12]
 8004f42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f4a:	81a3      	strh	r3, [r4, #12]
 8004f4c:	6126      	str	r6, [r4, #16]
 8004f4e:	6165      	str	r5, [r4, #20]
 8004f50:	444e      	add	r6, r9
 8004f52:	eba5 0509 	sub.w	r5, r5, r9
 8004f56:	6026      	str	r6, [r4, #0]
 8004f58:	60a5      	str	r5, [r4, #8]
 8004f5a:	463e      	mov	r6, r7
 8004f5c:	42be      	cmp	r6, r7
 8004f5e:	d900      	bls.n	8004f62 <__ssputs_r+0x86>
 8004f60:	463e      	mov	r6, r7
 8004f62:	4632      	mov	r2, r6
 8004f64:	6820      	ldr	r0, [r4, #0]
 8004f66:	4641      	mov	r1, r8
 8004f68:	f000 f966 	bl	8005238 <memmove>
 8004f6c:	68a3      	ldr	r3, [r4, #8]
 8004f6e:	6822      	ldr	r2, [r4, #0]
 8004f70:	1b9b      	subs	r3, r3, r6
 8004f72:	4432      	add	r2, r6
 8004f74:	60a3      	str	r3, [r4, #8]
 8004f76:	6022      	str	r2, [r4, #0]
 8004f78:	2000      	movs	r0, #0
 8004f7a:	e7db      	b.n	8004f34 <__ssputs_r+0x58>
 8004f7c:	462a      	mov	r2, r5
 8004f7e:	f000 f981 	bl	8005284 <_realloc_r>
 8004f82:	4606      	mov	r6, r0
 8004f84:	2800      	cmp	r0, #0
 8004f86:	d1e1      	bne.n	8004f4c <__ssputs_r+0x70>
 8004f88:	6921      	ldr	r1, [r4, #16]
 8004f8a:	4650      	mov	r0, sl
 8004f8c:	f7ff fefc 	bl	8004d88 <_free_r>
 8004f90:	e7c7      	b.n	8004f22 <__ssputs_r+0x46>
	...

08004f94 <_svfiprintf_r>:
 8004f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f98:	4698      	mov	r8, r3
 8004f9a:	898b      	ldrh	r3, [r1, #12]
 8004f9c:	061b      	lsls	r3, r3, #24
 8004f9e:	b09d      	sub	sp, #116	; 0x74
 8004fa0:	4607      	mov	r7, r0
 8004fa2:	460d      	mov	r5, r1
 8004fa4:	4614      	mov	r4, r2
 8004fa6:	d50e      	bpl.n	8004fc6 <_svfiprintf_r+0x32>
 8004fa8:	690b      	ldr	r3, [r1, #16]
 8004faa:	b963      	cbnz	r3, 8004fc6 <_svfiprintf_r+0x32>
 8004fac:	2140      	movs	r1, #64	; 0x40
 8004fae:	f7ff ff3b 	bl	8004e28 <_malloc_r>
 8004fb2:	6028      	str	r0, [r5, #0]
 8004fb4:	6128      	str	r0, [r5, #16]
 8004fb6:	b920      	cbnz	r0, 8004fc2 <_svfiprintf_r+0x2e>
 8004fb8:	230c      	movs	r3, #12
 8004fba:	603b      	str	r3, [r7, #0]
 8004fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc0:	e0d1      	b.n	8005166 <_svfiprintf_r+0x1d2>
 8004fc2:	2340      	movs	r3, #64	; 0x40
 8004fc4:	616b      	str	r3, [r5, #20]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8004fca:	2320      	movs	r3, #32
 8004fcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fd4:	2330      	movs	r3, #48	; 0x30
 8004fd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005180 <_svfiprintf_r+0x1ec>
 8004fda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fde:	f04f 0901 	mov.w	r9, #1
 8004fe2:	4623      	mov	r3, r4
 8004fe4:	469a      	mov	sl, r3
 8004fe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fea:	b10a      	cbz	r2, 8004ff0 <_svfiprintf_r+0x5c>
 8004fec:	2a25      	cmp	r2, #37	; 0x25
 8004fee:	d1f9      	bne.n	8004fe4 <_svfiprintf_r+0x50>
 8004ff0:	ebba 0b04 	subs.w	fp, sl, r4
 8004ff4:	d00b      	beq.n	800500e <_svfiprintf_r+0x7a>
 8004ff6:	465b      	mov	r3, fp
 8004ff8:	4622      	mov	r2, r4
 8004ffa:	4629      	mov	r1, r5
 8004ffc:	4638      	mov	r0, r7
 8004ffe:	f7ff ff6d 	bl	8004edc <__ssputs_r>
 8005002:	3001      	adds	r0, #1
 8005004:	f000 80aa 	beq.w	800515c <_svfiprintf_r+0x1c8>
 8005008:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800500a:	445a      	add	r2, fp
 800500c:	9209      	str	r2, [sp, #36]	; 0x24
 800500e:	f89a 3000 	ldrb.w	r3, [sl]
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 80a2 	beq.w	800515c <_svfiprintf_r+0x1c8>
 8005018:	2300      	movs	r3, #0
 800501a:	f04f 32ff 	mov.w	r2, #4294967295
 800501e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005022:	f10a 0a01 	add.w	sl, sl, #1
 8005026:	9304      	str	r3, [sp, #16]
 8005028:	9307      	str	r3, [sp, #28]
 800502a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800502e:	931a      	str	r3, [sp, #104]	; 0x68
 8005030:	4654      	mov	r4, sl
 8005032:	2205      	movs	r2, #5
 8005034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005038:	4851      	ldr	r0, [pc, #324]	; (8005180 <_svfiprintf_r+0x1ec>)
 800503a:	f7fb f8d1 	bl	80001e0 <memchr>
 800503e:	9a04      	ldr	r2, [sp, #16]
 8005040:	b9d8      	cbnz	r0, 800507a <_svfiprintf_r+0xe6>
 8005042:	06d0      	lsls	r0, r2, #27
 8005044:	bf44      	itt	mi
 8005046:	2320      	movmi	r3, #32
 8005048:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800504c:	0711      	lsls	r1, r2, #28
 800504e:	bf44      	itt	mi
 8005050:	232b      	movmi	r3, #43	; 0x2b
 8005052:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005056:	f89a 3000 	ldrb.w	r3, [sl]
 800505a:	2b2a      	cmp	r3, #42	; 0x2a
 800505c:	d015      	beq.n	800508a <_svfiprintf_r+0xf6>
 800505e:	9a07      	ldr	r2, [sp, #28]
 8005060:	4654      	mov	r4, sl
 8005062:	2000      	movs	r0, #0
 8005064:	f04f 0c0a 	mov.w	ip, #10
 8005068:	4621      	mov	r1, r4
 800506a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800506e:	3b30      	subs	r3, #48	; 0x30
 8005070:	2b09      	cmp	r3, #9
 8005072:	d94e      	bls.n	8005112 <_svfiprintf_r+0x17e>
 8005074:	b1b0      	cbz	r0, 80050a4 <_svfiprintf_r+0x110>
 8005076:	9207      	str	r2, [sp, #28]
 8005078:	e014      	b.n	80050a4 <_svfiprintf_r+0x110>
 800507a:	eba0 0308 	sub.w	r3, r0, r8
 800507e:	fa09 f303 	lsl.w	r3, r9, r3
 8005082:	4313      	orrs	r3, r2
 8005084:	9304      	str	r3, [sp, #16]
 8005086:	46a2      	mov	sl, r4
 8005088:	e7d2      	b.n	8005030 <_svfiprintf_r+0x9c>
 800508a:	9b03      	ldr	r3, [sp, #12]
 800508c:	1d19      	adds	r1, r3, #4
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	9103      	str	r1, [sp, #12]
 8005092:	2b00      	cmp	r3, #0
 8005094:	bfbb      	ittet	lt
 8005096:	425b      	neglt	r3, r3
 8005098:	f042 0202 	orrlt.w	r2, r2, #2
 800509c:	9307      	strge	r3, [sp, #28]
 800509e:	9307      	strlt	r3, [sp, #28]
 80050a0:	bfb8      	it	lt
 80050a2:	9204      	strlt	r2, [sp, #16]
 80050a4:	7823      	ldrb	r3, [r4, #0]
 80050a6:	2b2e      	cmp	r3, #46	; 0x2e
 80050a8:	d10c      	bne.n	80050c4 <_svfiprintf_r+0x130>
 80050aa:	7863      	ldrb	r3, [r4, #1]
 80050ac:	2b2a      	cmp	r3, #42	; 0x2a
 80050ae:	d135      	bne.n	800511c <_svfiprintf_r+0x188>
 80050b0:	9b03      	ldr	r3, [sp, #12]
 80050b2:	1d1a      	adds	r2, r3, #4
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	9203      	str	r2, [sp, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	bfb8      	it	lt
 80050bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80050c0:	3402      	adds	r4, #2
 80050c2:	9305      	str	r3, [sp, #20]
 80050c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005190 <_svfiprintf_r+0x1fc>
 80050c8:	7821      	ldrb	r1, [r4, #0]
 80050ca:	2203      	movs	r2, #3
 80050cc:	4650      	mov	r0, sl
 80050ce:	f7fb f887 	bl	80001e0 <memchr>
 80050d2:	b140      	cbz	r0, 80050e6 <_svfiprintf_r+0x152>
 80050d4:	2340      	movs	r3, #64	; 0x40
 80050d6:	eba0 000a 	sub.w	r0, r0, sl
 80050da:	fa03 f000 	lsl.w	r0, r3, r0
 80050de:	9b04      	ldr	r3, [sp, #16]
 80050e0:	4303      	orrs	r3, r0
 80050e2:	3401      	adds	r4, #1
 80050e4:	9304      	str	r3, [sp, #16]
 80050e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ea:	4826      	ldr	r0, [pc, #152]	; (8005184 <_svfiprintf_r+0x1f0>)
 80050ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050f0:	2206      	movs	r2, #6
 80050f2:	f7fb f875 	bl	80001e0 <memchr>
 80050f6:	2800      	cmp	r0, #0
 80050f8:	d038      	beq.n	800516c <_svfiprintf_r+0x1d8>
 80050fa:	4b23      	ldr	r3, [pc, #140]	; (8005188 <_svfiprintf_r+0x1f4>)
 80050fc:	bb1b      	cbnz	r3, 8005146 <_svfiprintf_r+0x1b2>
 80050fe:	9b03      	ldr	r3, [sp, #12]
 8005100:	3307      	adds	r3, #7
 8005102:	f023 0307 	bic.w	r3, r3, #7
 8005106:	3308      	adds	r3, #8
 8005108:	9303      	str	r3, [sp, #12]
 800510a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800510c:	4433      	add	r3, r6
 800510e:	9309      	str	r3, [sp, #36]	; 0x24
 8005110:	e767      	b.n	8004fe2 <_svfiprintf_r+0x4e>
 8005112:	fb0c 3202 	mla	r2, ip, r2, r3
 8005116:	460c      	mov	r4, r1
 8005118:	2001      	movs	r0, #1
 800511a:	e7a5      	b.n	8005068 <_svfiprintf_r+0xd4>
 800511c:	2300      	movs	r3, #0
 800511e:	3401      	adds	r4, #1
 8005120:	9305      	str	r3, [sp, #20]
 8005122:	4619      	mov	r1, r3
 8005124:	f04f 0c0a 	mov.w	ip, #10
 8005128:	4620      	mov	r0, r4
 800512a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800512e:	3a30      	subs	r2, #48	; 0x30
 8005130:	2a09      	cmp	r2, #9
 8005132:	d903      	bls.n	800513c <_svfiprintf_r+0x1a8>
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0c5      	beq.n	80050c4 <_svfiprintf_r+0x130>
 8005138:	9105      	str	r1, [sp, #20]
 800513a:	e7c3      	b.n	80050c4 <_svfiprintf_r+0x130>
 800513c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005140:	4604      	mov	r4, r0
 8005142:	2301      	movs	r3, #1
 8005144:	e7f0      	b.n	8005128 <_svfiprintf_r+0x194>
 8005146:	ab03      	add	r3, sp, #12
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	462a      	mov	r2, r5
 800514c:	4b0f      	ldr	r3, [pc, #60]	; (800518c <_svfiprintf_r+0x1f8>)
 800514e:	a904      	add	r1, sp, #16
 8005150:	4638      	mov	r0, r7
 8005152:	f7fe f807 	bl	8003164 <_printf_float>
 8005156:	1c42      	adds	r2, r0, #1
 8005158:	4606      	mov	r6, r0
 800515a:	d1d6      	bne.n	800510a <_svfiprintf_r+0x176>
 800515c:	89ab      	ldrh	r3, [r5, #12]
 800515e:	065b      	lsls	r3, r3, #25
 8005160:	f53f af2c 	bmi.w	8004fbc <_svfiprintf_r+0x28>
 8005164:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005166:	b01d      	add	sp, #116	; 0x74
 8005168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800516c:	ab03      	add	r3, sp, #12
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	462a      	mov	r2, r5
 8005172:	4b06      	ldr	r3, [pc, #24]	; (800518c <_svfiprintf_r+0x1f8>)
 8005174:	a904      	add	r1, sp, #16
 8005176:	4638      	mov	r0, r7
 8005178:	f7fe fa98 	bl	80036ac <_printf_i>
 800517c:	e7eb      	b.n	8005156 <_svfiprintf_r+0x1c2>
 800517e:	bf00      	nop
 8005180:	08005fec 	.word	0x08005fec
 8005184:	08005ff6 	.word	0x08005ff6
 8005188:	08003165 	.word	0x08003165
 800518c:	08004edd 	.word	0x08004edd
 8005190:	08005ff2 	.word	0x08005ff2

08005194 <_sbrk_r>:
 8005194:	b538      	push	{r3, r4, r5, lr}
 8005196:	4d06      	ldr	r5, [pc, #24]	; (80051b0 <_sbrk_r+0x1c>)
 8005198:	2300      	movs	r3, #0
 800519a:	4604      	mov	r4, r0
 800519c:	4608      	mov	r0, r1
 800519e:	602b      	str	r3, [r5, #0]
 80051a0:	f7fc fe90 	bl	8001ec4 <_sbrk>
 80051a4:	1c43      	adds	r3, r0, #1
 80051a6:	d102      	bne.n	80051ae <_sbrk_r+0x1a>
 80051a8:	682b      	ldr	r3, [r5, #0]
 80051aa:	b103      	cbz	r3, 80051ae <_sbrk_r+0x1a>
 80051ac:	6023      	str	r3, [r4, #0]
 80051ae:	bd38      	pop	{r3, r4, r5, pc}
 80051b0:	20000254 	.word	0x20000254

080051b4 <__assert_func>:
 80051b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80051b6:	4614      	mov	r4, r2
 80051b8:	461a      	mov	r2, r3
 80051ba:	4b09      	ldr	r3, [pc, #36]	; (80051e0 <__assert_func+0x2c>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4605      	mov	r5, r0
 80051c0:	68d8      	ldr	r0, [r3, #12]
 80051c2:	b14c      	cbz	r4, 80051d8 <__assert_func+0x24>
 80051c4:	4b07      	ldr	r3, [pc, #28]	; (80051e4 <__assert_func+0x30>)
 80051c6:	9100      	str	r1, [sp, #0]
 80051c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80051cc:	4906      	ldr	r1, [pc, #24]	; (80051e8 <__assert_func+0x34>)
 80051ce:	462b      	mov	r3, r5
 80051d0:	f000 f80e 	bl	80051f0 <fiprintf>
 80051d4:	f000 faa4 	bl	8005720 <abort>
 80051d8:	4b04      	ldr	r3, [pc, #16]	; (80051ec <__assert_func+0x38>)
 80051da:	461c      	mov	r4, r3
 80051dc:	e7f3      	b.n	80051c6 <__assert_func+0x12>
 80051de:	bf00      	nop
 80051e0:	2000000c 	.word	0x2000000c
 80051e4:	08005ffd 	.word	0x08005ffd
 80051e8:	0800600a 	.word	0x0800600a
 80051ec:	08006038 	.word	0x08006038

080051f0 <fiprintf>:
 80051f0:	b40e      	push	{r1, r2, r3}
 80051f2:	b503      	push	{r0, r1, lr}
 80051f4:	4601      	mov	r1, r0
 80051f6:	ab03      	add	r3, sp, #12
 80051f8:	4805      	ldr	r0, [pc, #20]	; (8005210 <fiprintf+0x20>)
 80051fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80051fe:	6800      	ldr	r0, [r0, #0]
 8005200:	9301      	str	r3, [sp, #4]
 8005202:	f000 f88f 	bl	8005324 <_vfiprintf_r>
 8005206:	b002      	add	sp, #8
 8005208:	f85d eb04 	ldr.w	lr, [sp], #4
 800520c:	b003      	add	sp, #12
 800520e:	4770      	bx	lr
 8005210:	2000000c 	.word	0x2000000c

08005214 <__ascii_mbtowc>:
 8005214:	b082      	sub	sp, #8
 8005216:	b901      	cbnz	r1, 800521a <__ascii_mbtowc+0x6>
 8005218:	a901      	add	r1, sp, #4
 800521a:	b142      	cbz	r2, 800522e <__ascii_mbtowc+0x1a>
 800521c:	b14b      	cbz	r3, 8005232 <__ascii_mbtowc+0x1e>
 800521e:	7813      	ldrb	r3, [r2, #0]
 8005220:	600b      	str	r3, [r1, #0]
 8005222:	7812      	ldrb	r2, [r2, #0]
 8005224:	1e10      	subs	r0, r2, #0
 8005226:	bf18      	it	ne
 8005228:	2001      	movne	r0, #1
 800522a:	b002      	add	sp, #8
 800522c:	4770      	bx	lr
 800522e:	4610      	mov	r0, r2
 8005230:	e7fb      	b.n	800522a <__ascii_mbtowc+0x16>
 8005232:	f06f 0001 	mvn.w	r0, #1
 8005236:	e7f8      	b.n	800522a <__ascii_mbtowc+0x16>

08005238 <memmove>:
 8005238:	4288      	cmp	r0, r1
 800523a:	b510      	push	{r4, lr}
 800523c:	eb01 0402 	add.w	r4, r1, r2
 8005240:	d902      	bls.n	8005248 <memmove+0x10>
 8005242:	4284      	cmp	r4, r0
 8005244:	4623      	mov	r3, r4
 8005246:	d807      	bhi.n	8005258 <memmove+0x20>
 8005248:	1e43      	subs	r3, r0, #1
 800524a:	42a1      	cmp	r1, r4
 800524c:	d008      	beq.n	8005260 <memmove+0x28>
 800524e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005252:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005256:	e7f8      	b.n	800524a <memmove+0x12>
 8005258:	4402      	add	r2, r0
 800525a:	4601      	mov	r1, r0
 800525c:	428a      	cmp	r2, r1
 800525e:	d100      	bne.n	8005262 <memmove+0x2a>
 8005260:	bd10      	pop	{r4, pc}
 8005262:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005266:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800526a:	e7f7      	b.n	800525c <memmove+0x24>

0800526c <__malloc_lock>:
 800526c:	4801      	ldr	r0, [pc, #4]	; (8005274 <__malloc_lock+0x8>)
 800526e:	f000 bc17 	b.w	8005aa0 <__retarget_lock_acquire_recursive>
 8005272:	bf00      	nop
 8005274:	2000025c 	.word	0x2000025c

08005278 <__malloc_unlock>:
 8005278:	4801      	ldr	r0, [pc, #4]	; (8005280 <__malloc_unlock+0x8>)
 800527a:	f000 bc12 	b.w	8005aa2 <__retarget_lock_release_recursive>
 800527e:	bf00      	nop
 8005280:	2000025c 	.word	0x2000025c

08005284 <_realloc_r>:
 8005284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005286:	4607      	mov	r7, r0
 8005288:	4614      	mov	r4, r2
 800528a:	460e      	mov	r6, r1
 800528c:	b921      	cbnz	r1, 8005298 <_realloc_r+0x14>
 800528e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005292:	4611      	mov	r1, r2
 8005294:	f7ff bdc8 	b.w	8004e28 <_malloc_r>
 8005298:	b922      	cbnz	r2, 80052a4 <_realloc_r+0x20>
 800529a:	f7ff fd75 	bl	8004d88 <_free_r>
 800529e:	4625      	mov	r5, r4
 80052a0:	4628      	mov	r0, r5
 80052a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052a4:	f000 fc62 	bl	8005b6c <_malloc_usable_size_r>
 80052a8:	42a0      	cmp	r0, r4
 80052aa:	d20f      	bcs.n	80052cc <_realloc_r+0x48>
 80052ac:	4621      	mov	r1, r4
 80052ae:	4638      	mov	r0, r7
 80052b0:	f7ff fdba 	bl	8004e28 <_malloc_r>
 80052b4:	4605      	mov	r5, r0
 80052b6:	2800      	cmp	r0, #0
 80052b8:	d0f2      	beq.n	80052a0 <_realloc_r+0x1c>
 80052ba:	4631      	mov	r1, r6
 80052bc:	4622      	mov	r2, r4
 80052be:	f7ff f9c7 	bl	8004650 <memcpy>
 80052c2:	4631      	mov	r1, r6
 80052c4:	4638      	mov	r0, r7
 80052c6:	f7ff fd5f 	bl	8004d88 <_free_r>
 80052ca:	e7e9      	b.n	80052a0 <_realloc_r+0x1c>
 80052cc:	4635      	mov	r5, r6
 80052ce:	e7e7      	b.n	80052a0 <_realloc_r+0x1c>

080052d0 <__sfputc_r>:
 80052d0:	6893      	ldr	r3, [r2, #8]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	b410      	push	{r4}
 80052d8:	6093      	str	r3, [r2, #8]
 80052da:	da08      	bge.n	80052ee <__sfputc_r+0x1e>
 80052dc:	6994      	ldr	r4, [r2, #24]
 80052de:	42a3      	cmp	r3, r4
 80052e0:	db01      	blt.n	80052e6 <__sfputc_r+0x16>
 80052e2:	290a      	cmp	r1, #10
 80052e4:	d103      	bne.n	80052ee <__sfputc_r+0x1e>
 80052e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052ea:	f000 b94b 	b.w	8005584 <__swbuf_r>
 80052ee:	6813      	ldr	r3, [r2, #0]
 80052f0:	1c58      	adds	r0, r3, #1
 80052f2:	6010      	str	r0, [r2, #0]
 80052f4:	7019      	strb	r1, [r3, #0]
 80052f6:	4608      	mov	r0, r1
 80052f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <__sfputs_r>:
 80052fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005300:	4606      	mov	r6, r0
 8005302:	460f      	mov	r7, r1
 8005304:	4614      	mov	r4, r2
 8005306:	18d5      	adds	r5, r2, r3
 8005308:	42ac      	cmp	r4, r5
 800530a:	d101      	bne.n	8005310 <__sfputs_r+0x12>
 800530c:	2000      	movs	r0, #0
 800530e:	e007      	b.n	8005320 <__sfputs_r+0x22>
 8005310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005314:	463a      	mov	r2, r7
 8005316:	4630      	mov	r0, r6
 8005318:	f7ff ffda 	bl	80052d0 <__sfputc_r>
 800531c:	1c43      	adds	r3, r0, #1
 800531e:	d1f3      	bne.n	8005308 <__sfputs_r+0xa>
 8005320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005324 <_vfiprintf_r>:
 8005324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005328:	460d      	mov	r5, r1
 800532a:	b09d      	sub	sp, #116	; 0x74
 800532c:	4614      	mov	r4, r2
 800532e:	4698      	mov	r8, r3
 8005330:	4606      	mov	r6, r0
 8005332:	b118      	cbz	r0, 800533c <_vfiprintf_r+0x18>
 8005334:	6983      	ldr	r3, [r0, #24]
 8005336:	b90b      	cbnz	r3, 800533c <_vfiprintf_r+0x18>
 8005338:	f000 fb14 	bl	8005964 <__sinit>
 800533c:	4b89      	ldr	r3, [pc, #548]	; (8005564 <_vfiprintf_r+0x240>)
 800533e:	429d      	cmp	r5, r3
 8005340:	d11b      	bne.n	800537a <_vfiprintf_r+0x56>
 8005342:	6875      	ldr	r5, [r6, #4]
 8005344:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005346:	07d9      	lsls	r1, r3, #31
 8005348:	d405      	bmi.n	8005356 <_vfiprintf_r+0x32>
 800534a:	89ab      	ldrh	r3, [r5, #12]
 800534c:	059a      	lsls	r2, r3, #22
 800534e:	d402      	bmi.n	8005356 <_vfiprintf_r+0x32>
 8005350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005352:	f000 fba5 	bl	8005aa0 <__retarget_lock_acquire_recursive>
 8005356:	89ab      	ldrh	r3, [r5, #12]
 8005358:	071b      	lsls	r3, r3, #28
 800535a:	d501      	bpl.n	8005360 <_vfiprintf_r+0x3c>
 800535c:	692b      	ldr	r3, [r5, #16]
 800535e:	b9eb      	cbnz	r3, 800539c <_vfiprintf_r+0x78>
 8005360:	4629      	mov	r1, r5
 8005362:	4630      	mov	r0, r6
 8005364:	f000 f96e 	bl	8005644 <__swsetup_r>
 8005368:	b1c0      	cbz	r0, 800539c <_vfiprintf_r+0x78>
 800536a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800536c:	07dc      	lsls	r4, r3, #31
 800536e:	d50e      	bpl.n	800538e <_vfiprintf_r+0x6a>
 8005370:	f04f 30ff 	mov.w	r0, #4294967295
 8005374:	b01d      	add	sp, #116	; 0x74
 8005376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800537a:	4b7b      	ldr	r3, [pc, #492]	; (8005568 <_vfiprintf_r+0x244>)
 800537c:	429d      	cmp	r5, r3
 800537e:	d101      	bne.n	8005384 <_vfiprintf_r+0x60>
 8005380:	68b5      	ldr	r5, [r6, #8]
 8005382:	e7df      	b.n	8005344 <_vfiprintf_r+0x20>
 8005384:	4b79      	ldr	r3, [pc, #484]	; (800556c <_vfiprintf_r+0x248>)
 8005386:	429d      	cmp	r5, r3
 8005388:	bf08      	it	eq
 800538a:	68f5      	ldreq	r5, [r6, #12]
 800538c:	e7da      	b.n	8005344 <_vfiprintf_r+0x20>
 800538e:	89ab      	ldrh	r3, [r5, #12]
 8005390:	0598      	lsls	r0, r3, #22
 8005392:	d4ed      	bmi.n	8005370 <_vfiprintf_r+0x4c>
 8005394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005396:	f000 fb84 	bl	8005aa2 <__retarget_lock_release_recursive>
 800539a:	e7e9      	b.n	8005370 <_vfiprintf_r+0x4c>
 800539c:	2300      	movs	r3, #0
 800539e:	9309      	str	r3, [sp, #36]	; 0x24
 80053a0:	2320      	movs	r3, #32
 80053a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80053aa:	2330      	movs	r3, #48	; 0x30
 80053ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005570 <_vfiprintf_r+0x24c>
 80053b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053b4:	f04f 0901 	mov.w	r9, #1
 80053b8:	4623      	mov	r3, r4
 80053ba:	469a      	mov	sl, r3
 80053bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053c0:	b10a      	cbz	r2, 80053c6 <_vfiprintf_r+0xa2>
 80053c2:	2a25      	cmp	r2, #37	; 0x25
 80053c4:	d1f9      	bne.n	80053ba <_vfiprintf_r+0x96>
 80053c6:	ebba 0b04 	subs.w	fp, sl, r4
 80053ca:	d00b      	beq.n	80053e4 <_vfiprintf_r+0xc0>
 80053cc:	465b      	mov	r3, fp
 80053ce:	4622      	mov	r2, r4
 80053d0:	4629      	mov	r1, r5
 80053d2:	4630      	mov	r0, r6
 80053d4:	f7ff ff93 	bl	80052fe <__sfputs_r>
 80053d8:	3001      	adds	r0, #1
 80053da:	f000 80aa 	beq.w	8005532 <_vfiprintf_r+0x20e>
 80053de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053e0:	445a      	add	r2, fp
 80053e2:	9209      	str	r2, [sp, #36]	; 0x24
 80053e4:	f89a 3000 	ldrb.w	r3, [sl]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 80a2 	beq.w	8005532 <_vfiprintf_r+0x20e>
 80053ee:	2300      	movs	r3, #0
 80053f0:	f04f 32ff 	mov.w	r2, #4294967295
 80053f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053f8:	f10a 0a01 	add.w	sl, sl, #1
 80053fc:	9304      	str	r3, [sp, #16]
 80053fe:	9307      	str	r3, [sp, #28]
 8005400:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005404:	931a      	str	r3, [sp, #104]	; 0x68
 8005406:	4654      	mov	r4, sl
 8005408:	2205      	movs	r2, #5
 800540a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800540e:	4858      	ldr	r0, [pc, #352]	; (8005570 <_vfiprintf_r+0x24c>)
 8005410:	f7fa fee6 	bl	80001e0 <memchr>
 8005414:	9a04      	ldr	r2, [sp, #16]
 8005416:	b9d8      	cbnz	r0, 8005450 <_vfiprintf_r+0x12c>
 8005418:	06d1      	lsls	r1, r2, #27
 800541a:	bf44      	itt	mi
 800541c:	2320      	movmi	r3, #32
 800541e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005422:	0713      	lsls	r3, r2, #28
 8005424:	bf44      	itt	mi
 8005426:	232b      	movmi	r3, #43	; 0x2b
 8005428:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800542c:	f89a 3000 	ldrb.w	r3, [sl]
 8005430:	2b2a      	cmp	r3, #42	; 0x2a
 8005432:	d015      	beq.n	8005460 <_vfiprintf_r+0x13c>
 8005434:	9a07      	ldr	r2, [sp, #28]
 8005436:	4654      	mov	r4, sl
 8005438:	2000      	movs	r0, #0
 800543a:	f04f 0c0a 	mov.w	ip, #10
 800543e:	4621      	mov	r1, r4
 8005440:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005444:	3b30      	subs	r3, #48	; 0x30
 8005446:	2b09      	cmp	r3, #9
 8005448:	d94e      	bls.n	80054e8 <_vfiprintf_r+0x1c4>
 800544a:	b1b0      	cbz	r0, 800547a <_vfiprintf_r+0x156>
 800544c:	9207      	str	r2, [sp, #28]
 800544e:	e014      	b.n	800547a <_vfiprintf_r+0x156>
 8005450:	eba0 0308 	sub.w	r3, r0, r8
 8005454:	fa09 f303 	lsl.w	r3, r9, r3
 8005458:	4313      	orrs	r3, r2
 800545a:	9304      	str	r3, [sp, #16]
 800545c:	46a2      	mov	sl, r4
 800545e:	e7d2      	b.n	8005406 <_vfiprintf_r+0xe2>
 8005460:	9b03      	ldr	r3, [sp, #12]
 8005462:	1d19      	adds	r1, r3, #4
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	9103      	str	r1, [sp, #12]
 8005468:	2b00      	cmp	r3, #0
 800546a:	bfbb      	ittet	lt
 800546c:	425b      	neglt	r3, r3
 800546e:	f042 0202 	orrlt.w	r2, r2, #2
 8005472:	9307      	strge	r3, [sp, #28]
 8005474:	9307      	strlt	r3, [sp, #28]
 8005476:	bfb8      	it	lt
 8005478:	9204      	strlt	r2, [sp, #16]
 800547a:	7823      	ldrb	r3, [r4, #0]
 800547c:	2b2e      	cmp	r3, #46	; 0x2e
 800547e:	d10c      	bne.n	800549a <_vfiprintf_r+0x176>
 8005480:	7863      	ldrb	r3, [r4, #1]
 8005482:	2b2a      	cmp	r3, #42	; 0x2a
 8005484:	d135      	bne.n	80054f2 <_vfiprintf_r+0x1ce>
 8005486:	9b03      	ldr	r3, [sp, #12]
 8005488:	1d1a      	adds	r2, r3, #4
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	9203      	str	r2, [sp, #12]
 800548e:	2b00      	cmp	r3, #0
 8005490:	bfb8      	it	lt
 8005492:	f04f 33ff 	movlt.w	r3, #4294967295
 8005496:	3402      	adds	r4, #2
 8005498:	9305      	str	r3, [sp, #20]
 800549a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005580 <_vfiprintf_r+0x25c>
 800549e:	7821      	ldrb	r1, [r4, #0]
 80054a0:	2203      	movs	r2, #3
 80054a2:	4650      	mov	r0, sl
 80054a4:	f7fa fe9c 	bl	80001e0 <memchr>
 80054a8:	b140      	cbz	r0, 80054bc <_vfiprintf_r+0x198>
 80054aa:	2340      	movs	r3, #64	; 0x40
 80054ac:	eba0 000a 	sub.w	r0, r0, sl
 80054b0:	fa03 f000 	lsl.w	r0, r3, r0
 80054b4:	9b04      	ldr	r3, [sp, #16]
 80054b6:	4303      	orrs	r3, r0
 80054b8:	3401      	adds	r4, #1
 80054ba:	9304      	str	r3, [sp, #16]
 80054bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054c0:	482c      	ldr	r0, [pc, #176]	; (8005574 <_vfiprintf_r+0x250>)
 80054c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054c6:	2206      	movs	r2, #6
 80054c8:	f7fa fe8a 	bl	80001e0 <memchr>
 80054cc:	2800      	cmp	r0, #0
 80054ce:	d03f      	beq.n	8005550 <_vfiprintf_r+0x22c>
 80054d0:	4b29      	ldr	r3, [pc, #164]	; (8005578 <_vfiprintf_r+0x254>)
 80054d2:	bb1b      	cbnz	r3, 800551c <_vfiprintf_r+0x1f8>
 80054d4:	9b03      	ldr	r3, [sp, #12]
 80054d6:	3307      	adds	r3, #7
 80054d8:	f023 0307 	bic.w	r3, r3, #7
 80054dc:	3308      	adds	r3, #8
 80054de:	9303      	str	r3, [sp, #12]
 80054e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054e2:	443b      	add	r3, r7
 80054e4:	9309      	str	r3, [sp, #36]	; 0x24
 80054e6:	e767      	b.n	80053b8 <_vfiprintf_r+0x94>
 80054e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80054ec:	460c      	mov	r4, r1
 80054ee:	2001      	movs	r0, #1
 80054f0:	e7a5      	b.n	800543e <_vfiprintf_r+0x11a>
 80054f2:	2300      	movs	r3, #0
 80054f4:	3401      	adds	r4, #1
 80054f6:	9305      	str	r3, [sp, #20]
 80054f8:	4619      	mov	r1, r3
 80054fa:	f04f 0c0a 	mov.w	ip, #10
 80054fe:	4620      	mov	r0, r4
 8005500:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005504:	3a30      	subs	r2, #48	; 0x30
 8005506:	2a09      	cmp	r2, #9
 8005508:	d903      	bls.n	8005512 <_vfiprintf_r+0x1ee>
 800550a:	2b00      	cmp	r3, #0
 800550c:	d0c5      	beq.n	800549a <_vfiprintf_r+0x176>
 800550e:	9105      	str	r1, [sp, #20]
 8005510:	e7c3      	b.n	800549a <_vfiprintf_r+0x176>
 8005512:	fb0c 2101 	mla	r1, ip, r1, r2
 8005516:	4604      	mov	r4, r0
 8005518:	2301      	movs	r3, #1
 800551a:	e7f0      	b.n	80054fe <_vfiprintf_r+0x1da>
 800551c:	ab03      	add	r3, sp, #12
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	462a      	mov	r2, r5
 8005522:	4b16      	ldr	r3, [pc, #88]	; (800557c <_vfiprintf_r+0x258>)
 8005524:	a904      	add	r1, sp, #16
 8005526:	4630      	mov	r0, r6
 8005528:	f7fd fe1c 	bl	8003164 <_printf_float>
 800552c:	4607      	mov	r7, r0
 800552e:	1c78      	adds	r0, r7, #1
 8005530:	d1d6      	bne.n	80054e0 <_vfiprintf_r+0x1bc>
 8005532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005534:	07d9      	lsls	r1, r3, #31
 8005536:	d405      	bmi.n	8005544 <_vfiprintf_r+0x220>
 8005538:	89ab      	ldrh	r3, [r5, #12]
 800553a:	059a      	lsls	r2, r3, #22
 800553c:	d402      	bmi.n	8005544 <_vfiprintf_r+0x220>
 800553e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005540:	f000 faaf 	bl	8005aa2 <__retarget_lock_release_recursive>
 8005544:	89ab      	ldrh	r3, [r5, #12]
 8005546:	065b      	lsls	r3, r3, #25
 8005548:	f53f af12 	bmi.w	8005370 <_vfiprintf_r+0x4c>
 800554c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800554e:	e711      	b.n	8005374 <_vfiprintf_r+0x50>
 8005550:	ab03      	add	r3, sp, #12
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	462a      	mov	r2, r5
 8005556:	4b09      	ldr	r3, [pc, #36]	; (800557c <_vfiprintf_r+0x258>)
 8005558:	a904      	add	r1, sp, #16
 800555a:	4630      	mov	r0, r6
 800555c:	f7fe f8a6 	bl	80036ac <_printf_i>
 8005560:	e7e4      	b.n	800552c <_vfiprintf_r+0x208>
 8005562:	bf00      	nop
 8005564:	08006164 	.word	0x08006164
 8005568:	08006184 	.word	0x08006184
 800556c:	08006144 	.word	0x08006144
 8005570:	08005fec 	.word	0x08005fec
 8005574:	08005ff6 	.word	0x08005ff6
 8005578:	08003165 	.word	0x08003165
 800557c:	080052ff 	.word	0x080052ff
 8005580:	08005ff2 	.word	0x08005ff2

08005584 <__swbuf_r>:
 8005584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005586:	460e      	mov	r6, r1
 8005588:	4614      	mov	r4, r2
 800558a:	4605      	mov	r5, r0
 800558c:	b118      	cbz	r0, 8005596 <__swbuf_r+0x12>
 800558e:	6983      	ldr	r3, [r0, #24]
 8005590:	b90b      	cbnz	r3, 8005596 <__swbuf_r+0x12>
 8005592:	f000 f9e7 	bl	8005964 <__sinit>
 8005596:	4b21      	ldr	r3, [pc, #132]	; (800561c <__swbuf_r+0x98>)
 8005598:	429c      	cmp	r4, r3
 800559a:	d12b      	bne.n	80055f4 <__swbuf_r+0x70>
 800559c:	686c      	ldr	r4, [r5, #4]
 800559e:	69a3      	ldr	r3, [r4, #24]
 80055a0:	60a3      	str	r3, [r4, #8]
 80055a2:	89a3      	ldrh	r3, [r4, #12]
 80055a4:	071a      	lsls	r2, r3, #28
 80055a6:	d52f      	bpl.n	8005608 <__swbuf_r+0x84>
 80055a8:	6923      	ldr	r3, [r4, #16]
 80055aa:	b36b      	cbz	r3, 8005608 <__swbuf_r+0x84>
 80055ac:	6923      	ldr	r3, [r4, #16]
 80055ae:	6820      	ldr	r0, [r4, #0]
 80055b0:	1ac0      	subs	r0, r0, r3
 80055b2:	6963      	ldr	r3, [r4, #20]
 80055b4:	b2f6      	uxtb	r6, r6
 80055b6:	4283      	cmp	r3, r0
 80055b8:	4637      	mov	r7, r6
 80055ba:	dc04      	bgt.n	80055c6 <__swbuf_r+0x42>
 80055bc:	4621      	mov	r1, r4
 80055be:	4628      	mov	r0, r5
 80055c0:	f000 f93c 	bl	800583c <_fflush_r>
 80055c4:	bb30      	cbnz	r0, 8005614 <__swbuf_r+0x90>
 80055c6:	68a3      	ldr	r3, [r4, #8]
 80055c8:	3b01      	subs	r3, #1
 80055ca:	60a3      	str	r3, [r4, #8]
 80055cc:	6823      	ldr	r3, [r4, #0]
 80055ce:	1c5a      	adds	r2, r3, #1
 80055d0:	6022      	str	r2, [r4, #0]
 80055d2:	701e      	strb	r6, [r3, #0]
 80055d4:	6963      	ldr	r3, [r4, #20]
 80055d6:	3001      	adds	r0, #1
 80055d8:	4283      	cmp	r3, r0
 80055da:	d004      	beq.n	80055e6 <__swbuf_r+0x62>
 80055dc:	89a3      	ldrh	r3, [r4, #12]
 80055de:	07db      	lsls	r3, r3, #31
 80055e0:	d506      	bpl.n	80055f0 <__swbuf_r+0x6c>
 80055e2:	2e0a      	cmp	r6, #10
 80055e4:	d104      	bne.n	80055f0 <__swbuf_r+0x6c>
 80055e6:	4621      	mov	r1, r4
 80055e8:	4628      	mov	r0, r5
 80055ea:	f000 f927 	bl	800583c <_fflush_r>
 80055ee:	b988      	cbnz	r0, 8005614 <__swbuf_r+0x90>
 80055f0:	4638      	mov	r0, r7
 80055f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055f4:	4b0a      	ldr	r3, [pc, #40]	; (8005620 <__swbuf_r+0x9c>)
 80055f6:	429c      	cmp	r4, r3
 80055f8:	d101      	bne.n	80055fe <__swbuf_r+0x7a>
 80055fa:	68ac      	ldr	r4, [r5, #8]
 80055fc:	e7cf      	b.n	800559e <__swbuf_r+0x1a>
 80055fe:	4b09      	ldr	r3, [pc, #36]	; (8005624 <__swbuf_r+0xa0>)
 8005600:	429c      	cmp	r4, r3
 8005602:	bf08      	it	eq
 8005604:	68ec      	ldreq	r4, [r5, #12]
 8005606:	e7ca      	b.n	800559e <__swbuf_r+0x1a>
 8005608:	4621      	mov	r1, r4
 800560a:	4628      	mov	r0, r5
 800560c:	f000 f81a 	bl	8005644 <__swsetup_r>
 8005610:	2800      	cmp	r0, #0
 8005612:	d0cb      	beq.n	80055ac <__swbuf_r+0x28>
 8005614:	f04f 37ff 	mov.w	r7, #4294967295
 8005618:	e7ea      	b.n	80055f0 <__swbuf_r+0x6c>
 800561a:	bf00      	nop
 800561c:	08006164 	.word	0x08006164
 8005620:	08006184 	.word	0x08006184
 8005624:	08006144 	.word	0x08006144

08005628 <__ascii_wctomb>:
 8005628:	b149      	cbz	r1, 800563e <__ascii_wctomb+0x16>
 800562a:	2aff      	cmp	r2, #255	; 0xff
 800562c:	bf85      	ittet	hi
 800562e:	238a      	movhi	r3, #138	; 0x8a
 8005630:	6003      	strhi	r3, [r0, #0]
 8005632:	700a      	strbls	r2, [r1, #0]
 8005634:	f04f 30ff 	movhi.w	r0, #4294967295
 8005638:	bf98      	it	ls
 800563a:	2001      	movls	r0, #1
 800563c:	4770      	bx	lr
 800563e:	4608      	mov	r0, r1
 8005640:	4770      	bx	lr
	...

08005644 <__swsetup_r>:
 8005644:	4b32      	ldr	r3, [pc, #200]	; (8005710 <__swsetup_r+0xcc>)
 8005646:	b570      	push	{r4, r5, r6, lr}
 8005648:	681d      	ldr	r5, [r3, #0]
 800564a:	4606      	mov	r6, r0
 800564c:	460c      	mov	r4, r1
 800564e:	b125      	cbz	r5, 800565a <__swsetup_r+0x16>
 8005650:	69ab      	ldr	r3, [r5, #24]
 8005652:	b913      	cbnz	r3, 800565a <__swsetup_r+0x16>
 8005654:	4628      	mov	r0, r5
 8005656:	f000 f985 	bl	8005964 <__sinit>
 800565a:	4b2e      	ldr	r3, [pc, #184]	; (8005714 <__swsetup_r+0xd0>)
 800565c:	429c      	cmp	r4, r3
 800565e:	d10f      	bne.n	8005680 <__swsetup_r+0x3c>
 8005660:	686c      	ldr	r4, [r5, #4]
 8005662:	89a3      	ldrh	r3, [r4, #12]
 8005664:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005668:	0719      	lsls	r1, r3, #28
 800566a:	d42c      	bmi.n	80056c6 <__swsetup_r+0x82>
 800566c:	06dd      	lsls	r5, r3, #27
 800566e:	d411      	bmi.n	8005694 <__swsetup_r+0x50>
 8005670:	2309      	movs	r3, #9
 8005672:	6033      	str	r3, [r6, #0]
 8005674:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005678:	81a3      	strh	r3, [r4, #12]
 800567a:	f04f 30ff 	mov.w	r0, #4294967295
 800567e:	e03e      	b.n	80056fe <__swsetup_r+0xba>
 8005680:	4b25      	ldr	r3, [pc, #148]	; (8005718 <__swsetup_r+0xd4>)
 8005682:	429c      	cmp	r4, r3
 8005684:	d101      	bne.n	800568a <__swsetup_r+0x46>
 8005686:	68ac      	ldr	r4, [r5, #8]
 8005688:	e7eb      	b.n	8005662 <__swsetup_r+0x1e>
 800568a:	4b24      	ldr	r3, [pc, #144]	; (800571c <__swsetup_r+0xd8>)
 800568c:	429c      	cmp	r4, r3
 800568e:	bf08      	it	eq
 8005690:	68ec      	ldreq	r4, [r5, #12]
 8005692:	e7e6      	b.n	8005662 <__swsetup_r+0x1e>
 8005694:	0758      	lsls	r0, r3, #29
 8005696:	d512      	bpl.n	80056be <__swsetup_r+0x7a>
 8005698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800569a:	b141      	cbz	r1, 80056ae <__swsetup_r+0x6a>
 800569c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056a0:	4299      	cmp	r1, r3
 80056a2:	d002      	beq.n	80056aa <__swsetup_r+0x66>
 80056a4:	4630      	mov	r0, r6
 80056a6:	f7ff fb6f 	bl	8004d88 <_free_r>
 80056aa:	2300      	movs	r3, #0
 80056ac:	6363      	str	r3, [r4, #52]	; 0x34
 80056ae:	89a3      	ldrh	r3, [r4, #12]
 80056b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80056b4:	81a3      	strh	r3, [r4, #12]
 80056b6:	2300      	movs	r3, #0
 80056b8:	6063      	str	r3, [r4, #4]
 80056ba:	6923      	ldr	r3, [r4, #16]
 80056bc:	6023      	str	r3, [r4, #0]
 80056be:	89a3      	ldrh	r3, [r4, #12]
 80056c0:	f043 0308 	orr.w	r3, r3, #8
 80056c4:	81a3      	strh	r3, [r4, #12]
 80056c6:	6923      	ldr	r3, [r4, #16]
 80056c8:	b94b      	cbnz	r3, 80056de <__swsetup_r+0x9a>
 80056ca:	89a3      	ldrh	r3, [r4, #12]
 80056cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056d4:	d003      	beq.n	80056de <__swsetup_r+0x9a>
 80056d6:	4621      	mov	r1, r4
 80056d8:	4630      	mov	r0, r6
 80056da:	f000 fa07 	bl	8005aec <__smakebuf_r>
 80056de:	89a0      	ldrh	r0, [r4, #12]
 80056e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056e4:	f010 0301 	ands.w	r3, r0, #1
 80056e8:	d00a      	beq.n	8005700 <__swsetup_r+0xbc>
 80056ea:	2300      	movs	r3, #0
 80056ec:	60a3      	str	r3, [r4, #8]
 80056ee:	6963      	ldr	r3, [r4, #20]
 80056f0:	425b      	negs	r3, r3
 80056f2:	61a3      	str	r3, [r4, #24]
 80056f4:	6923      	ldr	r3, [r4, #16]
 80056f6:	b943      	cbnz	r3, 800570a <__swsetup_r+0xc6>
 80056f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80056fc:	d1ba      	bne.n	8005674 <__swsetup_r+0x30>
 80056fe:	bd70      	pop	{r4, r5, r6, pc}
 8005700:	0781      	lsls	r1, r0, #30
 8005702:	bf58      	it	pl
 8005704:	6963      	ldrpl	r3, [r4, #20]
 8005706:	60a3      	str	r3, [r4, #8]
 8005708:	e7f4      	b.n	80056f4 <__swsetup_r+0xb0>
 800570a:	2000      	movs	r0, #0
 800570c:	e7f7      	b.n	80056fe <__swsetup_r+0xba>
 800570e:	bf00      	nop
 8005710:	2000000c 	.word	0x2000000c
 8005714:	08006164 	.word	0x08006164
 8005718:	08006184 	.word	0x08006184
 800571c:	08006144 	.word	0x08006144

08005720 <abort>:
 8005720:	b508      	push	{r3, lr}
 8005722:	2006      	movs	r0, #6
 8005724:	f000 fa52 	bl	8005bcc <raise>
 8005728:	2001      	movs	r0, #1
 800572a:	f7fc fb53 	bl	8001dd4 <_exit>
	...

08005730 <__sflush_r>:
 8005730:	898a      	ldrh	r2, [r1, #12]
 8005732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005736:	4605      	mov	r5, r0
 8005738:	0710      	lsls	r0, r2, #28
 800573a:	460c      	mov	r4, r1
 800573c:	d458      	bmi.n	80057f0 <__sflush_r+0xc0>
 800573e:	684b      	ldr	r3, [r1, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	dc05      	bgt.n	8005750 <__sflush_r+0x20>
 8005744:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005746:	2b00      	cmp	r3, #0
 8005748:	dc02      	bgt.n	8005750 <__sflush_r+0x20>
 800574a:	2000      	movs	r0, #0
 800574c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005750:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005752:	2e00      	cmp	r6, #0
 8005754:	d0f9      	beq.n	800574a <__sflush_r+0x1a>
 8005756:	2300      	movs	r3, #0
 8005758:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800575c:	682f      	ldr	r7, [r5, #0]
 800575e:	602b      	str	r3, [r5, #0]
 8005760:	d032      	beq.n	80057c8 <__sflush_r+0x98>
 8005762:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005764:	89a3      	ldrh	r3, [r4, #12]
 8005766:	075a      	lsls	r2, r3, #29
 8005768:	d505      	bpl.n	8005776 <__sflush_r+0x46>
 800576a:	6863      	ldr	r3, [r4, #4]
 800576c:	1ac0      	subs	r0, r0, r3
 800576e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005770:	b10b      	cbz	r3, 8005776 <__sflush_r+0x46>
 8005772:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005774:	1ac0      	subs	r0, r0, r3
 8005776:	2300      	movs	r3, #0
 8005778:	4602      	mov	r2, r0
 800577a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800577c:	6a21      	ldr	r1, [r4, #32]
 800577e:	4628      	mov	r0, r5
 8005780:	47b0      	blx	r6
 8005782:	1c43      	adds	r3, r0, #1
 8005784:	89a3      	ldrh	r3, [r4, #12]
 8005786:	d106      	bne.n	8005796 <__sflush_r+0x66>
 8005788:	6829      	ldr	r1, [r5, #0]
 800578a:	291d      	cmp	r1, #29
 800578c:	d82c      	bhi.n	80057e8 <__sflush_r+0xb8>
 800578e:	4a2a      	ldr	r2, [pc, #168]	; (8005838 <__sflush_r+0x108>)
 8005790:	40ca      	lsrs	r2, r1
 8005792:	07d6      	lsls	r6, r2, #31
 8005794:	d528      	bpl.n	80057e8 <__sflush_r+0xb8>
 8005796:	2200      	movs	r2, #0
 8005798:	6062      	str	r2, [r4, #4]
 800579a:	04d9      	lsls	r1, r3, #19
 800579c:	6922      	ldr	r2, [r4, #16]
 800579e:	6022      	str	r2, [r4, #0]
 80057a0:	d504      	bpl.n	80057ac <__sflush_r+0x7c>
 80057a2:	1c42      	adds	r2, r0, #1
 80057a4:	d101      	bne.n	80057aa <__sflush_r+0x7a>
 80057a6:	682b      	ldr	r3, [r5, #0]
 80057a8:	b903      	cbnz	r3, 80057ac <__sflush_r+0x7c>
 80057aa:	6560      	str	r0, [r4, #84]	; 0x54
 80057ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057ae:	602f      	str	r7, [r5, #0]
 80057b0:	2900      	cmp	r1, #0
 80057b2:	d0ca      	beq.n	800574a <__sflush_r+0x1a>
 80057b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057b8:	4299      	cmp	r1, r3
 80057ba:	d002      	beq.n	80057c2 <__sflush_r+0x92>
 80057bc:	4628      	mov	r0, r5
 80057be:	f7ff fae3 	bl	8004d88 <_free_r>
 80057c2:	2000      	movs	r0, #0
 80057c4:	6360      	str	r0, [r4, #52]	; 0x34
 80057c6:	e7c1      	b.n	800574c <__sflush_r+0x1c>
 80057c8:	6a21      	ldr	r1, [r4, #32]
 80057ca:	2301      	movs	r3, #1
 80057cc:	4628      	mov	r0, r5
 80057ce:	47b0      	blx	r6
 80057d0:	1c41      	adds	r1, r0, #1
 80057d2:	d1c7      	bne.n	8005764 <__sflush_r+0x34>
 80057d4:	682b      	ldr	r3, [r5, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0c4      	beq.n	8005764 <__sflush_r+0x34>
 80057da:	2b1d      	cmp	r3, #29
 80057dc:	d001      	beq.n	80057e2 <__sflush_r+0xb2>
 80057de:	2b16      	cmp	r3, #22
 80057e0:	d101      	bne.n	80057e6 <__sflush_r+0xb6>
 80057e2:	602f      	str	r7, [r5, #0]
 80057e4:	e7b1      	b.n	800574a <__sflush_r+0x1a>
 80057e6:	89a3      	ldrh	r3, [r4, #12]
 80057e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057ec:	81a3      	strh	r3, [r4, #12]
 80057ee:	e7ad      	b.n	800574c <__sflush_r+0x1c>
 80057f0:	690f      	ldr	r7, [r1, #16]
 80057f2:	2f00      	cmp	r7, #0
 80057f4:	d0a9      	beq.n	800574a <__sflush_r+0x1a>
 80057f6:	0793      	lsls	r3, r2, #30
 80057f8:	680e      	ldr	r6, [r1, #0]
 80057fa:	bf08      	it	eq
 80057fc:	694b      	ldreq	r3, [r1, #20]
 80057fe:	600f      	str	r7, [r1, #0]
 8005800:	bf18      	it	ne
 8005802:	2300      	movne	r3, #0
 8005804:	eba6 0807 	sub.w	r8, r6, r7
 8005808:	608b      	str	r3, [r1, #8]
 800580a:	f1b8 0f00 	cmp.w	r8, #0
 800580e:	dd9c      	ble.n	800574a <__sflush_r+0x1a>
 8005810:	6a21      	ldr	r1, [r4, #32]
 8005812:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005814:	4643      	mov	r3, r8
 8005816:	463a      	mov	r2, r7
 8005818:	4628      	mov	r0, r5
 800581a:	47b0      	blx	r6
 800581c:	2800      	cmp	r0, #0
 800581e:	dc06      	bgt.n	800582e <__sflush_r+0xfe>
 8005820:	89a3      	ldrh	r3, [r4, #12]
 8005822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005826:	81a3      	strh	r3, [r4, #12]
 8005828:	f04f 30ff 	mov.w	r0, #4294967295
 800582c:	e78e      	b.n	800574c <__sflush_r+0x1c>
 800582e:	4407      	add	r7, r0
 8005830:	eba8 0800 	sub.w	r8, r8, r0
 8005834:	e7e9      	b.n	800580a <__sflush_r+0xda>
 8005836:	bf00      	nop
 8005838:	20400001 	.word	0x20400001

0800583c <_fflush_r>:
 800583c:	b538      	push	{r3, r4, r5, lr}
 800583e:	690b      	ldr	r3, [r1, #16]
 8005840:	4605      	mov	r5, r0
 8005842:	460c      	mov	r4, r1
 8005844:	b913      	cbnz	r3, 800584c <_fflush_r+0x10>
 8005846:	2500      	movs	r5, #0
 8005848:	4628      	mov	r0, r5
 800584a:	bd38      	pop	{r3, r4, r5, pc}
 800584c:	b118      	cbz	r0, 8005856 <_fflush_r+0x1a>
 800584e:	6983      	ldr	r3, [r0, #24]
 8005850:	b90b      	cbnz	r3, 8005856 <_fflush_r+0x1a>
 8005852:	f000 f887 	bl	8005964 <__sinit>
 8005856:	4b14      	ldr	r3, [pc, #80]	; (80058a8 <_fflush_r+0x6c>)
 8005858:	429c      	cmp	r4, r3
 800585a:	d11b      	bne.n	8005894 <_fflush_r+0x58>
 800585c:	686c      	ldr	r4, [r5, #4]
 800585e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0ef      	beq.n	8005846 <_fflush_r+0xa>
 8005866:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005868:	07d0      	lsls	r0, r2, #31
 800586a:	d404      	bmi.n	8005876 <_fflush_r+0x3a>
 800586c:	0599      	lsls	r1, r3, #22
 800586e:	d402      	bmi.n	8005876 <_fflush_r+0x3a>
 8005870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005872:	f000 f915 	bl	8005aa0 <__retarget_lock_acquire_recursive>
 8005876:	4628      	mov	r0, r5
 8005878:	4621      	mov	r1, r4
 800587a:	f7ff ff59 	bl	8005730 <__sflush_r>
 800587e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005880:	07da      	lsls	r2, r3, #31
 8005882:	4605      	mov	r5, r0
 8005884:	d4e0      	bmi.n	8005848 <_fflush_r+0xc>
 8005886:	89a3      	ldrh	r3, [r4, #12]
 8005888:	059b      	lsls	r3, r3, #22
 800588a:	d4dd      	bmi.n	8005848 <_fflush_r+0xc>
 800588c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800588e:	f000 f908 	bl	8005aa2 <__retarget_lock_release_recursive>
 8005892:	e7d9      	b.n	8005848 <_fflush_r+0xc>
 8005894:	4b05      	ldr	r3, [pc, #20]	; (80058ac <_fflush_r+0x70>)
 8005896:	429c      	cmp	r4, r3
 8005898:	d101      	bne.n	800589e <_fflush_r+0x62>
 800589a:	68ac      	ldr	r4, [r5, #8]
 800589c:	e7df      	b.n	800585e <_fflush_r+0x22>
 800589e:	4b04      	ldr	r3, [pc, #16]	; (80058b0 <_fflush_r+0x74>)
 80058a0:	429c      	cmp	r4, r3
 80058a2:	bf08      	it	eq
 80058a4:	68ec      	ldreq	r4, [r5, #12]
 80058a6:	e7da      	b.n	800585e <_fflush_r+0x22>
 80058a8:	08006164 	.word	0x08006164
 80058ac:	08006184 	.word	0x08006184
 80058b0:	08006144 	.word	0x08006144

080058b4 <std>:
 80058b4:	2300      	movs	r3, #0
 80058b6:	b510      	push	{r4, lr}
 80058b8:	4604      	mov	r4, r0
 80058ba:	e9c0 3300 	strd	r3, r3, [r0]
 80058be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058c2:	6083      	str	r3, [r0, #8]
 80058c4:	8181      	strh	r1, [r0, #12]
 80058c6:	6643      	str	r3, [r0, #100]	; 0x64
 80058c8:	81c2      	strh	r2, [r0, #14]
 80058ca:	6183      	str	r3, [r0, #24]
 80058cc:	4619      	mov	r1, r3
 80058ce:	2208      	movs	r2, #8
 80058d0:	305c      	adds	r0, #92	; 0x5c
 80058d2:	f7fd fb9f 	bl	8003014 <memset>
 80058d6:	4b05      	ldr	r3, [pc, #20]	; (80058ec <std+0x38>)
 80058d8:	6263      	str	r3, [r4, #36]	; 0x24
 80058da:	4b05      	ldr	r3, [pc, #20]	; (80058f0 <std+0x3c>)
 80058dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80058de:	4b05      	ldr	r3, [pc, #20]	; (80058f4 <std+0x40>)
 80058e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058e2:	4b05      	ldr	r3, [pc, #20]	; (80058f8 <std+0x44>)
 80058e4:	6224      	str	r4, [r4, #32]
 80058e6:	6323      	str	r3, [r4, #48]	; 0x30
 80058e8:	bd10      	pop	{r4, pc}
 80058ea:	bf00      	nop
 80058ec:	08005c05 	.word	0x08005c05
 80058f0:	08005c27 	.word	0x08005c27
 80058f4:	08005c5f 	.word	0x08005c5f
 80058f8:	08005c83 	.word	0x08005c83

080058fc <_cleanup_r>:
 80058fc:	4901      	ldr	r1, [pc, #4]	; (8005904 <_cleanup_r+0x8>)
 80058fe:	f000 b8af 	b.w	8005a60 <_fwalk_reent>
 8005902:	bf00      	nop
 8005904:	0800583d 	.word	0x0800583d

08005908 <__sfmoreglue>:
 8005908:	b570      	push	{r4, r5, r6, lr}
 800590a:	1e4a      	subs	r2, r1, #1
 800590c:	2568      	movs	r5, #104	; 0x68
 800590e:	4355      	muls	r5, r2
 8005910:	460e      	mov	r6, r1
 8005912:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005916:	f7ff fa87 	bl	8004e28 <_malloc_r>
 800591a:	4604      	mov	r4, r0
 800591c:	b140      	cbz	r0, 8005930 <__sfmoreglue+0x28>
 800591e:	2100      	movs	r1, #0
 8005920:	e9c0 1600 	strd	r1, r6, [r0]
 8005924:	300c      	adds	r0, #12
 8005926:	60a0      	str	r0, [r4, #8]
 8005928:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800592c:	f7fd fb72 	bl	8003014 <memset>
 8005930:	4620      	mov	r0, r4
 8005932:	bd70      	pop	{r4, r5, r6, pc}

08005934 <__sfp_lock_acquire>:
 8005934:	4801      	ldr	r0, [pc, #4]	; (800593c <__sfp_lock_acquire+0x8>)
 8005936:	f000 b8b3 	b.w	8005aa0 <__retarget_lock_acquire_recursive>
 800593a:	bf00      	nop
 800593c:	20000260 	.word	0x20000260

08005940 <__sfp_lock_release>:
 8005940:	4801      	ldr	r0, [pc, #4]	; (8005948 <__sfp_lock_release+0x8>)
 8005942:	f000 b8ae 	b.w	8005aa2 <__retarget_lock_release_recursive>
 8005946:	bf00      	nop
 8005948:	20000260 	.word	0x20000260

0800594c <__sinit_lock_acquire>:
 800594c:	4801      	ldr	r0, [pc, #4]	; (8005954 <__sinit_lock_acquire+0x8>)
 800594e:	f000 b8a7 	b.w	8005aa0 <__retarget_lock_acquire_recursive>
 8005952:	bf00      	nop
 8005954:	2000025b 	.word	0x2000025b

08005958 <__sinit_lock_release>:
 8005958:	4801      	ldr	r0, [pc, #4]	; (8005960 <__sinit_lock_release+0x8>)
 800595a:	f000 b8a2 	b.w	8005aa2 <__retarget_lock_release_recursive>
 800595e:	bf00      	nop
 8005960:	2000025b 	.word	0x2000025b

08005964 <__sinit>:
 8005964:	b510      	push	{r4, lr}
 8005966:	4604      	mov	r4, r0
 8005968:	f7ff fff0 	bl	800594c <__sinit_lock_acquire>
 800596c:	69a3      	ldr	r3, [r4, #24]
 800596e:	b11b      	cbz	r3, 8005978 <__sinit+0x14>
 8005970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005974:	f7ff bff0 	b.w	8005958 <__sinit_lock_release>
 8005978:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800597c:	6523      	str	r3, [r4, #80]	; 0x50
 800597e:	4b13      	ldr	r3, [pc, #76]	; (80059cc <__sinit+0x68>)
 8005980:	4a13      	ldr	r2, [pc, #76]	; (80059d0 <__sinit+0x6c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	62a2      	str	r2, [r4, #40]	; 0x28
 8005986:	42a3      	cmp	r3, r4
 8005988:	bf04      	itt	eq
 800598a:	2301      	moveq	r3, #1
 800598c:	61a3      	streq	r3, [r4, #24]
 800598e:	4620      	mov	r0, r4
 8005990:	f000 f820 	bl	80059d4 <__sfp>
 8005994:	6060      	str	r0, [r4, #4]
 8005996:	4620      	mov	r0, r4
 8005998:	f000 f81c 	bl	80059d4 <__sfp>
 800599c:	60a0      	str	r0, [r4, #8]
 800599e:	4620      	mov	r0, r4
 80059a0:	f000 f818 	bl	80059d4 <__sfp>
 80059a4:	2200      	movs	r2, #0
 80059a6:	60e0      	str	r0, [r4, #12]
 80059a8:	2104      	movs	r1, #4
 80059aa:	6860      	ldr	r0, [r4, #4]
 80059ac:	f7ff ff82 	bl	80058b4 <std>
 80059b0:	68a0      	ldr	r0, [r4, #8]
 80059b2:	2201      	movs	r2, #1
 80059b4:	2109      	movs	r1, #9
 80059b6:	f7ff ff7d 	bl	80058b4 <std>
 80059ba:	68e0      	ldr	r0, [r4, #12]
 80059bc:	2202      	movs	r2, #2
 80059be:	2112      	movs	r1, #18
 80059c0:	f7ff ff78 	bl	80058b4 <std>
 80059c4:	2301      	movs	r3, #1
 80059c6:	61a3      	str	r3, [r4, #24]
 80059c8:	e7d2      	b.n	8005970 <__sinit+0xc>
 80059ca:	bf00      	nop
 80059cc:	08005dc0 	.word	0x08005dc0
 80059d0:	080058fd 	.word	0x080058fd

080059d4 <__sfp>:
 80059d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d6:	4607      	mov	r7, r0
 80059d8:	f7ff ffac 	bl	8005934 <__sfp_lock_acquire>
 80059dc:	4b1e      	ldr	r3, [pc, #120]	; (8005a58 <__sfp+0x84>)
 80059de:	681e      	ldr	r6, [r3, #0]
 80059e0:	69b3      	ldr	r3, [r6, #24]
 80059e2:	b913      	cbnz	r3, 80059ea <__sfp+0x16>
 80059e4:	4630      	mov	r0, r6
 80059e6:	f7ff ffbd 	bl	8005964 <__sinit>
 80059ea:	3648      	adds	r6, #72	; 0x48
 80059ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80059f0:	3b01      	subs	r3, #1
 80059f2:	d503      	bpl.n	80059fc <__sfp+0x28>
 80059f4:	6833      	ldr	r3, [r6, #0]
 80059f6:	b30b      	cbz	r3, 8005a3c <__sfp+0x68>
 80059f8:	6836      	ldr	r6, [r6, #0]
 80059fa:	e7f7      	b.n	80059ec <__sfp+0x18>
 80059fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a00:	b9d5      	cbnz	r5, 8005a38 <__sfp+0x64>
 8005a02:	4b16      	ldr	r3, [pc, #88]	; (8005a5c <__sfp+0x88>)
 8005a04:	60e3      	str	r3, [r4, #12]
 8005a06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a0a:	6665      	str	r5, [r4, #100]	; 0x64
 8005a0c:	f000 f847 	bl	8005a9e <__retarget_lock_init_recursive>
 8005a10:	f7ff ff96 	bl	8005940 <__sfp_lock_release>
 8005a14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005a18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005a1c:	6025      	str	r5, [r4, #0]
 8005a1e:	61a5      	str	r5, [r4, #24]
 8005a20:	2208      	movs	r2, #8
 8005a22:	4629      	mov	r1, r5
 8005a24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005a28:	f7fd faf4 	bl	8003014 <memset>
 8005a2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005a30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005a34:	4620      	mov	r0, r4
 8005a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a38:	3468      	adds	r4, #104	; 0x68
 8005a3a:	e7d9      	b.n	80059f0 <__sfp+0x1c>
 8005a3c:	2104      	movs	r1, #4
 8005a3e:	4638      	mov	r0, r7
 8005a40:	f7ff ff62 	bl	8005908 <__sfmoreglue>
 8005a44:	4604      	mov	r4, r0
 8005a46:	6030      	str	r0, [r6, #0]
 8005a48:	2800      	cmp	r0, #0
 8005a4a:	d1d5      	bne.n	80059f8 <__sfp+0x24>
 8005a4c:	f7ff ff78 	bl	8005940 <__sfp_lock_release>
 8005a50:	230c      	movs	r3, #12
 8005a52:	603b      	str	r3, [r7, #0]
 8005a54:	e7ee      	b.n	8005a34 <__sfp+0x60>
 8005a56:	bf00      	nop
 8005a58:	08005dc0 	.word	0x08005dc0
 8005a5c:	ffff0001 	.word	0xffff0001

08005a60 <_fwalk_reent>:
 8005a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a64:	4606      	mov	r6, r0
 8005a66:	4688      	mov	r8, r1
 8005a68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a6c:	2700      	movs	r7, #0
 8005a6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a72:	f1b9 0901 	subs.w	r9, r9, #1
 8005a76:	d505      	bpl.n	8005a84 <_fwalk_reent+0x24>
 8005a78:	6824      	ldr	r4, [r4, #0]
 8005a7a:	2c00      	cmp	r4, #0
 8005a7c:	d1f7      	bne.n	8005a6e <_fwalk_reent+0xe>
 8005a7e:	4638      	mov	r0, r7
 8005a80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a84:	89ab      	ldrh	r3, [r5, #12]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d907      	bls.n	8005a9a <_fwalk_reent+0x3a>
 8005a8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	d003      	beq.n	8005a9a <_fwalk_reent+0x3a>
 8005a92:	4629      	mov	r1, r5
 8005a94:	4630      	mov	r0, r6
 8005a96:	47c0      	blx	r8
 8005a98:	4307      	orrs	r7, r0
 8005a9a:	3568      	adds	r5, #104	; 0x68
 8005a9c:	e7e9      	b.n	8005a72 <_fwalk_reent+0x12>

08005a9e <__retarget_lock_init_recursive>:
 8005a9e:	4770      	bx	lr

08005aa0 <__retarget_lock_acquire_recursive>:
 8005aa0:	4770      	bx	lr

08005aa2 <__retarget_lock_release_recursive>:
 8005aa2:	4770      	bx	lr

08005aa4 <__swhatbuf_r>:
 8005aa4:	b570      	push	{r4, r5, r6, lr}
 8005aa6:	460e      	mov	r6, r1
 8005aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aac:	2900      	cmp	r1, #0
 8005aae:	b096      	sub	sp, #88	; 0x58
 8005ab0:	4614      	mov	r4, r2
 8005ab2:	461d      	mov	r5, r3
 8005ab4:	da07      	bge.n	8005ac6 <__swhatbuf_r+0x22>
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	602b      	str	r3, [r5, #0]
 8005aba:	89b3      	ldrh	r3, [r6, #12]
 8005abc:	061a      	lsls	r2, r3, #24
 8005abe:	d410      	bmi.n	8005ae2 <__swhatbuf_r+0x3e>
 8005ac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ac4:	e00e      	b.n	8005ae4 <__swhatbuf_r+0x40>
 8005ac6:	466a      	mov	r2, sp
 8005ac8:	f000 f902 	bl	8005cd0 <_fstat_r>
 8005acc:	2800      	cmp	r0, #0
 8005ace:	dbf2      	blt.n	8005ab6 <__swhatbuf_r+0x12>
 8005ad0:	9a01      	ldr	r2, [sp, #4]
 8005ad2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ad6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ada:	425a      	negs	r2, r3
 8005adc:	415a      	adcs	r2, r3
 8005ade:	602a      	str	r2, [r5, #0]
 8005ae0:	e7ee      	b.n	8005ac0 <__swhatbuf_r+0x1c>
 8005ae2:	2340      	movs	r3, #64	; 0x40
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	6023      	str	r3, [r4, #0]
 8005ae8:	b016      	add	sp, #88	; 0x58
 8005aea:	bd70      	pop	{r4, r5, r6, pc}

08005aec <__smakebuf_r>:
 8005aec:	898b      	ldrh	r3, [r1, #12]
 8005aee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005af0:	079d      	lsls	r5, r3, #30
 8005af2:	4606      	mov	r6, r0
 8005af4:	460c      	mov	r4, r1
 8005af6:	d507      	bpl.n	8005b08 <__smakebuf_r+0x1c>
 8005af8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005afc:	6023      	str	r3, [r4, #0]
 8005afe:	6123      	str	r3, [r4, #16]
 8005b00:	2301      	movs	r3, #1
 8005b02:	6163      	str	r3, [r4, #20]
 8005b04:	b002      	add	sp, #8
 8005b06:	bd70      	pop	{r4, r5, r6, pc}
 8005b08:	ab01      	add	r3, sp, #4
 8005b0a:	466a      	mov	r2, sp
 8005b0c:	f7ff ffca 	bl	8005aa4 <__swhatbuf_r>
 8005b10:	9900      	ldr	r1, [sp, #0]
 8005b12:	4605      	mov	r5, r0
 8005b14:	4630      	mov	r0, r6
 8005b16:	f7ff f987 	bl	8004e28 <_malloc_r>
 8005b1a:	b948      	cbnz	r0, 8005b30 <__smakebuf_r+0x44>
 8005b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b20:	059a      	lsls	r2, r3, #22
 8005b22:	d4ef      	bmi.n	8005b04 <__smakebuf_r+0x18>
 8005b24:	f023 0303 	bic.w	r3, r3, #3
 8005b28:	f043 0302 	orr.w	r3, r3, #2
 8005b2c:	81a3      	strh	r3, [r4, #12]
 8005b2e:	e7e3      	b.n	8005af8 <__smakebuf_r+0xc>
 8005b30:	4b0d      	ldr	r3, [pc, #52]	; (8005b68 <__smakebuf_r+0x7c>)
 8005b32:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b34:	89a3      	ldrh	r3, [r4, #12]
 8005b36:	6020      	str	r0, [r4, #0]
 8005b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b3c:	81a3      	strh	r3, [r4, #12]
 8005b3e:	9b00      	ldr	r3, [sp, #0]
 8005b40:	6163      	str	r3, [r4, #20]
 8005b42:	9b01      	ldr	r3, [sp, #4]
 8005b44:	6120      	str	r0, [r4, #16]
 8005b46:	b15b      	cbz	r3, 8005b60 <__smakebuf_r+0x74>
 8005b48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b4c:	4630      	mov	r0, r6
 8005b4e:	f000 f8d1 	bl	8005cf4 <_isatty_r>
 8005b52:	b128      	cbz	r0, 8005b60 <__smakebuf_r+0x74>
 8005b54:	89a3      	ldrh	r3, [r4, #12]
 8005b56:	f023 0303 	bic.w	r3, r3, #3
 8005b5a:	f043 0301 	orr.w	r3, r3, #1
 8005b5e:	81a3      	strh	r3, [r4, #12]
 8005b60:	89a0      	ldrh	r0, [r4, #12]
 8005b62:	4305      	orrs	r5, r0
 8005b64:	81a5      	strh	r5, [r4, #12]
 8005b66:	e7cd      	b.n	8005b04 <__smakebuf_r+0x18>
 8005b68:	080058fd 	.word	0x080058fd

08005b6c <_malloc_usable_size_r>:
 8005b6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b70:	1f18      	subs	r0, r3, #4
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	bfbc      	itt	lt
 8005b76:	580b      	ldrlt	r3, [r1, r0]
 8005b78:	18c0      	addlt	r0, r0, r3
 8005b7a:	4770      	bx	lr

08005b7c <_raise_r>:
 8005b7c:	291f      	cmp	r1, #31
 8005b7e:	b538      	push	{r3, r4, r5, lr}
 8005b80:	4604      	mov	r4, r0
 8005b82:	460d      	mov	r5, r1
 8005b84:	d904      	bls.n	8005b90 <_raise_r+0x14>
 8005b86:	2316      	movs	r3, #22
 8005b88:	6003      	str	r3, [r0, #0]
 8005b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b8e:	bd38      	pop	{r3, r4, r5, pc}
 8005b90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005b92:	b112      	cbz	r2, 8005b9a <_raise_r+0x1e>
 8005b94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005b98:	b94b      	cbnz	r3, 8005bae <_raise_r+0x32>
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	f000 f830 	bl	8005c00 <_getpid_r>
 8005ba0:	462a      	mov	r2, r5
 8005ba2:	4601      	mov	r1, r0
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005baa:	f000 b817 	b.w	8005bdc <_kill_r>
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d00a      	beq.n	8005bc8 <_raise_r+0x4c>
 8005bb2:	1c59      	adds	r1, r3, #1
 8005bb4:	d103      	bne.n	8005bbe <_raise_r+0x42>
 8005bb6:	2316      	movs	r3, #22
 8005bb8:	6003      	str	r3, [r0, #0]
 8005bba:	2001      	movs	r0, #1
 8005bbc:	e7e7      	b.n	8005b8e <_raise_r+0x12>
 8005bbe:	2400      	movs	r4, #0
 8005bc0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	4798      	blx	r3
 8005bc8:	2000      	movs	r0, #0
 8005bca:	e7e0      	b.n	8005b8e <_raise_r+0x12>

08005bcc <raise>:
 8005bcc:	4b02      	ldr	r3, [pc, #8]	; (8005bd8 <raise+0xc>)
 8005bce:	4601      	mov	r1, r0
 8005bd0:	6818      	ldr	r0, [r3, #0]
 8005bd2:	f7ff bfd3 	b.w	8005b7c <_raise_r>
 8005bd6:	bf00      	nop
 8005bd8:	2000000c 	.word	0x2000000c

08005bdc <_kill_r>:
 8005bdc:	b538      	push	{r3, r4, r5, lr}
 8005bde:	4d07      	ldr	r5, [pc, #28]	; (8005bfc <_kill_r+0x20>)
 8005be0:	2300      	movs	r3, #0
 8005be2:	4604      	mov	r4, r0
 8005be4:	4608      	mov	r0, r1
 8005be6:	4611      	mov	r1, r2
 8005be8:	602b      	str	r3, [r5, #0]
 8005bea:	f7fc f8e3 	bl	8001db4 <_kill>
 8005bee:	1c43      	adds	r3, r0, #1
 8005bf0:	d102      	bne.n	8005bf8 <_kill_r+0x1c>
 8005bf2:	682b      	ldr	r3, [r5, #0]
 8005bf4:	b103      	cbz	r3, 8005bf8 <_kill_r+0x1c>
 8005bf6:	6023      	str	r3, [r4, #0]
 8005bf8:	bd38      	pop	{r3, r4, r5, pc}
 8005bfa:	bf00      	nop
 8005bfc:	20000254 	.word	0x20000254

08005c00 <_getpid_r>:
 8005c00:	f7fc b8d0 	b.w	8001da4 <_getpid>

08005c04 <__sread>:
 8005c04:	b510      	push	{r4, lr}
 8005c06:	460c      	mov	r4, r1
 8005c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c0c:	f000 f894 	bl	8005d38 <_read_r>
 8005c10:	2800      	cmp	r0, #0
 8005c12:	bfab      	itete	ge
 8005c14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c16:	89a3      	ldrhlt	r3, [r4, #12]
 8005c18:	181b      	addge	r3, r3, r0
 8005c1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c1e:	bfac      	ite	ge
 8005c20:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c22:	81a3      	strhlt	r3, [r4, #12]
 8005c24:	bd10      	pop	{r4, pc}

08005c26 <__swrite>:
 8005c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c2a:	461f      	mov	r7, r3
 8005c2c:	898b      	ldrh	r3, [r1, #12]
 8005c2e:	05db      	lsls	r3, r3, #23
 8005c30:	4605      	mov	r5, r0
 8005c32:	460c      	mov	r4, r1
 8005c34:	4616      	mov	r6, r2
 8005c36:	d505      	bpl.n	8005c44 <__swrite+0x1e>
 8005c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f000 f868 	bl	8005d14 <_lseek_r>
 8005c44:	89a3      	ldrh	r3, [r4, #12]
 8005c46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c4e:	81a3      	strh	r3, [r4, #12]
 8005c50:	4632      	mov	r2, r6
 8005c52:	463b      	mov	r3, r7
 8005c54:	4628      	mov	r0, r5
 8005c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c5a:	f000 b817 	b.w	8005c8c <_write_r>

08005c5e <__sseek>:
 8005c5e:	b510      	push	{r4, lr}
 8005c60:	460c      	mov	r4, r1
 8005c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c66:	f000 f855 	bl	8005d14 <_lseek_r>
 8005c6a:	1c43      	adds	r3, r0, #1
 8005c6c:	89a3      	ldrh	r3, [r4, #12]
 8005c6e:	bf15      	itete	ne
 8005c70:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c7a:	81a3      	strheq	r3, [r4, #12]
 8005c7c:	bf18      	it	ne
 8005c7e:	81a3      	strhne	r3, [r4, #12]
 8005c80:	bd10      	pop	{r4, pc}

08005c82 <__sclose>:
 8005c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c86:	f000 b813 	b.w	8005cb0 <_close_r>
	...

08005c8c <_write_r>:
 8005c8c:	b538      	push	{r3, r4, r5, lr}
 8005c8e:	4d07      	ldr	r5, [pc, #28]	; (8005cac <_write_r+0x20>)
 8005c90:	4604      	mov	r4, r0
 8005c92:	4608      	mov	r0, r1
 8005c94:	4611      	mov	r1, r2
 8005c96:	2200      	movs	r2, #0
 8005c98:	602a      	str	r2, [r5, #0]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f7fc f8c1 	bl	8001e22 <_write>
 8005ca0:	1c43      	adds	r3, r0, #1
 8005ca2:	d102      	bne.n	8005caa <_write_r+0x1e>
 8005ca4:	682b      	ldr	r3, [r5, #0]
 8005ca6:	b103      	cbz	r3, 8005caa <_write_r+0x1e>
 8005ca8:	6023      	str	r3, [r4, #0]
 8005caa:	bd38      	pop	{r3, r4, r5, pc}
 8005cac:	20000254 	.word	0x20000254

08005cb0 <_close_r>:
 8005cb0:	b538      	push	{r3, r4, r5, lr}
 8005cb2:	4d06      	ldr	r5, [pc, #24]	; (8005ccc <_close_r+0x1c>)
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	4604      	mov	r4, r0
 8005cb8:	4608      	mov	r0, r1
 8005cba:	602b      	str	r3, [r5, #0]
 8005cbc:	f7fc f8cd 	bl	8001e5a <_close>
 8005cc0:	1c43      	adds	r3, r0, #1
 8005cc2:	d102      	bne.n	8005cca <_close_r+0x1a>
 8005cc4:	682b      	ldr	r3, [r5, #0]
 8005cc6:	b103      	cbz	r3, 8005cca <_close_r+0x1a>
 8005cc8:	6023      	str	r3, [r4, #0]
 8005cca:	bd38      	pop	{r3, r4, r5, pc}
 8005ccc:	20000254 	.word	0x20000254

08005cd0 <_fstat_r>:
 8005cd0:	b538      	push	{r3, r4, r5, lr}
 8005cd2:	4d07      	ldr	r5, [pc, #28]	; (8005cf0 <_fstat_r+0x20>)
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	4604      	mov	r4, r0
 8005cd8:	4608      	mov	r0, r1
 8005cda:	4611      	mov	r1, r2
 8005cdc:	602b      	str	r3, [r5, #0]
 8005cde:	f7fc f8c8 	bl	8001e72 <_fstat>
 8005ce2:	1c43      	adds	r3, r0, #1
 8005ce4:	d102      	bne.n	8005cec <_fstat_r+0x1c>
 8005ce6:	682b      	ldr	r3, [r5, #0]
 8005ce8:	b103      	cbz	r3, 8005cec <_fstat_r+0x1c>
 8005cea:	6023      	str	r3, [r4, #0]
 8005cec:	bd38      	pop	{r3, r4, r5, pc}
 8005cee:	bf00      	nop
 8005cf0:	20000254 	.word	0x20000254

08005cf4 <_isatty_r>:
 8005cf4:	b538      	push	{r3, r4, r5, lr}
 8005cf6:	4d06      	ldr	r5, [pc, #24]	; (8005d10 <_isatty_r+0x1c>)
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	4604      	mov	r4, r0
 8005cfc:	4608      	mov	r0, r1
 8005cfe:	602b      	str	r3, [r5, #0]
 8005d00:	f7fc f8c7 	bl	8001e92 <_isatty>
 8005d04:	1c43      	adds	r3, r0, #1
 8005d06:	d102      	bne.n	8005d0e <_isatty_r+0x1a>
 8005d08:	682b      	ldr	r3, [r5, #0]
 8005d0a:	b103      	cbz	r3, 8005d0e <_isatty_r+0x1a>
 8005d0c:	6023      	str	r3, [r4, #0]
 8005d0e:	bd38      	pop	{r3, r4, r5, pc}
 8005d10:	20000254 	.word	0x20000254

08005d14 <_lseek_r>:
 8005d14:	b538      	push	{r3, r4, r5, lr}
 8005d16:	4d07      	ldr	r5, [pc, #28]	; (8005d34 <_lseek_r+0x20>)
 8005d18:	4604      	mov	r4, r0
 8005d1a:	4608      	mov	r0, r1
 8005d1c:	4611      	mov	r1, r2
 8005d1e:	2200      	movs	r2, #0
 8005d20:	602a      	str	r2, [r5, #0]
 8005d22:	461a      	mov	r2, r3
 8005d24:	f7fc f8c0 	bl	8001ea8 <_lseek>
 8005d28:	1c43      	adds	r3, r0, #1
 8005d2a:	d102      	bne.n	8005d32 <_lseek_r+0x1e>
 8005d2c:	682b      	ldr	r3, [r5, #0]
 8005d2e:	b103      	cbz	r3, 8005d32 <_lseek_r+0x1e>
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	bd38      	pop	{r3, r4, r5, pc}
 8005d34:	20000254 	.word	0x20000254

08005d38 <_read_r>:
 8005d38:	b538      	push	{r3, r4, r5, lr}
 8005d3a:	4d07      	ldr	r5, [pc, #28]	; (8005d58 <_read_r+0x20>)
 8005d3c:	4604      	mov	r4, r0
 8005d3e:	4608      	mov	r0, r1
 8005d40:	4611      	mov	r1, r2
 8005d42:	2200      	movs	r2, #0
 8005d44:	602a      	str	r2, [r5, #0]
 8005d46:	461a      	mov	r2, r3
 8005d48:	f7fc f84e 	bl	8001de8 <_read>
 8005d4c:	1c43      	adds	r3, r0, #1
 8005d4e:	d102      	bne.n	8005d56 <_read_r+0x1e>
 8005d50:	682b      	ldr	r3, [r5, #0]
 8005d52:	b103      	cbz	r3, 8005d56 <_read_r+0x1e>
 8005d54:	6023      	str	r3, [r4, #0]
 8005d56:	bd38      	pop	{r3, r4, r5, pc}
 8005d58:	20000254 	.word	0x20000254

08005d5c <_init>:
 8005d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5e:	bf00      	nop
 8005d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d62:	bc08      	pop	{r3}
 8005d64:	469e      	mov	lr, r3
 8005d66:	4770      	bx	lr

08005d68 <_fini>:
 8005d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6a:	bf00      	nop
 8005d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d6e:	bc08      	pop	{r3}
 8005d70:	469e      	mov	lr, r3
 8005d72:	4770      	bx	lr

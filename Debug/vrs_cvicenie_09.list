
vrs_cvicenie_09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007684  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08007818  08007818  00017818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ca8  08007ca8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007ca8  08007ca8  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ca8  08007ca8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ca8  08007ca8  00017ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cac  08007cac  00017cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007cb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000080  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000025c  2000025c  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f7c3  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a14  00000000  00000000  0002f9cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000988  00000000  00000000  000323e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000860  00000000  00000000  00032d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019a2e  00000000  00000000  000335d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009deb  00000000  00000000  0004cffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007df60  00000000  00000000  00056de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000d4d49  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003908  00000000  00000000  000d4d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080077fc 	.word	0x080077fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080077fc 	.word	0x080077fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	683a      	ldr	r2, [r7, #0]
 8000c56:	619a      	str	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	683a      	ldr	r2, [r7, #0]
 8000c72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <resetSegments>:
extern DisplayDigitData_ DisplayDigit_0;
extern DisplayDigitData_ DisplayDigit_1;
extern DisplayDigitData_ DisplayDigit_2;
extern DisplayDigitData_ DisplayDigit_3;
static uint8_t indexer = 0;
void resetSegments(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	SEGMENT_A_OFF;
 8000c84:	2102      	movs	r1, #2
 8000c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8a:	f7ff ffdd 	bl	8000c48 <LL_GPIO_SetOutputPin>
	SEGMENT_B_OFF;
 8000c8e:	2101      	movs	r1, #1
 8000c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c94:	f7ff ffd8 	bl	8000c48 <LL_GPIO_SetOutputPin>
	SEGMENT_C_OFF;
 8000c98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca0:	f7ff ffd2 	bl	8000c48 <LL_GPIO_SetOutputPin>
	SEGMENT_D_OFF;
 8000ca4:	2120      	movs	r1, #32
 8000ca6:	480c      	ldr	r0, [pc, #48]	; (8000cd8 <resetSegments+0x58>)
 8000ca8:	f7ff ffce 	bl	8000c48 <LL_GPIO_SetOutputPin>
	SEGMENT_E_OFF;
 8000cac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb4:	f7ff ffc8 	bl	8000c48 <LL_GPIO_SetOutputPin>
	SEGMENT_F_OFF;
 8000cb8:	2108      	movs	r1, #8
 8000cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cbe:	f7ff ffc3 	bl	8000c48 <LL_GPIO_SetOutputPin>
	SEGMENT_G_OFF;
 8000cc2:	2110      	movs	r1, #16
 8000cc4:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <resetSegments+0x58>)
 8000cc6:	f7ff ffbf 	bl	8000c48 <LL_GPIO_SetOutputPin>
	SEGMENT_DP_OFF;
 8000cca:	2102      	movs	r1, #2
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <resetSegments+0x58>)
 8000cce:	f7ff ffbb 	bl	8000c48 <LL_GPIO_SetOutputPin>
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	48000400 	.word	0x48000400

08000cdc <resetDigits>:
	SEGMENT_F_ON;
	SEGMENT_G_ON;
	SEGMENT_DP_ON;
}

void resetDigits(void) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	DIGIT_0_OFF;
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	480d      	ldr	r0, [pc, #52]	; (8000d18 <resetDigits+0x3c>)
 8000ce4:	f7ff ffbe 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	DIGIT_1_OFF;
 8000ce8:	2110      	movs	r1, #16
 8000cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cee:	f7ff ffb9 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	DIGIT_2_OFF;
 8000cf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfa:	f7ff ffb3 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	DIGIT_3_OFF;
 8000cfe:	2104      	movs	r1, #4
 8000d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d04:	f7ff ffae 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	DIGIT_TIME_OFF;
 8000d08:	2180      	movs	r1, #128	; 0x80
 8000d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0e:	f7ff ffa9 	bl	8000c64 <LL_GPIO_ResetOutputPin>
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	48000400 	.word	0x48000400

08000d1c <segmentsOn>:
	DIGIT_2_ON;
	DIGIT_3_ON;
	DIGIT_TIME_ON;
}

void segmentsOn(uint8_t index, SegmentDigitStruct digitStruct) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	e883 0006 	stmia.w	r3, {r1, r2}
 8000d28:	4603      	mov	r3, r0
 8000d2a:	73fb      	strb	r3, [r7, #15]
//	resetSegments();
	if (digitStruct.sA)
 8000d2c:	793b      	ldrb	r3, [r7, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d005      	beq.n	8000d3e <segmentsOn+0x22>
		SEGMENT_A_ON;
 8000d32:	2102      	movs	r1, #2
 8000d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d38:	f7ff ff94 	bl	8000c64 <LL_GPIO_ResetOutputPin>
 8000d3c:	e004      	b.n	8000d48 <segmentsOn+0x2c>
	else SEGMENT_A_OFF;
 8000d3e:	2102      	movs	r1, #2
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d44:	f7ff ff80 	bl	8000c48 <LL_GPIO_SetOutputPin>
	if (digitStruct.sB)
 8000d48:	797b      	ldrb	r3, [r7, #5]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d005      	beq.n	8000d5a <segmentsOn+0x3e>
		SEGMENT_B_ON;
 8000d4e:	2101      	movs	r1, #1
 8000d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d54:	f7ff ff86 	bl	8000c64 <LL_GPIO_ResetOutputPin>
 8000d58:	e004      	b.n	8000d64 <segmentsOn+0x48>
	else SEGMENT_B_OFF;
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d60:	f7ff ff72 	bl	8000c48 <LL_GPIO_SetOutputPin>
	if (digitStruct.sC)
 8000d64:	79bb      	ldrb	r3, [r7, #6]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d006      	beq.n	8000d78 <segmentsOn+0x5c>
		SEGMENT_C_ON;
 8000d6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d72:	f7ff ff77 	bl	8000c64 <LL_GPIO_ResetOutputPin>
 8000d76:	e005      	b.n	8000d84 <segmentsOn+0x68>
	else SEGMENT_C_OFF;
 8000d78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d80:	f7ff ff62 	bl	8000c48 <LL_GPIO_SetOutputPin>
	if (digitStruct.sD)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d004      	beq.n	8000d94 <segmentsOn+0x78>
		SEGMENT_D_ON;
 8000d8a:	2120      	movs	r1, #32
 8000d8c:	4833      	ldr	r0, [pc, #204]	; (8000e5c <segmentsOn+0x140>)
 8000d8e:	f7ff ff69 	bl	8000c64 <LL_GPIO_ResetOutputPin>
 8000d92:	e003      	b.n	8000d9c <segmentsOn+0x80>
	else SEGMENT_D_OFF;
 8000d94:	2120      	movs	r1, #32
 8000d96:	4831      	ldr	r0, [pc, #196]	; (8000e5c <segmentsOn+0x140>)
 8000d98:	f7ff ff56 	bl	8000c48 <LL_GPIO_SetOutputPin>
	if (digitStruct.sE)
 8000d9c:	7a3b      	ldrb	r3, [r7, #8]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d006      	beq.n	8000db0 <segmentsOn+0x94>
		SEGMENT_E_ON;
 8000da2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000daa:	f7ff ff5b 	bl	8000c64 <LL_GPIO_ResetOutputPin>
 8000dae:	e005      	b.n	8000dbc <segmentsOn+0xa0>
	else SEGMENT_E_OFF;
 8000db0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db8:	f7ff ff46 	bl	8000c48 <LL_GPIO_SetOutputPin>
	if (digitStruct.sF)
 8000dbc:	7a7b      	ldrb	r3, [r7, #9]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d005      	beq.n	8000dce <segmentsOn+0xb2>
		SEGMENT_F_ON;
 8000dc2:	2108      	movs	r1, #8
 8000dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc8:	f7ff ff4c 	bl	8000c64 <LL_GPIO_ResetOutputPin>
 8000dcc:	e004      	b.n	8000dd8 <segmentsOn+0xbc>
	else SEGMENT_F_OFF;
 8000dce:	2108      	movs	r1, #8
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd4:	f7ff ff38 	bl	8000c48 <LL_GPIO_SetOutputPin>
	if (digitStruct.sG)
 8000dd8:	7abb      	ldrb	r3, [r7, #10]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d004      	beq.n	8000de8 <segmentsOn+0xcc>
		SEGMENT_G_ON;
 8000dde:	2110      	movs	r1, #16
 8000de0:	481e      	ldr	r0, [pc, #120]	; (8000e5c <segmentsOn+0x140>)
 8000de2:	f7ff ff3f 	bl	8000c64 <LL_GPIO_ResetOutputPin>
 8000de6:	e003      	b.n	8000df0 <segmentsOn+0xd4>
	else SEGMENT_G_OFF;
 8000de8:	2110      	movs	r1, #16
 8000dea:	481c      	ldr	r0, [pc, #112]	; (8000e5c <segmentsOn+0x140>)
 8000dec:	f7ff ff2c 	bl	8000c48 <LL_GPIO_SetOutputPin>
	if (digitStruct.sDot)
 8000df0:	7afb      	ldrb	r3, [r7, #11]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d004      	beq.n	8000e00 <segmentsOn+0xe4>
		SEGMENT_DP_ON;
 8000df6:	2102      	movs	r1, #2
 8000df8:	4818      	ldr	r0, [pc, #96]	; (8000e5c <segmentsOn+0x140>)
 8000dfa:	f7ff ff33 	bl	8000c64 <LL_GPIO_ResetOutputPin>
 8000dfe:	e003      	b.n	8000e08 <segmentsOn+0xec>
	else SEGMENT_DP_OFF;
 8000e00:	2102      	movs	r1, #2
 8000e02:	4816      	ldr	r0, [pc, #88]	; (8000e5c <segmentsOn+0x140>)
 8000e04:	f7ff ff20 	bl	8000c48 <LL_GPIO_SetOutputPin>

	resetDigits();
 8000e08:	f7ff ff68 	bl	8000cdc <resetDigits>
	if (index == 0)
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d104      	bne.n	8000e1c <segmentsOn+0x100>
		DIGIT_0_ON;
 8000e12:	2101      	movs	r1, #1
 8000e14:	4811      	ldr	r0, [pc, #68]	; (8000e5c <segmentsOn+0x140>)
 8000e16:	f7ff ff17 	bl	8000c48 <LL_GPIO_SetOutputPin>
		DIGIT_1_ON;
	else if (index == 2)
		DIGIT_2_ON;
	else if (index == 3)
		DIGIT_3_ON;
}
 8000e1a:	e01a      	b.n	8000e52 <segmentsOn+0x136>
	else if (index == 1)
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d105      	bne.n	8000e2e <segmentsOn+0x112>
		DIGIT_1_ON;
 8000e22:	2110      	movs	r1, #16
 8000e24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e28:	f7ff ff0e 	bl	8000c48 <LL_GPIO_SetOutputPin>
}
 8000e2c:	e011      	b.n	8000e52 <segmentsOn+0x136>
	else if (index == 2)
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d106      	bne.n	8000e42 <segmentsOn+0x126>
		DIGIT_2_ON;
 8000e34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3c:	f7ff ff04 	bl	8000c48 <LL_GPIO_SetOutputPin>
}
 8000e40:	e007      	b.n	8000e52 <segmentsOn+0x136>
	else if (index == 3)
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d104      	bne.n	8000e52 <segmentsOn+0x136>
		DIGIT_3_ON;
 8000e48:	2104      	movs	r1, #4
 8000e4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4e:	f7ff fefb 	bl	8000c48 <LL_GPIO_SetOutputPin>
}
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	48000400 	.word	0x48000400

08000e60 <displayCharOnDigit>:

void displayCharOnDigit(DisplayDigitData_ digitData) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	80b8      	strh	r0, [r7, #4]
	SegmentDigitStruct digitStruct = GetSegmentDigit(digitData.chr);
 8000e68:	797a      	ldrb	r2, [r7, #5]
 8000e6a:	f107 0308 	add.w	r3, r7, #8
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 f879 	bl	8000f68 <GetSegmentDigit>
	segmentsOn(digitData.index, digitStruct);
 8000e76:	7938      	ldrb	r0, [r7, #4]
 8000e78:	f107 0308 	add.w	r3, r7, #8
 8000e7c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000e80:	f7ff ff4c 	bl	8000d1c <segmentsOn>
}
 8000e84:	bf00      	nop
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <updateDisplay>:
void updateDisplay(void) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0

	switch (indexer) {
 8000e90:	4b30      	ldr	r3, [pc, #192]	; (8000f54 <updateDisplay+0xc8>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b03      	cmp	r3, #3
 8000e96:	d80b      	bhi.n	8000eb0 <updateDisplay+0x24>
 8000e98:	a201      	add	r2, pc, #4	; (adr r2, 8000ea0 <updateDisplay+0x14>)
 8000e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e9e:	bf00      	nop
 8000ea0:	08000ec1 	.word	0x08000ec1
 8000ea4:	08000ee5 	.word	0x08000ee5
 8000ea8:	08000f09 	.word	0x08000f09
 8000eac:	08000f2d 	.word	0x08000f2d
	default:
		resetDigits();
 8000eb0:	f7ff ff14 	bl	8000cdc <resetDigits>
		resetSegments();
 8000eb4:	f7ff fee4 	bl	8000c80 <resetSegments>
		indexer = 0;
 8000eb8:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <updateDisplay+0xc8>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
		break;
 8000ebe:	e047      	b.n	8000f50 <updateDisplay+0xc4>
	case 0:
		displayCharOnDigit(DisplayDigit_0);
 8000ec0:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <updateDisplay+0xcc>)
 8000ec2:	781a      	ldrb	r2, [r3, #0]
 8000ec4:	785b      	ldrb	r3, [r3, #1]
 8000ec6:	021b      	lsls	r3, r3, #8
 8000ec8:	431a      	orrs	r2, r3
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f362 030f 	bfi	r3, r2, #0, #16
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ffc5 	bl	8000e60 <displayCharOnDigit>
		indexer++;
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <updateDisplay+0xc8>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	3301      	adds	r3, #1
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <updateDisplay+0xc8>)
 8000ee0:	701a      	strb	r2, [r3, #0]
		break;
 8000ee2:	e035      	b.n	8000f50 <updateDisplay+0xc4>
	case 1:
		displayCharOnDigit(DisplayDigit_1);
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <updateDisplay+0xd0>)
 8000ee6:	781a      	ldrb	r2, [r3, #0]
 8000ee8:	785b      	ldrb	r3, [r3, #1]
 8000eea:	021b      	lsls	r3, r3, #8
 8000eec:	431a      	orrs	r2, r3
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f362 030f 	bfi	r3, r2, #0, #16
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ffb3 	bl	8000e60 <displayCharOnDigit>
		indexer++;
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <updateDisplay+0xc8>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	3301      	adds	r3, #1
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <updateDisplay+0xc8>)
 8000f04:	701a      	strb	r2, [r3, #0]
		break;
 8000f06:	e023      	b.n	8000f50 <updateDisplay+0xc4>
	case 2:
		displayCharOnDigit(DisplayDigit_2);
 8000f08:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <updateDisplay+0xd4>)
 8000f0a:	781a      	ldrb	r2, [r3, #0]
 8000f0c:	785b      	ldrb	r3, [r3, #1]
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	431a      	orrs	r2, r3
 8000f12:	2300      	movs	r3, #0
 8000f14:	f362 030f 	bfi	r3, r2, #0, #16
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ffa1 	bl	8000e60 <displayCharOnDigit>
		indexer++;
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <updateDisplay+0xc8>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	3301      	adds	r3, #1
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <updateDisplay+0xc8>)
 8000f28:	701a      	strb	r2, [r3, #0]
		break;
 8000f2a:	e011      	b.n	8000f50 <updateDisplay+0xc4>
	case 3:
		displayCharOnDigit(DisplayDigit_3);
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <updateDisplay+0xd8>)
 8000f2e:	781a      	ldrb	r2, [r3, #0]
 8000f30:	785b      	ldrb	r3, [r3, #1]
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	431a      	orrs	r2, r3
 8000f36:	2300      	movs	r3, #0
 8000f38:	f362 030f 	bfi	r3, r2, #0, #16
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff8f 	bl	8000e60 <displayCharOnDigit>
		indexer++;
 8000f42:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <updateDisplay+0xc8>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	3301      	adds	r3, #1
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4b02      	ldr	r3, [pc, #8]	; (8000f54 <updateDisplay+0xc8>)
 8000f4c:	701a      	strb	r2, [r3, #0]
		break;
 8000f4e:	bf00      	nop

	}
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200001f8 	.word	0x200001f8
 8000f58:	20000218 	.word	0x20000218
 8000f5c:	20000210 	.word	0x20000210
 8000f60:	2000020c 	.word	0x2000020c
 8000f64:	20000214 	.word	0x20000214

08000f68 <GetSegmentDigit>:
		0x08, // _
		0x01, // -
		0x80, // .,
		};

SegmentDigitStruct GetSegmentDigit(uint8_t chr) {
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	70fb      	strb	r3, [r7, #3]
	SegmentDigitStruct result;
	if ((chr >= '0' && chr <= '9') || (chr >= 'A' && chr <= 'Z')
 8000f74:	78fb      	ldrb	r3, [r7, #3]
 8000f76:	2b2f      	cmp	r3, #47	; 0x2f
 8000f78:	d902      	bls.n	8000f80 <GetSegmentDigit+0x18>
 8000f7a:	78fb      	ldrb	r3, [r7, #3]
 8000f7c:	2b39      	cmp	r3, #57	; 0x39
 8000f7e:	d912      	bls.n	8000fa6 <GetSegmentDigit+0x3e>
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	2b40      	cmp	r3, #64	; 0x40
 8000f84:	d902      	bls.n	8000f8c <GetSegmentDigit+0x24>
 8000f86:	78fb      	ldrb	r3, [r7, #3]
 8000f88:	2b5a      	cmp	r3, #90	; 0x5a
 8000f8a:	d90c      	bls.n	8000fa6 <GetSegmentDigit+0x3e>
			|| chr == '_' || chr == '.' || chr == ',' || chr == '-') {
 8000f8c:	78fb      	ldrb	r3, [r7, #3]
 8000f8e:	2b5f      	cmp	r3, #95	; 0x5f
 8000f90:	d009      	beq.n	8000fa6 <GetSegmentDigit+0x3e>
 8000f92:	78fb      	ldrb	r3, [r7, #3]
 8000f94:	2b2e      	cmp	r3, #46	; 0x2e
 8000f96:	d006      	beq.n	8000fa6 <GetSegmentDigit+0x3e>
 8000f98:	78fb      	ldrb	r3, [r7, #3]
 8000f9a:	2b2c      	cmp	r3, #44	; 0x2c
 8000f9c:	d003      	beq.n	8000fa6 <GetSegmentDigit+0x3e>
 8000f9e:	78fb      	ldrb	r3, [r7, #3]
 8000fa0:	2b2d      	cmp	r3, #45	; 0x2d
 8000fa2:	f040 8086 	bne.w	80010b2 <GetSegmentDigit+0x14a>
		uint8_t fontChar = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	75fb      	strb	r3, [r7, #23]
		uint8_t index = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	75bb      	strb	r3, [r7, #22]
		if (chr >= '0' && chr <= '9') {
 8000fae:	78fb      	ldrb	r3, [r7, #3]
 8000fb0:	2b2f      	cmp	r3, #47	; 0x2f
 8000fb2:	d90a      	bls.n	8000fca <GetSegmentDigit+0x62>
 8000fb4:	78fb      	ldrb	r3, [r7, #3]
 8000fb6:	2b39      	cmp	r3, #57	; 0x39
 8000fb8:	d807      	bhi.n	8000fca <GetSegmentDigit+0x62>
			index = chr - '0';
 8000fba:	78fb      	ldrb	r3, [r7, #3]
 8000fbc:	3b30      	subs	r3, #48	; 0x30
 8000fbe:	75bb      	strb	r3, [r7, #22]
			fontChar = Font_Table[FONTS_DIGITS_START + index];
 8000fc0:	7dbb      	ldrb	r3, [r7, #22]
 8000fc2:	4a4a      	ldr	r2, [pc, #296]	; (80010ec <GetSegmentDigit+0x184>)
 8000fc4:	5cd3      	ldrb	r3, [r2, r3]
 8000fc6:	75fb      	strb	r3, [r7, #23]
 8000fc8:	e022      	b.n	8001010 <GetSegmentDigit+0xa8>
		} else if (chr >= 'A' && chr <= 'Z') {
 8000fca:	78fb      	ldrb	r3, [r7, #3]
 8000fcc:	2b40      	cmp	r3, #64	; 0x40
 8000fce:	d90b      	bls.n	8000fe8 <GetSegmentDigit+0x80>
 8000fd0:	78fb      	ldrb	r3, [r7, #3]
 8000fd2:	2b5a      	cmp	r3, #90	; 0x5a
 8000fd4:	d808      	bhi.n	8000fe8 <GetSegmentDigit+0x80>
			index = chr - 'A';
 8000fd6:	78fb      	ldrb	r3, [r7, #3]
 8000fd8:	3b41      	subs	r3, #65	; 0x41
 8000fda:	75bb      	strb	r3, [r7, #22]
			fontChar = Font_Table[FONTS_CHARS_START + index];
 8000fdc:	7dbb      	ldrb	r3, [r7, #22]
 8000fde:	330a      	adds	r3, #10
 8000fe0:	4a42      	ldr	r2, [pc, #264]	; (80010ec <GetSegmentDigit+0x184>)
 8000fe2:	5cd3      	ldrb	r3, [r2, r3]
 8000fe4:	75fb      	strb	r3, [r7, #23]
 8000fe6:	e013      	b.n	8001010 <GetSegmentDigit+0xa8>
		} else if (chr == '_') {
 8000fe8:	78fb      	ldrb	r3, [r7, #3]
 8000fea:	2b5f      	cmp	r3, #95	; 0x5f
 8000fec:	d102      	bne.n	8000ff4 <GetSegmentDigit+0x8c>
			fontChar = Font_Table[FONTS_UNDERSCORE];
 8000fee:	2308      	movs	r3, #8
 8000ff0:	75fb      	strb	r3, [r7, #23]
 8000ff2:	e00d      	b.n	8001010 <GetSegmentDigit+0xa8>
		}else if(chr == '-'){
 8000ff4:	78fb      	ldrb	r3, [r7, #3]
 8000ff6:	2b2d      	cmp	r3, #45	; 0x2d
 8000ff8:	d102      	bne.n	8001000 <GetSegmentDigit+0x98>
			fontChar = Font_Table[FONTS_MINUS];
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	75fb      	strb	r3, [r7, #23]
 8000ffe:	e007      	b.n	8001010 <GetSegmentDigit+0xa8>
		}else if(chr == '.' || chr == ','){
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	2b2e      	cmp	r3, #46	; 0x2e
 8001004:	d002      	beq.n	800100c <GetSegmentDigit+0xa4>
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	2b2c      	cmp	r3, #44	; 0x2c
 800100a:	d101      	bne.n	8001010 <GetSegmentDigit+0xa8>
			fontChar = Font_Table[FONTS_DOT];
 800100c:	2380      	movs	r3, #128	; 0x80
 800100e:	75fb      	strb	r3, [r7, #23]
		}
		result.sA = fontChar & ConverterValue_SegmentA ? true : false;
 8001010:	2240      	movs	r2, #64	; 0x40
 8001012:	7dfb      	ldrb	r3, [r7, #23]
 8001014:	4013      	ands	r3, r2
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	bf14      	ite	ne
 800101c:	2301      	movne	r3, #1
 800101e:	2300      	moveq	r3, #0
 8001020:	b2db      	uxtb	r3, r3
 8001022:	733b      	strb	r3, [r7, #12]
		result.sB = fontChar & ConverterValue_SegmentB ? true : false;
 8001024:	2220      	movs	r2, #32
 8001026:	7dfb      	ldrb	r3, [r7, #23]
 8001028:	4013      	ands	r3, r2
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	bf14      	ite	ne
 8001030:	2301      	movne	r3, #1
 8001032:	2300      	moveq	r3, #0
 8001034:	b2db      	uxtb	r3, r3
 8001036:	737b      	strb	r3, [r7, #13]
		result.sC = fontChar & ConverterValue_SegmentC ? true : false;
 8001038:	2210      	movs	r2, #16
 800103a:	7dfb      	ldrb	r3, [r7, #23]
 800103c:	4013      	ands	r3, r2
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	bf14      	ite	ne
 8001044:	2301      	movne	r3, #1
 8001046:	2300      	moveq	r3, #0
 8001048:	b2db      	uxtb	r3, r3
 800104a:	73bb      	strb	r3, [r7, #14]
		result.sD = fontChar & ConverterValue_SegmentD ? true : false;
 800104c:	2208      	movs	r2, #8
 800104e:	7dfb      	ldrb	r3, [r7, #23]
 8001050:	4013      	ands	r3, r2
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	bf14      	ite	ne
 8001058:	2301      	movne	r3, #1
 800105a:	2300      	moveq	r3, #0
 800105c:	b2db      	uxtb	r3, r3
 800105e:	73fb      	strb	r3, [r7, #15]
		result.sE = fontChar & ConverterValue_SegmentE ? true : false;
 8001060:	2204      	movs	r2, #4
 8001062:	7dfb      	ldrb	r3, [r7, #23]
 8001064:	4013      	ands	r3, r2
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	bf14      	ite	ne
 800106c:	2301      	movne	r3, #1
 800106e:	2300      	moveq	r3, #0
 8001070:	b2db      	uxtb	r3, r3
 8001072:	743b      	strb	r3, [r7, #16]
		result.sF = fontChar & ConverterValue_SegmentF ? true : false;
 8001074:	2202      	movs	r2, #2
 8001076:	7dfb      	ldrb	r3, [r7, #23]
 8001078:	4013      	ands	r3, r2
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	bf14      	ite	ne
 8001080:	2301      	movne	r3, #1
 8001082:	2300      	moveq	r3, #0
 8001084:	b2db      	uxtb	r3, r3
 8001086:	747b      	strb	r3, [r7, #17]
		result.sG = fontChar & ConverterValue_SegmentG ? true : false;
 8001088:	2201      	movs	r2, #1
 800108a:	7dfb      	ldrb	r3, [r7, #23]
 800108c:	4013      	ands	r3, r2
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	bf14      	ite	ne
 8001094:	2301      	movne	r3, #1
 8001096:	2300      	moveq	r3, #0
 8001098:	b2db      	uxtb	r3, r3
 800109a:	74bb      	strb	r3, [r7, #18]
		result.sDot = fontChar & ConverterValue_SegmentDot ? true : false;
 800109c:	2280      	movs	r2, #128	; 0x80
 800109e:	7dfb      	ldrb	r3, [r7, #23]
 80010a0:	4013      	ands	r3, r2
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bf14      	ite	ne
 80010a8:	2301      	movne	r3, #1
 80010aa:	2300      	moveq	r3, #0
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	74fb      	strb	r3, [r7, #19]
			|| chr == '_' || chr == '.' || chr == ',' || chr == '-') {
 80010b0:	e00f      	b.n	80010d2 <GetSegmentDigit+0x16a>
	}
	else{
		result.sA = true;
 80010b2:	2301      	movs	r3, #1
 80010b4:	733b      	strb	r3, [r7, #12]
		result.sB = true;
 80010b6:	2301      	movs	r3, #1
 80010b8:	737b      	strb	r3, [r7, #13]
		result.sC = true;
 80010ba:	2301      	movs	r3, #1
 80010bc:	73bb      	strb	r3, [r7, #14]
		result.sD = true;
 80010be:	2301      	movs	r3, #1
 80010c0:	73fb      	strb	r3, [r7, #15]
		result.sE = true;
 80010c2:	2301      	movs	r3, #1
 80010c4:	743b      	strb	r3, [r7, #16]
		result.sF = true;
 80010c6:	2301      	movs	r3, #1
 80010c8:	747b      	strb	r3, [r7, #17]
		result.sG = true;
 80010ca:	2301      	movs	r3, #1
 80010cc:	74bb      	strb	r3, [r7, #18]
		result.sDot = true;
 80010ce:	2301      	movs	r3, #1
 80010d0:	74fb      	strb	r3, [r7, #19]
	}
	return result;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	461a      	mov	r2, r3
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	cb03      	ldmia	r3!, {r0, r1}
 80010dc:	6010      	str	r0, [r2, #0]
 80010de:	6051      	str	r1, [r2, #4]
}
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	371c      	adds	r7, #28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	08007818 	.word	0x08007818

080010f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <__NVIC_GetPriorityGrouping+0x18>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	f003 0307 	and.w	r3, r3, #7
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	2b00      	cmp	r3, #0
 800111c:	db0b      	blt.n	8001136 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	f003 021f 	and.w	r2, r3, #31
 8001124:	4907      	ldr	r1, [pc, #28]	; (8001144 <__NVIC_EnableIRQ+0x38>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	095b      	lsrs	r3, r3, #5
 800112c:	2001      	movs	r0, #1
 800112e:	fa00 f202 	lsl.w	r2, r0, r2
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000e100 	.word	0xe000e100

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800120e:	695a      	ldr	r2, [r3, #20]
 8001210:	4907      	ldr	r1, [pc, #28]	; (8001230 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4313      	orrs	r3, r2
 8001216:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800121a:	695a      	ldr	r2, [r3, #20]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4013      	ands	r3, r2
 8001220:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001222:	68fb      	ldr	r3, [r7, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	40021000 	.word	0x40021000

08001234 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800123e:	4a13      	ldr	r2, [pc, #76]	; (800128c <LL_SYSCFG_SetEXTISource+0x58>)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	3302      	adds	r3, #2
 8001246:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	0c1b      	lsrs	r3, r3, #16
 800124e:	43db      	mvns	r3, r3
 8001250:	ea02 0103 	and.w	r1, r2, r3
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	0c1b      	lsrs	r3, r3, #16
 8001258:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	fa93 f3a3 	rbit	r3, r3
 8001260:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	fab3 f383 	clz	r3, r3
 8001268:	b2db      	uxtb	r3, r3
 800126a:	461a      	mov	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	fa03 f202 	lsl.w	r2, r3, r2
 8001272:	4806      	ldr	r0, [pc, #24]	; (800128c <LL_SYSCFG_SetEXTISource+0x58>)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	430a      	orrs	r2, r1
 800127a:	3302      	adds	r3, #2
 800127c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001280:	bf00      	nop
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	40010000 	.word	0x40010000

08001290 <LL_GPIO_SetPinMode>:
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa93 f3a3 	rbit	r3, r3
 80012aa:	613b      	str	r3, [r7, #16]
  return result;
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	fab3 f383 	clz	r3, r3
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2103      	movs	r1, #3
 80012b8:	fa01 f303 	lsl.w	r3, r1, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	401a      	ands	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	fa93 f3a3 	rbit	r3, r3
 80012ca:	61bb      	str	r3, [r7, #24]
  return result;
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	fab3 f383 	clz	r3, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	fa01 f303 	lsl.w	r3, r1, r3
 80012dc:	431a      	orrs	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	601a      	str	r2, [r3, #0]
}
 80012e2:	bf00      	nop
 80012e4:	3724      	adds	r7, #36	; 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <LL_GPIO_SetPinPull>:
{
 80012ee:	b480      	push	{r7}
 80012f0:	b089      	sub	sp, #36	; 0x24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	fa93 f3a3 	rbit	r3, r3
 8001308:	613b      	str	r3, [r7, #16]
  return result;
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	fab3 f383 	clz	r3, r3
 8001310:	b2db      	uxtb	r3, r3
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	2103      	movs	r1, #3
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	401a      	ands	r2, r3
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa93 f3a3 	rbit	r3, r3
 8001328:	61bb      	str	r3, [r7, #24]
  return result;
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	fab3 f383 	clz	r3, r3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	fa01 f303 	lsl.w	r3, r1, r3
 800133a:	431a      	orrs	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	60da      	str	r2, [r3, #12]
}
 8001340:	bf00      	nop
 8001342:	3724      	adds	r7, #36	; 0x24
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_GPIO_ResetOutputPin>:
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	; 0x28
 800136c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800136e:	f107 031c 	add.w	r3, r7, #28
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
 8001388:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 800138a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800138e:	f7ff ff39 	bl	8001204 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001392:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001396:	f7ff ff35 	bl	8001204 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800139a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800139e:	f7ff ff31 	bl	8001204 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, S_B_Pin|S_A_Pin|D_3_Pin|S_F_Pin
 80013a2:	f641 119f 	movw	r1, #6559	; 0x199f
 80013a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013aa:	f7ff ffcf 	bl	800134c <LL_GPIO_ResetOutputPin>
                          |D_1_Pin|D_T_Pin|S_C_Pin|S_E_Pin
                          |D_2_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, D_0_Pin|S_DP_Pin|S_G_Pin|S_D_Pin);
 80013ae:	2133      	movs	r1, #51	; 0x33
 80013b0:	4835      	ldr	r0, [pc, #212]	; (8001488 <MX_GPIO_Init+0x120>)
 80013b2:	f7ff ffcb 	bl	800134c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = S_B_Pin|S_A_Pin|D_3_Pin|S_F_Pin
 80013b6:	f641 139f 	movw	r3, #6559	; 0x199f
 80013ba:	607b      	str	r3, [r7, #4]
                          |D_1_Pin|D_T_Pin|S_C_Pin|S_E_Pin
                          |D_2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013bc:	2301      	movs	r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	4619      	mov	r1, r3
 80013d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d4:	f001 fd8a 	bl	8002eec <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = D_0_Pin|S_DP_Pin|S_G_Pin|S_D_Pin;
 80013d8:	2333      	movs	r3, #51	; 0x33
 80013da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013dc:	2301      	movs	r3, #1
 80013de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	4619      	mov	r1, r3
 80013f0:	4825      	ldr	r0, [pc, #148]	; (8001488 <MX_GPIO_Init+0x120>)
 80013f2:	f001 fd7b 	bl	8002eec <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80013f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013fc:	2302      	movs	r3, #2
 80013fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001400:	2303      	movs	r3, #3
 8001402:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800140c:	2307      	movs	r3, #7
 800140e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	4619      	mov	r1, r3
 8001414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001418:	f001 fd68 	bl	8002eec <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 800141c:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8001420:	2001      	movs	r0, #1
 8001422:	f7ff ff07 	bl	8001234 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(TLACIDLO_GPIO_Port, TLACIDLO_Pin, LL_GPIO_PULL_UP);
 8001426:	2201      	movs	r2, #1
 8001428:	2108      	movs	r1, #8
 800142a:	4817      	ldr	r0, [pc, #92]	; (8001488 <MX_GPIO_Init+0x120>)
 800142c:	f7ff ff5f 	bl	80012ee <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(TLACIDLO_GPIO_Port, TLACIDLO_Pin, LL_GPIO_MODE_INPUT);
 8001430:	2200      	movs	r2, #0
 8001432:	2108      	movs	r1, #8
 8001434:	4814      	ldr	r0, [pc, #80]	; (8001488 <MX_GPIO_Init+0x120>)
 8001436:	f7ff ff2b 	bl	8001290 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 800143a:	2308      	movs	r3, #8
 800143c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001442:	2301      	movs	r3, #1
 8001444:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001448:	2300      	movs	r3, #0
 800144a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800144e:	2301      	movs	r3, #1
 8001450:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4618      	mov	r0, r3
 800145a:	f001 fb4f 	bl	8002afc <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800145e:	f7ff fe47 	bl	80010f0 <__NVIC_GetPriorityGrouping>
 8001462:	4603      	mov	r3, r0
 8001464:	2200      	movs	r2, #0
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fe97 	bl	800119c <NVIC_EncodePriority>
 800146e:	4603      	mov	r3, r0
 8001470:	4619      	mov	r1, r3
 8001472:	2009      	movs	r0, #9
 8001474:	f7ff fe68 	bl	8001148 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 8001478:	2009      	movs	r0, #9
 800147a:	f7ff fe47 	bl	800110c <__NVIC_EnableIRQ>

}
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	; 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	48000400 	.word	0x48000400

0800148c <__NVIC_GetPriorityGrouping>:
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001490:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	0a1b      	lsrs	r3, r3, #8
 8001496:	f003 0307 	and.w	r3, r3, #7
}
 800149a:	4618      	mov	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_EnableIRQ>:
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	db0b      	blt.n	80014d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	f003 021f 	and.w	r2, r3, #31
 80014c0:	4907      	ldr	r1, [pc, #28]	; (80014e0 <__NVIC_EnableIRQ+0x38>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	095b      	lsrs	r3, r3, #5
 80014c8:	2001      	movs	r0, #1
 80014ca:	fa00 f202 	lsl.w	r2, r0, r2
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000e100 	.word	0xe000e100

080014e4 <__NVIC_SetPriority>:
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	6039      	str	r1, [r7, #0]
 80014ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	db0a      	blt.n	800150e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	490c      	ldr	r1, [pc, #48]	; (8001530 <__NVIC_SetPriority+0x4c>)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	0112      	lsls	r2, r2, #4
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	440b      	add	r3, r1
 8001508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800150c:	e00a      	b.n	8001524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4908      	ldr	r1, [pc, #32]	; (8001534 <__NVIC_SetPriority+0x50>)
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	3b04      	subs	r3, #4
 800151c:	0112      	lsls	r2, r2, #4
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	440b      	add	r3, r1
 8001522:	761a      	strb	r2, [r3, #24]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000e100 	.word	0xe000e100
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <NVIC_EncodePriority>:
{
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f1c3 0307 	rsb	r3, r3, #7
 8001552:	2b04      	cmp	r3, #4
 8001554:	bf28      	it	cs
 8001556:	2304      	movcs	r3, #4
 8001558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3304      	adds	r3, #4
 800155e:	2b06      	cmp	r3, #6
 8001560:	d902      	bls.n	8001568 <NVIC_EncodePriority+0x30>
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3b03      	subs	r3, #3
 8001566:	e000      	b.n	800156a <NVIC_EncodePriority+0x32>
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	f04f 32ff 	mov.w	r2, #4294967295
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43da      	mvns	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	401a      	ands	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001580:	f04f 31ff 	mov.w	r1, #4294967295
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	43d9      	mvns	r1, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	4313      	orrs	r3, r2
}
 8001592:	4618      	mov	r0, r3
 8001594:	3724      	adds	r7, #36	; 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f043 0201 	orr.w	r2, r3, #1
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	601a      	str	r2, [r3, #0]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	601a      	str	r2, [r3, #0]
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	601a      	str	r2, [r3, #0]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80015fe:	b480      	push	{r7}
 8001600:	b085      	sub	sp, #20
 8001602:	af00      	add	r7, sp, #0
 8001604:	60f8      	str	r0, [r7, #12]
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001612:	f023 0306 	bic.w	r3, r3, #6
 8001616:	68b9      	ldr	r1, [r7, #8]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	430a      	orrs	r2, r1
 800161c:	431a      	orrs	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	60da      	str	r2, [r3, #12]
}
 8001622:	bf00      	nop
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	60da      	str	r2, [r3, #12]
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f043 0204 	orr.w	r2, r3, #4
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	601a      	str	r2, [r3, #0]
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f023 0204 	bic.w	r2, r3, #4
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	601a      	str	r2, [r3, #0]
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d101      	bne.n	80016a6 <LL_I2C_IsActiveFlag_TXIS+0x18>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0320 	and.w	r3, r3, #32
 80016c4:	2b20      	cmp	r3, #32
 80016c6:	d101      	bne.n	80016cc <LL_I2C_IsActiveFlag_STOP+0x18>
 80016c8:	2301      	movs	r3, #1
 80016ca:	e000      	b.n	80016ce <LL_I2C_IsActiveFlag_STOP+0x1a>
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f043 0220 	orr.w	r2, r3, #32
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	61da      	str	r2, [r3, #28]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	605a      	str	r2, [r3, #4]
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
 8001728:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	0d5b      	lsrs	r3, r3, #21
 8001732:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <LL_I2C_HandleTransfer+0x48>)
 8001738:	430b      	orrs	r3, r1
 800173a:	43db      	mvns	r3, r3
 800173c:	401a      	ands	r2, r3
 800173e:	68b9      	ldr	r1, [r7, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4319      	orrs	r1, r3
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	041b      	lsls	r3, r3, #16
 8001748:	4319      	orrs	r1, r3
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	4319      	orrs	r1, r3
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	430b      	orrs	r3, r1
 8001752:	431a      	orrs	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	03ff7bff 	.word	0x03ff7bff

08001768 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001774:	78fa      	ldrb	r2, [r7, #3]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	629a      	str	r2, [r3, #40]	; 0x28
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <LL_AHB1_GRP1_EnableClock>:
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001792:	695a      	ldr	r2, [r3, #20]
 8001794:	4907      	ldr	r1, [pc, #28]	; (80017b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4313      	orrs	r3, r2
 800179a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800179e:	695a      	ldr	r2, [r3, #20]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4013      	ands	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	40021000 	.word	0x40021000

080017b8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017c2:	69da      	ldr	r2, [r3, #28]
 80017c4:	4907      	ldr	r1, [pc, #28]	; (80017e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017ce:	69da      	ldr	r2, [r3, #28]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4013      	ands	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017d6:	68fb      	ldr	r3, [r7, #12]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	40021000 	.word	0x40021000

080017e8 <MX_I2C1_Init>:
extern volatile uint8_t ubReceiveIndex;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08e      	sub	sp, #56	; 0x38
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80017ee:	f107 031c 	add.w	r3, r7, #28
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	611a      	str	r2, [r3, #16]
 80017fe:	615a      	str	r2, [r3, #20]
 8001800:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
 8001810:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001812:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001816:	f7ff ffb7 	bl	8001788 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800181a:	23c0      	movs	r3, #192	; 0xc0
 800181c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800181e:	2302      	movs	r3, #2
 8001820:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001822:	2303      	movs	r3, #3
 8001824:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001826:	2301      	movs	r3, #1
 8001828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800182a:	2301      	movs	r3, #1
 800182c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800182e:	2304      	movs	r3, #4
 8001830:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	4619      	mov	r1, r3
 8001836:	4821      	ldr	r0, [pc, #132]	; (80018bc <MX_I2C1_Init+0xd4>)
 8001838:	f001 fb58 	bl	8002eec <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800183c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001840:	f7ff ffba 	bl	80017b8 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001844:	f7ff fe22 	bl	800148c <__NVIC_GetPriorityGrouping>
 8001848:	4603      	mov	r3, r0
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fe72 	bl	8001538 <NVIC_EncodePriority>
 8001854:	4603      	mov	r3, r0
 8001856:	4619      	mov	r1, r3
 8001858:	201f      	movs	r0, #31
 800185a:	f7ff fe43 	bl	80014e4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800185e:	201f      	movs	r0, #31
 8001860:	f7ff fe22 	bl	80014a8 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001864:	4816      	ldr	r0, [pc, #88]	; (80018c0 <MX_I2C1_Init+0xd8>)
 8001866:	f7ff ff48 	bl	80016fa <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 800186a:	4815      	ldr	r0, [pc, #84]	; (80018c0 <MX_I2C1_Init+0xd8>)
 800186c:	f7ff fedf 	bl	800162e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001870:	4813      	ldr	r0, [pc, #76]	; (80018c0 <MX_I2C1_Init+0xd8>)
 8001872:	f7ff feb4 	bl	80015de <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001876:	4812      	ldr	r0, [pc, #72]	; (80018c0 <MX_I2C1_Init+0xd8>)
 8001878:	f7ff fea1 	bl	80015be <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8001880:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <MX_I2C1_Init+0xdc>)
 8001882:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 800188c:	2302      	movs	r3, #2
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001890:	2300      	movs	r3, #0
 8001892:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001894:	2300      	movs	r3, #0
 8001896:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001898:	f107 031c 	add.w	r3, r7, #28
 800189c:	4619      	mov	r1, r3
 800189e:	4808      	ldr	r0, [pc, #32]	; (80018c0 <MX_I2C1_Init+0xd8>)
 80018a0:	f001 fc37 	bl	8003112 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2100      	movs	r1, #0
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_I2C1_Init+0xd8>)
 80018aa:	f7ff fea8 	bl	80015fe <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 80018ae:	4804      	ldr	r0, [pc, #16]	; (80018c0 <MX_I2C1_Init+0xd8>)
 80018b0:	f7ff fe75 	bl	800159e <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 80018b4:	bf00      	nop
 80018b6:	3738      	adds	r7, #56	; 0x38
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	48000400 	.word	0x48000400
 80018c0:	40005400 	.word	0x40005400
 80018c4:	2000090e 	.word	0x2000090e

080018c8 <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af02      	add	r7, sp, #8
 80018ce:	4604      	mov	r4, r0
 80018d0:	4608      	mov	r0, r1
 80018d2:	4611      	mov	r1, r2
 80018d4:	461a      	mov	r2, r3
 80018d6:	4623      	mov	r3, r4
 80018d8:	71fb      	strb	r3, [r7, #7]
 80018da:	4603      	mov	r3, r0
 80018dc:	71bb      	strb	r3, [r7, #6]
 80018de:	460b      	mov	r3, r1
 80018e0:	717b      	strb	r3, [r7, #5]
 80018e2:	4613      	mov	r3, r2
 80018e4:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 80018e6:	793b      	ldrb	r3, [r7, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 80018ec:	79bb      	ldrb	r3, [r7, #6]
 80018ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018f2:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80018f4:	7979      	ldrb	r1, [r7, #5]
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <i2c_master_write+0x80>)
 80018f8:	9301      	str	r3, [sp, #4]
 80018fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2302      	movs	r3, #2
 8001902:	2200      	movs	r2, #0
 8001904:	4811      	ldr	r0, [pc, #68]	; (800194c <i2c_master_write+0x84>)
 8001906:	f7ff ff09 	bl	800171c <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 800190a:	79bb      	ldrb	r3, [r7, #6]
 800190c:	4619      	mov	r1, r3
 800190e:	480f      	ldr	r0, [pc, #60]	; (800194c <i2c_master_write+0x84>)
 8001910:	f7ff ff2a 	bl	8001768 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001914:	e00a      	b.n	800192c <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001916:	480d      	ldr	r0, [pc, #52]	; (800194c <i2c_master_write+0x84>)
 8001918:	f7ff feb9 	bl	800168e <LL_I2C_IsActiveFlag_TXIS>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d004      	beq.n	800192c <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	4619      	mov	r1, r3
 8001926:	4809      	ldr	r0, [pc, #36]	; (800194c <i2c_master_write+0x84>)
 8001928:	f7ff ff1e 	bl	8001768 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800192c:	4807      	ldr	r0, [pc, #28]	; (800194c <i2c_master_write+0x84>)
 800192e:	f7ff fec1 	bl	80016b4 <LL_I2C_IsActiveFlag_STOP>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0ee      	beq.n	8001916 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001938:	4804      	ldr	r0, [pc, #16]	; (800194c <i2c_master_write+0x84>)
 800193a:	f7ff fece 	bl	80016da <LL_I2C_ClearFlag_STOP>
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	bd90      	pop	{r4, r7, pc}
 8001946:	bf00      	nop
 8001948:	80002000 	.word	0x80002000
 800194c:	40005400 	.word	0x40005400

08001950 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af02      	add	r7, sp, #8
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	4608      	mov	r0, r1
 800195a:	4611      	mov	r1, r2
 800195c:	461a      	mov	r2, r3
 800195e:	4603      	mov	r3, r0
 8001960:	70fb      	strb	r3, [r7, #3]
 8001962:	460b      	mov	r3, r1
 8001964:	70bb      	strb	r3, [r7, #2]
 8001966:	4613      	mov	r3, r2
 8001968:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 800196a:	4a30      	ldr	r2, [pc, #192]	; (8001a2c <i2c_master_read+0xdc>)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8001970:	7c3b      	ldrb	r3, [r7, #16]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8001976:	78bb      	ldrb	r3, [r7, #2]
 8001978:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800197c:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 800197e:	4b2c      	ldr	r3, [pc, #176]	; (8001a30 <i2c_master_read+0xe0>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8001984:	482b      	ldr	r0, [pc, #172]	; (8001a34 <i2c_master_read+0xe4>)
 8001986:	f7ff fe62 	bl	800164e <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 800198a:	7879      	ldrb	r1, [r7, #1]
 800198c:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <i2c_master_read+0xe8>)
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2301      	movs	r3, #1
 8001998:	2200      	movs	r2, #0
 800199a:	4826      	ldr	r0, [pc, #152]	; (8001a34 <i2c_master_read+0xe4>)
 800199c:	f7ff febe 	bl	800171c <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80019a0:	e00a      	b.n	80019b8 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 80019a2:	4824      	ldr	r0, [pc, #144]	; (8001a34 <i2c_master_read+0xe4>)
 80019a4:	f7ff fe73 	bl	800168e <LL_I2C_IsActiveFlag_TXIS>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d004      	beq.n	80019b8 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 80019ae:	78bb      	ldrb	r3, [r7, #2]
 80019b0:	4619      	mov	r1, r3
 80019b2:	4820      	ldr	r0, [pc, #128]	; (8001a34 <i2c_master_read+0xe4>)
 80019b4:	f7ff fed8 	bl	8001768 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80019b8:	481e      	ldr	r0, [pc, #120]	; (8001a34 <i2c_master_read+0xe4>)
 80019ba:	f7ff fe7b 	bl	80016b4 <LL_I2C_IsActiveFlag_STOP>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0ee      	beq.n	80019a2 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80019c4:	481b      	ldr	r0, [pc, #108]	; (8001a34 <i2c_master_read+0xe4>)
 80019c6:	f7ff fe88 	bl	80016da <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 80019ca:	bf00      	nop
 80019cc:	4819      	ldr	r0, [pc, #100]	; (8001a34 <i2c_master_read+0xe4>)
 80019ce:	f7ff fe71 	bl	80016b4 <LL_I2C_IsActiveFlag_STOP>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1f9      	bne.n	80019cc <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 80019d8:	7879      	ldrb	r1, [r7, #1]
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	4a17      	ldr	r2, [pc, #92]	; (8001a3c <i2c_master_read+0xec>)
 80019de:	9201      	str	r2, [sp, #4]
 80019e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019e4:	9200      	str	r2, [sp, #0]
 80019e6:	2200      	movs	r2, #0
 80019e8:	4812      	ldr	r0, [pc, #72]	; (8001a34 <i2c_master_read+0xe4>)
 80019ea:	f7ff fe97 	bl	800171c <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 80019ee:	bf00      	nop
 80019f0:	4810      	ldr	r0, [pc, #64]	; (8001a34 <i2c_master_read+0xe4>)
 80019f2:	f7ff fe5f 	bl	80016b4 <LL_I2C_IsActiveFlag_STOP>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f9      	beq.n	80019f0 <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 80019fc:	480d      	ldr	r0, [pc, #52]	; (8001a34 <i2c_master_read+0xe4>)
 80019fe:	f7ff fe6c 	bl	80016da <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8001a02:	480c      	ldr	r0, [pc, #48]	; (8001a34 <i2c_master_read+0xe4>)
 8001a04:	f7ff fe33 	bl	800166e <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <i2c_master_read+0xe4>)
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <i2c_master_read+0xe4>)
 8001a0e:	f043 0310 	orr.w	r3, r3, #16
 8001a12:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8001a14:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <i2c_master_read+0xf0>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <i2c_master_read+0xe0>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8001a20:	4b02      	ldr	r3, [pc, #8]	; (8001a2c <i2c_master_read+0xdc>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000220 	.word	0x20000220
 8001a30:	20000224 	.word	0x20000224
 8001a34:	40005400 	.word	0x40005400
 8001a38:	80002000 	.word	0x80002000
 8001a3c:	80002400 	.word	0x80002400
 8001a40:	2000021c 	.word	0x2000021c

08001a44 <__NVIC_SetPriorityGrouping>:
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a60:	4013      	ands	r3, r2
 8001a62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a76:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	60d3      	str	r3, [r2, #12]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <LL_RCC_HSI_Enable+0x1c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <LL_RCC_HSI_Enable+0x1c>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40021000 	.word	0x40021000

08001aac <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <LL_RCC_HSI_IsReady+0x20>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	bf0c      	ite	eq
 8001abc:	2301      	moveq	r3, #1
 8001abe:	2300      	movne	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	40021000 	.word	0x40021000

08001ad0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001ad8:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	4904      	ldr	r1, [pc, #16]	; (8001af8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	600b      	str	r3, [r1, #0]
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000

08001afc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <LL_RCC_SetSysClkSource+0x24>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f023 0203 	bic.w	r2, r3, #3
 8001b0c:	4904      	ldr	r1, [pc, #16]	; (8001b20 <LL_RCC_SetSysClkSource+0x24>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	40021000 	.word	0x40021000

08001b24 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b28:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <LL_RCC_GetSysClkSource+0x18>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 030c 	and.w	r3, r3, #12
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40021000 	.word	0x40021000

08001b40 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <LL_RCC_SetAHBPrescaler+0x24>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b50:	4904      	ldr	r1, [pc, #16]	; (8001b64 <LL_RCC_SetAHBPrescaler+0x24>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	40021000 	.word	0x40021000

08001b68 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b78:	4904      	ldr	r1, [pc, #16]	; (8001b8c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	604b      	str	r3, [r1, #4]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	40021000 	.word	0x40021000

08001b90 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ba0:	4904      	ldr	r1, [pc, #16]	; (8001bb4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <LL_RCC_SetI2CClockSource+0x2c>)
 8001bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	0e1b      	lsrs	r3, r3, #24
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	401a      	ands	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001bd2:	4904      	ldr	r1, [pc, #16]	; (8001be4 <LL_RCC_SetI2CClockSource+0x2c>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	40021000 	.word	0x40021000

08001be8 <LL_APB1_GRP1_EnableClock>:
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001bf2:	69da      	ldr	r2, [r3, #28]
 8001bf4:	4907      	ldr	r1, [pc, #28]	; (8001c14 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001bfe:	69da      	ldr	r2, [r3, #28]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4013      	ands	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c06:	68fb      	ldr	r3, [r7, #12]
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	40021000 	.word	0x40021000

08001c18 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c22:	699a      	ldr	r2, [r3, #24]
 8001c24:	4907      	ldr	r1, [pc, #28]	; (8001c44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c2e:	699a      	ldr	r2, [r3, #24]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4013      	ands	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c36:	68fb      	ldr	r3, [r7, #12]
}
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	40021000 	.word	0x40021000

08001c48 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <LL_FLASH_SetLatency+0x24>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f023 0207 	bic.w	r2, r3, #7
 8001c58:	4904      	ldr	r1, [pc, #16]	; (8001c6c <LL_FLASH_SetLatency+0x24>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	600b      	str	r3, [r1, #0]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	40022000 	.word	0x40022000

08001c70 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <LL_FLASH_GetLatency+0x18>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0307 	and.w	r3, r3, #7
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40022000 	.word	0x40022000

08001c8c <LL_GPIO_ReadInputPort>:
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	DisplayDigit_0.index = 0;
 8001caa:	4b77      	ldr	r3, [pc, #476]	; (8001e88 <main+0x1e4>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
	DisplayDigit_0.chr = 0;
 8001cb0:	4b75      	ldr	r3, [pc, #468]	; (8001e88 <main+0x1e4>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	705a      	strb	r2, [r3, #1]
	DisplayDigit_1.index = 1;
 8001cb6:	4b75      	ldr	r3, [pc, #468]	; (8001e8c <main+0x1e8>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]
	DisplayDigit_1.chr = 0;
 8001cbc:	4b73      	ldr	r3, [pc, #460]	; (8001e8c <main+0x1e8>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	705a      	strb	r2, [r3, #1]
	DisplayDigit_2.index = 2;
 8001cc2:	4b73      	ldr	r3, [pc, #460]	; (8001e90 <main+0x1ec>)
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	701a      	strb	r2, [r3, #0]
	DisplayDigit_2.chr = 0;
 8001cc8:	4b71      	ldr	r3, [pc, #452]	; (8001e90 <main+0x1ec>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	705a      	strb	r2, [r3, #1]
	DisplayDigit_3.index = 3;
 8001cce:	4b71      	ldr	r3, [pc, #452]	; (8001e94 <main+0x1f0>)
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	701a      	strb	r2, [r3, #0]
	DisplayDigit_3.chr = 0;
 8001cd4:	4b6f      	ldr	r3, [pc, #444]	; (8001e94 <main+0x1f0>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	705a      	strb	r2, [r3, #1]
	nextStringSequence = false;
 8001cda:	4b6f      	ldr	r3, [pc, #444]	; (8001e98 <main+0x1f4>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
	Direction_ direction = Direction_DownUp;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	75fb      	strb	r3, [r7, #23]
	end_of_read_flag = 0;
 8001ce4:	4b6d      	ldr	r3, [pc, #436]	; (8001e9c <main+0x1f8>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	701a      	strb	r2, [r3, #0]
	ubReceiveIndex = 0;
 8001cea:	4b6d      	ldr	r3, [pc, #436]	; (8001ea0 <main+0x1fc>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]
	metOpt = MetricsOption_Altitude;
 8001cf0:	4b6c      	ldr	r3, [pc, #432]	; (8001ea4 <main+0x200>)
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	701a      	strb	r2, [r3, #0]
	metrics.temperature = -1;
 8001cf6:	4b6c      	ldr	r3, [pc, #432]	; (8001ea8 <main+0x204>)
 8001cf8:	4a6c      	ldr	r2, [pc, #432]	; (8001eac <main+0x208>)
 8001cfa:	601a      	str	r2, [r3, #0]
	metrics.humidity = -1;
 8001cfc:	4b6a      	ldr	r3, [pc, #424]	; (8001ea8 <main+0x204>)
 8001cfe:	4a6b      	ldr	r2, [pc, #428]	; (8001eac <main+0x208>)
 8001d00:	605a      	str	r2, [r3, #4]
	metrics.pressure = -1;
 8001d02:	4b69      	ldr	r3, [pc, #420]	; (8001ea8 <main+0x204>)
 8001d04:	4a69      	ldr	r2, [pc, #420]	; (8001eac <main+0x208>)
 8001d06:	609a      	str	r2, [r3, #8]
	metrics.altitude = -1;
 8001d08:	4b67      	ldr	r3, [pc, #412]	; (8001ea8 <main+0x204>)
 8001d0a:	4a68      	ldr	r2, [pc, #416]	; (8001eac <main+0x208>)
 8001d0c:	60da      	str	r2, [r3, #12]
	switch_state = 1;
 8001d0e:	4b68      	ldr	r3, [pc, #416]	; (8001eb0 <main+0x20c>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	701a      	strb	r2, [r3, #0]

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001d14:	2001      	movs	r0, #1
 8001d16:	f7ff ff7f 	bl	8001c18 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001d1a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001d1e:	f7ff ff63 	bl	8001be8 <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d22:	2003      	movs	r0, #3
 8001d24:	f7ff fe8e 	bl	8001a44 <__NVIC_SetPriorityGrouping>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001d28:	f000 f8ca 	bl	8001ec0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001d2c:	f7ff fb1c 	bl	8001368 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001d30:	f7ff fd5a 	bl	80017e8 <MX_I2C1_Init>
	MX_TIM6_Init();
 8001d34:	f000 fd08 	bl	8002748 <MX_TIM6_Init>
	MX_TIM7_Init();
 8001d38:	f000 fd46 	bl	80027c8 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */
	lsm6ds0_init();
 8001d3c:	f001 fb60 	bl	8003400 <lsm6ds0_init>
	hts221_init();
 8001d40:	f001 fbd8 	bl	80034f4 <hts221_init>
	lps25hb_init();
 8001d44:	f001 fe70 	bl	8003a28 <lps25hb_init>
	uint8_t index = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	75bb      	strb	r3, [r7, #22]
	uint8_t string[STR_LEN] = { 0 };
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
	uint8_t lenString = STR_LEN;
 8001d5c:	2314      	movs	r3, #20
 8001d5e:	757b      	strb	r3, [r7, #21]
	setMetricsOption(string, metOpt, metrics);
 8001d60:	4b50      	ldr	r3, [pc, #320]	; (8001ea4 <main+0x200>)
 8001d62:	781a      	ldrb	r2, [r3, #0]
 8001d64:	4b50      	ldr	r3, [pc, #320]	; (8001ea8 <main+0x204>)
 8001d66:	ed93 6a00 	vldr	s12, [r3]
 8001d6a:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d6e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d72:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d76:	463b      	mov	r3, r7
 8001d78:	eeb0 0a46 	vmov.f32	s0, s12
 8001d7c:	eef0 0a66 	vmov.f32	s1, s13
 8001d80:	eeb0 1a47 	vmov.f32	s2, s14
 8001d84:	eef0 1a67 	vmov.f32	s3, s15
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 f900 	bl	8001f90 <setMetricsOption>
	lenString = strlen((const char*) string);
 8001d90:	463b      	mov	r3, r7
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fa1c 	bl	80001d0 <strlen>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	757b      	strb	r3, [r7, #21]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */
		if (switch_state) {
 8001d9c:	4b44      	ldr	r3, [pc, #272]	; (8001eb0 <main+0x20c>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d011      	beq.n	8001dc8 <main+0x124>
			index = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	75bb      	strb	r3, [r7, #22]
			metOpt++;
 8001da8:	4b3e      	ldr	r3, [pc, #248]	; (8001ea4 <main+0x200>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	3301      	adds	r3, #1
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	4b3c      	ldr	r3, [pc, #240]	; (8001ea4 <main+0x200>)
 8001db2:	701a      	strb	r2, [r3, #0]
			if (metOpt < MetricsOption_Temperature
					|| metOpt > MetricsOption_Altitude) {
 8001db4:	4b3b      	ldr	r3, [pc, #236]	; (8001ea4 <main+0x200>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
			if (metOpt < MetricsOption_Temperature
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d902      	bls.n	8001dc2 <main+0x11e>
				metOpt = MetricsOption_Temperature;
 8001dbc:	4b39      	ldr	r3, [pc, #228]	; (8001ea4 <main+0x200>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
			}

			switch_state = 0;
 8001dc2:	4b3b      	ldr	r3, [pc, #236]	; (8001eb0 <main+0x20c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
		}
		if (nextStringSequence) {
 8001dc8:	4b33      	ldr	r3, [pc, #204]	; (8001e98 <main+0x1f4>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0e5      	beq.n	8001d9c <main+0xf8>
			nextStringSequence = false;
 8001dd0:	4b31      	ldr	r3, [pc, #196]	; (8001e98 <main+0x1f4>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
			hts221_get_temperature(&metrics.temperature);
 8001dd6:	4834      	ldr	r0, [pc, #208]	; (8001ea8 <main+0x204>)
 8001dd8:	f001 fc2a 	bl	8003630 <hts221_get_temperature>
			hts221_get_humidity(&metrics.humidity);
 8001ddc:	4835      	ldr	r0, [pc, #212]	; (8001eb4 <main+0x210>)
 8001dde:	f001 fbd7 	bl	8003590 <hts221_get_humidity>
			lps25hb_get_pressureWithOffset(&metrics.pressure);
 8001de2:	4835      	ldr	r0, [pc, #212]	; (8001eb8 <main+0x214>)
 8001de4:	f001 fdbc 	bl	8003960 <lps25hb_get_pressureWithOffset>
			lps25hb_get_altitude(&metrics.altitude);
 8001de8:	4834      	ldr	r0, [pc, #208]	; (8001ebc <main+0x218>)
 8001dea:	f001 fddd 	bl	80039a8 <lps25hb_get_altitude>
			setMetricsOption(string, metOpt, metrics);
 8001dee:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <main+0x200>)
 8001df0:	781a      	ldrb	r2, [r3, #0]
 8001df2:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <main+0x204>)
 8001df4:	ed93 6a00 	vldr	s12, [r3]
 8001df8:	edd3 6a01 	vldr	s13, [r3, #4]
 8001dfc:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e00:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e04:	463b      	mov	r3, r7
 8001e06:	eeb0 0a46 	vmov.f32	s0, s12
 8001e0a:	eef0 0a66 	vmov.f32	s1, s13
 8001e0e:	eeb0 1a47 	vmov.f32	s2, s14
 8001e12:	eef0 1a67 	vmov.f32	s3, s15
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 f8b9 	bl	8001f90 <setMetricsOption>
			lenString = strlen((const char*) string);
 8001e1e:	463b      	mov	r3, r7
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe f9d5 	bl	80001d0 <strlen>
 8001e26:	4603      	mov	r3, r0
 8001e28:	757b      	strb	r3, [r7, #21]
			displayString(index, string, lenString);
 8001e2a:	7d7a      	ldrb	r2, [r7, #21]
 8001e2c:	4639      	mov	r1, r7
 8001e2e:	7dbb      	ldrb	r3, [r7, #22]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f000 f979 	bl	8002128 <displayString>
			if (index + STR_DISP_LEN < lenString
 8001e36:	7dbb      	ldrb	r3, [r7, #22]
 8001e38:	1d1a      	adds	r2, r3, #4
 8001e3a:	7d7b      	ldrb	r3, [r7, #21]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	da06      	bge.n	8001e4e <main+0x1aa>
					&& direction == Direction_DownUp) {
 8001e40:	7dfb      	ldrb	r3, [r7, #23]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d103      	bne.n	8001e4e <main+0x1aa>
				index++;
 8001e46:	7dbb      	ldrb	r3, [r7, #22]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	75bb      	strb	r3, [r7, #22]
 8001e4c:	e009      	b.n	8001e62 <main+0x1be>
			} else if (index + STR_DISP_LEN >= lenString
 8001e4e:	7dbb      	ldrb	r3, [r7, #22]
 8001e50:	1d1a      	adds	r2, r3, #4
 8001e52:	7d7b      	ldrb	r3, [r7, #21]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	db04      	blt.n	8001e62 <main+0x1be>
					&& direction == Direction_DownUp) {
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <main+0x1be>
				direction = Direction_UpDown;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	75fb      	strb	r3, [r7, #23]
			}
			if (index > 0 && direction == Direction_UpDown) {
 8001e62:	7dbb      	ldrb	r3, [r7, #22]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d006      	beq.n	8001e76 <main+0x1d2>
 8001e68:	7dfb      	ldrb	r3, [r7, #23]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d103      	bne.n	8001e76 <main+0x1d2>
				index--;
 8001e6e:	7dbb      	ldrb	r3, [r7, #22]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	75bb      	strb	r3, [r7, #22]
 8001e74:	e007      	b.n	8001e86 <main+0x1e2>
			} else if (index == 0 && direction == Direction_UpDown) {
 8001e76:	7dbb      	ldrb	r3, [r7, #22]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d18f      	bne.n	8001d9c <main+0xf8>
 8001e7c:	7dfb      	ldrb	r3, [r7, #23]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d18c      	bne.n	8001d9c <main+0xf8>
				direction = Direction_DownUp;
 8001e82:	2300      	movs	r3, #0
 8001e84:	75fb      	strb	r3, [r7, #23]
		if (switch_state) {
 8001e86:	e789      	b.n	8001d9c <main+0xf8>
 8001e88:	20000218 	.word	0x20000218
 8001e8c:	20000210 	.word	0x20000210
 8001e90:	2000020c 	.word	0x2000020c
 8001e94:	20000214 	.word	0x20000214
 8001e98:	20000228 	.word	0x20000228
 8001e9c:	20000224 	.word	0x20000224
 8001ea0:	2000021c 	.word	0x2000021c
 8001ea4:	20000208 	.word	0x20000208
 8001ea8:	2000022c 	.word	0x2000022c
 8001eac:	bf800000 	.word	0xbf800000
 8001eb0:	2000020e 	.word	0x2000020e
 8001eb4:	20000230 	.word	0x20000230
 8001eb8:	20000234 	.word	0x20000234
 8001ebc:	20000238 	.word	0x20000238

08001ec0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f7ff febf 	bl	8001c48 <LL_FLASH_SetLatency>
	while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0) {
 8001eca:	bf00      	nop
 8001ecc:	f7ff fed0 	bl	8001c70 <LL_FLASH_GetLatency>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1fa      	bne.n	8001ecc <SystemClock_Config+0xc>
	}
	LL_RCC_HSI_Enable();
 8001ed6:	f7ff fdd9 	bl	8001a8c <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while (LL_RCC_HSI_IsReady() != 1) {
 8001eda:	bf00      	nop
 8001edc:	f7ff fde6 	bl	8001aac <LL_RCC_HSI_IsReady>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d1fa      	bne.n	8001edc <SystemClock_Config+0x1c>

	}
	LL_RCC_HSI_SetCalibTrimming(16);
 8001ee6:	2010      	movs	r0, #16
 8001ee8:	f7ff fdf2 	bl	8001ad0 <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001eec:	2000      	movs	r0, #0
 8001eee:	f7ff fe27 	bl	8001b40 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f7ff fe38 	bl	8001b68 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f7ff fe49 	bl	8001b90 <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001efe:	2000      	movs	r0, #0
 8001f00:	f7ff fdfc 	bl	8001afc <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8001f04:	bf00      	nop
 8001f06:	f7ff fe0d 	bl	8001b24 <LL_RCC_GetSysClkSource>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1fa      	bne.n	8001f06 <SystemClock_Config+0x46>

	}
	LL_Init1msTick(8000000);
 8001f10:	4805      	ldr	r0, [pc, #20]	; (8001f28 <SystemClock_Config+0x68>)
 8001f12:	f001 fa01 	bl	8003318 <LL_Init1msTick>
	LL_SetSystemCoreClock(8000000);
 8001f16:	4804      	ldr	r0, [pc, #16]	; (8001f28 <SystemClock_Config+0x68>)
 8001f18:	f001 fa32 	bl	8003380 <LL_SetSystemCoreClock>
	LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001f1c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001f20:	f7ff fe4a 	bl	8001bb8 <LL_RCC_SetI2CClockSource>
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	007a1200 	.word	0x007a1200

08001f2c <checkButtonState>:

/* USER CODE BEGIN 4 */
uint8_t checkButtonState(GPIO_TypeDef *PORT, uint8_t PIN, uint8_t edge,
		uint8_t samples_window, uint8_t samples_required) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	4608      	mov	r0, r1
 8001f36:	4611      	mov	r1, r2
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	70fb      	strb	r3, [r7, #3]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	70bb      	strb	r3, [r7, #2]
 8001f42:	4613      	mov	r3, r2
 8001f44:	707b      	strb	r3, [r7, #1]
	//type your code for "checkButtonState" implementation here:
	uint8_t button_state = 0, timeout = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	73fb      	strb	r3, [r7, #15]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	73bb      	strb	r3, [r7, #14]
	while (timeout < samples_window) {
 8001f4e:	e010      	b.n	8001f72 <checkButtonState+0x46>
		if ((LL_GPIO_ReadInputPort(PORT) & (1 << PIN))) {
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff fe9b 	bl	8001c8c <LL_GPIO_ReadInputPort>
 8001f56:	4602      	mov	r2, r0
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <checkButtonState+0x40>
			button_state += 1;
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
		} else {
			//button_state = 0;
		}
		timeout += 1;
 8001f6c:	7bbb      	ldrb	r3, [r7, #14]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	73bb      	strb	r3, [r7, #14]
	while (timeout < samples_window) {
 8001f72:	7bba      	ldrb	r2, [r7, #14]
 8001f74:	787b      	ldrb	r3, [r7, #1]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d3ea      	bcc.n	8001f50 <checkButtonState+0x24>
	}
	if (button_state >= samples_required)
 8001f7a:	7bfa      	ldrb	r2, [r7, #15]
 8001f7c:	7e3b      	ldrb	r3, [r7, #24]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d301      	bcc.n	8001f86 <checkButtonState+0x5a>
		return 1;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <checkButtonState+0x5c>
	else
		return 0;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <setMetricsOption>:
void setMetricsOption(uint8_t *str, MetricsOption_ metricsOption,
		MetricsStruct metricsStruct) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6178      	str	r0, [r7, #20]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	eeb0 6a40 	vmov.f32	s12, s0
 8001f9e:	eef0 6a60 	vmov.f32	s13, s1
 8001fa2:	eeb0 7a41 	vmov.f32	s14, s2
 8001fa6:	eef0 7a61 	vmov.f32	s15, s3
 8001faa:	74fb      	strb	r3, [r7, #19]
 8001fac:	ed87 6a00 	vstr	s12, [r7]
 8001fb0:	edc7 6a01 	vstr	s13, [r7, #4]
 8001fb4:	ed87 7a02 	vstr	s14, [r7, #8]
 8001fb8:	edc7 7a03 	vstr	s15, [r7, #12]
	switch (metricsOption) {
 8001fbc:	7cfb      	ldrb	r3, [r7, #19]
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	d852      	bhi.n	8002068 <setMetricsOption+0xd8>
 8001fc2:	a201      	add	r2, pc, #4	; (adr r2, 8001fc8 <setMetricsOption+0x38>)
 8001fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc8:	08001fd9 	.word	0x08001fd9
 8001fcc:	08001ffd 	.word	0x08001ffd
 8001fd0:	08002021 	.word	0x08002021
 8001fd4:	08002045 	.word	0x08002045
	default: //Unknown
		break;
	case MetricsOption_Temperature:
		setString(str, TEMPERATURE_STR_TEXT, TEMPERATURE_STR_PROT,
 8001fd8:	edd7 7a00 	vldr	s15, [r7]
 8001fdc:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002074 <setMetricsOption+0xe4>
 8001fe0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002078 <setMetricsOption+0xe8>
 8001fe4:	eeb0 1a66 	vmov.f32	s2, s13
 8001fe8:	eef0 0a47 	vmov.f32	s1, s14
 8001fec:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff0:	4a22      	ldr	r2, [pc, #136]	; (800207c <setMetricsOption+0xec>)
 8001ff2:	4923      	ldr	r1, [pc, #140]	; (8002080 <setMetricsOption+0xf0>)
 8001ff4:	6978      	ldr	r0, [r7, #20]
 8001ff6:	f000 f85b 	bl	80020b0 <setString>
				metricsStruct.temperature, TEMPERATURE_MIN, TEMPERATURE_MAX);
		break;
 8001ffa:	e036      	b.n	800206a <setMetricsOption+0xda>
	case MetricsOption_Humidity:
		setString(str, HUMIDITY_STR_TEXT, HUMIDITY_STR_PROT,
 8001ffc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002000:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002084 <setMetricsOption+0xf4>
 8002004:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8002078 <setMetricsOption+0xe8>
 8002008:	eeb0 1a66 	vmov.f32	s2, s13
 800200c:	eef0 0a47 	vmov.f32	s1, s14
 8002010:	eeb0 0a67 	vmov.f32	s0, s15
 8002014:	4a1c      	ldr	r2, [pc, #112]	; (8002088 <setMetricsOption+0xf8>)
 8002016:	491d      	ldr	r1, [pc, #116]	; (800208c <setMetricsOption+0xfc>)
 8002018:	6978      	ldr	r0, [r7, #20]
 800201a:	f000 f849 	bl	80020b0 <setString>
				metricsStruct.humidity, HUMIDITY_MIN, HUMIDITY_MAX);
		break;
 800201e:	e024      	b.n	800206a <setMetricsOption+0xda>
	case MetricsOption_Pressure:
		setString(str, PRESSURE_STR_TEXT, PRESSURE_STR_PROT,
 8002020:	edd7 7a02 	vldr	s15, [r7, #8]
 8002024:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002090 <setMetricsOption+0x100>
 8002028:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002094 <setMetricsOption+0x104>
 800202c:	eeb0 1a66 	vmov.f32	s2, s13
 8002030:	eef0 0a47 	vmov.f32	s1, s14
 8002034:	eeb0 0a67 	vmov.f32	s0, s15
 8002038:	4a17      	ldr	r2, [pc, #92]	; (8002098 <setMetricsOption+0x108>)
 800203a:	4918      	ldr	r1, [pc, #96]	; (800209c <setMetricsOption+0x10c>)
 800203c:	6978      	ldr	r0, [r7, #20]
 800203e:	f000 f837 	bl	80020b0 <setString>
				metricsStruct.pressure, PRESSURE_MIN, PRESSURE_MAX);
		break;
 8002042:	e012      	b.n	800206a <setMetricsOption+0xda>
	case MetricsOption_Altitude:
		setString(str, ALTITUDE_STR_TEXT, ALTITUDE_STR_PROT,
 8002044:	edd7 7a03 	vldr	s15, [r7, #12]
 8002048:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80020a0 <setMetricsOption+0x110>
 800204c:	eddf 6a15 	vldr	s13, [pc, #84]	; 80020a4 <setMetricsOption+0x114>
 8002050:	eeb0 1a66 	vmov.f32	s2, s13
 8002054:	eef0 0a47 	vmov.f32	s1, s14
 8002058:	eeb0 0a67 	vmov.f32	s0, s15
 800205c:	4a12      	ldr	r2, [pc, #72]	; (80020a8 <setMetricsOption+0x118>)
 800205e:	4913      	ldr	r1, [pc, #76]	; (80020ac <setMetricsOption+0x11c>)
 8002060:	6978      	ldr	r0, [r7, #20]
 8002062:	f000 f825 	bl	80020b0 <setString>
				metricsStruct.altitude, ALTITUDE_MIN, ALTITUDE_MAX);
		break;
 8002066:	e000      	b.n	800206a <setMetricsOption+0xda>
		break;
 8002068:	bf00      	nop
	}
}
 800206a:	bf00      	nop
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	c2c7cccd 	.word	0xc2c7cccd
 8002078:	42c7cccd 	.word	0x42c7cccd
 800207c:	08007848 	.word	0x08007848
 8002080:	08007840 	.word	0x08007840
 8002084:	00000000 	.word	0x00000000
 8002088:	08007858 	.word	0x08007858
 800208c:	08007850 	.word	0x08007850
 8002090:	43820000 	.word	0x43820000
 8002094:	449d7ccd 	.word	0x449d7ccd
 8002098:	08007868 	.word	0x08007868
 800209c:	08007860 	.word	0x08007860
 80020a0:	c4ea9000 	.word	0xc4ea9000
 80020a4:	461c3f9a 	.word	0x461c3f9a
 80020a8:	08007878 	.word	0x08007878
 80020ac:	08007870 	.word	0x08007870

080020b0 <setString>:
void setString(uint8_t *str, const uint8_t *strText, const uint8_t *strProt,
		float value, float minValue, float maxValue) {
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b089      	sub	sp, #36	; 0x24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6178      	str	r0, [r7, #20]
 80020b8:	6139      	str	r1, [r7, #16]
 80020ba:	60fa      	str	r2, [r7, #12]
 80020bc:	ed87 0a02 	vstr	s0, [r7, #8]
 80020c0:	edc7 0a01 	vstr	s1, [r7, #4]
 80020c4:	ed87 1a00 	vstr	s2, [r7]
	strcpy((char*) str, (const char*) strText);
 80020c8:	6939      	ldr	r1, [r7, #16]
 80020ca:	6978      	ldr	r0, [r7, #20]
 80020cc:	f002 f9d0 	bl	8004470 <strcpy>
	uint16_t len = strlen((const char*) str);
 80020d0:	6978      	ldr	r0, [r7, #20]
 80020d2:	f7fe f87d 	bl	80001d0 <strlen>
 80020d6:	4603      	mov	r3, r0
 80020d8:	83fb      	strh	r3, [r7, #30]
	if (value < minValue)
 80020da:	ed97 7a02 	vldr	s14, [r7, #8]
 80020de:	edd7 7a01 	vldr	s15, [r7, #4]
 80020e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ea:	d502      	bpl.n	80020f2 <setString+0x42>
		value = minValue;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	e00a      	b.n	8002108 <setString+0x58>
	else if (value > maxValue)
 80020f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80020f6:	edd7 7a00 	vldr	s15, [r7]
 80020fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002102:	dd01      	ble.n	8002108 <setString+0x58>
		value = maxValue;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	60bb      	str	r3, [r7, #8]
	sprintf((char*) (str + len), (const char*) strProt, value);
 8002108:	8bfb      	ldrh	r3, [r7, #30]
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	18d4      	adds	r4, r2, r3
 800210e:	68b8      	ldr	r0, [r7, #8]
 8002110:	f7fe fa1a 	bl	8000548 <__aeabi_f2d>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	68f9      	ldr	r1, [r7, #12]
 800211a:	4620      	mov	r0, r4
 800211c:	f002 f988 	bl	8004430 <siprintf>
}
 8002120:	bf00      	nop
 8002122:	3724      	adds	r7, #36	; 0x24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd90      	pop	{r4, r7, pc}

08002128 <displayString>:
uint8_t displayString(uint8_t index, uint8_t *str, uint8_t length) {
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	6039      	str	r1, [r7, #0]
 8002132:	71fb      	strb	r3, [r7, #7]
 8002134:	4613      	mov	r3, r2
 8002136:	71bb      	strb	r3, [r7, #6]
	uint8_t result = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	73fb      	strb	r3, [r7, #15]
	if (index + STR_DISP_LEN <= length) {
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	1cda      	adds	r2, r3, #3
 8002140:	79bb      	ldrb	r3, [r7, #6]
 8002142:	429a      	cmp	r2, r3
 8002144:	da15      	bge.n	8002172 <displayString+0x4a>
		uint8_t dispStr[STR_DISP_LEN] = { 0 };
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
		memcpy(dispStr, str + index, STR_DISP_LEN);
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	4413      	add	r3, r2
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	60bb      	str	r3, [r7, #8]
		result = index + STR_DISP_LEN;
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	3304      	adds	r3, #4
 8002158:	73fb      	strb	r3, [r7, #15]
		DisplayDigit_0.chr = dispStr[0];
 800215a:	7a3a      	ldrb	r2, [r7, #8]
 800215c:	4b08      	ldr	r3, [pc, #32]	; (8002180 <displayString+0x58>)
 800215e:	705a      	strb	r2, [r3, #1]
		DisplayDigit_1.chr = dispStr[1];
 8002160:	7a7a      	ldrb	r2, [r7, #9]
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <displayString+0x5c>)
 8002164:	705a      	strb	r2, [r3, #1]
		DisplayDigit_2.chr = dispStr[2];
 8002166:	7aba      	ldrb	r2, [r7, #10]
 8002168:	4b07      	ldr	r3, [pc, #28]	; (8002188 <displayString+0x60>)
 800216a:	705a      	strb	r2, [r3, #1]
		DisplayDigit_3.chr = dispStr[3];
 800216c:	7afa      	ldrb	r2, [r7, #11]
 800216e:	4b07      	ldr	r3, [pc, #28]	; (800218c <displayString+0x64>)
 8002170:	705a      	strb	r2, [r3, #1]
	}
	return result;
 8002172:	7bfb      	ldrb	r3, [r7, #15]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	20000218 	.word	0x20000218
 8002184:	20000210 	.word	0x20000210
 8002188:	2000020c 	.word	0x2000020c
 800218c:	20000214 	.word	0x20000214

08002190 <LL_I2C_IsActiveFlag_RXNE>:
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d101      	bne.n	80021a8 <LL_I2C_IsActiveFlag_RXNE+0x18>
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <LL_I2C_IsActiveFlag_RXNE+0x1a>
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <LL_I2C_ReceiveData8>:
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	b2db      	uxtb	r3, r3
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80021d8:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80021da:	695a      	ldr	r2, [r3, #20]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4013      	ands	r3, r2
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	bf0c      	ite	eq
 80021e6:	2301      	moveq	r3, #1
 80021e8:	2300      	movne	r3, #0
 80021ea:	b2db      	uxtb	r3, r3
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	40010400 	.word	0x40010400

080021fc <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6153      	str	r3, [r2, #20]
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40010400 	.word	0x40010400

0800221c <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f06f 0201 	mvn.w	r2, #1
 800222a:	611a      	str	r2, [r3, #16]
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002262:	e7fe      	b.n	8002262 <NMI_Handler+0x4>

08002264 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8002268:	e7fe      	b.n	8002268 <HardFault_Handler+0x4>

0800226a <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 800226e:	e7fe      	b.n	800226e <MemManage_Handler+0x4>

08002270 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8002274:	e7fe      	b.n	8002274 <BusFault_Handler+0x4>

08002276 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 800227a:	e7fe      	b.n	800227a <UsageFault_Handler+0x4>

0800227c <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
	/* USER CODE END SysTick_IRQn 0 */

	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <EXTI3_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line 3 interrupt.
 */
void EXTI3_IRQHandler(void) {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN EXTI3_IRQn 0 */

	/* USER CODE END EXTI3_IRQn 0 */
	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET) {
 80022ba:	2008      	movs	r0, #8
 80022bc:	f7ff ff88 	bl	80021d0 <LL_EXTI_IsActiveFlag_0_31>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d014      	beq.n	80022f0 <EXTI3_IRQHandler+0x3c>
		LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 80022c6:	2008      	movs	r0, #8
 80022c8:	f7ff ff98 	bl	80021fc <LL_EXTI_ClearFlag_0_31>
		/* USER CODE BEGIN LL_EXTI_LINE_3 */
		if (checkButtonState(TLACIDLO_GPIO_Port, TLACIDLO_Pin, BUTTON_EXTI_TRIGGER,
 80022cc:	2314      	movs	r3, #20
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	231e      	movs	r3, #30
 80022d2:	2201      	movs	r2, #1
 80022d4:	2108      	movs	r1, #8
 80022d6:	4808      	ldr	r0, [pc, #32]	; (80022f8 <EXTI3_IRQHandler+0x44>)
 80022d8:	f7ff fe28 	bl	8001f2c <checkButtonState>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d006      	beq.n	80022f0 <EXTI3_IRQHandler+0x3c>
			BUTTON_EXTI_SAMPLES_WINDOW, BUTTON_EXTI_SAMPLES_REQUIRED) && switch_state == 0) {
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <EXTI3_IRQHandler+0x48>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d102      	bne.n	80022f0 <EXTI3_IRQHandler+0x3c>
				switch_state = 1;
 80022ea:	4b04      	ldr	r3, [pc, #16]	; (80022fc <EXTI3_IRQHandler+0x48>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]
		/* USER CODE END LL_EXTI_LINE_3 */
	}
	/* USER CODE BEGIN EXTI3_IRQn 1 */

	/* USER CODE END EXTI3_IRQn 1 */
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	48000400 	.word	0x48000400
 80022fc:	2000020e 	.word	0x2000020e

08002300 <I2C1_EV_IRQHandler>:

/**
 * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
 */
void I2C1_EV_IRQHandler(void) {
 8002300:	b598      	push	{r3, r4, r7, lr}
 8002302:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C1_EV_IRQn 0 */
	if (LL_I2C_IsActiveFlag_RXNE(I2C1)) {
 8002304:	4812      	ldr	r0, [pc, #72]	; (8002350 <I2C1_EV_IRQHandler+0x50>)
 8002306:	f7ff ff43 	bl	8002190 <LL_I2C_IsActiveFlag_RXNE>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d01c      	beq.n	800234a <I2C1_EV_IRQHandler+0x4a>
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8002310:	4b10      	ldr	r3, [pc, #64]	; (8002354 <I2C1_EV_IRQHandler+0x54>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4b10      	ldr	r3, [pc, #64]	; (8002358 <I2C1_EV_IRQHandler+0x58>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	1c59      	adds	r1, r3, #1
 800231c:	b2c8      	uxtb	r0, r1
 800231e:	490e      	ldr	r1, [pc, #56]	; (8002358 <I2C1_EV_IRQHandler+0x58>)
 8002320:	7008      	strb	r0, [r1, #0]
 8002322:	18d4      	adds	r4, r2, r3
 8002324:	480a      	ldr	r0, [pc, #40]	; (8002350 <I2C1_EV_IRQHandler+0x50>)
 8002326:	f7ff ff46 	bl	80021b6 <LL_I2C_ReceiveData8>
 800232a:	4603      	mov	r3, r0
 800232c:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 800232e:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <I2C1_EV_IRQHandler+0x58>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b13      	cmp	r3, #19
 8002336:	d903      	bls.n	8002340 <I2C1_EV_IRQHandler+0x40>
 8002338:	4b07      	ldr	r3, [pc, #28]	; (8002358 <I2C1_EV_IRQHandler+0x58>)
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]
 800233e:	e001      	b.n	8002344 <I2C1_EV_IRQHandler+0x44>
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <I2C1_EV_IRQHandler+0x58>)
 8002342:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <I2C1_EV_IRQHandler+0x5c>)
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
	/* USER CODE END I2C1_EV_IRQn 0 */

	/* USER CODE BEGIN I2C1_EV_IRQn 1 */

	/* USER CODE END I2C1_EV_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd98      	pop	{r3, r4, r7, pc}
 800234e:	bf00      	nop
 8002350:	40005400 	.word	0x40005400
 8002354:	20000220 	.word	0x20000220
 8002358:	2000021c 	.word	0x2000021c
 800235c:	20000224 	.word	0x20000224

08002360 <TIM6_DAC1_IRQHandler>:

/**
 * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
 */
void TIM6_DAC1_IRQHandler(void) {
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC1_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM6)) {
 8002364:	4806      	ldr	r0, [pc, #24]	; (8002380 <TIM6_DAC1_IRQHandler+0x20>)
 8002366:	f7ff ff67 	bl	8002238 <LL_TIM_IsActiveFlag_UPDATE>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <TIM6_DAC1_IRQHandler+0x14>
		updateDisplay();
 8002370:	f7fe fd8c 	bl	8000e8c <updateDisplay>
	}
	/* USER CODE END TIM6_DAC1_IRQn 0 */

	/* USER CODE BEGIN TIM6_DAC1_IRQn 1 */
	LL_TIM_ClearFlag_UPDATE(TIM6);
 8002374:	4802      	ldr	r0, [pc, #8]	; (8002380 <TIM6_DAC1_IRQHandler+0x20>)
 8002376:	f7ff ff51 	bl	800221c <LL_TIM_ClearFlag_UPDATE>
	/* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40001000 	.word	0x40001000

08002384 <TIM7_DAC2_IRQHandler>:

/**
 * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
 */
void TIM7_DAC2_IRQHandler(void) {
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM7_DAC2_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM7)) {
 8002388:	4806      	ldr	r0, [pc, #24]	; (80023a4 <TIM7_DAC2_IRQHandler+0x20>)
 800238a:	f7ff ff55 	bl	8002238 <LL_TIM_IsActiveFlag_UPDATE>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <TIM7_DAC2_IRQHandler+0x16>
		nextStringSequence = true;
 8002394:	4b04      	ldr	r3, [pc, #16]	; (80023a8 <TIM7_DAC2_IRQHandler+0x24>)
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END TIM7_DAC2_IRQn 0 */

	/* USER CODE BEGIN TIM7_DAC2_IRQn 1 */
	LL_TIM_ClearFlag_UPDATE(TIM7);
 800239a:	4802      	ldr	r0, [pc, #8]	; (80023a4 <TIM7_DAC2_IRQHandler+0x20>)
 800239c:	f7ff ff3e 	bl	800221c <LL_TIM_ClearFlag_UPDATE>
	/* USER CODE END TIM7_DAC2_IRQn 1 */
}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40001400 	.word	0x40001400
 80023a8:	20000228 	.word	0x20000228

080023ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
	return 1;
 80023b0:	2301      	movs	r3, #1
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <_kill>:

int _kill(int pid, int sig)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023c6:	f001 fb97 	bl	8003af8 <__errno>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2216      	movs	r2, #22
 80023ce:	601a      	str	r2, [r3, #0]
	return -1;
 80023d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <_exit>:

void _exit (int status)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023e4:	f04f 31ff 	mov.w	r1, #4294967295
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff ffe7 	bl	80023bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80023ee:	e7fe      	b.n	80023ee <_exit+0x12>

080023f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	e00a      	b.n	8002418 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002402:	f3af 8000 	nop.w
 8002406:	4601      	mov	r1, r0
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	60ba      	str	r2, [r7, #8]
 800240e:	b2ca      	uxtb	r2, r1
 8002410:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	3301      	adds	r3, #1
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	429a      	cmp	r2, r3
 800241e:	dbf0      	blt.n	8002402 <_read+0x12>
	}

return len;
 8002420:	687b      	ldr	r3, [r7, #4]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	e009      	b.n	8002450 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	60ba      	str	r2, [r7, #8]
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	3301      	adds	r3, #1
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	429a      	cmp	r2, r3
 8002456:	dbf1      	blt.n	800243c <_write+0x12>
	}
	return len;
 8002458:	687b      	ldr	r3, [r7, #4]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <_close>:

int _close(int file)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
	return -1;
 800246a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800248a:	605a      	str	r2, [r3, #4]
	return 0;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <_isatty>:

int _isatty(int file)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
	return 1;
 80024a2:	2301      	movs	r3, #1
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
	return 0;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
	...

080024cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024d4:	4a14      	ldr	r2, [pc, #80]	; (8002528 <_sbrk+0x5c>)
 80024d6:	4b15      	ldr	r3, [pc, #84]	; (800252c <_sbrk+0x60>)
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024e0:	4b13      	ldr	r3, [pc, #76]	; (8002530 <_sbrk+0x64>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d102      	bne.n	80024ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024e8:	4b11      	ldr	r3, [pc, #68]	; (8002530 <_sbrk+0x64>)
 80024ea:	4a12      	ldr	r2, [pc, #72]	; (8002534 <_sbrk+0x68>)
 80024ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <_sbrk+0x64>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d207      	bcs.n	800250c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024fc:	f001 fafc 	bl	8003af8 <__errno>
 8002500:	4603      	mov	r3, r0
 8002502:	220c      	movs	r2, #12
 8002504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002506:	f04f 33ff 	mov.w	r3, #4294967295
 800250a:	e009      	b.n	8002520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <_sbrk+0x64>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002512:	4b07      	ldr	r3, [pc, #28]	; (8002530 <_sbrk+0x64>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4413      	add	r3, r2
 800251a:	4a05      	ldr	r2, [pc, #20]	; (8002530 <_sbrk+0x64>)
 800251c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800251e:	68fb      	ldr	r3, [r7, #12]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20003000 	.word	0x20003000
 800252c:	00000400 	.word	0x00000400
 8002530:	200001fc 	.word	0x200001fc
 8002534:	20000260 	.word	0x20000260

08002538 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <SystemInit+0x20>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002542:	4a05      	ldr	r2, [pc, #20]	; (8002558 <SystemInit+0x20>)
 8002544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <__NVIC_GetPriorityGrouping>:
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002560:	4b04      	ldr	r3, [pc, #16]	; (8002574 <__NVIC_GetPriorityGrouping+0x18>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	f003 0307 	and.w	r3, r3, #7
}
 800256a:	4618      	mov	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <__NVIC_EnableIRQ>:
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	2b00      	cmp	r3, #0
 8002588:	db0b      	blt.n	80025a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	f003 021f 	and.w	r2, r3, #31
 8002590:	4907      	ldr	r1, [pc, #28]	; (80025b0 <__NVIC_EnableIRQ+0x38>)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	2001      	movs	r0, #1
 800259a:	fa00 f202 	lsl.w	r2, r0, r2
 800259e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	e000e100 	.word	0xe000e100

080025b4 <__NVIC_SetPriority>:
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	6039      	str	r1, [r7, #0]
 80025be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	db0a      	blt.n	80025de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	490c      	ldr	r1, [pc, #48]	; (8002600 <__NVIC_SetPriority+0x4c>)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	0112      	lsls	r2, r2, #4
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	440b      	add	r3, r1
 80025d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80025dc:	e00a      	b.n	80025f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	4908      	ldr	r1, [pc, #32]	; (8002604 <__NVIC_SetPriority+0x50>)
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	3b04      	subs	r3, #4
 80025ec:	0112      	lsls	r2, r2, #4
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	440b      	add	r3, r1
 80025f2:	761a      	strb	r2, [r3, #24]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	e000e100 	.word	0xe000e100
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <NVIC_EncodePriority>:
{
 8002608:	b480      	push	{r7}
 800260a:	b089      	sub	sp, #36	; 0x24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f1c3 0307 	rsb	r3, r3, #7
 8002622:	2b04      	cmp	r3, #4
 8002624:	bf28      	it	cs
 8002626:	2304      	movcs	r3, #4
 8002628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3304      	adds	r3, #4
 800262e:	2b06      	cmp	r3, #6
 8002630:	d902      	bls.n	8002638 <NVIC_EncodePriority+0x30>
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3b03      	subs	r3, #3
 8002636:	e000      	b.n	800263a <NVIC_EncodePriority+0x32>
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800263c:	f04f 32ff 	mov.w	r2, #4294967295
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43da      	mvns	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	401a      	ands	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002650:	f04f 31ff 	mov.w	r1, #4294967295
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
 800265a:	43d9      	mvns	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	4313      	orrs	r3, r2
}
 8002662:	4618      	mov	r0, r3
 8002664:	3724      	adds	r7, #36	; 0x24
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <LL_APB1_GRP1_EnableClock>:
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <LL_APB1_GRP1_EnableClock+0x2c>)
 800267a:	69da      	ldr	r2, [r3, #28]
 800267c:	4907      	ldr	r1, [pc, #28]	; (800269c <LL_APB1_GRP1_EnableClock+0x2c>)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4313      	orrs	r3, r2
 8002682:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002686:	69da      	ldr	r2, [r3, #28]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4013      	ands	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800268e:	68fb      	ldr	r3, [r7, #12]
}
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	40021000 	.word	0x40021000

080026a0 <LL_TIM_EnableCounter>:
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f043 0201 	orr.w	r2, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	601a      	str	r2, [r3, #0]
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <LL_TIM_DisableARRPreload>:
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	601a      	str	r2, [r3, #0]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <LL_TIM_SetTriggerOutput>:
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	605a      	str	r2, [r3, #4]
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <LL_TIM_DisableMasterSlaveMode>:
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	609a      	str	r2, [r3, #8]
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f043 0201 	orr.w	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	60da      	str	r2, [r3, #12]
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <MX_TIM6_Init>:

/* USER CODE END 0 */

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800274e:	1d3b      	adds	r3, r7, #4
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
 800275a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 800275c:	2010      	movs	r0, #16
 800275e:	f7ff ff87 	bl	8002670 <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_DAC1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002762:	f7ff fefb 	bl	800255c <__NVIC_GetPriorityGrouping>
 8002766:	4603      	mov	r3, r0
 8002768:	2200      	movs	r2, #0
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ff4b 	bl	8002608 <NVIC_EncodePriority>
 8002772:	4603      	mov	r3, r0
 8002774:	4619      	mov	r1, r3
 8002776:	2036      	movs	r0, #54	; 0x36
 8002778:	f7ff ff1c 	bl	80025b4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 800277c:	2036      	movs	r0, #54	; 0x36
 800277e:	f7ff fefb 	bl	8002578 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 8002782:	f240 331f 	movw	r3, #799	; 0x31f
 8002786:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002788:	2300      	movs	r3, #0
 800278a:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 49;
 800278c:	2331      	movs	r3, #49	; 0x31
 800278e:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8002790:	1d3b      	adds	r3, r7, #4
 8002792:	4619      	mov	r1, r3
 8002794:	480b      	ldr	r0, [pc, #44]	; (80027c4 <MX_TIM6_Init+0x7c>)
 8002796:	f000 fd33 	bl	8003200 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 800279a:	480a      	ldr	r0, [pc, #40]	; (80027c4 <MX_TIM6_Init+0x7c>)
 800279c:	f7ff ff90 	bl	80026c0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 80027a0:	2100      	movs	r1, #0
 80027a2:	4808      	ldr	r0, [pc, #32]	; (80027c4 <MX_TIM6_Init+0x7c>)
 80027a4:	f7ff ff9c 	bl	80026e0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 80027a8:	4806      	ldr	r0, [pc, #24]	; (80027c4 <MX_TIM6_Init+0x7c>)
 80027aa:	f7ff ffac 	bl	8002706 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */
	LL_TIM_EnableIT_UPDATE(TIM6);
 80027ae:	4805      	ldr	r0, [pc, #20]	; (80027c4 <MX_TIM6_Init+0x7c>)
 80027b0:	f7ff ffb9 	bl	8002726 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM6);
 80027b4:	4803      	ldr	r0, [pc, #12]	; (80027c4 <MX_TIM6_Init+0x7c>)
 80027b6:	f7ff ff73 	bl	80026a0 <LL_TIM_EnableCounter>
  /* USER CODE END TIM6_Init 2 */

}
 80027ba:	bf00      	nop
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40001000 	.word	0x40001000

080027c8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80027ce:	1d3b      	adds	r3, r7, #4
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 80027dc:	2020      	movs	r0, #32
 80027de:	f7ff ff47 	bl	8002670 <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_DAC2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80027e2:	f7ff febb 	bl	800255c <__NVIC_GetPriorityGrouping>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2200      	movs	r2, #0
 80027ea:	2100      	movs	r1, #0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff0b 	bl	8002608 <NVIC_EncodePriority>
 80027f2:	4603      	mov	r3, r0
 80027f4:	4619      	mov	r1, r3
 80027f6:	2037      	movs	r0, #55	; 0x37
 80027f8:	f7ff fedc 	bl	80025b4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 80027fc:	2037      	movs	r0, #55	; 0x37
 80027fe:	f7ff febb 	bl	8002578 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 7999;
 8002802:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8002806:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002808:	2300      	movs	r3, #0
 800280a:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 999;
 800280c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002810:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 8002812:	1d3b      	adds	r3, r7, #4
 8002814:	4619      	mov	r1, r3
 8002816:	480b      	ldr	r0, [pc, #44]	; (8002844 <MX_TIM7_Init+0x7c>)
 8002818:	f000 fcf2 	bl	8003200 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM7);
 800281c:	4809      	ldr	r0, [pc, #36]	; (8002844 <MX_TIM7_Init+0x7c>)
 800281e:	f7ff ff4f 	bl	80026c0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 8002822:	2100      	movs	r1, #0
 8002824:	4807      	ldr	r0, [pc, #28]	; (8002844 <MX_TIM7_Init+0x7c>)
 8002826:	f7ff ff5b 	bl	80026e0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 800282a:	4806      	ldr	r0, [pc, #24]	; (8002844 <MX_TIM7_Init+0x7c>)
 800282c:	f7ff ff6b 	bl	8002706 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */
	LL_TIM_EnableIT_UPDATE(TIM7);
 8002830:	4804      	ldr	r0, [pc, #16]	; (8002844 <MX_TIM7_Init+0x7c>)
 8002832:	f7ff ff78 	bl	8002726 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM7);
 8002836:	4803      	ldr	r0, [pc, #12]	; (8002844 <MX_TIM7_Init+0x7c>)
 8002838:	f7ff ff32 	bl	80026a0 <LL_TIM_EnableCounter>
  /* USER CODE END TIM7_Init 2 */

}
 800283c:	bf00      	nop
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40001400 	.word	0x40001400

08002848 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002880 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800284c:	480d      	ldr	r0, [pc, #52]	; (8002884 <LoopForever+0x6>)
  ldr r1, =_edata
 800284e:	490e      	ldr	r1, [pc, #56]	; (8002888 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002850:	4a0e      	ldr	r2, [pc, #56]	; (800288c <LoopForever+0xe>)
  movs r3, #0
 8002852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002854:	e002      	b.n	800285c <LoopCopyDataInit>

08002856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800285a:	3304      	adds	r3, #4

0800285c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800285c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800285e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002860:	d3f9      	bcc.n	8002856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002862:	4a0b      	ldr	r2, [pc, #44]	; (8002890 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002864:	4c0b      	ldr	r4, [pc, #44]	; (8002894 <LoopForever+0x16>)
  movs r3, #0
 8002866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002868:	e001      	b.n	800286e <LoopFillZerobss>

0800286a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800286a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800286c:	3204      	adds	r2, #4

0800286e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800286e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002870:	d3fb      	bcc.n	800286a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002872:	f7ff fe61 	bl	8002538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002876:	f001 f945 	bl	8003b04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800287a:	f7ff fa13 	bl	8001ca4 <main>

0800287e <LoopForever>:

LoopForever:
    b LoopForever
 800287e:	e7fe      	b.n	800287e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002880:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002888:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800288c:	08007cb0 	.word	0x08007cb0
  ldr r2, =_sbss
 8002890:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002894:	2000025c 	.word	0x2000025c

08002898 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002898:	e7fe      	b.n	8002898 <ADC1_2_IRQHandler>
	...

0800289c <LL_EXTI_EnableIT_0_31>:
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <LL_EXTI_EnableIT_0_31+0x20>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4904      	ldr	r1, [pc, #16]	; (80028bc <LL_EXTI_EnableIT_0_31+0x20>)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	600b      	str	r3, [r1, #0]
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	40010400 	.word	0x40010400

080028c0 <LL_EXTI_EnableIT_32_63>:
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <LL_EXTI_EnableIT_32_63+0x20>)
 80028ca:	6a1a      	ldr	r2, [r3, #32]
 80028cc:	4904      	ldr	r1, [pc, #16]	; (80028e0 <LL_EXTI_EnableIT_32_63+0x20>)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	620b      	str	r3, [r1, #32]
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	40010400 	.word	0x40010400

080028e4 <LL_EXTI_DisableIT_0_31>:
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80028ec:	4b06      	ldr	r3, [pc, #24]	; (8002908 <LL_EXTI_DisableIT_0_31+0x24>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	4904      	ldr	r1, [pc, #16]	; (8002908 <LL_EXTI_DisableIT_0_31+0x24>)
 80028f6:	4013      	ands	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40010400 	.word	0x40010400

0800290c <LL_EXTI_DisableIT_32_63>:
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002914:	4b06      	ldr	r3, [pc, #24]	; (8002930 <LL_EXTI_DisableIT_32_63+0x24>)
 8002916:	6a1a      	ldr	r2, [r3, #32]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	43db      	mvns	r3, r3
 800291c:	4904      	ldr	r1, [pc, #16]	; (8002930 <LL_EXTI_DisableIT_32_63+0x24>)
 800291e:	4013      	ands	r3, r2
 8002920:	620b      	str	r3, [r1, #32]
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40010400 	.word	0x40010400

08002934 <LL_EXTI_EnableEvent_0_31>:
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <LL_EXTI_EnableEvent_0_31+0x20>)
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	4904      	ldr	r1, [pc, #16]	; (8002954 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	40010400 	.word	0x40010400

08002958 <LL_EXTI_EnableEvent_32_63>:
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002962:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002964:	4904      	ldr	r1, [pc, #16]	; (8002978 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4313      	orrs	r3, r2
 800296a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	40010400 	.word	0x40010400

0800297c <LL_EXTI_DisableEvent_0_31>:
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002984:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	43db      	mvns	r3, r3
 800298c:	4904      	ldr	r1, [pc, #16]	; (80029a0 <LL_EXTI_DisableEvent_0_31+0x24>)
 800298e:	4013      	ands	r3, r2
 8002990:	604b      	str	r3, [r1, #4]
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40010400 	.word	0x40010400

080029a4 <LL_EXTI_DisableEvent_32_63>:
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80029ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	43db      	mvns	r3, r3
 80029b4:	4904      	ldr	r1, [pc, #16]	; (80029c8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40010400 	.word	0x40010400

080029cc <LL_EXTI_EnableRisingTrig_0_31>:
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80029d4:	4b05      	ldr	r3, [pc, #20]	; (80029ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	4904      	ldr	r1, [pc, #16]	; (80029ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4313      	orrs	r3, r2
 80029de:	608b      	str	r3, [r1, #8]
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	40010400 	.word	0x40010400

080029f0 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80029fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029fc:	4904      	ldr	r1, [pc, #16]	; (8002a10 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	40010400 	.word	0x40010400

08002a14 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	43db      	mvns	r3, r3
 8002a24:	4904      	ldr	r1, [pc, #16]	; (8002a38 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002a26:	4013      	ands	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40010400 	.word	0x40010400

08002a3c <LL_EXTI_DisableRisingTrig_32_63>:
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002a44:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002a46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	4904      	ldr	r1, [pc, #16]	; (8002a60 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40010400 	.word	0x40010400

08002a64 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002a6c:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	4904      	ldr	r1, [pc, #16]	; (8002a84 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60cb      	str	r3, [r1, #12]
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	40010400 	.word	0x40010400

08002a88 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a94:	4904      	ldr	r1, [pc, #16]	; (8002aa8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	40010400 	.word	0x40010400

08002aac <LL_EXTI_DisableFallingTrig_0_31>:
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	43db      	mvns	r3, r3
 8002abc:	4904      	ldr	r1, [pc, #16]	; (8002ad0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	60cb      	str	r3, [r1, #12]
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40010400 	.word	0x40010400

08002ad4 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	4904      	ldr	r1, [pc, #16]	; (8002af8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40010400 	.word	0x40010400

08002afc <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002b04:	2300      	movs	r3, #0
 8002b06:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	7a1b      	ldrb	r3, [r3, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 80cd 	beq.w	8002cac <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d061      	beq.n	8002bde <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	7a5b      	ldrb	r3, [r3, #9]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d01c      	beq.n	8002b5c <LL_EXTI_Init+0x60>
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	dc25      	bgt.n	8002b72 <LL_EXTI_Init+0x76>
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <LL_EXTI_Init+0x34>
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d00b      	beq.n	8002b46 <LL_EXTI_Init+0x4a>
 8002b2e:	e020      	b.n	8002b72 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff ff21 	bl	800297c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff feac 	bl	800289c <LL_EXTI_EnableIT_0_31>
          break;
 8002b44:	e018      	b.n	8002b78 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff feca 	bl	80028e4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff feed 	bl	8002934 <LL_EXTI_EnableEvent_0_31>
          break;
 8002b5a:	e00d      	b.n	8002b78 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff fe9b 	bl	800289c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fee2 	bl	8002934 <LL_EXTI_EnableEvent_0_31>
          break;
 8002b70:	e002      	b.n	8002b78 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
          break;
 8002b76:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	7a9b      	ldrb	r3, [r3, #10]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d02e      	beq.n	8002bde <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	7a9b      	ldrb	r3, [r3, #10]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d01c      	beq.n	8002bc2 <LL_EXTI_Init+0xc6>
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	dc25      	bgt.n	8002bd8 <LL_EXTI_Init+0xdc>
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d002      	beq.n	8002b96 <LL_EXTI_Init+0x9a>
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d00b      	beq.n	8002bac <LL_EXTI_Init+0xb0>
 8002b94:	e020      	b.n	8002bd8 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff ff86 	bl	8002aac <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff ff11 	bl	80029cc <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002baa:	e019      	b.n	8002be0 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff ff2f 	bl	8002a14 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff ff52 	bl	8002a64 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002bc0:	e00e      	b.n	8002be0 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff ff00 	bl	80029cc <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff ff47 	bl	8002a64 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002bd6:	e003      	b.n	8002be0 <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
            break;
 8002bdc:	e000      	b.n	8002be0 <LL_EXTI_Init+0xe4>
        }
      }
 8002bde:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d076      	beq.n	8002cd6 <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	7a5b      	ldrb	r3, [r3, #9]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d01c      	beq.n	8002c2a <LL_EXTI_Init+0x12e>
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	dc25      	bgt.n	8002c40 <LL_EXTI_Init+0x144>
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <LL_EXTI_Init+0x102>
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d00b      	beq.n	8002c14 <LL_EXTI_Init+0x118>
 8002bfc:	e020      	b.n	8002c40 <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fece 	bl	80029a4 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff fe57 	bl	80028c0 <LL_EXTI_EnableIT_32_63>
          break;
 8002c12:	e018      	b.n	8002c46 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff fe77 	bl	800290c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fe98 	bl	8002958 <LL_EXTI_EnableEvent_32_63>
          break;
 8002c28:	e00d      	b.n	8002c46 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fe46 	bl	80028c0 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fe8d 	bl	8002958 <LL_EXTI_EnableEvent_32_63>
          break;
 8002c3e:	e002      	b.n	8002c46 <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
          break;
 8002c44:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	7a9b      	ldrb	r3, [r3, #10]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d043      	beq.n	8002cd6 <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	7a9b      	ldrb	r3, [r3, #10]
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d01c      	beq.n	8002c90 <LL_EXTI_Init+0x194>
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	dc25      	bgt.n	8002ca6 <LL_EXTI_Init+0x1aa>
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d002      	beq.n	8002c64 <LL_EXTI_Init+0x168>
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d00b      	beq.n	8002c7a <LL_EXTI_Init+0x17e>
 8002c62:	e020      	b.n	8002ca6 <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff ff33 	bl	8002ad4 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff febc 	bl	80029f0 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8002c78:	e02e      	b.n	8002cd8 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff fedc 	bl	8002a3c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fefd 	bl	8002a88 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002c8e:	e023      	b.n	8002cd8 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff feab 	bl	80029f0 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff fef2 	bl	8002a88 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002ca4:	e018      	b.n	8002cd8 <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	73fb      	strb	r3, [r7, #15]
            break;
 8002caa:	e015      	b.n	8002cd8 <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fe17 	bl	80028e4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff fe5e 	bl	800297c <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fe21 	bl	800290c <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff fe68 	bl	80029a4 <LL_EXTI_DisableEvent_32_63>
 8002cd4:	e000      	b.n	8002cd8 <LL_EXTI_Init+0x1dc>
      }
 8002cd6:	bf00      	nop
#endif
  }
  return status;
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <LL_GPIO_SetPinMode>:
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b089      	sub	sp, #36	; 0x24
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	fa93 f3a3 	rbit	r3, r3
 8002cfc:	613b      	str	r3, [r7, #16]
  return result;
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	fab3 f383 	clz	r3, r3
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	2103      	movs	r1, #3
 8002d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	401a      	ands	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	fa93 f3a3 	rbit	r3, r3
 8002d1c:	61bb      	str	r3, [r7, #24]
  return result;
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	fab3 f383 	clz	r3, r3
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	601a      	str	r2, [r3, #0]
}
 8002d34:	bf00      	nop
 8002d36:	3724      	adds	r7, #36	; 0x24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <LL_GPIO_SetPinOutputType>:
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	43db      	mvns	r3, r3
 8002d54:	401a      	ands	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	605a      	str	r2, [r3, #4]
}
 8002d64:	bf00      	nop
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <LL_GPIO_SetPinSpeed>:
{
 8002d70:	b480      	push	{r7}
 8002d72:	b089      	sub	sp, #36	; 0x24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	613b      	str	r3, [r7, #16]
  return result;
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	fab3 f383 	clz	r3, r3
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	2103      	movs	r1, #3
 8002d98:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	401a      	ands	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	61bb      	str	r3, [r7, #24]
  return result;
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	609a      	str	r2, [r3, #8]
}
 8002dc2:	bf00      	nop
 8002dc4:	3724      	adds	r7, #36	; 0x24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <LL_GPIO_SetPinPull>:
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b089      	sub	sp, #36	; 0x24
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	fa93 f3a3 	rbit	r3, r3
 8002de8:	613b      	str	r3, [r7, #16]
  return result;
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	fab3 f383 	clz	r3, r3
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	2103      	movs	r1, #3
 8002df6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	401a      	ands	r2, r3
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	fa93 f3a3 	rbit	r3, r3
 8002e08:	61bb      	str	r3, [r7, #24]
  return result;
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	fab3 f383 	clz	r3, r3
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	60da      	str	r2, [r3, #12]
}
 8002e20:	bf00      	nop
 8002e22:	3724      	adds	r7, #36	; 0x24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <LL_GPIO_SetAFPin_0_7>:
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b089      	sub	sp, #36	; 0x24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a1a      	ldr	r2, [r3, #32]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	fa93 f3a3 	rbit	r3, r3
 8002e46:	613b      	str	r3, [r7, #16]
  return result;
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	fab3 f383 	clz	r3, r3
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	210f      	movs	r1, #15
 8002e54:	fa01 f303 	lsl.w	r3, r1, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	401a      	ands	r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	61bb      	str	r3, [r7, #24]
  return result;
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	fab3 f383 	clz	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	fa01 f303 	lsl.w	r3, r1, r3
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	621a      	str	r2, [r3, #32]
}
 8002e7e:	bf00      	nop
 8002e80:	3724      	adds	r7, #36	; 0x24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <LL_GPIO_SetAFPin_8_15>:
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b089      	sub	sp, #36	; 0x24
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	60f8      	str	r0, [r7, #12]
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	0a1b      	lsrs	r3, r3, #8
 8002e9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	613b      	str	r3, [r7, #16]
  return result;
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	fab3 f383 	clz	r3, r3
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	210f      	movs	r1, #15
 8002eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	401a      	ands	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	0a1b      	lsrs	r3, r3, #8
 8002ec0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	fa93 f3a3 	rbit	r3, r3
 8002ec8:	61bb      	str	r3, [r7, #24]
  return result;
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	fab3 f383 	clz	r3, r3
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eda:	431a      	orrs	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002ee0:	bf00      	nop
 8002ee2:	3724      	adds	r7, #36	; 0x24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	613b      	str	r3, [r7, #16]
  return result;
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	fab3 f383 	clz	r3, r3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002f0e:	e051      	b.n	8002fb4 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	2101      	movs	r1, #1
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d043      	beq.n	8002fae <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d003      	beq.n	8002f36 <LL_GPIO_Init+0x4a>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d10e      	bne.n	8002f54 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	69b9      	ldr	r1, [r7, #24]
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff ff16 	bl	8002d70 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	6819      	ldr	r1, [r3, #0]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7ff fef6 	bl	8002d40 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	69b9      	ldr	r1, [r7, #24]
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7ff ff36 	bl	8002dce <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d11a      	bne.n	8002fa0 <LL_GPIO_Init+0xb4>
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	fa93 f3a3 	rbit	r3, r3
 8002f74:	60bb      	str	r3, [r7, #8]
  return result;
 8002f76:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002f78:	fab3 f383 	clz	r3, r3
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b07      	cmp	r3, #7
 8002f80:	d807      	bhi.n	8002f92 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	461a      	mov	r2, r3
 8002f88:	69b9      	ldr	r1, [r7, #24]
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7ff ff4e 	bl	8002e2c <LL_GPIO_SetAFPin_0_7>
 8002f90:	e006      	b.n	8002fa0 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	461a      	mov	r2, r3
 8002f98:	69b9      	ldr	r1, [r7, #24]
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff ff75 	bl	8002e8a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	69b9      	ldr	r1, [r7, #24]
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff fe9a 	bl	8002ce2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	fa22 f303 	lsr.w	r3, r2, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1a6      	bne.n	8002f10 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3720      	adds	r7, #32
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <LL_I2C_Enable>:
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f043 0201 	orr.w	r2, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	601a      	str	r2, [r3, #0]
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_I2C_Disable>:
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f023 0201 	bic.w	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	601a      	str	r2, [r3, #0]
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <LL_I2C_ConfigFilters>:
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	0219      	lsls	r1, r3, #8
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	430b      	orrs	r3, r1
 8003028:	431a      	orrs	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	601a      	str	r2, [r3, #0]
}
 800302e:	bf00      	nop
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <LL_I2C_SetOwnAddress1>:
{
 800303a:	b480      	push	{r7}
 800303c:	b085      	sub	sp, #20
 800303e:	af00      	add	r7, sp, #0
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800304e:	f023 0307 	bic.w	r3, r3, #7
 8003052:	68b9      	ldr	r1, [r7, #8]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	430a      	orrs	r2, r1
 8003058:	431a      	orrs	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	609a      	str	r2, [r3, #8]
}
 800305e:	bf00      	nop
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <LL_I2C_EnableOwnAddress1>:
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	609a      	str	r2, [r3, #8]
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <LL_I2C_DisableOwnAddress1>:
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	609a      	str	r2, [r3, #8]
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <LL_I2C_SetTiming>:
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
 80030b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	611a      	str	r2, [r3, #16]
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <LL_I2C_SetMode>:
{
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	601a      	str	r2, [r3, #0]
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <LL_I2C_AcknowledgeNextData>:
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	605a      	str	r2, [r3, #4]
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff ff65 	bl	8002fec <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6899      	ldr	r1, [r3, #8]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	461a      	mov	r2, r3
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff ff6d 	bl	800300c <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	4619      	mov	r1, r3
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff ffb6 	bl	80030aa <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7ff ff44 	bl	8002fcc <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff ffa0 	bl	800308a <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6919      	ldr	r1, [r3, #16]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	461a      	mov	r2, r3
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff ff70 	bl	800303a <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff ff81 	bl	800306a <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4619      	mov	r1, r3
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff ffa9 	bl	80030c6 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	4619      	mov	r1, r3
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff ffb6 	bl	80030ec <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <LL_TIM_SetPrescaler>:
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	629a      	str	r2, [r3, #40]	; 0x28
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <LL_TIM_SetAutoReload>:
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
 80031ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <LL_TIM_SetRepetitionCounter>:
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f043 0201 	orr.w	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	615a      	str	r2, [r3, #20]
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
	...

08003200 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a2f      	ldr	r2, [pc, #188]	; (80032d0 <LL_TIM_Init+0xd0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d007      	beq.n	8003228 <LL_TIM_Init+0x28>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321e:	d003      	beq.n	8003228 <LL_TIM_Init+0x28>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a2c      	ldr	r2, [pc, #176]	; (80032d4 <LL_TIM_Init+0xd4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d106      	bne.n	8003236 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	4313      	orrs	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a25      	ldr	r2, [pc, #148]	; (80032d0 <LL_TIM_Init+0xd0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d013      	beq.n	8003266 <LL_TIM_Init+0x66>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003244:	d00f      	beq.n	8003266 <LL_TIM_Init+0x66>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a22      	ldr	r2, [pc, #136]	; (80032d4 <LL_TIM_Init+0xd4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d00b      	beq.n	8003266 <LL_TIM_Init+0x66>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a21      	ldr	r2, [pc, #132]	; (80032d8 <LL_TIM_Init+0xd8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d007      	beq.n	8003266 <LL_TIM_Init+0x66>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a20      	ldr	r2, [pc, #128]	; (80032dc <LL_TIM_Init+0xdc>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d003      	beq.n	8003266 <LL_TIM_Init+0x66>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a1f      	ldr	r2, [pc, #124]	; (80032e0 <LL_TIM_Init+0xe0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d106      	bne.n	8003274 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	4313      	orrs	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	4619      	mov	r1, r3
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7ff ff90 	bl	80031a6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	4619      	mov	r1, r3
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7ff ff7c 	bl	800318a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a0e      	ldr	r2, [pc, #56]	; (80032d0 <LL_TIM_Init+0xd0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00b      	beq.n	80032b2 <LL_TIM_Init+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a0e      	ldr	r2, [pc, #56]	; (80032d8 <LL_TIM_Init+0xd8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d007      	beq.n	80032b2 <LL_TIM_Init+0xb2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a0d      	ldr	r2, [pc, #52]	; (80032dc <LL_TIM_Init+0xdc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d003      	beq.n	80032b2 <LL_TIM_Init+0xb2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a0c      	ldr	r2, [pc, #48]	; (80032e0 <LL_TIM_Init+0xe0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d105      	bne.n	80032be <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	4619      	mov	r1, r3
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ff82 	bl	80031c2 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff ff8d 	bl	80031de <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40012c00 	.word	0x40012c00
 80032d4:	40000400 	.word	0x40000400
 80032d8:	40014000 	.word	0x40014000
 80032dc:	40014400 	.word	0x40014400
 80032e0:	40014800 	.word	0x40014800

080032e4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f6:	4a07      	ldr	r2, [pc, #28]	; (8003314 <LL_InitTick+0x30>)
 80032f8:	3b01      	subs	r3, #1
 80032fa:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80032fc:	4b05      	ldr	r3, [pc, #20]	; (8003314 <LL_InitTick+0x30>)
 80032fe:	2200      	movs	r2, #0
 8003300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003302:	4b04      	ldr	r3, [pc, #16]	; (8003314 <LL_InitTick+0x30>)
 8003304:	2205      	movs	r2, #5
 8003306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	e000e010 	.word	0xe000e010

08003318 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003320:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff ffdd 	bl	80032e4 <LL_InitTick>
}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800333c:	4b0f      	ldr	r3, [pc, #60]	; (800337c <LL_mDelay+0x48>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003342:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334a:	d00c      	beq.n	8003366 <LL_mDelay+0x32>
  {
    Delay++;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3301      	adds	r3, #1
 8003350:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003352:	e008      	b.n	8003366 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003354:	4b09      	ldr	r3, [pc, #36]	; (800337c <LL_mDelay+0x48>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <LL_mDelay+0x32>
    {
      Delay--;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3b01      	subs	r3, #1
 8003364:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1f3      	bne.n	8003354 <LL_mDelay+0x20>
    }
  }
}
 800336c:	bf00      	nop
 800336e:	bf00      	nop
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	e000e010 	.word	0xe000e010

08003380 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003388:	4a04      	ldr	r2, [pc, #16]	; (800339c <LL_SetSystemCoreClock+0x1c>)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6013      	str	r3, [r2, #0]
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	20000000 	.word	0x20000000

080033a0 <lsm6ds0_read_byte>:
#include "lsm6ds0.h"

uint8_t addres = LSM6DS0_DEVICE_ADDRESS_0;

uint8_t lsm6ds0_read_byte(uint8_t reg_addr)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af02      	add	r7, sp, #8
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres, 0));
 80033ae:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <lsm6ds0_read_byte+0x30>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	79fa      	ldrb	r2, [r7, #7]
 80033b4:	f107 000f 	add.w	r0, r7, #15
 80033b8:	2100      	movs	r1, #0
 80033ba:	9100      	str	r1, [sp, #0]
 80033bc:	2101      	movs	r1, #1
 80033be:	f7fe fac7 	bl	8001950 <i2c_master_read>
 80033c2:	4603      	mov	r3, r0
 80033c4:	781b      	ldrb	r3, [r3, #0]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000004 	.word	0x20000004

080033d4 <lsm6ds0_write_byte>:


void lsm6ds0_write_byte(uint8_t reg_addr, uint8_t value)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	460a      	mov	r2, r1
 80033de:	71fb      	strb	r3, [r7, #7]
 80033e0:	4613      	mov	r3, r2
 80033e2:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres, 0);
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <lsm6ds0_write_byte+0x28>)
 80033e6:	781a      	ldrb	r2, [r3, #0]
 80033e8:	79f9      	ldrb	r1, [r7, #7]
 80033ea:	79b8      	ldrb	r0, [r7, #6]
 80033ec:	2300      	movs	r3, #0
 80033ee:	f7fe fa6b 	bl	80018c8 <i2c_master_write>
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20000004 	.word	0x20000004

08003400 <lsm6ds0_init>:
	*z = (zz >> 4) / 1000.0f;
}


uint8_t lsm6ds0_init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8003406:	2301      	movs	r3, #1
 8003408:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 800340a:	2064      	movs	r0, #100	; 0x64
 800340c:	f7ff ff92 	bl	8003334 <LL_mDelay>

	uint8_t val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8003410:	200f      	movs	r0, #15
 8003412:	f7ff ffc5 	bl	80033a0 <lsm6ds0_read_byte>
 8003416:	4603      	mov	r3, r0
 8003418:	71bb      	strb	r3, [r7, #6]

	if(val == LSM6DS0_WHO_AM_I_VALUE)
 800341a:	79bb      	ldrb	r3, [r7, #6]
 800341c:	2b68      	cmp	r3, #104	; 0x68
 800341e:	d102      	bne.n	8003426 <lsm6ds0_init+0x26>
	{
		status = 1;
 8003420:	2301      	movs	r3, #1
 8003422:	71fb      	strb	r3, [r7, #7]
 8003424:	e00f      	b.n	8003446 <lsm6ds0_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres = LSM6DS0_DEVICE_ADDRESS_1;
 8003426:	4b0e      	ldr	r3, [pc, #56]	; (8003460 <lsm6ds0_init+0x60>)
 8003428:	22d6      	movs	r2, #214	; 0xd6
 800342a:	701a      	strb	r2, [r3, #0]
		val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 800342c:	200f      	movs	r0, #15
 800342e:	f7ff ffb7 	bl	80033a0 <lsm6ds0_read_byte>
 8003432:	4603      	mov	r3, r0
 8003434:	71bb      	strb	r3, [r7, #6]
		if(val == LSM6DS0_WHO_AM_I_VALUE)
 8003436:	79bb      	ldrb	r3, [r7, #6]
 8003438:	2b68      	cmp	r3, #104	; 0x68
 800343a:	d102      	bne.n	8003442 <lsm6ds0_init+0x42>
		{
			status = 1;
 800343c:	2301      	movs	r3, #1
 800343e:	71fb      	strb	r3, [r7, #7]
 8003440:	e001      	b.n	8003446 <lsm6ds0_init+0x46>
		}
		else
		{
			status = 0;
 8003442:	2300      	movs	r3, #0
 8003444:	71fb      	strb	r3, [r7, #7]
		}
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 8003446:	2380      	movs	r3, #128	; 0x80
 8003448:	717b      	strb	r3, [r7, #5]
	lsm6ds0_write_byte(LSM6DS0_ADDRESS_CTRL1, ctrl1);
 800344a:	797b      	ldrb	r3, [r7, #5]
 800344c:	4619      	mov	r1, r3
 800344e:	2010      	movs	r0, #16
 8003450:	f7ff ffc0 	bl	80033d4 <lsm6ds0_write_byte>

	return status;
 8003454:	79fb      	ldrb	r3, [r7, #7]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000004 	.word	0x20000004

08003464 <hts221_read_byte>:

uint8_t addresHTS221 = HTS221_DEVICE_ADDRESS;
Hts221HumidityStruct HumidityFactoryCoef;
Hts221TemperatureStruct TemperatureFactoryCoef;

uint8_t hts221_read_byte(uint8_t reg_addr) {
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af02      	add	r7, sp, #8
 800346a:	4603      	mov	r3, r0
 800346c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800346e:	2300      	movs	r3, #0
 8003470:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addresHTS221, 0));
 8003472:	4b08      	ldr	r3, [pc, #32]	; (8003494 <hts221_read_byte+0x30>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	79fa      	ldrb	r2, [r7, #7]
 8003478:	f107 000f 	add.w	r0, r7, #15
 800347c:	2100      	movs	r1, #0
 800347e:	9100      	str	r1, [sp, #0]
 8003480:	2101      	movs	r1, #1
 8003482:	f7fe fa65 	bl	8001950 <i2c_master_read>
 8003486:	4603      	mov	r3, r0
 8003488:	781b      	ldrb	r3, [r3, #0]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20000005 	.word	0x20000005

08003498 <hts221_write_byte>:

void hts221_write_byte(uint8_t reg_addr, uint8_t value) {
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	460a      	mov	r2, r1
 80034a2:	71fb      	strb	r3, [r7, #7]
 80034a4:	4613      	mov	r3, r2
 80034a6:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addresHTS221, 0);
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <hts221_write_byte+0x28>)
 80034aa:	781a      	ldrb	r2, [r3, #0]
 80034ac:	79f9      	ldrb	r1, [r7, #7]
 80034ae:	79b8      	ldrb	r0, [r7, #6]
 80034b0:	2300      	movs	r3, #0
 80034b2:	f7fe fa09 	bl	80018c8 <i2c_master_write>
}
 80034b6:	bf00      	nop
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000005 	.word	0x20000005

080034c4 <hts221_readArray>:

void hts221_readArray(uint8_t *data, uint8_t reg, uint8_t length) {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af02      	add	r7, sp, #8
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	70fb      	strb	r3, [r7, #3]
 80034d0:	4613      	mov	r3, r2
 80034d2:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addresHTS221, 1);
 80034d4:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <hts221_readArray+0x2c>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	78fa      	ldrb	r2, [r7, #3]
 80034da:	78b9      	ldrb	r1, [r7, #2]
 80034dc:	2001      	movs	r0, #1
 80034de:	9000      	str	r0, [sp, #0]
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7fe fa35 	bl	8001950 <i2c_master_read>
}
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20000005 	.word	0x20000005

080034f4 <hts221_init>:

uint8_t hts221_init(void) {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
	uint8_t result = 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	71fb      	strb	r3, [r7, #7]
	LL_mDelay(100);
 80034fe:	2064      	movs	r0, #100	; 0x64
 8003500:	f7ff ff18 	bl	8003334 <LL_mDelay>
	uint8_t val = hts221_read_byte(HTS221_WHO_AM_I_ADDRES);
 8003504:	200f      	movs	r0, #15
 8003506:	f7ff ffad 	bl	8003464 <hts221_read_byte>
 800350a:	4603      	mov	r3, r0
 800350c:	71bb      	strb	r3, [r7, #6]
	if (val == HTS221_WHO_AM_I_VALUE) {
 800350e:	79bb      	ldrb	r3, [r7, #6]
 8003510:	2bbc      	cmp	r3, #188	; 0xbc
 8003512:	d134      	bne.n	800357e <hts221_init+0x8a>
		result = 1;
 8003514:	2301      	movs	r3, #1
 8003516:	71fb      	strb	r3, [r7, #7]
		//load reserved bits from device
		uint8_t control1 = hts221_read_byte(HTS221_ADDRESS_CTRL1);
 8003518:	2020      	movs	r0, #32
 800351a:	f7ff ffa3 	bl	8003464 <hts221_read_byte>
 800351e:	4603      	mov	r3, r0
 8003520:	717b      	strb	r3, [r7, #5]
		//active mode
		control1 &= ~HTS221_PD_MASK;
 8003522:	797b      	ldrb	r3, [r7, #5]
 8003524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003528:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 1) << HTS221_PD_BIT;
 800352a:	797b      	ldrb	r3, [r7, #5]
 800352c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003530:	717b      	strb	r3, [r7, #5]
		//output registers not updated until MSB and LSB reading
		control1 &= ~HTS221_BDU_MASK;
 8003532:	797b      	ldrb	r3, [r7, #5]
 8003534:	f023 0304 	bic.w	r3, r3, #4
 8003538:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 1) << HTS221_BDU_BIT;
 800353a:	797b      	ldrb	r3, [r7, #5]
 800353c:	f043 0304 	orr.w	r3, r3, #4
 8003540:	717b      	strb	r3, [r7, #5]
		//ODR register sampling
		control1 &= ~HTS221_ODR_MASK;
 8003542:	797b      	ldrb	r3, [r7, #5]
 8003544:	f023 0303 	bic.w	r3, r3, #3
 8003548:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 2) << HTS221_ODR_BIT;
 800354a:	797b      	ldrb	r3, [r7, #5]
 800354c:	f043 0302 	orr.w	r3, r3, #2
 8003550:	717b      	strb	r3, [r7, #5]
		//Write config. to device
		hts221_write_byte(HTS221_ADDRESS_CTRL1, control1);
 8003552:	797b      	ldrb	r3, [r7, #5]
 8003554:	4619      	mov	r1, r3
 8003556:	2020      	movs	r0, #32
 8003558:	f7ff ff9e 	bl	8003498 <hts221_write_byte>
		val = hts221_read_byte(HTS221_ADDRESS_CTRL1);
 800355c:	2020      	movs	r0, #32
 800355e:	f7ff ff81 	bl	8003464 <hts221_read_byte>
 8003562:	4603      	mov	r3, r0
 8003564:	71bb      	strb	r3, [r7, #6]
		result = val == control1 ? 1 : 0;
 8003566:	79ba      	ldrb	r2, [r7, #6]
 8003568:	797b      	ldrb	r3, [r7, #5]
 800356a:	429a      	cmp	r2, r3
 800356c:	bf0c      	ite	eq
 800356e:	2301      	moveq	r3, #1
 8003570:	2300      	movne	r3, #0
 8003572:	b2db      	uxtb	r3, r3
 8003574:	71fb      	strb	r3, [r7, #7]
		hts221_get_factory_coef(&HumidityFactoryCoef, &TemperatureFactoryCoef);
 8003576:	4904      	ldr	r1, [pc, #16]	; (8003588 <hts221_init+0x94>)
 8003578:	4804      	ldr	r0, [pc, #16]	; (800358c <hts221_init+0x98>)
 800357a:	f000 f8ad 	bl	80036d8 <hts221_get_factory_coef>
	}
	return result;
 800357e:	79fb      	ldrb	r3, [r7, #7]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	2000023c 	.word	0x2000023c
 800358c:	20000244 	.word	0x20000244

08003590 <hts221_get_humidity>:

void hts221_get_humidity(float *humidity) {
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2] = { 0 };
 8003598:	2300      	movs	r3, #0
 800359a:	81bb      	strh	r3, [r7, #12]
	hts221_readArray(buffer, HTS221_ADDRESS_H_OUT_L, 2);
 800359c:	f107 030c 	add.w	r3, r7, #12
 80035a0:	2202      	movs	r2, #2
 80035a2:	2128      	movs	r1, #40	; 0x28
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff ff8d 	bl	80034c4 <hts221_readArray>
	int16_t hOut = ((int16_t) buffer[1]) << 8 | buffer[0];
 80035aa:	7b7b      	ldrb	r3, [r7, #13]
 80035ac:	021b      	lsls	r3, r3, #8
 80035ae:	b21a      	sxth	r2, r3
 80035b0:	7b3b      	ldrb	r3, [r7, #12]
 80035b2:	b21b      	sxth	r3, r3
 80035b4:	4313      	orrs	r3, r2
 80035b6:	82fb      	strh	r3, [r7, #22]
	int16_t h0Rh = HumidityFactoryCoef.h0Rh;
 80035b8:	4b1c      	ldr	r3, [pc, #112]	; (800362c <hts221_get_humidity+0x9c>)
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	82bb      	strh	r3, [r7, #20]
	int16_t h1Rh = HumidityFactoryCoef.h1Rh;
 80035be:	4b1b      	ldr	r3, [pc, #108]	; (800362c <hts221_get_humidity+0x9c>)
 80035c0:	885b      	ldrh	r3, [r3, #2]
 80035c2:	827b      	strh	r3, [r7, #18]
	int16_t h0T0 = HumidityFactoryCoef.h0Out;
 80035c4:	4b19      	ldr	r3, [pc, #100]	; (800362c <hts221_get_humidity+0x9c>)
 80035c6:	889b      	ldrh	r3, [r3, #4]
 80035c8:	823b      	strh	r3, [r7, #16]
	int16_t h1T0 = HumidityFactoryCoef.h1Out;
 80035ca:	4b18      	ldr	r3, [pc, #96]	; (800362c <hts221_get_humidity+0x9c>)
 80035cc:	88db      	ldrh	r3, [r3, #6]
 80035ce:	81fb      	strh	r3, [r7, #14]
	*humidity = ((float)(h1Rh - h0Rh) * (float)(hOut - h0T0)) / (float)(h1T0 - h0T0) + h0Rh;
 80035d0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80035d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	ee07 3a90 	vmov	s15, r3
 80035de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80035e6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	ee07 3a90 	vmov	s15, r3
 80035f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035f4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80035f8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80035fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	ee07 3a90 	vmov	s15, r3
 8003606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800360a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800360e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003612:	ee07 3a90 	vmov	s15, r3
 8003616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800361a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	edc3 7a00 	vstr	s15, [r3]
}
 8003624:	bf00      	nop
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	20000244 	.word	0x20000244

08003630 <hts221_get_temperature>:

void hts221_get_temperature(float *temperature) {
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2] = { 0 };
 8003638:	2300      	movs	r3, #0
 800363a:	81bb      	strh	r3, [r7, #12]
	//hts221_readArray(buffer, HTS221_ADDRESS_T_OUT_L, 2);
	buffer[0] = hts221_read_byte(HTS221_ADDRESS_T_OUT_L);
 800363c:	202a      	movs	r0, #42	; 0x2a
 800363e:	f7ff ff11 	bl	8003464 <hts221_read_byte>
 8003642:	4603      	mov	r3, r0
 8003644:	733b      	strb	r3, [r7, #12]
	buffer[1] = hts221_read_byte(HTS221_ADDRESS_T_OUT_H);
 8003646:	202b      	movs	r0, #43	; 0x2b
 8003648:	f7ff ff0c 	bl	8003464 <hts221_read_byte>
 800364c:	4603      	mov	r3, r0
 800364e:	737b      	strb	r3, [r7, #13]
	int16_t tOut = ((int16_t) buffer[1]) << 8 | buffer[0];
 8003650:	7b7b      	ldrb	r3, [r7, #13]
 8003652:	021b      	lsls	r3, r3, #8
 8003654:	b21a      	sxth	r2, r3
 8003656:	7b3b      	ldrb	r3, [r7, #12]
 8003658:	b21b      	sxth	r3, r3
 800365a:	4313      	orrs	r3, r2
 800365c:	82fb      	strh	r3, [r7, #22]
	int16_t t0Deg = TemperatureFactoryCoef.t0DegC;
 800365e:	4b1d      	ldr	r3, [pc, #116]	; (80036d4 <hts221_get_temperature+0xa4>)
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	82bb      	strh	r3, [r7, #20]
	int16_t t1Deg = TemperatureFactoryCoef.t1DegC;
 8003664:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <hts221_get_temperature+0xa4>)
 8003666:	885b      	ldrh	r3, [r3, #2]
 8003668:	827b      	strh	r3, [r7, #18]
	int16_t t0Out = TemperatureFactoryCoef.t0Out;
 800366a:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <hts221_get_temperature+0xa4>)
 800366c:	889b      	ldrh	r3, [r3, #4]
 800366e:	823b      	strh	r3, [r7, #16]
	int16_t t1Out = TemperatureFactoryCoef.t1Out;
 8003670:	4b18      	ldr	r3, [pc, #96]	; (80036d4 <hts221_get_temperature+0xa4>)
 8003672:	88db      	ldrh	r3, [r3, #6]
 8003674:	81fb      	strh	r3, [r7, #14]
	*temperature = ((float)(t1Deg - t0Deg) * (float)(tOut - t0Out)) / (float)(t1Out - t0Out) + t0Deg;
 8003676:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800367a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	ee07 3a90 	vmov	s15, r3
 8003684:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003688:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800368c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	ee07 3a90 	vmov	s15, r3
 8003696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800369a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800369e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80036a2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	ee07 3a90 	vmov	s15, r3
 80036ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80036b8:	ee07 3a90 	vmov	s15, r3
 80036bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	edc3 7a00 	vstr	s15, [r3]
}
 80036ca:	bf00      	nop
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	2000023c 	.word	0x2000023c

080036d8 <hts221_get_factory_coef>:

void hts221_get_factory_coef(Hts221HumidityStruct *humidityStruct,
		Hts221TemperatureStruct *temperatureStruct) {
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
	//Get humidity factory coef.
	int16_t h0RhX2 = (int16_t)hts221_read_byte(HTS221_ADDRESS_H0_rH_x2);
 80036e2:	2030      	movs	r0, #48	; 0x30
 80036e4:	f7ff febe 	bl	8003464 <hts221_read_byte>
 80036e8:	4603      	mov	r3, r0
 80036ea:	83fb      	strh	r3, [r7, #30]
	int16_t h1RhX2 = (int16_t)hts221_read_byte(HTS221_ADDRESS_H1_rH_x2);
 80036ec:	2031      	movs	r0, #49	; 0x31
 80036ee:	f7ff feb9 	bl	8003464 <hts221_read_byte>
 80036f2:	4603      	mov	r3, r0
 80036f4:	83bb      	strh	r3, [r7, #28]
	uint8_t buffer[4] = { 0 };
 80036f6:	2300      	movs	r3, #0
 80036f8:	60bb      	str	r3, [r7, #8]
	hts221_readArray(buffer, HTS221_ADDRESS_H0_OUT_L, 2);
 80036fa:	f107 0308 	add.w	r3, r7, #8
 80036fe:	2202      	movs	r2, #2
 8003700:	2136      	movs	r1, #54	; 0x36
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff fede 	bl	80034c4 <hts221_readArray>
	hts221_readArray(buffer + 2, HTS221_ADDRESS_H1_OUT_L, 2);
 8003708:	f107 0308 	add.w	r3, r7, #8
 800370c:	3302      	adds	r3, #2
 800370e:	2202      	movs	r2, #2
 8003710:	213a      	movs	r1, #58	; 0x3a
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff fed6 	bl	80034c4 <hts221_readArray>
	int16_t h0Out = ((int16_t) buffer[1]) << 8 | (int16_t)buffer[0];
 8003718:	7a7b      	ldrb	r3, [r7, #9]
 800371a:	021b      	lsls	r3, r3, #8
 800371c:	b21a      	sxth	r2, r3
 800371e:	7a3b      	ldrb	r3, [r7, #8]
 8003720:	b21b      	sxth	r3, r3
 8003722:	4313      	orrs	r3, r2
 8003724:	837b      	strh	r3, [r7, #26]
	int16_t h1Out = ((int16_t) buffer[3]) << 8 | (int16_t)buffer[2];
 8003726:	7afb      	ldrb	r3, [r7, #11]
 8003728:	021b      	lsls	r3, r3, #8
 800372a:	b21a      	sxth	r2, r3
 800372c:	7abb      	ldrb	r3, [r7, #10]
 800372e:	b21b      	sxth	r3, r3
 8003730:	4313      	orrs	r3, r2
 8003732:	833b      	strh	r3, [r7, #24]

	humidityStruct->h0Rh = h0RhX2 >> 1;
 8003734:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003738:	105b      	asrs	r3, r3, #1
 800373a:	b21a      	sxth	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	801a      	strh	r2, [r3, #0]
	humidityStruct->h1Rh = h1RhX2 >> 1;
 8003740:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003744:	105b      	asrs	r3, r3, #1
 8003746:	b21a      	sxth	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	805a      	strh	r2, [r3, #2]
	humidityStruct->h0Out = h0Out;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	8b7a      	ldrh	r2, [r7, #26]
 8003750:	809a      	strh	r2, [r3, #4]
	humidityStruct->h1Out = h1Out;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	8b3a      	ldrh	r2, [r7, #24]
 8003756:	80da      	strh	r2, [r3, #6]
	//Get temperature factory coef.
	buffer[0] = hts221_read_byte(HTS221_ADDRESS_T0_degC_x8);
 8003758:	2032      	movs	r0, #50	; 0x32
 800375a:	f7ff fe83 	bl	8003464 <hts221_read_byte>
 800375e:	4603      	mov	r3, r0
 8003760:	723b      	strb	r3, [r7, #8]
	buffer[2] = hts221_read_byte(HTS221_ADDRESS_T1_degC_x8);
 8003762:	2033      	movs	r0, #51	; 0x33
 8003764:	f7ff fe7e 	bl	8003464 <hts221_read_byte>
 8003768:	4603      	mov	r3, r0
 800376a:	72bb      	strb	r3, [r7, #10]
	int16_t t0t1Msb = (int16_t)hts221_read_byte(HTS221_ADDRESS_T1_T0_MSB);
 800376c:	2035      	movs	r0, #53	; 0x35
 800376e:	f7ff fe79 	bl	8003464 <hts221_read_byte>
 8003772:	4603      	mov	r3, r0
 8003774:	82fb      	strh	r3, [r7, #22]
	buffer[1] = t0t1Msb & 0x03;
 8003776:	8afb      	ldrh	r3, [r7, #22]
 8003778:	b2db      	uxtb	r3, r3
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	b2db      	uxtb	r3, r3
 8003780:	727b      	strb	r3, [r7, #9]
	buffer[3] = t0t1Msb & 0x0C;
 8003782:	8afb      	ldrh	r3, [r7, #22]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	b2db      	uxtb	r3, r3
 800378c:	72fb      	strb	r3, [r7, #11]
	int16_t t0DegX8 = ((int16_t) buffer[1]) << 8 | (int16_t)buffer[0];
 800378e:	7a7b      	ldrb	r3, [r7, #9]
 8003790:	021b      	lsls	r3, r3, #8
 8003792:	b21a      	sxth	r2, r3
 8003794:	7a3b      	ldrb	r3, [r7, #8]
 8003796:	b21b      	sxth	r3, r3
 8003798:	4313      	orrs	r3, r2
 800379a:	82bb      	strh	r3, [r7, #20]
	int16_t t1DegX8 = ((int16_t) buffer[3]) << 6 | (int16_t)buffer[2];
 800379c:	7afb      	ldrb	r3, [r7, #11]
 800379e:	019b      	lsls	r3, r3, #6
 80037a0:	b21a      	sxth	r2, r3
 80037a2:	7abb      	ldrb	r3, [r7, #10]
 80037a4:	b21b      	sxth	r3, r3
 80037a6:	4313      	orrs	r3, r2
 80037a8:	827b      	strh	r3, [r7, #18]
	hts221_readArray(buffer, HTS221_ADDRESS_T0_OUT_L, 4);
 80037aa:	f107 0308 	add.w	r3, r7, #8
 80037ae:	2204      	movs	r2, #4
 80037b0:	213c      	movs	r1, #60	; 0x3c
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff fe86 	bl	80034c4 <hts221_readArray>
	//hts221_readArray(buffer + 2, HTS221_ADDRESS_T1_OUT_L, 2);
	int16_t t0Out = ((int16_t) buffer[1]) << 8 | (int16_t)buffer[0];
 80037b8:	7a7b      	ldrb	r3, [r7, #9]
 80037ba:	021b      	lsls	r3, r3, #8
 80037bc:	b21a      	sxth	r2, r3
 80037be:	7a3b      	ldrb	r3, [r7, #8]
 80037c0:	b21b      	sxth	r3, r3
 80037c2:	4313      	orrs	r3, r2
 80037c4:	823b      	strh	r3, [r7, #16]
	int16_t t1Out = ((int16_t) buffer[3]) << 8 | (int16_t)buffer[2];
 80037c6:	7afb      	ldrb	r3, [r7, #11]
 80037c8:	021b      	lsls	r3, r3, #8
 80037ca:	b21a      	sxth	r2, r3
 80037cc:	7abb      	ldrb	r3, [r7, #10]
 80037ce:	b21b      	sxth	r3, r3
 80037d0:	4313      	orrs	r3, r2
 80037d2:	81fb      	strh	r3, [r7, #14]

	temperatureStruct->t0DegC = t0DegX8 >> 3;
 80037d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80037d8:	10db      	asrs	r3, r3, #3
 80037da:	b21a      	sxth	r2, r3
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	801a      	strh	r2, [r3, #0]
	temperatureStruct->t1DegC = t1DegX8 >> 3;
 80037e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80037e4:	10db      	asrs	r3, r3, #3
 80037e6:	b21a      	sxth	r2, r3
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	805a      	strh	r2, [r3, #2]
	temperatureStruct->t0Out = t0Out;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	8a3a      	ldrh	r2, [r7, #16]
 80037f0:	809a      	strh	r2, [r3, #4]
	temperatureStruct->t1Out = t1Out;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	89fa      	ldrh	r2, [r7, #14]
 80037f6:	80da      	strh	r2, [r3, #6]
}
 80037f8:	bf00      	nop
 80037fa:	3720      	adds	r7, #32
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <lps25hb_read_byte>:

#include "lps25hb.h"

uint8_t addresLPS25HB = LPS25HB_DEVICE_ADDRESS_0;

uint8_t lps25hb_read_byte(uint8_t reg_addr) {
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af02      	add	r7, sp, #8
 8003806:	4603      	mov	r3, r0
 8003808:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800380a:	2300      	movs	r3, #0
 800380c:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addresLPS25HB, 0));
 800380e:	4b08      	ldr	r3, [pc, #32]	; (8003830 <lps25hb_read_byte+0x30>)
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	79fa      	ldrb	r2, [r7, #7]
 8003814:	f107 000f 	add.w	r0, r7, #15
 8003818:	2100      	movs	r1, #0
 800381a:	9100      	str	r1, [sp, #0]
 800381c:	2101      	movs	r1, #1
 800381e:	f7fe f897 	bl	8001950 <i2c_master_read>
 8003822:	4603      	mov	r3, r0
 8003824:	781b      	ldrb	r3, [r3, #0]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000006 	.word	0x20000006

08003834 <lps25hb_write_byte>:

void lps25hb_write_byte(uint8_t reg_addr, uint8_t value) {
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	460a      	mov	r2, r1
 800383e:	71fb      	strb	r3, [r7, #7]
 8003840:	4613      	mov	r3, r2
 8003842:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addresLPS25HB, 0);
 8003844:	4b05      	ldr	r3, [pc, #20]	; (800385c <lps25hb_write_byte+0x28>)
 8003846:	781a      	ldrb	r2, [r3, #0]
 8003848:	79f9      	ldrb	r1, [r7, #7]
 800384a:	79b8      	ldrb	r0, [r7, #6]
 800384c:	2300      	movs	r3, #0
 800384e:	f7fe f83b 	bl	80018c8 <i2c_master_write>
}
 8003852:	bf00      	nop
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000006 	.word	0x20000006

08003860 <lps25hb_readArray>:

void lps25hb_readArray(uint8_t *data, uint8_t reg, uint8_t length) {
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af02      	add	r7, sp, #8
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	70fb      	strb	r3, [r7, #3]
 800386c:	4613      	mov	r3, r2
 800386e:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addresLPS25HB, 1);
 8003870:	4b06      	ldr	r3, [pc, #24]	; (800388c <lps25hb_readArray+0x2c>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	78fa      	ldrb	r2, [r7, #3]
 8003876:	78b9      	ldrb	r1, [r7, #2]
 8003878:	2001      	movs	r0, #1
 800387a:	9000      	str	r0, [sp, #0]
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7fe f867 	bl	8001950 <i2c_master_read>
}
 8003882:	bf00      	nop
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	20000006 	.word	0x20000006

08003890 <lps25hb_get_pressure>:
void lps25hb_get_pressure(float *pressure) {
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
	uint8_t buffer[3];
	uint32_t raw_press = 0;
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]
	uint8_t i;
	lps25hb_readArray(buffer, LPS25HB_ADDRESS_PressOut_XL, 3);
 800389c:	f107 0308 	add.w	r3, r7, #8
 80038a0:	2203      	movs	r2, #3
 80038a2:	2128      	movs	r1, #40	; 0x28
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff ffdb 	bl	8003860 <lps25hb_readArray>
	for (i = 0; i < 3; i++)
 80038aa:	2300      	movs	r3, #0
 80038ac:	72fb      	strb	r3, [r7, #11]
 80038ae:	e010      	b.n	80038d2 <lps25hb_get_pressure+0x42>
		raw_press |= (((uint32_t) buffer[i]) << (8 * i));
 80038b0:	7afb      	ldrb	r3, [r7, #11]
 80038b2:	f107 0210 	add.w	r2, r7, #16
 80038b6:	4413      	add	r3, r2
 80038b8:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80038bc:	461a      	mov	r2, r3
 80038be:	7afb      	ldrb	r3, [r7, #11]
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < 3; i++)
 80038cc:	7afb      	ldrb	r3, [r7, #11]
 80038ce:	3301      	adds	r3, #1
 80038d0:	72fb      	strb	r3, [r7, #11]
 80038d2:	7afb      	ldrb	r3, [r7, #11]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d9eb      	bls.n	80038b0 <lps25hb_get_pressure+0x20>
	if (raw_press & 0x00800000)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <lps25hb_get_pressure+0x5a>
		raw_press |= 0xFF000000;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038e8:	60fb      	str	r3, [r7, #12]
	*pressure = ((float) raw_press) / 4096;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	ee07 3a90 	vmov	s15, r3
 80038f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038f4:	eddf 6a05 	vldr	s13, [pc, #20]	; 800390c <lps25hb_get_pressure+0x7c>
 80038f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	edc3 7a00 	vstr	s15, [r3]
}
 8003902:	bf00      	nop
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	45800000 	.word	0x45800000

08003910 <lps25hb_get_pressureOffset>:
void lps25hb_get_pressureOffset(float *pressureOffset) {
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2];
	int16_t raw_press;
	lps25hb_readArray(buffer, LPS25HB_RPDS_L_REG, 2);
 8003918:	f107 030c 	add.w	r3, r7, #12
 800391c:	2202      	movs	r2, #2
 800391e:	2139      	movs	r1, #57	; 0x39
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff ff9d 	bl	8003860 <lps25hb_readArray>
	raw_press = (int16_t)((((uint16_t)buffer[1]) << 8) + (uint16_t)buffer[0]);
 8003926:	7b7b      	ldrb	r3, [r7, #13]
 8003928:	b29b      	uxth	r3, r3
 800392a:	021b      	lsls	r3, r3, #8
 800392c:	b29a      	uxth	r2, r3
 800392e:	7b3b      	ldrb	r3, [r7, #12]
 8003930:	b29b      	uxth	r3, r3
 8003932:	4413      	add	r3, r2
 8003934:	b29b      	uxth	r3, r3
 8003936:	81fb      	strh	r3, [r7, #14]
	*pressureOffset =  ((float) raw_press) / 4096;
 8003938:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800393c:	ee07 3a90 	vmov	s15, r3
 8003940:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003944:	eddf 6a05 	vldr	s13, [pc, #20]	; 800395c <lps25hb_get_pressureOffset+0x4c>
 8003948:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	edc3 7a00 	vstr	s15, [r3]
}
 8003952:	bf00      	nop
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	45800000 	.word	0x45800000

08003960 <lps25hb_get_pressureWithOffset>:
void lps25hb_get_pressureWithOffset(float *pressureWithOffset){
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
	float rawPressure = -1;
 8003968:	4b0d      	ldr	r3, [pc, #52]	; (80039a0 <lps25hb_get_pressureWithOffset+0x40>)
 800396a:	60fb      	str	r3, [r7, #12]
	float pressureOffset = -1;
 800396c:	4b0c      	ldr	r3, [pc, #48]	; (80039a0 <lps25hb_get_pressureWithOffset+0x40>)
 800396e:	60bb      	str	r3, [r7, #8]
	lps25hb_get_pressure(&rawPressure);
 8003970:	f107 030c 	add.w	r3, r7, #12
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff ff8b 	bl	8003890 <lps25hb_get_pressure>
	lps25hb_get_pressureOffset(&pressureOffset);
 800397a:	f107 0308 	add.w	r3, r7, #8
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff ffc6 	bl	8003910 <lps25hb_get_pressureOffset>
	*pressureWithOffset = rawPressure + pressureOffset;
 8003984:	ed97 7a03 	vldr	s14, [r7, #12]
 8003988:	edd7 7a02 	vldr	s15, [r7, #8]
 800398c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	edc3 7a00 	vstr	s15, [r3]
}
 8003996:	bf00      	nop
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	bf800000 	.word	0xbf800000
 80039a4:	00000000 	.word	0x00000000

080039a8 <lps25hb_get_altitude>:
void lps25hb_get_altitude(float *altitude) {
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
	float pressure = 0;
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	60bb      	str	r3, [r7, #8]
	lps25hb_get_pressure(&pressure);
 80039b6:	f107 0308 	add.w	r3, r7, #8
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff ff68 	bl	8003890 <lps25hb_get_pressure>
	float pressurePW = pow(pressure / LPS25HB_ALTITUDE_P0, LPS25HB_ALTITUDE_PW);
 80039c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80039c4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003a20 <lps25hb_get_altitude+0x78>
 80039c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80039cc:	ee16 0a90 	vmov	r0, s13
 80039d0:	f7fc fdba 	bl	8000548 <__aeabi_f2d>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8003a18 <lps25hb_get_altitude+0x70>
 80039dc:	ec43 2b10 	vmov	d0, r2, r3
 80039e0:	f002 ff58 	bl	8006894 <pow>
 80039e4:	ec53 2b10 	vmov	r2, r3, d0
 80039e8:	4610      	mov	r0, r2
 80039ea:	4619      	mov	r1, r3
 80039ec:	f7fd f8dc 	bl	8000ba8 <__aeabi_d2f>
 80039f0:	4603      	mov	r3, r0
 80039f2:	60fb      	str	r3, [r7, #12]
	*altitude = LPS25HB_ALTITUDE_CONST * (1 - pressurePW);
 80039f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80039fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a00:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003a24 <lps25hb_get_altitude+0x7c>
 8003a04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	edc3 7a00 	vstr	s15, [r3]
}
 8003a0e:	bf00      	nop
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	c0000000 	.word	0xc0000000
 8003a1c:	3fc85b95 	.word	0x3fc85b95
 8003a20:	447d5000 	.word	0x447d5000
 8003a24:	472d2a00 	.word	0x472d2a00

08003a28 <lps25hb_init>:
uint8_t lps25hb_init(void) {
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
	uint8_t result = 0;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	71fb      	strb	r3, [r7, #7]
	LL_mDelay(100);
 8003a32:	2064      	movs	r0, #100	; 0x64
 8003a34:	f7ff fc7e 	bl	8003334 <LL_mDelay>
	uint8_t val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRES);
 8003a38:	200f      	movs	r0, #15
 8003a3a:	f7ff fee1 	bl	8003800 <lps25hb_read_byte>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	71bb      	strb	r3, [r7, #6]
	if (val == LPS25HB_WHO_AM_I_VALUE) {
 8003a42:	79bb      	ldrb	r3, [r7, #6]
 8003a44:	2bbd      	cmp	r3, #189	; 0xbd
 8003a46:	d102      	bne.n	8003a4e <lps25hb_init+0x26>
		result = 1;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	71fb      	strb	r3, [r7, #7]
 8003a4c:	e00f      	b.n	8003a6e <lps25hb_init+0x46>
	} else
	//if the device is not found on one address, try another one
	{
		addresLPS25HB = LPS25HB_DEVICE_ADDRESS_1;
 8003a4e:	4b29      	ldr	r3, [pc, #164]	; (8003af4 <lps25hb_init+0xcc>)
 8003a50:	22ba      	movs	r2, #186	; 0xba
 8003a52:	701a      	strb	r2, [r3, #0]
		val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRES);
 8003a54:	200f      	movs	r0, #15
 8003a56:	f7ff fed3 	bl	8003800 <lps25hb_read_byte>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	71bb      	strb	r3, [r7, #6]
		if (val == LPS25HB_WHO_AM_I_VALUE)
 8003a5e:	79bb      	ldrb	r3, [r7, #6]
 8003a60:	2bbd      	cmp	r3, #189	; 0xbd
 8003a62:	d102      	bne.n	8003a6a <lps25hb_init+0x42>
			result = 1;
 8003a64:	2301      	movs	r3, #1
 8003a66:	71fb      	strb	r3, [r7, #7]
 8003a68:	e001      	b.n	8003a6e <lps25hb_init+0x46>
		else
			result = 0;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	71fb      	strb	r3, [r7, #7]
	}
	if (result == 1) {
 8003a6e:	79fb      	ldrb	r3, [r7, #7]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d13a      	bne.n	8003aea <lps25hb_init+0xc2>
		//load reserved bits from device
		uint8_t control1 = lps25hb_read_byte(LPS25HB_ADDRESS_CTRL1);
 8003a74:	2020      	movs	r0, #32
 8003a76:	f7ff fec3 	bl	8003800 <lps25hb_read_byte>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	717b      	strb	r3, [r7, #5]
		//active mode
		control1 &= ~LPS25HB_PD_MASK;
 8003a7e:	797b      	ldrb	r3, [r7, #5]
 8003a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a84:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 1) << LPS25HB_PD_BIT;
 8003a86:	797b      	ldrb	r3, [r7, #5]
 8003a88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a8c:	717b      	strb	r3, [r7, #5]
		//output registers not updated until MSB and LSB reading
		control1 &= ~LPS25HB_BDU_MASK;
 8003a8e:	797b      	ldrb	r3, [r7, #5]
 8003a90:	f023 0304 	bic.w	r3, r3, #4
 8003a94:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 1) << LPS25HB_BDU_BIT;
 8003a96:	797b      	ldrb	r3, [r7, #5]
 8003a98:	f043 0304 	orr.w	r3, r3, #4
 8003a9c:	717b      	strb	r3, [r7, #5]
		//ODR register sampling
		control1 &= ~LPS25HB_ODR_MASK;
 8003a9e:	797b      	ldrb	r3, [r7, #5]
 8003aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa4:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 2) << LPS25HB_ODR_BIT;
 8003aa6:	797b      	ldrb	r3, [r7, #5]
 8003aa8:	f043 0320 	orr.w	r3, r3, #32
 8003aac:	717b      	strb	r3, [r7, #5]
		// Reset AZ (Self clear)
		val = control1;
 8003aae:	797b      	ldrb	r3, [r7, #5]
 8003ab0:	71bb      	strb	r3, [r7, #6]
		control1 &= ~LPS25HB_RESET_AZ_MASK;
 8003ab2:	797b      	ldrb	r3, [r7, #5]
 8003ab4:	f023 0302 	bic.w	r3, r3, #2
 8003ab8:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 1) << LPS25HB_RESET_AZ_BIT;
 8003aba:	797b      	ldrb	r3, [r7, #5]
 8003abc:	f043 0302 	orr.w	r3, r3, #2
 8003ac0:	717b      	strb	r3, [r7, #5]
		//Write config. to device
		lps25hb_write_byte(LPS25HB_ADDRESS_CTRL1, control1);
 8003ac2:	797b      	ldrb	r3, [r7, #5]
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	2020      	movs	r0, #32
 8003ac8:	f7ff feb4 	bl	8003834 <lps25hb_write_byte>
		control1 = val;
 8003acc:	79bb      	ldrb	r3, [r7, #6]
 8003ace:	717b      	strb	r3, [r7, #5]
		val = lps25hb_read_byte(LPS25HB_ADDRESS_CTRL1);
 8003ad0:	2020      	movs	r0, #32
 8003ad2:	f7ff fe95 	bl	8003800 <lps25hb_read_byte>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	71bb      	strb	r3, [r7, #6]
		result = val == control1 ? 1 : 0;
 8003ada:	79ba      	ldrb	r2, [r7, #6]
 8003adc:	797b      	ldrb	r3, [r7, #5]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	bf0c      	ite	eq
 8003ae2:	2301      	moveq	r3, #1
 8003ae4:	2300      	movne	r3, #0
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	71fb      	strb	r3, [r7, #7]
	}
	return result;
 8003aea:	79fb      	ldrb	r3, [r7, #7]

}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	20000006 	.word	0x20000006

08003af8 <__errno>:
 8003af8:	4b01      	ldr	r3, [pc, #4]	; (8003b00 <__errno+0x8>)
 8003afa:	6818      	ldr	r0, [r3, #0]
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	20000008 	.word	0x20000008

08003b04 <__libc_init_array>:
 8003b04:	b570      	push	{r4, r5, r6, lr}
 8003b06:	4d0d      	ldr	r5, [pc, #52]	; (8003b3c <__libc_init_array+0x38>)
 8003b08:	4c0d      	ldr	r4, [pc, #52]	; (8003b40 <__libc_init_array+0x3c>)
 8003b0a:	1b64      	subs	r4, r4, r5
 8003b0c:	10a4      	asrs	r4, r4, #2
 8003b0e:	2600      	movs	r6, #0
 8003b10:	42a6      	cmp	r6, r4
 8003b12:	d109      	bne.n	8003b28 <__libc_init_array+0x24>
 8003b14:	4d0b      	ldr	r5, [pc, #44]	; (8003b44 <__libc_init_array+0x40>)
 8003b16:	4c0c      	ldr	r4, [pc, #48]	; (8003b48 <__libc_init_array+0x44>)
 8003b18:	f003 fe70 	bl	80077fc <_init>
 8003b1c:	1b64      	subs	r4, r4, r5
 8003b1e:	10a4      	asrs	r4, r4, #2
 8003b20:	2600      	movs	r6, #0
 8003b22:	42a6      	cmp	r6, r4
 8003b24:	d105      	bne.n	8003b32 <__libc_init_array+0x2e>
 8003b26:	bd70      	pop	{r4, r5, r6, pc}
 8003b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b2c:	4798      	blx	r3
 8003b2e:	3601      	adds	r6, #1
 8003b30:	e7ee      	b.n	8003b10 <__libc_init_array+0xc>
 8003b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b36:	4798      	blx	r3
 8003b38:	3601      	adds	r6, #1
 8003b3a:	e7f2      	b.n	8003b22 <__libc_init_array+0x1e>
 8003b3c:	08007ca8 	.word	0x08007ca8
 8003b40:	08007ca8 	.word	0x08007ca8
 8003b44:	08007ca8 	.word	0x08007ca8
 8003b48:	08007cac 	.word	0x08007cac

08003b4c <memset>:
 8003b4c:	4402      	add	r2, r0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d100      	bne.n	8003b56 <memset+0xa>
 8003b54:	4770      	bx	lr
 8003b56:	f803 1b01 	strb.w	r1, [r3], #1
 8003b5a:	e7f9      	b.n	8003b50 <memset+0x4>

08003b5c <__cvt>:
 8003b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b60:	ec55 4b10 	vmov	r4, r5, d0
 8003b64:	2d00      	cmp	r5, #0
 8003b66:	460e      	mov	r6, r1
 8003b68:	4619      	mov	r1, r3
 8003b6a:	462b      	mov	r3, r5
 8003b6c:	bfbb      	ittet	lt
 8003b6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003b72:	461d      	movlt	r5, r3
 8003b74:	2300      	movge	r3, #0
 8003b76:	232d      	movlt	r3, #45	; 0x2d
 8003b78:	700b      	strb	r3, [r1, #0]
 8003b7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003b80:	4691      	mov	r9, r2
 8003b82:	f023 0820 	bic.w	r8, r3, #32
 8003b86:	bfbc      	itt	lt
 8003b88:	4622      	movlt	r2, r4
 8003b8a:	4614      	movlt	r4, r2
 8003b8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b90:	d005      	beq.n	8003b9e <__cvt+0x42>
 8003b92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003b96:	d100      	bne.n	8003b9a <__cvt+0x3e>
 8003b98:	3601      	adds	r6, #1
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	e000      	b.n	8003ba0 <__cvt+0x44>
 8003b9e:	2103      	movs	r1, #3
 8003ba0:	ab03      	add	r3, sp, #12
 8003ba2:	9301      	str	r3, [sp, #4]
 8003ba4:	ab02      	add	r3, sp, #8
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	ec45 4b10 	vmov	d0, r4, r5
 8003bac:	4653      	mov	r3, sl
 8003bae:	4632      	mov	r2, r6
 8003bb0:	f000 fcf2 	bl	8004598 <_dtoa_r>
 8003bb4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003bb8:	4607      	mov	r7, r0
 8003bba:	d102      	bne.n	8003bc2 <__cvt+0x66>
 8003bbc:	f019 0f01 	tst.w	r9, #1
 8003bc0:	d022      	beq.n	8003c08 <__cvt+0xac>
 8003bc2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003bc6:	eb07 0906 	add.w	r9, r7, r6
 8003bca:	d110      	bne.n	8003bee <__cvt+0x92>
 8003bcc:	783b      	ldrb	r3, [r7, #0]
 8003bce:	2b30      	cmp	r3, #48	; 0x30
 8003bd0:	d10a      	bne.n	8003be8 <__cvt+0x8c>
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	4629      	mov	r1, r5
 8003bda:	f7fc ff75 	bl	8000ac8 <__aeabi_dcmpeq>
 8003bde:	b918      	cbnz	r0, 8003be8 <__cvt+0x8c>
 8003be0:	f1c6 0601 	rsb	r6, r6, #1
 8003be4:	f8ca 6000 	str.w	r6, [sl]
 8003be8:	f8da 3000 	ldr.w	r3, [sl]
 8003bec:	4499      	add	r9, r3
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	f7fc ff67 	bl	8000ac8 <__aeabi_dcmpeq>
 8003bfa:	b108      	cbz	r0, 8003c00 <__cvt+0xa4>
 8003bfc:	f8cd 900c 	str.w	r9, [sp, #12]
 8003c00:	2230      	movs	r2, #48	; 0x30
 8003c02:	9b03      	ldr	r3, [sp, #12]
 8003c04:	454b      	cmp	r3, r9
 8003c06:	d307      	bcc.n	8003c18 <__cvt+0xbc>
 8003c08:	9b03      	ldr	r3, [sp, #12]
 8003c0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c0c:	1bdb      	subs	r3, r3, r7
 8003c0e:	4638      	mov	r0, r7
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	b004      	add	sp, #16
 8003c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c18:	1c59      	adds	r1, r3, #1
 8003c1a:	9103      	str	r1, [sp, #12]
 8003c1c:	701a      	strb	r2, [r3, #0]
 8003c1e:	e7f0      	b.n	8003c02 <__cvt+0xa6>

08003c20 <__exponent>:
 8003c20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c22:	4603      	mov	r3, r0
 8003c24:	2900      	cmp	r1, #0
 8003c26:	bfb8      	it	lt
 8003c28:	4249      	neglt	r1, r1
 8003c2a:	f803 2b02 	strb.w	r2, [r3], #2
 8003c2e:	bfb4      	ite	lt
 8003c30:	222d      	movlt	r2, #45	; 0x2d
 8003c32:	222b      	movge	r2, #43	; 0x2b
 8003c34:	2909      	cmp	r1, #9
 8003c36:	7042      	strb	r2, [r0, #1]
 8003c38:	dd2a      	ble.n	8003c90 <__exponent+0x70>
 8003c3a:	f10d 0407 	add.w	r4, sp, #7
 8003c3e:	46a4      	mov	ip, r4
 8003c40:	270a      	movs	r7, #10
 8003c42:	46a6      	mov	lr, r4
 8003c44:	460a      	mov	r2, r1
 8003c46:	fb91 f6f7 	sdiv	r6, r1, r7
 8003c4a:	fb07 1516 	mls	r5, r7, r6, r1
 8003c4e:	3530      	adds	r5, #48	; 0x30
 8003c50:	2a63      	cmp	r2, #99	; 0x63
 8003c52:	f104 34ff 	add.w	r4, r4, #4294967295
 8003c56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003c5a:	4631      	mov	r1, r6
 8003c5c:	dcf1      	bgt.n	8003c42 <__exponent+0x22>
 8003c5e:	3130      	adds	r1, #48	; 0x30
 8003c60:	f1ae 0502 	sub.w	r5, lr, #2
 8003c64:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003c68:	1c44      	adds	r4, r0, #1
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	4561      	cmp	r1, ip
 8003c6e:	d30a      	bcc.n	8003c86 <__exponent+0x66>
 8003c70:	f10d 0209 	add.w	r2, sp, #9
 8003c74:	eba2 020e 	sub.w	r2, r2, lr
 8003c78:	4565      	cmp	r5, ip
 8003c7a:	bf88      	it	hi
 8003c7c:	2200      	movhi	r2, #0
 8003c7e:	4413      	add	r3, r2
 8003c80:	1a18      	subs	r0, r3, r0
 8003c82:	b003      	add	sp, #12
 8003c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c8a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003c8e:	e7ed      	b.n	8003c6c <__exponent+0x4c>
 8003c90:	2330      	movs	r3, #48	; 0x30
 8003c92:	3130      	adds	r1, #48	; 0x30
 8003c94:	7083      	strb	r3, [r0, #2]
 8003c96:	70c1      	strb	r1, [r0, #3]
 8003c98:	1d03      	adds	r3, r0, #4
 8003c9a:	e7f1      	b.n	8003c80 <__exponent+0x60>

08003c9c <_printf_float>:
 8003c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca0:	ed2d 8b02 	vpush	{d8}
 8003ca4:	b08d      	sub	sp, #52	; 0x34
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003cac:	4616      	mov	r6, r2
 8003cae:	461f      	mov	r7, r3
 8003cb0:	4605      	mov	r5, r0
 8003cb2:	f001 fa5d 	bl	8005170 <_localeconv_r>
 8003cb6:	f8d0 a000 	ldr.w	sl, [r0]
 8003cba:	4650      	mov	r0, sl
 8003cbc:	f7fc fa88 	bl	80001d0 <strlen>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	930a      	str	r3, [sp, #40]	; 0x28
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	9305      	str	r3, [sp, #20]
 8003cc8:	f8d8 3000 	ldr.w	r3, [r8]
 8003ccc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003cd0:	3307      	adds	r3, #7
 8003cd2:	f023 0307 	bic.w	r3, r3, #7
 8003cd6:	f103 0208 	add.w	r2, r3, #8
 8003cda:	f8c8 2000 	str.w	r2, [r8]
 8003cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003ce6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003cea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003cee:	9307      	str	r3, [sp, #28]
 8003cf0:	f8cd 8018 	str.w	r8, [sp, #24]
 8003cf4:	ee08 0a10 	vmov	s16, r0
 8003cf8:	4b9f      	ldr	r3, [pc, #636]	; (8003f78 <_printf_float+0x2dc>)
 8003cfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8003d02:	f7fc ff13 	bl	8000b2c <__aeabi_dcmpun>
 8003d06:	bb88      	cbnz	r0, 8003d6c <_printf_float+0xd0>
 8003d08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d0c:	4b9a      	ldr	r3, [pc, #616]	; (8003f78 <_printf_float+0x2dc>)
 8003d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d12:	f7fc feed 	bl	8000af0 <__aeabi_dcmple>
 8003d16:	bb48      	cbnz	r0, 8003d6c <_printf_float+0xd0>
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	4640      	mov	r0, r8
 8003d1e:	4649      	mov	r1, r9
 8003d20:	f7fc fedc 	bl	8000adc <__aeabi_dcmplt>
 8003d24:	b110      	cbz	r0, 8003d2c <_printf_float+0x90>
 8003d26:	232d      	movs	r3, #45	; 0x2d
 8003d28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d2c:	4b93      	ldr	r3, [pc, #588]	; (8003f7c <_printf_float+0x2e0>)
 8003d2e:	4894      	ldr	r0, [pc, #592]	; (8003f80 <_printf_float+0x2e4>)
 8003d30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003d34:	bf94      	ite	ls
 8003d36:	4698      	movls	r8, r3
 8003d38:	4680      	movhi	r8, r0
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	6123      	str	r3, [r4, #16]
 8003d3e:	9b05      	ldr	r3, [sp, #20]
 8003d40:	f023 0204 	bic.w	r2, r3, #4
 8003d44:	6022      	str	r2, [r4, #0]
 8003d46:	f04f 0900 	mov.w	r9, #0
 8003d4a:	9700      	str	r7, [sp, #0]
 8003d4c:	4633      	mov	r3, r6
 8003d4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003d50:	4621      	mov	r1, r4
 8003d52:	4628      	mov	r0, r5
 8003d54:	f000 f9d8 	bl	8004108 <_printf_common>
 8003d58:	3001      	adds	r0, #1
 8003d5a:	f040 8090 	bne.w	8003e7e <_printf_float+0x1e2>
 8003d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d62:	b00d      	add	sp, #52	; 0x34
 8003d64:	ecbd 8b02 	vpop	{d8}
 8003d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d6c:	4642      	mov	r2, r8
 8003d6e:	464b      	mov	r3, r9
 8003d70:	4640      	mov	r0, r8
 8003d72:	4649      	mov	r1, r9
 8003d74:	f7fc feda 	bl	8000b2c <__aeabi_dcmpun>
 8003d78:	b140      	cbz	r0, 8003d8c <_printf_float+0xf0>
 8003d7a:	464b      	mov	r3, r9
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	bfbc      	itt	lt
 8003d80:	232d      	movlt	r3, #45	; 0x2d
 8003d82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003d86:	487f      	ldr	r0, [pc, #508]	; (8003f84 <_printf_float+0x2e8>)
 8003d88:	4b7f      	ldr	r3, [pc, #508]	; (8003f88 <_printf_float+0x2ec>)
 8003d8a:	e7d1      	b.n	8003d30 <_printf_float+0x94>
 8003d8c:	6863      	ldr	r3, [r4, #4]
 8003d8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003d92:	9206      	str	r2, [sp, #24]
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	d13f      	bne.n	8003e18 <_printf_float+0x17c>
 8003d98:	2306      	movs	r3, #6
 8003d9a:	6063      	str	r3, [r4, #4]
 8003d9c:	9b05      	ldr	r3, [sp, #20]
 8003d9e:	6861      	ldr	r1, [r4, #4]
 8003da0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003da4:	2300      	movs	r3, #0
 8003da6:	9303      	str	r3, [sp, #12]
 8003da8:	ab0a      	add	r3, sp, #40	; 0x28
 8003daa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003dae:	ab09      	add	r3, sp, #36	; 0x24
 8003db0:	ec49 8b10 	vmov	d0, r8, r9
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	6022      	str	r2, [r4, #0]
 8003db8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	f7ff fecd 	bl	8003b5c <__cvt>
 8003dc2:	9b06      	ldr	r3, [sp, #24]
 8003dc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003dc6:	2b47      	cmp	r3, #71	; 0x47
 8003dc8:	4680      	mov	r8, r0
 8003dca:	d108      	bne.n	8003dde <_printf_float+0x142>
 8003dcc:	1cc8      	adds	r0, r1, #3
 8003dce:	db02      	blt.n	8003dd6 <_printf_float+0x13a>
 8003dd0:	6863      	ldr	r3, [r4, #4]
 8003dd2:	4299      	cmp	r1, r3
 8003dd4:	dd41      	ble.n	8003e5a <_printf_float+0x1be>
 8003dd6:	f1ab 0b02 	sub.w	fp, fp, #2
 8003dda:	fa5f fb8b 	uxtb.w	fp, fp
 8003dde:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003de2:	d820      	bhi.n	8003e26 <_printf_float+0x18a>
 8003de4:	3901      	subs	r1, #1
 8003de6:	465a      	mov	r2, fp
 8003de8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003dec:	9109      	str	r1, [sp, #36]	; 0x24
 8003dee:	f7ff ff17 	bl	8003c20 <__exponent>
 8003df2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003df4:	1813      	adds	r3, r2, r0
 8003df6:	2a01      	cmp	r2, #1
 8003df8:	4681      	mov	r9, r0
 8003dfa:	6123      	str	r3, [r4, #16]
 8003dfc:	dc02      	bgt.n	8003e04 <_printf_float+0x168>
 8003dfe:	6822      	ldr	r2, [r4, #0]
 8003e00:	07d2      	lsls	r2, r2, #31
 8003e02:	d501      	bpl.n	8003e08 <_printf_float+0x16c>
 8003e04:	3301      	adds	r3, #1
 8003e06:	6123      	str	r3, [r4, #16]
 8003e08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d09c      	beq.n	8003d4a <_printf_float+0xae>
 8003e10:	232d      	movs	r3, #45	; 0x2d
 8003e12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e16:	e798      	b.n	8003d4a <_printf_float+0xae>
 8003e18:	9a06      	ldr	r2, [sp, #24]
 8003e1a:	2a47      	cmp	r2, #71	; 0x47
 8003e1c:	d1be      	bne.n	8003d9c <_printf_float+0x100>
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1bc      	bne.n	8003d9c <_printf_float+0x100>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e7b9      	b.n	8003d9a <_printf_float+0xfe>
 8003e26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003e2a:	d118      	bne.n	8003e5e <_printf_float+0x1c2>
 8003e2c:	2900      	cmp	r1, #0
 8003e2e:	6863      	ldr	r3, [r4, #4]
 8003e30:	dd0b      	ble.n	8003e4a <_printf_float+0x1ae>
 8003e32:	6121      	str	r1, [r4, #16]
 8003e34:	b913      	cbnz	r3, 8003e3c <_printf_float+0x1a0>
 8003e36:	6822      	ldr	r2, [r4, #0]
 8003e38:	07d0      	lsls	r0, r2, #31
 8003e3a:	d502      	bpl.n	8003e42 <_printf_float+0x1a6>
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	440b      	add	r3, r1
 8003e40:	6123      	str	r3, [r4, #16]
 8003e42:	65a1      	str	r1, [r4, #88]	; 0x58
 8003e44:	f04f 0900 	mov.w	r9, #0
 8003e48:	e7de      	b.n	8003e08 <_printf_float+0x16c>
 8003e4a:	b913      	cbnz	r3, 8003e52 <_printf_float+0x1b6>
 8003e4c:	6822      	ldr	r2, [r4, #0]
 8003e4e:	07d2      	lsls	r2, r2, #31
 8003e50:	d501      	bpl.n	8003e56 <_printf_float+0x1ba>
 8003e52:	3302      	adds	r3, #2
 8003e54:	e7f4      	b.n	8003e40 <_printf_float+0x1a4>
 8003e56:	2301      	movs	r3, #1
 8003e58:	e7f2      	b.n	8003e40 <_printf_float+0x1a4>
 8003e5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e60:	4299      	cmp	r1, r3
 8003e62:	db05      	blt.n	8003e70 <_printf_float+0x1d4>
 8003e64:	6823      	ldr	r3, [r4, #0]
 8003e66:	6121      	str	r1, [r4, #16]
 8003e68:	07d8      	lsls	r0, r3, #31
 8003e6a:	d5ea      	bpl.n	8003e42 <_printf_float+0x1a6>
 8003e6c:	1c4b      	adds	r3, r1, #1
 8003e6e:	e7e7      	b.n	8003e40 <_printf_float+0x1a4>
 8003e70:	2900      	cmp	r1, #0
 8003e72:	bfd4      	ite	le
 8003e74:	f1c1 0202 	rsble	r2, r1, #2
 8003e78:	2201      	movgt	r2, #1
 8003e7a:	4413      	add	r3, r2
 8003e7c:	e7e0      	b.n	8003e40 <_printf_float+0x1a4>
 8003e7e:	6823      	ldr	r3, [r4, #0]
 8003e80:	055a      	lsls	r2, r3, #21
 8003e82:	d407      	bmi.n	8003e94 <_printf_float+0x1f8>
 8003e84:	6923      	ldr	r3, [r4, #16]
 8003e86:	4642      	mov	r2, r8
 8003e88:	4631      	mov	r1, r6
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	47b8      	blx	r7
 8003e8e:	3001      	adds	r0, #1
 8003e90:	d12c      	bne.n	8003eec <_printf_float+0x250>
 8003e92:	e764      	b.n	8003d5e <_printf_float+0xc2>
 8003e94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003e98:	f240 80e0 	bls.w	800405c <_printf_float+0x3c0>
 8003e9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	f7fc fe10 	bl	8000ac8 <__aeabi_dcmpeq>
 8003ea8:	2800      	cmp	r0, #0
 8003eaa:	d034      	beq.n	8003f16 <_printf_float+0x27a>
 8003eac:	4a37      	ldr	r2, [pc, #220]	; (8003f8c <_printf_float+0x2f0>)
 8003eae:	2301      	movs	r3, #1
 8003eb0:	4631      	mov	r1, r6
 8003eb2:	4628      	mov	r0, r5
 8003eb4:	47b8      	blx	r7
 8003eb6:	3001      	adds	r0, #1
 8003eb8:	f43f af51 	beq.w	8003d5e <_printf_float+0xc2>
 8003ebc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	db02      	blt.n	8003eca <_printf_float+0x22e>
 8003ec4:	6823      	ldr	r3, [r4, #0]
 8003ec6:	07d8      	lsls	r0, r3, #31
 8003ec8:	d510      	bpl.n	8003eec <_printf_float+0x250>
 8003eca:	ee18 3a10 	vmov	r3, s16
 8003ece:	4652      	mov	r2, sl
 8003ed0:	4631      	mov	r1, r6
 8003ed2:	4628      	mov	r0, r5
 8003ed4:	47b8      	blx	r7
 8003ed6:	3001      	adds	r0, #1
 8003ed8:	f43f af41 	beq.w	8003d5e <_printf_float+0xc2>
 8003edc:	f04f 0800 	mov.w	r8, #0
 8003ee0:	f104 091a 	add.w	r9, r4, #26
 8003ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	4543      	cmp	r3, r8
 8003eea:	dc09      	bgt.n	8003f00 <_printf_float+0x264>
 8003eec:	6823      	ldr	r3, [r4, #0]
 8003eee:	079b      	lsls	r3, r3, #30
 8003ef0:	f100 8105 	bmi.w	80040fe <_printf_float+0x462>
 8003ef4:	68e0      	ldr	r0, [r4, #12]
 8003ef6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ef8:	4298      	cmp	r0, r3
 8003efa:	bfb8      	it	lt
 8003efc:	4618      	movlt	r0, r3
 8003efe:	e730      	b.n	8003d62 <_printf_float+0xc6>
 8003f00:	2301      	movs	r3, #1
 8003f02:	464a      	mov	r2, r9
 8003f04:	4631      	mov	r1, r6
 8003f06:	4628      	mov	r0, r5
 8003f08:	47b8      	blx	r7
 8003f0a:	3001      	adds	r0, #1
 8003f0c:	f43f af27 	beq.w	8003d5e <_printf_float+0xc2>
 8003f10:	f108 0801 	add.w	r8, r8, #1
 8003f14:	e7e6      	b.n	8003ee4 <_printf_float+0x248>
 8003f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	dc39      	bgt.n	8003f90 <_printf_float+0x2f4>
 8003f1c:	4a1b      	ldr	r2, [pc, #108]	; (8003f8c <_printf_float+0x2f0>)
 8003f1e:	2301      	movs	r3, #1
 8003f20:	4631      	mov	r1, r6
 8003f22:	4628      	mov	r0, r5
 8003f24:	47b8      	blx	r7
 8003f26:	3001      	adds	r0, #1
 8003f28:	f43f af19 	beq.w	8003d5e <_printf_float+0xc2>
 8003f2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f30:	4313      	orrs	r3, r2
 8003f32:	d102      	bne.n	8003f3a <_printf_float+0x29e>
 8003f34:	6823      	ldr	r3, [r4, #0]
 8003f36:	07d9      	lsls	r1, r3, #31
 8003f38:	d5d8      	bpl.n	8003eec <_printf_float+0x250>
 8003f3a:	ee18 3a10 	vmov	r3, s16
 8003f3e:	4652      	mov	r2, sl
 8003f40:	4631      	mov	r1, r6
 8003f42:	4628      	mov	r0, r5
 8003f44:	47b8      	blx	r7
 8003f46:	3001      	adds	r0, #1
 8003f48:	f43f af09 	beq.w	8003d5e <_printf_float+0xc2>
 8003f4c:	f04f 0900 	mov.w	r9, #0
 8003f50:	f104 0a1a 	add.w	sl, r4, #26
 8003f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f56:	425b      	negs	r3, r3
 8003f58:	454b      	cmp	r3, r9
 8003f5a:	dc01      	bgt.n	8003f60 <_printf_float+0x2c4>
 8003f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f5e:	e792      	b.n	8003e86 <_printf_float+0x1ea>
 8003f60:	2301      	movs	r3, #1
 8003f62:	4652      	mov	r2, sl
 8003f64:	4631      	mov	r1, r6
 8003f66:	4628      	mov	r0, r5
 8003f68:	47b8      	blx	r7
 8003f6a:	3001      	adds	r0, #1
 8003f6c:	f43f aef7 	beq.w	8003d5e <_printf_float+0xc2>
 8003f70:	f109 0901 	add.w	r9, r9, #1
 8003f74:	e7ee      	b.n	8003f54 <_printf_float+0x2b8>
 8003f76:	bf00      	nop
 8003f78:	7fefffff 	.word	0x7fefffff
 8003f7c:	08007884 	.word	0x08007884
 8003f80:	08007888 	.word	0x08007888
 8003f84:	08007890 	.word	0x08007890
 8003f88:	0800788c 	.word	0x0800788c
 8003f8c:	08007894 	.word	0x08007894
 8003f90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f94:	429a      	cmp	r2, r3
 8003f96:	bfa8      	it	ge
 8003f98:	461a      	movge	r2, r3
 8003f9a:	2a00      	cmp	r2, #0
 8003f9c:	4691      	mov	r9, r2
 8003f9e:	dc37      	bgt.n	8004010 <_printf_float+0x374>
 8003fa0:	f04f 0b00 	mov.w	fp, #0
 8003fa4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003fa8:	f104 021a 	add.w	r2, r4, #26
 8003fac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fae:	9305      	str	r3, [sp, #20]
 8003fb0:	eba3 0309 	sub.w	r3, r3, r9
 8003fb4:	455b      	cmp	r3, fp
 8003fb6:	dc33      	bgt.n	8004020 <_printf_float+0x384>
 8003fb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	db3b      	blt.n	8004038 <_printf_float+0x39c>
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	07da      	lsls	r2, r3, #31
 8003fc4:	d438      	bmi.n	8004038 <_printf_float+0x39c>
 8003fc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003fc8:	9b05      	ldr	r3, [sp, #20]
 8003fca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	eba2 0901 	sub.w	r9, r2, r1
 8003fd2:	4599      	cmp	r9, r3
 8003fd4:	bfa8      	it	ge
 8003fd6:	4699      	movge	r9, r3
 8003fd8:	f1b9 0f00 	cmp.w	r9, #0
 8003fdc:	dc35      	bgt.n	800404a <_printf_float+0x3ae>
 8003fde:	f04f 0800 	mov.w	r8, #0
 8003fe2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003fe6:	f104 0a1a 	add.w	sl, r4, #26
 8003fea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003fee:	1a9b      	subs	r3, r3, r2
 8003ff0:	eba3 0309 	sub.w	r3, r3, r9
 8003ff4:	4543      	cmp	r3, r8
 8003ff6:	f77f af79 	ble.w	8003eec <_printf_float+0x250>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	4652      	mov	r2, sl
 8003ffe:	4631      	mov	r1, r6
 8004000:	4628      	mov	r0, r5
 8004002:	47b8      	blx	r7
 8004004:	3001      	adds	r0, #1
 8004006:	f43f aeaa 	beq.w	8003d5e <_printf_float+0xc2>
 800400a:	f108 0801 	add.w	r8, r8, #1
 800400e:	e7ec      	b.n	8003fea <_printf_float+0x34e>
 8004010:	4613      	mov	r3, r2
 8004012:	4631      	mov	r1, r6
 8004014:	4642      	mov	r2, r8
 8004016:	4628      	mov	r0, r5
 8004018:	47b8      	blx	r7
 800401a:	3001      	adds	r0, #1
 800401c:	d1c0      	bne.n	8003fa0 <_printf_float+0x304>
 800401e:	e69e      	b.n	8003d5e <_printf_float+0xc2>
 8004020:	2301      	movs	r3, #1
 8004022:	4631      	mov	r1, r6
 8004024:	4628      	mov	r0, r5
 8004026:	9205      	str	r2, [sp, #20]
 8004028:	47b8      	blx	r7
 800402a:	3001      	adds	r0, #1
 800402c:	f43f ae97 	beq.w	8003d5e <_printf_float+0xc2>
 8004030:	9a05      	ldr	r2, [sp, #20]
 8004032:	f10b 0b01 	add.w	fp, fp, #1
 8004036:	e7b9      	b.n	8003fac <_printf_float+0x310>
 8004038:	ee18 3a10 	vmov	r3, s16
 800403c:	4652      	mov	r2, sl
 800403e:	4631      	mov	r1, r6
 8004040:	4628      	mov	r0, r5
 8004042:	47b8      	blx	r7
 8004044:	3001      	adds	r0, #1
 8004046:	d1be      	bne.n	8003fc6 <_printf_float+0x32a>
 8004048:	e689      	b.n	8003d5e <_printf_float+0xc2>
 800404a:	9a05      	ldr	r2, [sp, #20]
 800404c:	464b      	mov	r3, r9
 800404e:	4442      	add	r2, r8
 8004050:	4631      	mov	r1, r6
 8004052:	4628      	mov	r0, r5
 8004054:	47b8      	blx	r7
 8004056:	3001      	adds	r0, #1
 8004058:	d1c1      	bne.n	8003fde <_printf_float+0x342>
 800405a:	e680      	b.n	8003d5e <_printf_float+0xc2>
 800405c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800405e:	2a01      	cmp	r2, #1
 8004060:	dc01      	bgt.n	8004066 <_printf_float+0x3ca>
 8004062:	07db      	lsls	r3, r3, #31
 8004064:	d538      	bpl.n	80040d8 <_printf_float+0x43c>
 8004066:	2301      	movs	r3, #1
 8004068:	4642      	mov	r2, r8
 800406a:	4631      	mov	r1, r6
 800406c:	4628      	mov	r0, r5
 800406e:	47b8      	blx	r7
 8004070:	3001      	adds	r0, #1
 8004072:	f43f ae74 	beq.w	8003d5e <_printf_float+0xc2>
 8004076:	ee18 3a10 	vmov	r3, s16
 800407a:	4652      	mov	r2, sl
 800407c:	4631      	mov	r1, r6
 800407e:	4628      	mov	r0, r5
 8004080:	47b8      	blx	r7
 8004082:	3001      	adds	r0, #1
 8004084:	f43f ae6b 	beq.w	8003d5e <_printf_float+0xc2>
 8004088:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800408c:	2200      	movs	r2, #0
 800408e:	2300      	movs	r3, #0
 8004090:	f7fc fd1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004094:	b9d8      	cbnz	r0, 80040ce <_printf_float+0x432>
 8004096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004098:	f108 0201 	add.w	r2, r8, #1
 800409c:	3b01      	subs	r3, #1
 800409e:	4631      	mov	r1, r6
 80040a0:	4628      	mov	r0, r5
 80040a2:	47b8      	blx	r7
 80040a4:	3001      	adds	r0, #1
 80040a6:	d10e      	bne.n	80040c6 <_printf_float+0x42a>
 80040a8:	e659      	b.n	8003d5e <_printf_float+0xc2>
 80040aa:	2301      	movs	r3, #1
 80040ac:	4652      	mov	r2, sl
 80040ae:	4631      	mov	r1, r6
 80040b0:	4628      	mov	r0, r5
 80040b2:	47b8      	blx	r7
 80040b4:	3001      	adds	r0, #1
 80040b6:	f43f ae52 	beq.w	8003d5e <_printf_float+0xc2>
 80040ba:	f108 0801 	add.w	r8, r8, #1
 80040be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040c0:	3b01      	subs	r3, #1
 80040c2:	4543      	cmp	r3, r8
 80040c4:	dcf1      	bgt.n	80040aa <_printf_float+0x40e>
 80040c6:	464b      	mov	r3, r9
 80040c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80040cc:	e6dc      	b.n	8003e88 <_printf_float+0x1ec>
 80040ce:	f04f 0800 	mov.w	r8, #0
 80040d2:	f104 0a1a 	add.w	sl, r4, #26
 80040d6:	e7f2      	b.n	80040be <_printf_float+0x422>
 80040d8:	2301      	movs	r3, #1
 80040da:	4642      	mov	r2, r8
 80040dc:	e7df      	b.n	800409e <_printf_float+0x402>
 80040de:	2301      	movs	r3, #1
 80040e0:	464a      	mov	r2, r9
 80040e2:	4631      	mov	r1, r6
 80040e4:	4628      	mov	r0, r5
 80040e6:	47b8      	blx	r7
 80040e8:	3001      	adds	r0, #1
 80040ea:	f43f ae38 	beq.w	8003d5e <_printf_float+0xc2>
 80040ee:	f108 0801 	add.w	r8, r8, #1
 80040f2:	68e3      	ldr	r3, [r4, #12]
 80040f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040f6:	1a5b      	subs	r3, r3, r1
 80040f8:	4543      	cmp	r3, r8
 80040fa:	dcf0      	bgt.n	80040de <_printf_float+0x442>
 80040fc:	e6fa      	b.n	8003ef4 <_printf_float+0x258>
 80040fe:	f04f 0800 	mov.w	r8, #0
 8004102:	f104 0919 	add.w	r9, r4, #25
 8004106:	e7f4      	b.n	80040f2 <_printf_float+0x456>

08004108 <_printf_common>:
 8004108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800410c:	4616      	mov	r6, r2
 800410e:	4699      	mov	r9, r3
 8004110:	688a      	ldr	r2, [r1, #8]
 8004112:	690b      	ldr	r3, [r1, #16]
 8004114:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004118:	4293      	cmp	r3, r2
 800411a:	bfb8      	it	lt
 800411c:	4613      	movlt	r3, r2
 800411e:	6033      	str	r3, [r6, #0]
 8004120:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004124:	4607      	mov	r7, r0
 8004126:	460c      	mov	r4, r1
 8004128:	b10a      	cbz	r2, 800412e <_printf_common+0x26>
 800412a:	3301      	adds	r3, #1
 800412c:	6033      	str	r3, [r6, #0]
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	0699      	lsls	r1, r3, #26
 8004132:	bf42      	ittt	mi
 8004134:	6833      	ldrmi	r3, [r6, #0]
 8004136:	3302      	addmi	r3, #2
 8004138:	6033      	strmi	r3, [r6, #0]
 800413a:	6825      	ldr	r5, [r4, #0]
 800413c:	f015 0506 	ands.w	r5, r5, #6
 8004140:	d106      	bne.n	8004150 <_printf_common+0x48>
 8004142:	f104 0a19 	add.w	sl, r4, #25
 8004146:	68e3      	ldr	r3, [r4, #12]
 8004148:	6832      	ldr	r2, [r6, #0]
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	42ab      	cmp	r3, r5
 800414e:	dc26      	bgt.n	800419e <_printf_common+0x96>
 8004150:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004154:	1e13      	subs	r3, r2, #0
 8004156:	6822      	ldr	r2, [r4, #0]
 8004158:	bf18      	it	ne
 800415a:	2301      	movne	r3, #1
 800415c:	0692      	lsls	r2, r2, #26
 800415e:	d42b      	bmi.n	80041b8 <_printf_common+0xb0>
 8004160:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004164:	4649      	mov	r1, r9
 8004166:	4638      	mov	r0, r7
 8004168:	47c0      	blx	r8
 800416a:	3001      	adds	r0, #1
 800416c:	d01e      	beq.n	80041ac <_printf_common+0xa4>
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	68e5      	ldr	r5, [r4, #12]
 8004172:	6832      	ldr	r2, [r6, #0]
 8004174:	f003 0306 	and.w	r3, r3, #6
 8004178:	2b04      	cmp	r3, #4
 800417a:	bf08      	it	eq
 800417c:	1aad      	subeq	r5, r5, r2
 800417e:	68a3      	ldr	r3, [r4, #8]
 8004180:	6922      	ldr	r2, [r4, #16]
 8004182:	bf0c      	ite	eq
 8004184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004188:	2500      	movne	r5, #0
 800418a:	4293      	cmp	r3, r2
 800418c:	bfc4      	itt	gt
 800418e:	1a9b      	subgt	r3, r3, r2
 8004190:	18ed      	addgt	r5, r5, r3
 8004192:	2600      	movs	r6, #0
 8004194:	341a      	adds	r4, #26
 8004196:	42b5      	cmp	r5, r6
 8004198:	d11a      	bne.n	80041d0 <_printf_common+0xc8>
 800419a:	2000      	movs	r0, #0
 800419c:	e008      	b.n	80041b0 <_printf_common+0xa8>
 800419e:	2301      	movs	r3, #1
 80041a0:	4652      	mov	r2, sl
 80041a2:	4649      	mov	r1, r9
 80041a4:	4638      	mov	r0, r7
 80041a6:	47c0      	blx	r8
 80041a8:	3001      	adds	r0, #1
 80041aa:	d103      	bne.n	80041b4 <_printf_common+0xac>
 80041ac:	f04f 30ff 	mov.w	r0, #4294967295
 80041b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041b4:	3501      	adds	r5, #1
 80041b6:	e7c6      	b.n	8004146 <_printf_common+0x3e>
 80041b8:	18e1      	adds	r1, r4, r3
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	2030      	movs	r0, #48	; 0x30
 80041be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041c2:	4422      	add	r2, r4
 80041c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041cc:	3302      	adds	r3, #2
 80041ce:	e7c7      	b.n	8004160 <_printf_common+0x58>
 80041d0:	2301      	movs	r3, #1
 80041d2:	4622      	mov	r2, r4
 80041d4:	4649      	mov	r1, r9
 80041d6:	4638      	mov	r0, r7
 80041d8:	47c0      	blx	r8
 80041da:	3001      	adds	r0, #1
 80041dc:	d0e6      	beq.n	80041ac <_printf_common+0xa4>
 80041de:	3601      	adds	r6, #1
 80041e0:	e7d9      	b.n	8004196 <_printf_common+0x8e>
	...

080041e4 <_printf_i>:
 80041e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041e8:	460c      	mov	r4, r1
 80041ea:	4691      	mov	r9, r2
 80041ec:	7e27      	ldrb	r7, [r4, #24]
 80041ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80041f0:	2f78      	cmp	r7, #120	; 0x78
 80041f2:	4680      	mov	r8, r0
 80041f4:	469a      	mov	sl, r3
 80041f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041fa:	d807      	bhi.n	800420c <_printf_i+0x28>
 80041fc:	2f62      	cmp	r7, #98	; 0x62
 80041fe:	d80a      	bhi.n	8004216 <_printf_i+0x32>
 8004200:	2f00      	cmp	r7, #0
 8004202:	f000 80d8 	beq.w	80043b6 <_printf_i+0x1d2>
 8004206:	2f58      	cmp	r7, #88	; 0x58
 8004208:	f000 80a3 	beq.w	8004352 <_printf_i+0x16e>
 800420c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004210:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004214:	e03a      	b.n	800428c <_printf_i+0xa8>
 8004216:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800421a:	2b15      	cmp	r3, #21
 800421c:	d8f6      	bhi.n	800420c <_printf_i+0x28>
 800421e:	a001      	add	r0, pc, #4	; (adr r0, 8004224 <_printf_i+0x40>)
 8004220:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004224:	0800427d 	.word	0x0800427d
 8004228:	08004291 	.word	0x08004291
 800422c:	0800420d 	.word	0x0800420d
 8004230:	0800420d 	.word	0x0800420d
 8004234:	0800420d 	.word	0x0800420d
 8004238:	0800420d 	.word	0x0800420d
 800423c:	08004291 	.word	0x08004291
 8004240:	0800420d 	.word	0x0800420d
 8004244:	0800420d 	.word	0x0800420d
 8004248:	0800420d 	.word	0x0800420d
 800424c:	0800420d 	.word	0x0800420d
 8004250:	0800439d 	.word	0x0800439d
 8004254:	080042c1 	.word	0x080042c1
 8004258:	0800437f 	.word	0x0800437f
 800425c:	0800420d 	.word	0x0800420d
 8004260:	0800420d 	.word	0x0800420d
 8004264:	080043bf 	.word	0x080043bf
 8004268:	0800420d 	.word	0x0800420d
 800426c:	080042c1 	.word	0x080042c1
 8004270:	0800420d 	.word	0x0800420d
 8004274:	0800420d 	.word	0x0800420d
 8004278:	08004387 	.word	0x08004387
 800427c:	680b      	ldr	r3, [r1, #0]
 800427e:	1d1a      	adds	r2, r3, #4
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	600a      	str	r2, [r1, #0]
 8004284:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004288:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800428c:	2301      	movs	r3, #1
 800428e:	e0a3      	b.n	80043d8 <_printf_i+0x1f4>
 8004290:	6825      	ldr	r5, [r4, #0]
 8004292:	6808      	ldr	r0, [r1, #0]
 8004294:	062e      	lsls	r6, r5, #24
 8004296:	f100 0304 	add.w	r3, r0, #4
 800429a:	d50a      	bpl.n	80042b2 <_printf_i+0xce>
 800429c:	6805      	ldr	r5, [r0, #0]
 800429e:	600b      	str	r3, [r1, #0]
 80042a0:	2d00      	cmp	r5, #0
 80042a2:	da03      	bge.n	80042ac <_printf_i+0xc8>
 80042a4:	232d      	movs	r3, #45	; 0x2d
 80042a6:	426d      	negs	r5, r5
 80042a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042ac:	485e      	ldr	r0, [pc, #376]	; (8004428 <_printf_i+0x244>)
 80042ae:	230a      	movs	r3, #10
 80042b0:	e019      	b.n	80042e6 <_printf_i+0x102>
 80042b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80042b6:	6805      	ldr	r5, [r0, #0]
 80042b8:	600b      	str	r3, [r1, #0]
 80042ba:	bf18      	it	ne
 80042bc:	b22d      	sxthne	r5, r5
 80042be:	e7ef      	b.n	80042a0 <_printf_i+0xbc>
 80042c0:	680b      	ldr	r3, [r1, #0]
 80042c2:	6825      	ldr	r5, [r4, #0]
 80042c4:	1d18      	adds	r0, r3, #4
 80042c6:	6008      	str	r0, [r1, #0]
 80042c8:	0628      	lsls	r0, r5, #24
 80042ca:	d501      	bpl.n	80042d0 <_printf_i+0xec>
 80042cc:	681d      	ldr	r5, [r3, #0]
 80042ce:	e002      	b.n	80042d6 <_printf_i+0xf2>
 80042d0:	0669      	lsls	r1, r5, #25
 80042d2:	d5fb      	bpl.n	80042cc <_printf_i+0xe8>
 80042d4:	881d      	ldrh	r5, [r3, #0]
 80042d6:	4854      	ldr	r0, [pc, #336]	; (8004428 <_printf_i+0x244>)
 80042d8:	2f6f      	cmp	r7, #111	; 0x6f
 80042da:	bf0c      	ite	eq
 80042dc:	2308      	moveq	r3, #8
 80042de:	230a      	movne	r3, #10
 80042e0:	2100      	movs	r1, #0
 80042e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042e6:	6866      	ldr	r6, [r4, #4]
 80042e8:	60a6      	str	r6, [r4, #8]
 80042ea:	2e00      	cmp	r6, #0
 80042ec:	bfa2      	ittt	ge
 80042ee:	6821      	ldrge	r1, [r4, #0]
 80042f0:	f021 0104 	bicge.w	r1, r1, #4
 80042f4:	6021      	strge	r1, [r4, #0]
 80042f6:	b90d      	cbnz	r5, 80042fc <_printf_i+0x118>
 80042f8:	2e00      	cmp	r6, #0
 80042fa:	d04d      	beq.n	8004398 <_printf_i+0x1b4>
 80042fc:	4616      	mov	r6, r2
 80042fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8004302:	fb03 5711 	mls	r7, r3, r1, r5
 8004306:	5dc7      	ldrb	r7, [r0, r7]
 8004308:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800430c:	462f      	mov	r7, r5
 800430e:	42bb      	cmp	r3, r7
 8004310:	460d      	mov	r5, r1
 8004312:	d9f4      	bls.n	80042fe <_printf_i+0x11a>
 8004314:	2b08      	cmp	r3, #8
 8004316:	d10b      	bne.n	8004330 <_printf_i+0x14c>
 8004318:	6823      	ldr	r3, [r4, #0]
 800431a:	07df      	lsls	r7, r3, #31
 800431c:	d508      	bpl.n	8004330 <_printf_i+0x14c>
 800431e:	6923      	ldr	r3, [r4, #16]
 8004320:	6861      	ldr	r1, [r4, #4]
 8004322:	4299      	cmp	r1, r3
 8004324:	bfde      	ittt	le
 8004326:	2330      	movle	r3, #48	; 0x30
 8004328:	f806 3c01 	strble.w	r3, [r6, #-1]
 800432c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004330:	1b92      	subs	r2, r2, r6
 8004332:	6122      	str	r2, [r4, #16]
 8004334:	f8cd a000 	str.w	sl, [sp]
 8004338:	464b      	mov	r3, r9
 800433a:	aa03      	add	r2, sp, #12
 800433c:	4621      	mov	r1, r4
 800433e:	4640      	mov	r0, r8
 8004340:	f7ff fee2 	bl	8004108 <_printf_common>
 8004344:	3001      	adds	r0, #1
 8004346:	d14c      	bne.n	80043e2 <_printf_i+0x1fe>
 8004348:	f04f 30ff 	mov.w	r0, #4294967295
 800434c:	b004      	add	sp, #16
 800434e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004352:	4835      	ldr	r0, [pc, #212]	; (8004428 <_printf_i+0x244>)
 8004354:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	680e      	ldr	r6, [r1, #0]
 800435c:	061f      	lsls	r7, r3, #24
 800435e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004362:	600e      	str	r6, [r1, #0]
 8004364:	d514      	bpl.n	8004390 <_printf_i+0x1ac>
 8004366:	07d9      	lsls	r1, r3, #31
 8004368:	bf44      	itt	mi
 800436a:	f043 0320 	orrmi.w	r3, r3, #32
 800436e:	6023      	strmi	r3, [r4, #0]
 8004370:	b91d      	cbnz	r5, 800437a <_printf_i+0x196>
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	f023 0320 	bic.w	r3, r3, #32
 8004378:	6023      	str	r3, [r4, #0]
 800437a:	2310      	movs	r3, #16
 800437c:	e7b0      	b.n	80042e0 <_printf_i+0xfc>
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	f043 0320 	orr.w	r3, r3, #32
 8004384:	6023      	str	r3, [r4, #0]
 8004386:	2378      	movs	r3, #120	; 0x78
 8004388:	4828      	ldr	r0, [pc, #160]	; (800442c <_printf_i+0x248>)
 800438a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800438e:	e7e3      	b.n	8004358 <_printf_i+0x174>
 8004390:	065e      	lsls	r6, r3, #25
 8004392:	bf48      	it	mi
 8004394:	b2ad      	uxthmi	r5, r5
 8004396:	e7e6      	b.n	8004366 <_printf_i+0x182>
 8004398:	4616      	mov	r6, r2
 800439a:	e7bb      	b.n	8004314 <_printf_i+0x130>
 800439c:	680b      	ldr	r3, [r1, #0]
 800439e:	6826      	ldr	r6, [r4, #0]
 80043a0:	6960      	ldr	r0, [r4, #20]
 80043a2:	1d1d      	adds	r5, r3, #4
 80043a4:	600d      	str	r5, [r1, #0]
 80043a6:	0635      	lsls	r5, r6, #24
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	d501      	bpl.n	80043b0 <_printf_i+0x1cc>
 80043ac:	6018      	str	r0, [r3, #0]
 80043ae:	e002      	b.n	80043b6 <_printf_i+0x1d2>
 80043b0:	0671      	lsls	r1, r6, #25
 80043b2:	d5fb      	bpl.n	80043ac <_printf_i+0x1c8>
 80043b4:	8018      	strh	r0, [r3, #0]
 80043b6:	2300      	movs	r3, #0
 80043b8:	6123      	str	r3, [r4, #16]
 80043ba:	4616      	mov	r6, r2
 80043bc:	e7ba      	b.n	8004334 <_printf_i+0x150>
 80043be:	680b      	ldr	r3, [r1, #0]
 80043c0:	1d1a      	adds	r2, r3, #4
 80043c2:	600a      	str	r2, [r1, #0]
 80043c4:	681e      	ldr	r6, [r3, #0]
 80043c6:	6862      	ldr	r2, [r4, #4]
 80043c8:	2100      	movs	r1, #0
 80043ca:	4630      	mov	r0, r6
 80043cc:	f7fb ff08 	bl	80001e0 <memchr>
 80043d0:	b108      	cbz	r0, 80043d6 <_printf_i+0x1f2>
 80043d2:	1b80      	subs	r0, r0, r6
 80043d4:	6060      	str	r0, [r4, #4]
 80043d6:	6863      	ldr	r3, [r4, #4]
 80043d8:	6123      	str	r3, [r4, #16]
 80043da:	2300      	movs	r3, #0
 80043dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043e0:	e7a8      	b.n	8004334 <_printf_i+0x150>
 80043e2:	6923      	ldr	r3, [r4, #16]
 80043e4:	4632      	mov	r2, r6
 80043e6:	4649      	mov	r1, r9
 80043e8:	4640      	mov	r0, r8
 80043ea:	47d0      	blx	sl
 80043ec:	3001      	adds	r0, #1
 80043ee:	d0ab      	beq.n	8004348 <_printf_i+0x164>
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	079b      	lsls	r3, r3, #30
 80043f4:	d413      	bmi.n	800441e <_printf_i+0x23a>
 80043f6:	68e0      	ldr	r0, [r4, #12]
 80043f8:	9b03      	ldr	r3, [sp, #12]
 80043fa:	4298      	cmp	r0, r3
 80043fc:	bfb8      	it	lt
 80043fe:	4618      	movlt	r0, r3
 8004400:	e7a4      	b.n	800434c <_printf_i+0x168>
 8004402:	2301      	movs	r3, #1
 8004404:	4632      	mov	r2, r6
 8004406:	4649      	mov	r1, r9
 8004408:	4640      	mov	r0, r8
 800440a:	47d0      	blx	sl
 800440c:	3001      	adds	r0, #1
 800440e:	d09b      	beq.n	8004348 <_printf_i+0x164>
 8004410:	3501      	adds	r5, #1
 8004412:	68e3      	ldr	r3, [r4, #12]
 8004414:	9903      	ldr	r1, [sp, #12]
 8004416:	1a5b      	subs	r3, r3, r1
 8004418:	42ab      	cmp	r3, r5
 800441a:	dcf2      	bgt.n	8004402 <_printf_i+0x21e>
 800441c:	e7eb      	b.n	80043f6 <_printf_i+0x212>
 800441e:	2500      	movs	r5, #0
 8004420:	f104 0619 	add.w	r6, r4, #25
 8004424:	e7f5      	b.n	8004412 <_printf_i+0x22e>
 8004426:	bf00      	nop
 8004428:	08007896 	.word	0x08007896
 800442c:	080078a7 	.word	0x080078a7

08004430 <siprintf>:
 8004430:	b40e      	push	{r1, r2, r3}
 8004432:	b500      	push	{lr}
 8004434:	b09c      	sub	sp, #112	; 0x70
 8004436:	ab1d      	add	r3, sp, #116	; 0x74
 8004438:	9002      	str	r0, [sp, #8]
 800443a:	9006      	str	r0, [sp, #24]
 800443c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004440:	4809      	ldr	r0, [pc, #36]	; (8004468 <siprintf+0x38>)
 8004442:	9107      	str	r1, [sp, #28]
 8004444:	9104      	str	r1, [sp, #16]
 8004446:	4909      	ldr	r1, [pc, #36]	; (800446c <siprintf+0x3c>)
 8004448:	f853 2b04 	ldr.w	r2, [r3], #4
 800444c:	9105      	str	r1, [sp, #20]
 800444e:	6800      	ldr	r0, [r0, #0]
 8004450:	9301      	str	r3, [sp, #4]
 8004452:	a902      	add	r1, sp, #8
 8004454:	f001 fb3a 	bl	8005acc <_svfiprintf_r>
 8004458:	9b02      	ldr	r3, [sp, #8]
 800445a:	2200      	movs	r2, #0
 800445c:	701a      	strb	r2, [r3, #0]
 800445e:	b01c      	add	sp, #112	; 0x70
 8004460:	f85d eb04 	ldr.w	lr, [sp], #4
 8004464:	b003      	add	sp, #12
 8004466:	4770      	bx	lr
 8004468:	20000008 	.word	0x20000008
 800446c:	ffff0208 	.word	0xffff0208

08004470 <strcpy>:
 8004470:	4603      	mov	r3, r0
 8004472:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004476:	f803 2b01 	strb.w	r2, [r3], #1
 800447a:	2a00      	cmp	r2, #0
 800447c:	d1f9      	bne.n	8004472 <strcpy+0x2>
 800447e:	4770      	bx	lr

08004480 <quorem>:
 8004480:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004484:	6903      	ldr	r3, [r0, #16]
 8004486:	690c      	ldr	r4, [r1, #16]
 8004488:	42a3      	cmp	r3, r4
 800448a:	4607      	mov	r7, r0
 800448c:	f2c0 8081 	blt.w	8004592 <quorem+0x112>
 8004490:	3c01      	subs	r4, #1
 8004492:	f101 0814 	add.w	r8, r1, #20
 8004496:	f100 0514 	add.w	r5, r0, #20
 800449a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800449e:	9301      	str	r3, [sp, #4]
 80044a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80044a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80044a8:	3301      	adds	r3, #1
 80044aa:	429a      	cmp	r2, r3
 80044ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80044b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80044b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80044b8:	d331      	bcc.n	800451e <quorem+0x9e>
 80044ba:	f04f 0e00 	mov.w	lr, #0
 80044be:	4640      	mov	r0, r8
 80044c0:	46ac      	mov	ip, r5
 80044c2:	46f2      	mov	sl, lr
 80044c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80044c8:	b293      	uxth	r3, r2
 80044ca:	fb06 e303 	mla	r3, r6, r3, lr
 80044ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	ebaa 0303 	sub.w	r3, sl, r3
 80044d8:	0c12      	lsrs	r2, r2, #16
 80044da:	f8dc a000 	ldr.w	sl, [ip]
 80044de:	fb06 e202 	mla	r2, r6, r2, lr
 80044e2:	fa13 f38a 	uxtah	r3, r3, sl
 80044e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80044ea:	fa1f fa82 	uxth.w	sl, r2
 80044ee:	f8dc 2000 	ldr.w	r2, [ip]
 80044f2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80044f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004500:	4581      	cmp	r9, r0
 8004502:	f84c 3b04 	str.w	r3, [ip], #4
 8004506:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800450a:	d2db      	bcs.n	80044c4 <quorem+0x44>
 800450c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004510:	b92b      	cbnz	r3, 800451e <quorem+0x9e>
 8004512:	9b01      	ldr	r3, [sp, #4]
 8004514:	3b04      	subs	r3, #4
 8004516:	429d      	cmp	r5, r3
 8004518:	461a      	mov	r2, r3
 800451a:	d32e      	bcc.n	800457a <quorem+0xfa>
 800451c:	613c      	str	r4, [r7, #16]
 800451e:	4638      	mov	r0, r7
 8004520:	f001 f8be 	bl	80056a0 <__mcmp>
 8004524:	2800      	cmp	r0, #0
 8004526:	db24      	blt.n	8004572 <quorem+0xf2>
 8004528:	3601      	adds	r6, #1
 800452a:	4628      	mov	r0, r5
 800452c:	f04f 0c00 	mov.w	ip, #0
 8004530:	f858 2b04 	ldr.w	r2, [r8], #4
 8004534:	f8d0 e000 	ldr.w	lr, [r0]
 8004538:	b293      	uxth	r3, r2
 800453a:	ebac 0303 	sub.w	r3, ip, r3
 800453e:	0c12      	lsrs	r2, r2, #16
 8004540:	fa13 f38e 	uxtah	r3, r3, lr
 8004544:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004548:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800454c:	b29b      	uxth	r3, r3
 800454e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004552:	45c1      	cmp	r9, r8
 8004554:	f840 3b04 	str.w	r3, [r0], #4
 8004558:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800455c:	d2e8      	bcs.n	8004530 <quorem+0xb0>
 800455e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004562:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004566:	b922      	cbnz	r2, 8004572 <quorem+0xf2>
 8004568:	3b04      	subs	r3, #4
 800456a:	429d      	cmp	r5, r3
 800456c:	461a      	mov	r2, r3
 800456e:	d30a      	bcc.n	8004586 <quorem+0x106>
 8004570:	613c      	str	r4, [r7, #16]
 8004572:	4630      	mov	r0, r6
 8004574:	b003      	add	sp, #12
 8004576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800457a:	6812      	ldr	r2, [r2, #0]
 800457c:	3b04      	subs	r3, #4
 800457e:	2a00      	cmp	r2, #0
 8004580:	d1cc      	bne.n	800451c <quorem+0x9c>
 8004582:	3c01      	subs	r4, #1
 8004584:	e7c7      	b.n	8004516 <quorem+0x96>
 8004586:	6812      	ldr	r2, [r2, #0]
 8004588:	3b04      	subs	r3, #4
 800458a:	2a00      	cmp	r2, #0
 800458c:	d1f0      	bne.n	8004570 <quorem+0xf0>
 800458e:	3c01      	subs	r4, #1
 8004590:	e7eb      	b.n	800456a <quorem+0xea>
 8004592:	2000      	movs	r0, #0
 8004594:	e7ee      	b.n	8004574 <quorem+0xf4>
	...

08004598 <_dtoa_r>:
 8004598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800459c:	ed2d 8b02 	vpush	{d8}
 80045a0:	ec57 6b10 	vmov	r6, r7, d0
 80045a4:	b095      	sub	sp, #84	; 0x54
 80045a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80045a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80045ac:	9105      	str	r1, [sp, #20]
 80045ae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80045b2:	4604      	mov	r4, r0
 80045b4:	9209      	str	r2, [sp, #36]	; 0x24
 80045b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80045b8:	b975      	cbnz	r5, 80045d8 <_dtoa_r+0x40>
 80045ba:	2010      	movs	r0, #16
 80045bc:	f000 fddc 	bl	8005178 <malloc>
 80045c0:	4602      	mov	r2, r0
 80045c2:	6260      	str	r0, [r4, #36]	; 0x24
 80045c4:	b920      	cbnz	r0, 80045d0 <_dtoa_r+0x38>
 80045c6:	4bb2      	ldr	r3, [pc, #712]	; (8004890 <_dtoa_r+0x2f8>)
 80045c8:	21ea      	movs	r1, #234	; 0xea
 80045ca:	48b2      	ldr	r0, [pc, #712]	; (8004894 <_dtoa_r+0x2fc>)
 80045cc:	f001 fb8e 	bl	8005cec <__assert_func>
 80045d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80045d4:	6005      	str	r5, [r0, #0]
 80045d6:	60c5      	str	r5, [r0, #12]
 80045d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045da:	6819      	ldr	r1, [r3, #0]
 80045dc:	b151      	cbz	r1, 80045f4 <_dtoa_r+0x5c>
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	604a      	str	r2, [r1, #4]
 80045e2:	2301      	movs	r3, #1
 80045e4:	4093      	lsls	r3, r2
 80045e6:	608b      	str	r3, [r1, #8]
 80045e8:	4620      	mov	r0, r4
 80045ea:	f000 fe1b 	bl	8005224 <_Bfree>
 80045ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	1e3b      	subs	r3, r7, #0
 80045f6:	bfb9      	ittee	lt
 80045f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80045fc:	9303      	strlt	r3, [sp, #12]
 80045fe:	2300      	movge	r3, #0
 8004600:	f8c8 3000 	strge.w	r3, [r8]
 8004604:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004608:	4ba3      	ldr	r3, [pc, #652]	; (8004898 <_dtoa_r+0x300>)
 800460a:	bfbc      	itt	lt
 800460c:	2201      	movlt	r2, #1
 800460e:	f8c8 2000 	strlt.w	r2, [r8]
 8004612:	ea33 0309 	bics.w	r3, r3, r9
 8004616:	d11b      	bne.n	8004650 <_dtoa_r+0xb8>
 8004618:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800461a:	f242 730f 	movw	r3, #9999	; 0x270f
 800461e:	6013      	str	r3, [r2, #0]
 8004620:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004624:	4333      	orrs	r3, r6
 8004626:	f000 857a 	beq.w	800511e <_dtoa_r+0xb86>
 800462a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800462c:	b963      	cbnz	r3, 8004648 <_dtoa_r+0xb0>
 800462e:	4b9b      	ldr	r3, [pc, #620]	; (800489c <_dtoa_r+0x304>)
 8004630:	e024      	b.n	800467c <_dtoa_r+0xe4>
 8004632:	4b9b      	ldr	r3, [pc, #620]	; (80048a0 <_dtoa_r+0x308>)
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	3308      	adds	r3, #8
 8004638:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	9800      	ldr	r0, [sp, #0]
 800463e:	b015      	add	sp, #84	; 0x54
 8004640:	ecbd 8b02 	vpop	{d8}
 8004644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004648:	4b94      	ldr	r3, [pc, #592]	; (800489c <_dtoa_r+0x304>)
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	3303      	adds	r3, #3
 800464e:	e7f3      	b.n	8004638 <_dtoa_r+0xa0>
 8004650:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004654:	2200      	movs	r2, #0
 8004656:	ec51 0b17 	vmov	r0, r1, d7
 800465a:	2300      	movs	r3, #0
 800465c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004660:	f7fc fa32 	bl	8000ac8 <__aeabi_dcmpeq>
 8004664:	4680      	mov	r8, r0
 8004666:	b158      	cbz	r0, 8004680 <_dtoa_r+0xe8>
 8004668:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800466a:	2301      	movs	r3, #1
 800466c:	6013      	str	r3, [r2, #0]
 800466e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 8551 	beq.w	8005118 <_dtoa_r+0xb80>
 8004676:	488b      	ldr	r0, [pc, #556]	; (80048a4 <_dtoa_r+0x30c>)
 8004678:	6018      	str	r0, [r3, #0]
 800467a:	1e43      	subs	r3, r0, #1
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	e7dd      	b.n	800463c <_dtoa_r+0xa4>
 8004680:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004684:	aa12      	add	r2, sp, #72	; 0x48
 8004686:	a913      	add	r1, sp, #76	; 0x4c
 8004688:	4620      	mov	r0, r4
 800468a:	f001 f8ad 	bl	80057e8 <__d2b>
 800468e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004692:	4683      	mov	fp, r0
 8004694:	2d00      	cmp	r5, #0
 8004696:	d07c      	beq.n	8004792 <_dtoa_r+0x1fa>
 8004698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800469a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800469e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046a2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80046a6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80046aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80046ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80046b2:	4b7d      	ldr	r3, [pc, #500]	; (80048a8 <_dtoa_r+0x310>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	4630      	mov	r0, r6
 80046b8:	4639      	mov	r1, r7
 80046ba:	f7fb fde5 	bl	8000288 <__aeabi_dsub>
 80046be:	a36e      	add	r3, pc, #440	; (adr r3, 8004878 <_dtoa_r+0x2e0>)
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	f7fb ff98 	bl	80005f8 <__aeabi_dmul>
 80046c8:	a36d      	add	r3, pc, #436	; (adr r3, 8004880 <_dtoa_r+0x2e8>)
 80046ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ce:	f7fb fddd 	bl	800028c <__adddf3>
 80046d2:	4606      	mov	r6, r0
 80046d4:	4628      	mov	r0, r5
 80046d6:	460f      	mov	r7, r1
 80046d8:	f7fb ff24 	bl	8000524 <__aeabi_i2d>
 80046dc:	a36a      	add	r3, pc, #424	; (adr r3, 8004888 <_dtoa_r+0x2f0>)
 80046de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e2:	f7fb ff89 	bl	80005f8 <__aeabi_dmul>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	4630      	mov	r0, r6
 80046ec:	4639      	mov	r1, r7
 80046ee:	f7fb fdcd 	bl	800028c <__adddf3>
 80046f2:	4606      	mov	r6, r0
 80046f4:	460f      	mov	r7, r1
 80046f6:	f7fc fa2f 	bl	8000b58 <__aeabi_d2iz>
 80046fa:	2200      	movs	r2, #0
 80046fc:	4682      	mov	sl, r0
 80046fe:	2300      	movs	r3, #0
 8004700:	4630      	mov	r0, r6
 8004702:	4639      	mov	r1, r7
 8004704:	f7fc f9ea 	bl	8000adc <__aeabi_dcmplt>
 8004708:	b148      	cbz	r0, 800471e <_dtoa_r+0x186>
 800470a:	4650      	mov	r0, sl
 800470c:	f7fb ff0a 	bl	8000524 <__aeabi_i2d>
 8004710:	4632      	mov	r2, r6
 8004712:	463b      	mov	r3, r7
 8004714:	f7fc f9d8 	bl	8000ac8 <__aeabi_dcmpeq>
 8004718:	b908      	cbnz	r0, 800471e <_dtoa_r+0x186>
 800471a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800471e:	f1ba 0f16 	cmp.w	sl, #22
 8004722:	d854      	bhi.n	80047ce <_dtoa_r+0x236>
 8004724:	4b61      	ldr	r3, [pc, #388]	; (80048ac <_dtoa_r+0x314>)
 8004726:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800472a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004732:	f7fc f9d3 	bl	8000adc <__aeabi_dcmplt>
 8004736:	2800      	cmp	r0, #0
 8004738:	d04b      	beq.n	80047d2 <_dtoa_r+0x23a>
 800473a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800473e:	2300      	movs	r3, #0
 8004740:	930e      	str	r3, [sp, #56]	; 0x38
 8004742:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004744:	1b5d      	subs	r5, r3, r5
 8004746:	1e6b      	subs	r3, r5, #1
 8004748:	9304      	str	r3, [sp, #16]
 800474a:	bf43      	ittte	mi
 800474c:	2300      	movmi	r3, #0
 800474e:	f1c5 0801 	rsbmi	r8, r5, #1
 8004752:	9304      	strmi	r3, [sp, #16]
 8004754:	f04f 0800 	movpl.w	r8, #0
 8004758:	f1ba 0f00 	cmp.w	sl, #0
 800475c:	db3b      	blt.n	80047d6 <_dtoa_r+0x23e>
 800475e:	9b04      	ldr	r3, [sp, #16]
 8004760:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004764:	4453      	add	r3, sl
 8004766:	9304      	str	r3, [sp, #16]
 8004768:	2300      	movs	r3, #0
 800476a:	9306      	str	r3, [sp, #24]
 800476c:	9b05      	ldr	r3, [sp, #20]
 800476e:	2b09      	cmp	r3, #9
 8004770:	d869      	bhi.n	8004846 <_dtoa_r+0x2ae>
 8004772:	2b05      	cmp	r3, #5
 8004774:	bfc4      	itt	gt
 8004776:	3b04      	subgt	r3, #4
 8004778:	9305      	strgt	r3, [sp, #20]
 800477a:	9b05      	ldr	r3, [sp, #20]
 800477c:	f1a3 0302 	sub.w	r3, r3, #2
 8004780:	bfcc      	ite	gt
 8004782:	2500      	movgt	r5, #0
 8004784:	2501      	movle	r5, #1
 8004786:	2b03      	cmp	r3, #3
 8004788:	d869      	bhi.n	800485e <_dtoa_r+0x2c6>
 800478a:	e8df f003 	tbb	[pc, r3]
 800478e:	4e2c      	.short	0x4e2c
 8004790:	5a4c      	.short	0x5a4c
 8004792:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004796:	441d      	add	r5, r3
 8004798:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800479c:	2b20      	cmp	r3, #32
 800479e:	bfc1      	itttt	gt
 80047a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80047a4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80047a8:	fa09 f303 	lslgt.w	r3, r9, r3
 80047ac:	fa26 f000 	lsrgt.w	r0, r6, r0
 80047b0:	bfda      	itte	le
 80047b2:	f1c3 0320 	rsble	r3, r3, #32
 80047b6:	fa06 f003 	lslle.w	r0, r6, r3
 80047ba:	4318      	orrgt	r0, r3
 80047bc:	f7fb fea2 	bl	8000504 <__aeabi_ui2d>
 80047c0:	2301      	movs	r3, #1
 80047c2:	4606      	mov	r6, r0
 80047c4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80047c8:	3d01      	subs	r5, #1
 80047ca:	9310      	str	r3, [sp, #64]	; 0x40
 80047cc:	e771      	b.n	80046b2 <_dtoa_r+0x11a>
 80047ce:	2301      	movs	r3, #1
 80047d0:	e7b6      	b.n	8004740 <_dtoa_r+0x1a8>
 80047d2:	900e      	str	r0, [sp, #56]	; 0x38
 80047d4:	e7b5      	b.n	8004742 <_dtoa_r+0x1aa>
 80047d6:	f1ca 0300 	rsb	r3, sl, #0
 80047da:	9306      	str	r3, [sp, #24]
 80047dc:	2300      	movs	r3, #0
 80047de:	eba8 080a 	sub.w	r8, r8, sl
 80047e2:	930d      	str	r3, [sp, #52]	; 0x34
 80047e4:	e7c2      	b.n	800476c <_dtoa_r+0x1d4>
 80047e6:	2300      	movs	r3, #0
 80047e8:	9308      	str	r3, [sp, #32]
 80047ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	dc39      	bgt.n	8004864 <_dtoa_r+0x2cc>
 80047f0:	f04f 0901 	mov.w	r9, #1
 80047f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80047f8:	464b      	mov	r3, r9
 80047fa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80047fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004800:	2200      	movs	r2, #0
 8004802:	6042      	str	r2, [r0, #4]
 8004804:	2204      	movs	r2, #4
 8004806:	f102 0614 	add.w	r6, r2, #20
 800480a:	429e      	cmp	r6, r3
 800480c:	6841      	ldr	r1, [r0, #4]
 800480e:	d92f      	bls.n	8004870 <_dtoa_r+0x2d8>
 8004810:	4620      	mov	r0, r4
 8004812:	f000 fcc7 	bl	80051a4 <_Balloc>
 8004816:	9000      	str	r0, [sp, #0]
 8004818:	2800      	cmp	r0, #0
 800481a:	d14b      	bne.n	80048b4 <_dtoa_r+0x31c>
 800481c:	4b24      	ldr	r3, [pc, #144]	; (80048b0 <_dtoa_r+0x318>)
 800481e:	4602      	mov	r2, r0
 8004820:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004824:	e6d1      	b.n	80045ca <_dtoa_r+0x32>
 8004826:	2301      	movs	r3, #1
 8004828:	e7de      	b.n	80047e8 <_dtoa_r+0x250>
 800482a:	2300      	movs	r3, #0
 800482c:	9308      	str	r3, [sp, #32]
 800482e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004830:	eb0a 0903 	add.w	r9, sl, r3
 8004834:	f109 0301 	add.w	r3, r9, #1
 8004838:	2b01      	cmp	r3, #1
 800483a:	9301      	str	r3, [sp, #4]
 800483c:	bfb8      	it	lt
 800483e:	2301      	movlt	r3, #1
 8004840:	e7dd      	b.n	80047fe <_dtoa_r+0x266>
 8004842:	2301      	movs	r3, #1
 8004844:	e7f2      	b.n	800482c <_dtoa_r+0x294>
 8004846:	2501      	movs	r5, #1
 8004848:	2300      	movs	r3, #0
 800484a:	9305      	str	r3, [sp, #20]
 800484c:	9508      	str	r5, [sp, #32]
 800484e:	f04f 39ff 	mov.w	r9, #4294967295
 8004852:	2200      	movs	r2, #0
 8004854:	f8cd 9004 	str.w	r9, [sp, #4]
 8004858:	2312      	movs	r3, #18
 800485a:	9209      	str	r2, [sp, #36]	; 0x24
 800485c:	e7cf      	b.n	80047fe <_dtoa_r+0x266>
 800485e:	2301      	movs	r3, #1
 8004860:	9308      	str	r3, [sp, #32]
 8004862:	e7f4      	b.n	800484e <_dtoa_r+0x2b6>
 8004864:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004868:	f8cd 9004 	str.w	r9, [sp, #4]
 800486c:	464b      	mov	r3, r9
 800486e:	e7c6      	b.n	80047fe <_dtoa_r+0x266>
 8004870:	3101      	adds	r1, #1
 8004872:	6041      	str	r1, [r0, #4]
 8004874:	0052      	lsls	r2, r2, #1
 8004876:	e7c6      	b.n	8004806 <_dtoa_r+0x26e>
 8004878:	636f4361 	.word	0x636f4361
 800487c:	3fd287a7 	.word	0x3fd287a7
 8004880:	8b60c8b3 	.word	0x8b60c8b3
 8004884:	3fc68a28 	.word	0x3fc68a28
 8004888:	509f79fb 	.word	0x509f79fb
 800488c:	3fd34413 	.word	0x3fd34413
 8004890:	080078c5 	.word	0x080078c5
 8004894:	080078dc 	.word	0x080078dc
 8004898:	7ff00000 	.word	0x7ff00000
 800489c:	080078c1 	.word	0x080078c1
 80048a0:	080078b8 	.word	0x080078b8
 80048a4:	08007895 	.word	0x08007895
 80048a8:	3ff80000 	.word	0x3ff80000
 80048ac:	080079d8 	.word	0x080079d8
 80048b0:	0800793b 	.word	0x0800793b
 80048b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048b6:	9a00      	ldr	r2, [sp, #0]
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	9b01      	ldr	r3, [sp, #4]
 80048bc:	2b0e      	cmp	r3, #14
 80048be:	f200 80ad 	bhi.w	8004a1c <_dtoa_r+0x484>
 80048c2:	2d00      	cmp	r5, #0
 80048c4:	f000 80aa 	beq.w	8004a1c <_dtoa_r+0x484>
 80048c8:	f1ba 0f00 	cmp.w	sl, #0
 80048cc:	dd36      	ble.n	800493c <_dtoa_r+0x3a4>
 80048ce:	4ac3      	ldr	r2, [pc, #780]	; (8004bdc <_dtoa_r+0x644>)
 80048d0:	f00a 030f 	and.w	r3, sl, #15
 80048d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80048d8:	ed93 7b00 	vldr	d7, [r3]
 80048dc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80048e0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80048e4:	eeb0 8a47 	vmov.f32	s16, s14
 80048e8:	eef0 8a67 	vmov.f32	s17, s15
 80048ec:	d016      	beq.n	800491c <_dtoa_r+0x384>
 80048ee:	4bbc      	ldr	r3, [pc, #752]	; (8004be0 <_dtoa_r+0x648>)
 80048f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80048f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80048f8:	f7fb ffa8 	bl	800084c <__aeabi_ddiv>
 80048fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004900:	f007 070f 	and.w	r7, r7, #15
 8004904:	2503      	movs	r5, #3
 8004906:	4eb6      	ldr	r6, [pc, #728]	; (8004be0 <_dtoa_r+0x648>)
 8004908:	b957      	cbnz	r7, 8004920 <_dtoa_r+0x388>
 800490a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800490e:	ec53 2b18 	vmov	r2, r3, d8
 8004912:	f7fb ff9b 	bl	800084c <__aeabi_ddiv>
 8004916:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800491a:	e029      	b.n	8004970 <_dtoa_r+0x3d8>
 800491c:	2502      	movs	r5, #2
 800491e:	e7f2      	b.n	8004906 <_dtoa_r+0x36e>
 8004920:	07f9      	lsls	r1, r7, #31
 8004922:	d508      	bpl.n	8004936 <_dtoa_r+0x39e>
 8004924:	ec51 0b18 	vmov	r0, r1, d8
 8004928:	e9d6 2300 	ldrd	r2, r3, [r6]
 800492c:	f7fb fe64 	bl	80005f8 <__aeabi_dmul>
 8004930:	ec41 0b18 	vmov	d8, r0, r1
 8004934:	3501      	adds	r5, #1
 8004936:	107f      	asrs	r7, r7, #1
 8004938:	3608      	adds	r6, #8
 800493a:	e7e5      	b.n	8004908 <_dtoa_r+0x370>
 800493c:	f000 80a6 	beq.w	8004a8c <_dtoa_r+0x4f4>
 8004940:	f1ca 0600 	rsb	r6, sl, #0
 8004944:	4ba5      	ldr	r3, [pc, #660]	; (8004bdc <_dtoa_r+0x644>)
 8004946:	4fa6      	ldr	r7, [pc, #664]	; (8004be0 <_dtoa_r+0x648>)
 8004948:	f006 020f 	and.w	r2, r6, #15
 800494c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004954:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004958:	f7fb fe4e 	bl	80005f8 <__aeabi_dmul>
 800495c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004960:	1136      	asrs	r6, r6, #4
 8004962:	2300      	movs	r3, #0
 8004964:	2502      	movs	r5, #2
 8004966:	2e00      	cmp	r6, #0
 8004968:	f040 8085 	bne.w	8004a76 <_dtoa_r+0x4de>
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1d2      	bne.n	8004916 <_dtoa_r+0x37e>
 8004970:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 808c 	beq.w	8004a90 <_dtoa_r+0x4f8>
 8004978:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800497c:	4b99      	ldr	r3, [pc, #612]	; (8004be4 <_dtoa_r+0x64c>)
 800497e:	2200      	movs	r2, #0
 8004980:	4630      	mov	r0, r6
 8004982:	4639      	mov	r1, r7
 8004984:	f7fc f8aa 	bl	8000adc <__aeabi_dcmplt>
 8004988:	2800      	cmp	r0, #0
 800498a:	f000 8081 	beq.w	8004a90 <_dtoa_r+0x4f8>
 800498e:	9b01      	ldr	r3, [sp, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d07d      	beq.n	8004a90 <_dtoa_r+0x4f8>
 8004994:	f1b9 0f00 	cmp.w	r9, #0
 8004998:	dd3c      	ble.n	8004a14 <_dtoa_r+0x47c>
 800499a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800499e:	9307      	str	r3, [sp, #28]
 80049a0:	2200      	movs	r2, #0
 80049a2:	4b91      	ldr	r3, [pc, #580]	; (8004be8 <_dtoa_r+0x650>)
 80049a4:	4630      	mov	r0, r6
 80049a6:	4639      	mov	r1, r7
 80049a8:	f7fb fe26 	bl	80005f8 <__aeabi_dmul>
 80049ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049b0:	3501      	adds	r5, #1
 80049b2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80049b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80049ba:	4628      	mov	r0, r5
 80049bc:	f7fb fdb2 	bl	8000524 <__aeabi_i2d>
 80049c0:	4632      	mov	r2, r6
 80049c2:	463b      	mov	r3, r7
 80049c4:	f7fb fe18 	bl	80005f8 <__aeabi_dmul>
 80049c8:	4b88      	ldr	r3, [pc, #544]	; (8004bec <_dtoa_r+0x654>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	f7fb fc5e 	bl	800028c <__adddf3>
 80049d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80049d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049d8:	9303      	str	r3, [sp, #12]
 80049da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d15c      	bne.n	8004a9a <_dtoa_r+0x502>
 80049e0:	4b83      	ldr	r3, [pc, #524]	; (8004bf0 <_dtoa_r+0x658>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	4630      	mov	r0, r6
 80049e6:	4639      	mov	r1, r7
 80049e8:	f7fb fc4e 	bl	8000288 <__aeabi_dsub>
 80049ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049f0:	4606      	mov	r6, r0
 80049f2:	460f      	mov	r7, r1
 80049f4:	f7fc f890 	bl	8000b18 <__aeabi_dcmpgt>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	f040 8296 	bne.w	8004f2a <_dtoa_r+0x992>
 80049fe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004a02:	4630      	mov	r0, r6
 8004a04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a08:	4639      	mov	r1, r7
 8004a0a:	f7fc f867 	bl	8000adc <__aeabi_dcmplt>
 8004a0e:	2800      	cmp	r0, #0
 8004a10:	f040 8288 	bne.w	8004f24 <_dtoa_r+0x98c>
 8004a14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004a18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f2c0 8158 	blt.w	8004cd4 <_dtoa_r+0x73c>
 8004a24:	f1ba 0f0e 	cmp.w	sl, #14
 8004a28:	f300 8154 	bgt.w	8004cd4 <_dtoa_r+0x73c>
 8004a2c:	4b6b      	ldr	r3, [pc, #428]	; (8004bdc <_dtoa_r+0x644>)
 8004a2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004a32:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f280 80e3 	bge.w	8004c04 <_dtoa_r+0x66c>
 8004a3e:	9b01      	ldr	r3, [sp, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f300 80df 	bgt.w	8004c04 <_dtoa_r+0x66c>
 8004a46:	f040 826d 	bne.w	8004f24 <_dtoa_r+0x98c>
 8004a4a:	4b69      	ldr	r3, [pc, #420]	; (8004bf0 <_dtoa_r+0x658>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	4640      	mov	r0, r8
 8004a50:	4649      	mov	r1, r9
 8004a52:	f7fb fdd1 	bl	80005f8 <__aeabi_dmul>
 8004a56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a5a:	f7fc f853 	bl	8000b04 <__aeabi_dcmpge>
 8004a5e:	9e01      	ldr	r6, [sp, #4]
 8004a60:	4637      	mov	r7, r6
 8004a62:	2800      	cmp	r0, #0
 8004a64:	f040 8243 	bne.w	8004eee <_dtoa_r+0x956>
 8004a68:	9d00      	ldr	r5, [sp, #0]
 8004a6a:	2331      	movs	r3, #49	; 0x31
 8004a6c:	f805 3b01 	strb.w	r3, [r5], #1
 8004a70:	f10a 0a01 	add.w	sl, sl, #1
 8004a74:	e23f      	b.n	8004ef6 <_dtoa_r+0x95e>
 8004a76:	07f2      	lsls	r2, r6, #31
 8004a78:	d505      	bpl.n	8004a86 <_dtoa_r+0x4ee>
 8004a7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a7e:	f7fb fdbb 	bl	80005f8 <__aeabi_dmul>
 8004a82:	3501      	adds	r5, #1
 8004a84:	2301      	movs	r3, #1
 8004a86:	1076      	asrs	r6, r6, #1
 8004a88:	3708      	adds	r7, #8
 8004a8a:	e76c      	b.n	8004966 <_dtoa_r+0x3ce>
 8004a8c:	2502      	movs	r5, #2
 8004a8e:	e76f      	b.n	8004970 <_dtoa_r+0x3d8>
 8004a90:	9b01      	ldr	r3, [sp, #4]
 8004a92:	f8cd a01c 	str.w	sl, [sp, #28]
 8004a96:	930c      	str	r3, [sp, #48]	; 0x30
 8004a98:	e78d      	b.n	80049b6 <_dtoa_r+0x41e>
 8004a9a:	9900      	ldr	r1, [sp, #0]
 8004a9c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004a9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004aa0:	4b4e      	ldr	r3, [pc, #312]	; (8004bdc <_dtoa_r+0x644>)
 8004aa2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004aa6:	4401      	add	r1, r0
 8004aa8:	9102      	str	r1, [sp, #8]
 8004aaa:	9908      	ldr	r1, [sp, #32]
 8004aac:	eeb0 8a47 	vmov.f32	s16, s14
 8004ab0:	eef0 8a67 	vmov.f32	s17, s15
 8004ab4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ab8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004abc:	2900      	cmp	r1, #0
 8004abe:	d045      	beq.n	8004b4c <_dtoa_r+0x5b4>
 8004ac0:	494c      	ldr	r1, [pc, #304]	; (8004bf4 <_dtoa_r+0x65c>)
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	f7fb fec2 	bl	800084c <__aeabi_ddiv>
 8004ac8:	ec53 2b18 	vmov	r2, r3, d8
 8004acc:	f7fb fbdc 	bl	8000288 <__aeabi_dsub>
 8004ad0:	9d00      	ldr	r5, [sp, #0]
 8004ad2:	ec41 0b18 	vmov	d8, r0, r1
 8004ad6:	4639      	mov	r1, r7
 8004ad8:	4630      	mov	r0, r6
 8004ada:	f7fc f83d 	bl	8000b58 <__aeabi_d2iz>
 8004ade:	900c      	str	r0, [sp, #48]	; 0x30
 8004ae0:	f7fb fd20 	bl	8000524 <__aeabi_i2d>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4630      	mov	r0, r6
 8004aea:	4639      	mov	r1, r7
 8004aec:	f7fb fbcc 	bl	8000288 <__aeabi_dsub>
 8004af0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004af2:	3330      	adds	r3, #48	; 0x30
 8004af4:	f805 3b01 	strb.w	r3, [r5], #1
 8004af8:	ec53 2b18 	vmov	r2, r3, d8
 8004afc:	4606      	mov	r6, r0
 8004afe:	460f      	mov	r7, r1
 8004b00:	f7fb ffec 	bl	8000adc <__aeabi_dcmplt>
 8004b04:	2800      	cmp	r0, #0
 8004b06:	d165      	bne.n	8004bd4 <_dtoa_r+0x63c>
 8004b08:	4632      	mov	r2, r6
 8004b0a:	463b      	mov	r3, r7
 8004b0c:	4935      	ldr	r1, [pc, #212]	; (8004be4 <_dtoa_r+0x64c>)
 8004b0e:	2000      	movs	r0, #0
 8004b10:	f7fb fbba 	bl	8000288 <__aeabi_dsub>
 8004b14:	ec53 2b18 	vmov	r2, r3, d8
 8004b18:	f7fb ffe0 	bl	8000adc <__aeabi_dcmplt>
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	f040 80b9 	bne.w	8004c94 <_dtoa_r+0x6fc>
 8004b22:	9b02      	ldr	r3, [sp, #8]
 8004b24:	429d      	cmp	r5, r3
 8004b26:	f43f af75 	beq.w	8004a14 <_dtoa_r+0x47c>
 8004b2a:	4b2f      	ldr	r3, [pc, #188]	; (8004be8 <_dtoa_r+0x650>)
 8004b2c:	ec51 0b18 	vmov	r0, r1, d8
 8004b30:	2200      	movs	r2, #0
 8004b32:	f7fb fd61 	bl	80005f8 <__aeabi_dmul>
 8004b36:	4b2c      	ldr	r3, [pc, #176]	; (8004be8 <_dtoa_r+0x650>)
 8004b38:	ec41 0b18 	vmov	d8, r0, r1
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	4630      	mov	r0, r6
 8004b40:	4639      	mov	r1, r7
 8004b42:	f7fb fd59 	bl	80005f8 <__aeabi_dmul>
 8004b46:	4606      	mov	r6, r0
 8004b48:	460f      	mov	r7, r1
 8004b4a:	e7c4      	b.n	8004ad6 <_dtoa_r+0x53e>
 8004b4c:	ec51 0b17 	vmov	r0, r1, d7
 8004b50:	f7fb fd52 	bl	80005f8 <__aeabi_dmul>
 8004b54:	9b02      	ldr	r3, [sp, #8]
 8004b56:	9d00      	ldr	r5, [sp, #0]
 8004b58:	930c      	str	r3, [sp, #48]	; 0x30
 8004b5a:	ec41 0b18 	vmov	d8, r0, r1
 8004b5e:	4639      	mov	r1, r7
 8004b60:	4630      	mov	r0, r6
 8004b62:	f7fb fff9 	bl	8000b58 <__aeabi_d2iz>
 8004b66:	9011      	str	r0, [sp, #68]	; 0x44
 8004b68:	f7fb fcdc 	bl	8000524 <__aeabi_i2d>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4630      	mov	r0, r6
 8004b72:	4639      	mov	r1, r7
 8004b74:	f7fb fb88 	bl	8000288 <__aeabi_dsub>
 8004b78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004b7a:	3330      	adds	r3, #48	; 0x30
 8004b7c:	f805 3b01 	strb.w	r3, [r5], #1
 8004b80:	9b02      	ldr	r3, [sp, #8]
 8004b82:	429d      	cmp	r5, r3
 8004b84:	4606      	mov	r6, r0
 8004b86:	460f      	mov	r7, r1
 8004b88:	f04f 0200 	mov.w	r2, #0
 8004b8c:	d134      	bne.n	8004bf8 <_dtoa_r+0x660>
 8004b8e:	4b19      	ldr	r3, [pc, #100]	; (8004bf4 <_dtoa_r+0x65c>)
 8004b90:	ec51 0b18 	vmov	r0, r1, d8
 8004b94:	f7fb fb7a 	bl	800028c <__adddf3>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4630      	mov	r0, r6
 8004b9e:	4639      	mov	r1, r7
 8004ba0:	f7fb ffba 	bl	8000b18 <__aeabi_dcmpgt>
 8004ba4:	2800      	cmp	r0, #0
 8004ba6:	d175      	bne.n	8004c94 <_dtoa_r+0x6fc>
 8004ba8:	ec53 2b18 	vmov	r2, r3, d8
 8004bac:	4911      	ldr	r1, [pc, #68]	; (8004bf4 <_dtoa_r+0x65c>)
 8004bae:	2000      	movs	r0, #0
 8004bb0:	f7fb fb6a 	bl	8000288 <__aeabi_dsub>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4630      	mov	r0, r6
 8004bba:	4639      	mov	r1, r7
 8004bbc:	f7fb ff8e 	bl	8000adc <__aeabi_dcmplt>
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	f43f af27 	beq.w	8004a14 <_dtoa_r+0x47c>
 8004bc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bc8:	1e6b      	subs	r3, r5, #1
 8004bca:	930c      	str	r3, [sp, #48]	; 0x30
 8004bcc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004bd0:	2b30      	cmp	r3, #48	; 0x30
 8004bd2:	d0f8      	beq.n	8004bc6 <_dtoa_r+0x62e>
 8004bd4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004bd8:	e04a      	b.n	8004c70 <_dtoa_r+0x6d8>
 8004bda:	bf00      	nop
 8004bdc:	080079d8 	.word	0x080079d8
 8004be0:	080079b0 	.word	0x080079b0
 8004be4:	3ff00000 	.word	0x3ff00000
 8004be8:	40240000 	.word	0x40240000
 8004bec:	401c0000 	.word	0x401c0000
 8004bf0:	40140000 	.word	0x40140000
 8004bf4:	3fe00000 	.word	0x3fe00000
 8004bf8:	4baf      	ldr	r3, [pc, #700]	; (8004eb8 <_dtoa_r+0x920>)
 8004bfa:	f7fb fcfd 	bl	80005f8 <__aeabi_dmul>
 8004bfe:	4606      	mov	r6, r0
 8004c00:	460f      	mov	r7, r1
 8004c02:	e7ac      	b.n	8004b5e <_dtoa_r+0x5c6>
 8004c04:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004c08:	9d00      	ldr	r5, [sp, #0]
 8004c0a:	4642      	mov	r2, r8
 8004c0c:	464b      	mov	r3, r9
 8004c0e:	4630      	mov	r0, r6
 8004c10:	4639      	mov	r1, r7
 8004c12:	f7fb fe1b 	bl	800084c <__aeabi_ddiv>
 8004c16:	f7fb ff9f 	bl	8000b58 <__aeabi_d2iz>
 8004c1a:	9002      	str	r0, [sp, #8]
 8004c1c:	f7fb fc82 	bl	8000524 <__aeabi_i2d>
 8004c20:	4642      	mov	r2, r8
 8004c22:	464b      	mov	r3, r9
 8004c24:	f7fb fce8 	bl	80005f8 <__aeabi_dmul>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4630      	mov	r0, r6
 8004c2e:	4639      	mov	r1, r7
 8004c30:	f7fb fb2a 	bl	8000288 <__aeabi_dsub>
 8004c34:	9e02      	ldr	r6, [sp, #8]
 8004c36:	9f01      	ldr	r7, [sp, #4]
 8004c38:	3630      	adds	r6, #48	; 0x30
 8004c3a:	f805 6b01 	strb.w	r6, [r5], #1
 8004c3e:	9e00      	ldr	r6, [sp, #0]
 8004c40:	1bae      	subs	r6, r5, r6
 8004c42:	42b7      	cmp	r7, r6
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	d137      	bne.n	8004cba <_dtoa_r+0x722>
 8004c4a:	f7fb fb1f 	bl	800028c <__adddf3>
 8004c4e:	4642      	mov	r2, r8
 8004c50:	464b      	mov	r3, r9
 8004c52:	4606      	mov	r6, r0
 8004c54:	460f      	mov	r7, r1
 8004c56:	f7fb ff5f 	bl	8000b18 <__aeabi_dcmpgt>
 8004c5a:	b9c8      	cbnz	r0, 8004c90 <_dtoa_r+0x6f8>
 8004c5c:	4642      	mov	r2, r8
 8004c5e:	464b      	mov	r3, r9
 8004c60:	4630      	mov	r0, r6
 8004c62:	4639      	mov	r1, r7
 8004c64:	f7fb ff30 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c68:	b110      	cbz	r0, 8004c70 <_dtoa_r+0x6d8>
 8004c6a:	9b02      	ldr	r3, [sp, #8]
 8004c6c:	07d9      	lsls	r1, r3, #31
 8004c6e:	d40f      	bmi.n	8004c90 <_dtoa_r+0x6f8>
 8004c70:	4620      	mov	r0, r4
 8004c72:	4659      	mov	r1, fp
 8004c74:	f000 fad6 	bl	8005224 <_Bfree>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	702b      	strb	r3, [r5, #0]
 8004c7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c7e:	f10a 0001 	add.w	r0, sl, #1
 8004c82:	6018      	str	r0, [r3, #0]
 8004c84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f43f acd8 	beq.w	800463c <_dtoa_r+0xa4>
 8004c8c:	601d      	str	r5, [r3, #0]
 8004c8e:	e4d5      	b.n	800463c <_dtoa_r+0xa4>
 8004c90:	f8cd a01c 	str.w	sl, [sp, #28]
 8004c94:	462b      	mov	r3, r5
 8004c96:	461d      	mov	r5, r3
 8004c98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004c9c:	2a39      	cmp	r2, #57	; 0x39
 8004c9e:	d108      	bne.n	8004cb2 <_dtoa_r+0x71a>
 8004ca0:	9a00      	ldr	r2, [sp, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d1f7      	bne.n	8004c96 <_dtoa_r+0x6fe>
 8004ca6:	9a07      	ldr	r2, [sp, #28]
 8004ca8:	9900      	ldr	r1, [sp, #0]
 8004caa:	3201      	adds	r2, #1
 8004cac:	9207      	str	r2, [sp, #28]
 8004cae:	2230      	movs	r2, #48	; 0x30
 8004cb0:	700a      	strb	r2, [r1, #0]
 8004cb2:	781a      	ldrb	r2, [r3, #0]
 8004cb4:	3201      	adds	r2, #1
 8004cb6:	701a      	strb	r2, [r3, #0]
 8004cb8:	e78c      	b.n	8004bd4 <_dtoa_r+0x63c>
 8004cba:	4b7f      	ldr	r3, [pc, #508]	; (8004eb8 <_dtoa_r+0x920>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f7fb fc9b 	bl	80005f8 <__aeabi_dmul>
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	4606      	mov	r6, r0
 8004cc8:	460f      	mov	r7, r1
 8004cca:	f7fb fefd 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cce:	2800      	cmp	r0, #0
 8004cd0:	d09b      	beq.n	8004c0a <_dtoa_r+0x672>
 8004cd2:	e7cd      	b.n	8004c70 <_dtoa_r+0x6d8>
 8004cd4:	9a08      	ldr	r2, [sp, #32]
 8004cd6:	2a00      	cmp	r2, #0
 8004cd8:	f000 80c4 	beq.w	8004e64 <_dtoa_r+0x8cc>
 8004cdc:	9a05      	ldr	r2, [sp, #20]
 8004cde:	2a01      	cmp	r2, #1
 8004ce0:	f300 80a8 	bgt.w	8004e34 <_dtoa_r+0x89c>
 8004ce4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004ce6:	2a00      	cmp	r2, #0
 8004ce8:	f000 80a0 	beq.w	8004e2c <_dtoa_r+0x894>
 8004cec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004cf0:	9e06      	ldr	r6, [sp, #24]
 8004cf2:	4645      	mov	r5, r8
 8004cf4:	9a04      	ldr	r2, [sp, #16]
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	441a      	add	r2, r3
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	4498      	add	r8, r3
 8004cfe:	9204      	str	r2, [sp, #16]
 8004d00:	f000 fb4c 	bl	800539c <__i2b>
 8004d04:	4607      	mov	r7, r0
 8004d06:	2d00      	cmp	r5, #0
 8004d08:	dd0b      	ble.n	8004d22 <_dtoa_r+0x78a>
 8004d0a:	9b04      	ldr	r3, [sp, #16]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	dd08      	ble.n	8004d22 <_dtoa_r+0x78a>
 8004d10:	42ab      	cmp	r3, r5
 8004d12:	9a04      	ldr	r2, [sp, #16]
 8004d14:	bfa8      	it	ge
 8004d16:	462b      	movge	r3, r5
 8004d18:	eba8 0803 	sub.w	r8, r8, r3
 8004d1c:	1aed      	subs	r5, r5, r3
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	9304      	str	r3, [sp, #16]
 8004d22:	9b06      	ldr	r3, [sp, #24]
 8004d24:	b1fb      	cbz	r3, 8004d66 <_dtoa_r+0x7ce>
 8004d26:	9b08      	ldr	r3, [sp, #32]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 809f 	beq.w	8004e6c <_dtoa_r+0x8d4>
 8004d2e:	2e00      	cmp	r6, #0
 8004d30:	dd11      	ble.n	8004d56 <_dtoa_r+0x7be>
 8004d32:	4639      	mov	r1, r7
 8004d34:	4632      	mov	r2, r6
 8004d36:	4620      	mov	r0, r4
 8004d38:	f000 fbec 	bl	8005514 <__pow5mult>
 8004d3c:	465a      	mov	r2, fp
 8004d3e:	4601      	mov	r1, r0
 8004d40:	4607      	mov	r7, r0
 8004d42:	4620      	mov	r0, r4
 8004d44:	f000 fb40 	bl	80053c8 <__multiply>
 8004d48:	4659      	mov	r1, fp
 8004d4a:	9007      	str	r0, [sp, #28]
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	f000 fa69 	bl	8005224 <_Bfree>
 8004d52:	9b07      	ldr	r3, [sp, #28]
 8004d54:	469b      	mov	fp, r3
 8004d56:	9b06      	ldr	r3, [sp, #24]
 8004d58:	1b9a      	subs	r2, r3, r6
 8004d5a:	d004      	beq.n	8004d66 <_dtoa_r+0x7ce>
 8004d5c:	4659      	mov	r1, fp
 8004d5e:	4620      	mov	r0, r4
 8004d60:	f000 fbd8 	bl	8005514 <__pow5mult>
 8004d64:	4683      	mov	fp, r0
 8004d66:	2101      	movs	r1, #1
 8004d68:	4620      	mov	r0, r4
 8004d6a:	f000 fb17 	bl	800539c <__i2b>
 8004d6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	4606      	mov	r6, r0
 8004d74:	dd7c      	ble.n	8004e70 <_dtoa_r+0x8d8>
 8004d76:	461a      	mov	r2, r3
 8004d78:	4601      	mov	r1, r0
 8004d7a:	4620      	mov	r0, r4
 8004d7c:	f000 fbca 	bl	8005514 <__pow5mult>
 8004d80:	9b05      	ldr	r3, [sp, #20]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	4606      	mov	r6, r0
 8004d86:	dd76      	ble.n	8004e76 <_dtoa_r+0x8de>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	9306      	str	r3, [sp, #24]
 8004d8c:	6933      	ldr	r3, [r6, #16]
 8004d8e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004d92:	6918      	ldr	r0, [r3, #16]
 8004d94:	f000 fab2 	bl	80052fc <__hi0bits>
 8004d98:	f1c0 0020 	rsb	r0, r0, #32
 8004d9c:	9b04      	ldr	r3, [sp, #16]
 8004d9e:	4418      	add	r0, r3
 8004da0:	f010 001f 	ands.w	r0, r0, #31
 8004da4:	f000 8086 	beq.w	8004eb4 <_dtoa_r+0x91c>
 8004da8:	f1c0 0320 	rsb	r3, r0, #32
 8004dac:	2b04      	cmp	r3, #4
 8004dae:	dd7f      	ble.n	8004eb0 <_dtoa_r+0x918>
 8004db0:	f1c0 001c 	rsb	r0, r0, #28
 8004db4:	9b04      	ldr	r3, [sp, #16]
 8004db6:	4403      	add	r3, r0
 8004db8:	4480      	add	r8, r0
 8004dba:	4405      	add	r5, r0
 8004dbc:	9304      	str	r3, [sp, #16]
 8004dbe:	f1b8 0f00 	cmp.w	r8, #0
 8004dc2:	dd05      	ble.n	8004dd0 <_dtoa_r+0x838>
 8004dc4:	4659      	mov	r1, fp
 8004dc6:	4642      	mov	r2, r8
 8004dc8:	4620      	mov	r0, r4
 8004dca:	f000 fbfd 	bl	80055c8 <__lshift>
 8004dce:	4683      	mov	fp, r0
 8004dd0:	9b04      	ldr	r3, [sp, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	dd05      	ble.n	8004de2 <_dtoa_r+0x84a>
 8004dd6:	4631      	mov	r1, r6
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4620      	mov	r0, r4
 8004ddc:	f000 fbf4 	bl	80055c8 <__lshift>
 8004de0:	4606      	mov	r6, r0
 8004de2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d069      	beq.n	8004ebc <_dtoa_r+0x924>
 8004de8:	4631      	mov	r1, r6
 8004dea:	4658      	mov	r0, fp
 8004dec:	f000 fc58 	bl	80056a0 <__mcmp>
 8004df0:	2800      	cmp	r0, #0
 8004df2:	da63      	bge.n	8004ebc <_dtoa_r+0x924>
 8004df4:	2300      	movs	r3, #0
 8004df6:	4659      	mov	r1, fp
 8004df8:	220a      	movs	r2, #10
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	f000 fa34 	bl	8005268 <__multadd>
 8004e00:	9b08      	ldr	r3, [sp, #32]
 8004e02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e06:	4683      	mov	fp, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 818f 	beq.w	800512c <_dtoa_r+0xb94>
 8004e0e:	4639      	mov	r1, r7
 8004e10:	2300      	movs	r3, #0
 8004e12:	220a      	movs	r2, #10
 8004e14:	4620      	mov	r0, r4
 8004e16:	f000 fa27 	bl	8005268 <__multadd>
 8004e1a:	f1b9 0f00 	cmp.w	r9, #0
 8004e1e:	4607      	mov	r7, r0
 8004e20:	f300 808e 	bgt.w	8004f40 <_dtoa_r+0x9a8>
 8004e24:	9b05      	ldr	r3, [sp, #20]
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	dc50      	bgt.n	8004ecc <_dtoa_r+0x934>
 8004e2a:	e089      	b.n	8004f40 <_dtoa_r+0x9a8>
 8004e2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004e32:	e75d      	b.n	8004cf0 <_dtoa_r+0x758>
 8004e34:	9b01      	ldr	r3, [sp, #4]
 8004e36:	1e5e      	subs	r6, r3, #1
 8004e38:	9b06      	ldr	r3, [sp, #24]
 8004e3a:	42b3      	cmp	r3, r6
 8004e3c:	bfbf      	itttt	lt
 8004e3e:	9b06      	ldrlt	r3, [sp, #24]
 8004e40:	9606      	strlt	r6, [sp, #24]
 8004e42:	1af2      	sublt	r2, r6, r3
 8004e44:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8004e46:	bfb6      	itet	lt
 8004e48:	189b      	addlt	r3, r3, r2
 8004e4a:	1b9e      	subge	r6, r3, r6
 8004e4c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8004e4e:	9b01      	ldr	r3, [sp, #4]
 8004e50:	bfb8      	it	lt
 8004e52:	2600      	movlt	r6, #0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	bfb5      	itete	lt
 8004e58:	eba8 0503 	sublt.w	r5, r8, r3
 8004e5c:	9b01      	ldrge	r3, [sp, #4]
 8004e5e:	2300      	movlt	r3, #0
 8004e60:	4645      	movge	r5, r8
 8004e62:	e747      	b.n	8004cf4 <_dtoa_r+0x75c>
 8004e64:	9e06      	ldr	r6, [sp, #24]
 8004e66:	9f08      	ldr	r7, [sp, #32]
 8004e68:	4645      	mov	r5, r8
 8004e6a:	e74c      	b.n	8004d06 <_dtoa_r+0x76e>
 8004e6c:	9a06      	ldr	r2, [sp, #24]
 8004e6e:	e775      	b.n	8004d5c <_dtoa_r+0x7c4>
 8004e70:	9b05      	ldr	r3, [sp, #20]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	dc18      	bgt.n	8004ea8 <_dtoa_r+0x910>
 8004e76:	9b02      	ldr	r3, [sp, #8]
 8004e78:	b9b3      	cbnz	r3, 8004ea8 <_dtoa_r+0x910>
 8004e7a:	9b03      	ldr	r3, [sp, #12]
 8004e7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e80:	b9a3      	cbnz	r3, 8004eac <_dtoa_r+0x914>
 8004e82:	9b03      	ldr	r3, [sp, #12]
 8004e84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e88:	0d1b      	lsrs	r3, r3, #20
 8004e8a:	051b      	lsls	r3, r3, #20
 8004e8c:	b12b      	cbz	r3, 8004e9a <_dtoa_r+0x902>
 8004e8e:	9b04      	ldr	r3, [sp, #16]
 8004e90:	3301      	adds	r3, #1
 8004e92:	9304      	str	r3, [sp, #16]
 8004e94:	f108 0801 	add.w	r8, r8, #1
 8004e98:	2301      	movs	r3, #1
 8004e9a:	9306      	str	r3, [sp, #24]
 8004e9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f47f af74 	bne.w	8004d8c <_dtoa_r+0x7f4>
 8004ea4:	2001      	movs	r0, #1
 8004ea6:	e779      	b.n	8004d9c <_dtoa_r+0x804>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	e7f6      	b.n	8004e9a <_dtoa_r+0x902>
 8004eac:	9b02      	ldr	r3, [sp, #8]
 8004eae:	e7f4      	b.n	8004e9a <_dtoa_r+0x902>
 8004eb0:	d085      	beq.n	8004dbe <_dtoa_r+0x826>
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	301c      	adds	r0, #28
 8004eb6:	e77d      	b.n	8004db4 <_dtoa_r+0x81c>
 8004eb8:	40240000 	.word	0x40240000
 8004ebc:	9b01      	ldr	r3, [sp, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	dc38      	bgt.n	8004f34 <_dtoa_r+0x99c>
 8004ec2:	9b05      	ldr	r3, [sp, #20]
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	dd35      	ble.n	8004f34 <_dtoa_r+0x99c>
 8004ec8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004ecc:	f1b9 0f00 	cmp.w	r9, #0
 8004ed0:	d10d      	bne.n	8004eee <_dtoa_r+0x956>
 8004ed2:	4631      	mov	r1, r6
 8004ed4:	464b      	mov	r3, r9
 8004ed6:	2205      	movs	r2, #5
 8004ed8:	4620      	mov	r0, r4
 8004eda:	f000 f9c5 	bl	8005268 <__multadd>
 8004ede:	4601      	mov	r1, r0
 8004ee0:	4606      	mov	r6, r0
 8004ee2:	4658      	mov	r0, fp
 8004ee4:	f000 fbdc 	bl	80056a0 <__mcmp>
 8004ee8:	2800      	cmp	r0, #0
 8004eea:	f73f adbd 	bgt.w	8004a68 <_dtoa_r+0x4d0>
 8004eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ef0:	9d00      	ldr	r5, [sp, #0]
 8004ef2:	ea6f 0a03 	mvn.w	sl, r3
 8004ef6:	f04f 0800 	mov.w	r8, #0
 8004efa:	4631      	mov	r1, r6
 8004efc:	4620      	mov	r0, r4
 8004efe:	f000 f991 	bl	8005224 <_Bfree>
 8004f02:	2f00      	cmp	r7, #0
 8004f04:	f43f aeb4 	beq.w	8004c70 <_dtoa_r+0x6d8>
 8004f08:	f1b8 0f00 	cmp.w	r8, #0
 8004f0c:	d005      	beq.n	8004f1a <_dtoa_r+0x982>
 8004f0e:	45b8      	cmp	r8, r7
 8004f10:	d003      	beq.n	8004f1a <_dtoa_r+0x982>
 8004f12:	4641      	mov	r1, r8
 8004f14:	4620      	mov	r0, r4
 8004f16:	f000 f985 	bl	8005224 <_Bfree>
 8004f1a:	4639      	mov	r1, r7
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	f000 f981 	bl	8005224 <_Bfree>
 8004f22:	e6a5      	b.n	8004c70 <_dtoa_r+0x6d8>
 8004f24:	2600      	movs	r6, #0
 8004f26:	4637      	mov	r7, r6
 8004f28:	e7e1      	b.n	8004eee <_dtoa_r+0x956>
 8004f2a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004f2c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004f30:	4637      	mov	r7, r6
 8004f32:	e599      	b.n	8004a68 <_dtoa_r+0x4d0>
 8004f34:	9b08      	ldr	r3, [sp, #32]
 8004f36:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 80fd 	beq.w	800513a <_dtoa_r+0xba2>
 8004f40:	2d00      	cmp	r5, #0
 8004f42:	dd05      	ble.n	8004f50 <_dtoa_r+0x9b8>
 8004f44:	4639      	mov	r1, r7
 8004f46:	462a      	mov	r2, r5
 8004f48:	4620      	mov	r0, r4
 8004f4a:	f000 fb3d 	bl	80055c8 <__lshift>
 8004f4e:	4607      	mov	r7, r0
 8004f50:	9b06      	ldr	r3, [sp, #24]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d05c      	beq.n	8005010 <_dtoa_r+0xa78>
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	4620      	mov	r0, r4
 8004f5a:	f000 f923 	bl	80051a4 <_Balloc>
 8004f5e:	4605      	mov	r5, r0
 8004f60:	b928      	cbnz	r0, 8004f6e <_dtoa_r+0x9d6>
 8004f62:	4b80      	ldr	r3, [pc, #512]	; (8005164 <_dtoa_r+0xbcc>)
 8004f64:	4602      	mov	r2, r0
 8004f66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004f6a:	f7ff bb2e 	b.w	80045ca <_dtoa_r+0x32>
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	3202      	adds	r2, #2
 8004f72:	0092      	lsls	r2, r2, #2
 8004f74:	f107 010c 	add.w	r1, r7, #12
 8004f78:	300c      	adds	r0, #12
 8004f7a:	f000 f905 	bl	8005188 <memcpy>
 8004f7e:	2201      	movs	r2, #1
 8004f80:	4629      	mov	r1, r5
 8004f82:	4620      	mov	r0, r4
 8004f84:	f000 fb20 	bl	80055c8 <__lshift>
 8004f88:	9b00      	ldr	r3, [sp, #0]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	9301      	str	r3, [sp, #4]
 8004f8e:	9b00      	ldr	r3, [sp, #0]
 8004f90:	444b      	add	r3, r9
 8004f92:	9307      	str	r3, [sp, #28]
 8004f94:	9b02      	ldr	r3, [sp, #8]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	46b8      	mov	r8, r7
 8004f9c:	9306      	str	r3, [sp, #24]
 8004f9e:	4607      	mov	r7, r0
 8004fa0:	9b01      	ldr	r3, [sp, #4]
 8004fa2:	4631      	mov	r1, r6
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	4658      	mov	r0, fp
 8004fa8:	9302      	str	r3, [sp, #8]
 8004faa:	f7ff fa69 	bl	8004480 <quorem>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	3330      	adds	r3, #48	; 0x30
 8004fb2:	9004      	str	r0, [sp, #16]
 8004fb4:	4641      	mov	r1, r8
 8004fb6:	4658      	mov	r0, fp
 8004fb8:	9308      	str	r3, [sp, #32]
 8004fba:	f000 fb71 	bl	80056a0 <__mcmp>
 8004fbe:	463a      	mov	r2, r7
 8004fc0:	4681      	mov	r9, r0
 8004fc2:	4631      	mov	r1, r6
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	f000 fb87 	bl	80056d8 <__mdiff>
 8004fca:	68c2      	ldr	r2, [r0, #12]
 8004fcc:	9b08      	ldr	r3, [sp, #32]
 8004fce:	4605      	mov	r5, r0
 8004fd0:	bb02      	cbnz	r2, 8005014 <_dtoa_r+0xa7c>
 8004fd2:	4601      	mov	r1, r0
 8004fd4:	4658      	mov	r0, fp
 8004fd6:	f000 fb63 	bl	80056a0 <__mcmp>
 8004fda:	9b08      	ldr	r3, [sp, #32]
 8004fdc:	4602      	mov	r2, r0
 8004fde:	4629      	mov	r1, r5
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8004fe6:	f000 f91d 	bl	8005224 <_Bfree>
 8004fea:	9b05      	ldr	r3, [sp, #20]
 8004fec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fee:	9d01      	ldr	r5, [sp, #4]
 8004ff0:	ea43 0102 	orr.w	r1, r3, r2
 8004ff4:	9b06      	ldr	r3, [sp, #24]
 8004ff6:	430b      	orrs	r3, r1
 8004ff8:	9b08      	ldr	r3, [sp, #32]
 8004ffa:	d10d      	bne.n	8005018 <_dtoa_r+0xa80>
 8004ffc:	2b39      	cmp	r3, #57	; 0x39
 8004ffe:	d029      	beq.n	8005054 <_dtoa_r+0xabc>
 8005000:	f1b9 0f00 	cmp.w	r9, #0
 8005004:	dd01      	ble.n	800500a <_dtoa_r+0xa72>
 8005006:	9b04      	ldr	r3, [sp, #16]
 8005008:	3331      	adds	r3, #49	; 0x31
 800500a:	9a02      	ldr	r2, [sp, #8]
 800500c:	7013      	strb	r3, [r2, #0]
 800500e:	e774      	b.n	8004efa <_dtoa_r+0x962>
 8005010:	4638      	mov	r0, r7
 8005012:	e7b9      	b.n	8004f88 <_dtoa_r+0x9f0>
 8005014:	2201      	movs	r2, #1
 8005016:	e7e2      	b.n	8004fde <_dtoa_r+0xa46>
 8005018:	f1b9 0f00 	cmp.w	r9, #0
 800501c:	db06      	blt.n	800502c <_dtoa_r+0xa94>
 800501e:	9905      	ldr	r1, [sp, #20]
 8005020:	ea41 0909 	orr.w	r9, r1, r9
 8005024:	9906      	ldr	r1, [sp, #24]
 8005026:	ea59 0101 	orrs.w	r1, r9, r1
 800502a:	d120      	bne.n	800506e <_dtoa_r+0xad6>
 800502c:	2a00      	cmp	r2, #0
 800502e:	ddec      	ble.n	800500a <_dtoa_r+0xa72>
 8005030:	4659      	mov	r1, fp
 8005032:	2201      	movs	r2, #1
 8005034:	4620      	mov	r0, r4
 8005036:	9301      	str	r3, [sp, #4]
 8005038:	f000 fac6 	bl	80055c8 <__lshift>
 800503c:	4631      	mov	r1, r6
 800503e:	4683      	mov	fp, r0
 8005040:	f000 fb2e 	bl	80056a0 <__mcmp>
 8005044:	2800      	cmp	r0, #0
 8005046:	9b01      	ldr	r3, [sp, #4]
 8005048:	dc02      	bgt.n	8005050 <_dtoa_r+0xab8>
 800504a:	d1de      	bne.n	800500a <_dtoa_r+0xa72>
 800504c:	07da      	lsls	r2, r3, #31
 800504e:	d5dc      	bpl.n	800500a <_dtoa_r+0xa72>
 8005050:	2b39      	cmp	r3, #57	; 0x39
 8005052:	d1d8      	bne.n	8005006 <_dtoa_r+0xa6e>
 8005054:	9a02      	ldr	r2, [sp, #8]
 8005056:	2339      	movs	r3, #57	; 0x39
 8005058:	7013      	strb	r3, [r2, #0]
 800505a:	462b      	mov	r3, r5
 800505c:	461d      	mov	r5, r3
 800505e:	3b01      	subs	r3, #1
 8005060:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005064:	2a39      	cmp	r2, #57	; 0x39
 8005066:	d050      	beq.n	800510a <_dtoa_r+0xb72>
 8005068:	3201      	adds	r2, #1
 800506a:	701a      	strb	r2, [r3, #0]
 800506c:	e745      	b.n	8004efa <_dtoa_r+0x962>
 800506e:	2a00      	cmp	r2, #0
 8005070:	dd03      	ble.n	800507a <_dtoa_r+0xae2>
 8005072:	2b39      	cmp	r3, #57	; 0x39
 8005074:	d0ee      	beq.n	8005054 <_dtoa_r+0xabc>
 8005076:	3301      	adds	r3, #1
 8005078:	e7c7      	b.n	800500a <_dtoa_r+0xa72>
 800507a:	9a01      	ldr	r2, [sp, #4]
 800507c:	9907      	ldr	r1, [sp, #28]
 800507e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005082:	428a      	cmp	r2, r1
 8005084:	d02a      	beq.n	80050dc <_dtoa_r+0xb44>
 8005086:	4659      	mov	r1, fp
 8005088:	2300      	movs	r3, #0
 800508a:	220a      	movs	r2, #10
 800508c:	4620      	mov	r0, r4
 800508e:	f000 f8eb 	bl	8005268 <__multadd>
 8005092:	45b8      	cmp	r8, r7
 8005094:	4683      	mov	fp, r0
 8005096:	f04f 0300 	mov.w	r3, #0
 800509a:	f04f 020a 	mov.w	r2, #10
 800509e:	4641      	mov	r1, r8
 80050a0:	4620      	mov	r0, r4
 80050a2:	d107      	bne.n	80050b4 <_dtoa_r+0xb1c>
 80050a4:	f000 f8e0 	bl	8005268 <__multadd>
 80050a8:	4680      	mov	r8, r0
 80050aa:	4607      	mov	r7, r0
 80050ac:	9b01      	ldr	r3, [sp, #4]
 80050ae:	3301      	adds	r3, #1
 80050b0:	9301      	str	r3, [sp, #4]
 80050b2:	e775      	b.n	8004fa0 <_dtoa_r+0xa08>
 80050b4:	f000 f8d8 	bl	8005268 <__multadd>
 80050b8:	4639      	mov	r1, r7
 80050ba:	4680      	mov	r8, r0
 80050bc:	2300      	movs	r3, #0
 80050be:	220a      	movs	r2, #10
 80050c0:	4620      	mov	r0, r4
 80050c2:	f000 f8d1 	bl	8005268 <__multadd>
 80050c6:	4607      	mov	r7, r0
 80050c8:	e7f0      	b.n	80050ac <_dtoa_r+0xb14>
 80050ca:	f1b9 0f00 	cmp.w	r9, #0
 80050ce:	9a00      	ldr	r2, [sp, #0]
 80050d0:	bfcc      	ite	gt
 80050d2:	464d      	movgt	r5, r9
 80050d4:	2501      	movle	r5, #1
 80050d6:	4415      	add	r5, r2
 80050d8:	f04f 0800 	mov.w	r8, #0
 80050dc:	4659      	mov	r1, fp
 80050de:	2201      	movs	r2, #1
 80050e0:	4620      	mov	r0, r4
 80050e2:	9301      	str	r3, [sp, #4]
 80050e4:	f000 fa70 	bl	80055c8 <__lshift>
 80050e8:	4631      	mov	r1, r6
 80050ea:	4683      	mov	fp, r0
 80050ec:	f000 fad8 	bl	80056a0 <__mcmp>
 80050f0:	2800      	cmp	r0, #0
 80050f2:	dcb2      	bgt.n	800505a <_dtoa_r+0xac2>
 80050f4:	d102      	bne.n	80050fc <_dtoa_r+0xb64>
 80050f6:	9b01      	ldr	r3, [sp, #4]
 80050f8:	07db      	lsls	r3, r3, #31
 80050fa:	d4ae      	bmi.n	800505a <_dtoa_r+0xac2>
 80050fc:	462b      	mov	r3, r5
 80050fe:	461d      	mov	r5, r3
 8005100:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005104:	2a30      	cmp	r2, #48	; 0x30
 8005106:	d0fa      	beq.n	80050fe <_dtoa_r+0xb66>
 8005108:	e6f7      	b.n	8004efa <_dtoa_r+0x962>
 800510a:	9a00      	ldr	r2, [sp, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d1a5      	bne.n	800505c <_dtoa_r+0xac4>
 8005110:	f10a 0a01 	add.w	sl, sl, #1
 8005114:	2331      	movs	r3, #49	; 0x31
 8005116:	e779      	b.n	800500c <_dtoa_r+0xa74>
 8005118:	4b13      	ldr	r3, [pc, #76]	; (8005168 <_dtoa_r+0xbd0>)
 800511a:	f7ff baaf 	b.w	800467c <_dtoa_r+0xe4>
 800511e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005120:	2b00      	cmp	r3, #0
 8005122:	f47f aa86 	bne.w	8004632 <_dtoa_r+0x9a>
 8005126:	4b11      	ldr	r3, [pc, #68]	; (800516c <_dtoa_r+0xbd4>)
 8005128:	f7ff baa8 	b.w	800467c <_dtoa_r+0xe4>
 800512c:	f1b9 0f00 	cmp.w	r9, #0
 8005130:	dc03      	bgt.n	800513a <_dtoa_r+0xba2>
 8005132:	9b05      	ldr	r3, [sp, #20]
 8005134:	2b02      	cmp	r3, #2
 8005136:	f73f aec9 	bgt.w	8004ecc <_dtoa_r+0x934>
 800513a:	9d00      	ldr	r5, [sp, #0]
 800513c:	4631      	mov	r1, r6
 800513e:	4658      	mov	r0, fp
 8005140:	f7ff f99e 	bl	8004480 <quorem>
 8005144:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005148:	f805 3b01 	strb.w	r3, [r5], #1
 800514c:	9a00      	ldr	r2, [sp, #0]
 800514e:	1aaa      	subs	r2, r5, r2
 8005150:	4591      	cmp	r9, r2
 8005152:	ddba      	ble.n	80050ca <_dtoa_r+0xb32>
 8005154:	4659      	mov	r1, fp
 8005156:	2300      	movs	r3, #0
 8005158:	220a      	movs	r2, #10
 800515a:	4620      	mov	r0, r4
 800515c:	f000 f884 	bl	8005268 <__multadd>
 8005160:	4683      	mov	fp, r0
 8005162:	e7eb      	b.n	800513c <_dtoa_r+0xba4>
 8005164:	0800793b 	.word	0x0800793b
 8005168:	08007894 	.word	0x08007894
 800516c:	080078b8 	.word	0x080078b8

08005170 <_localeconv_r>:
 8005170:	4800      	ldr	r0, [pc, #0]	; (8005174 <_localeconv_r+0x4>)
 8005172:	4770      	bx	lr
 8005174:	2000015c 	.word	0x2000015c

08005178 <malloc>:
 8005178:	4b02      	ldr	r3, [pc, #8]	; (8005184 <malloc+0xc>)
 800517a:	4601      	mov	r1, r0
 800517c:	6818      	ldr	r0, [r3, #0]
 800517e:	f000 bbef 	b.w	8005960 <_malloc_r>
 8005182:	bf00      	nop
 8005184:	20000008 	.word	0x20000008

08005188 <memcpy>:
 8005188:	440a      	add	r2, r1
 800518a:	4291      	cmp	r1, r2
 800518c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005190:	d100      	bne.n	8005194 <memcpy+0xc>
 8005192:	4770      	bx	lr
 8005194:	b510      	push	{r4, lr}
 8005196:	f811 4b01 	ldrb.w	r4, [r1], #1
 800519a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800519e:	4291      	cmp	r1, r2
 80051a0:	d1f9      	bne.n	8005196 <memcpy+0xe>
 80051a2:	bd10      	pop	{r4, pc}

080051a4 <_Balloc>:
 80051a4:	b570      	push	{r4, r5, r6, lr}
 80051a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80051a8:	4604      	mov	r4, r0
 80051aa:	460d      	mov	r5, r1
 80051ac:	b976      	cbnz	r6, 80051cc <_Balloc+0x28>
 80051ae:	2010      	movs	r0, #16
 80051b0:	f7ff ffe2 	bl	8005178 <malloc>
 80051b4:	4602      	mov	r2, r0
 80051b6:	6260      	str	r0, [r4, #36]	; 0x24
 80051b8:	b920      	cbnz	r0, 80051c4 <_Balloc+0x20>
 80051ba:	4b18      	ldr	r3, [pc, #96]	; (800521c <_Balloc+0x78>)
 80051bc:	4818      	ldr	r0, [pc, #96]	; (8005220 <_Balloc+0x7c>)
 80051be:	2166      	movs	r1, #102	; 0x66
 80051c0:	f000 fd94 	bl	8005cec <__assert_func>
 80051c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80051c8:	6006      	str	r6, [r0, #0]
 80051ca:	60c6      	str	r6, [r0, #12]
 80051cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80051ce:	68f3      	ldr	r3, [r6, #12]
 80051d0:	b183      	cbz	r3, 80051f4 <_Balloc+0x50>
 80051d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80051da:	b9b8      	cbnz	r0, 800520c <_Balloc+0x68>
 80051dc:	2101      	movs	r1, #1
 80051de:	fa01 f605 	lsl.w	r6, r1, r5
 80051e2:	1d72      	adds	r2, r6, #5
 80051e4:	0092      	lsls	r2, r2, #2
 80051e6:	4620      	mov	r0, r4
 80051e8:	f000 fb5a 	bl	80058a0 <_calloc_r>
 80051ec:	b160      	cbz	r0, 8005208 <_Balloc+0x64>
 80051ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80051f2:	e00e      	b.n	8005212 <_Balloc+0x6e>
 80051f4:	2221      	movs	r2, #33	; 0x21
 80051f6:	2104      	movs	r1, #4
 80051f8:	4620      	mov	r0, r4
 80051fa:	f000 fb51 	bl	80058a0 <_calloc_r>
 80051fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005200:	60f0      	str	r0, [r6, #12]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1e4      	bne.n	80051d2 <_Balloc+0x2e>
 8005208:	2000      	movs	r0, #0
 800520a:	bd70      	pop	{r4, r5, r6, pc}
 800520c:	6802      	ldr	r2, [r0, #0]
 800520e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005212:	2300      	movs	r3, #0
 8005214:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005218:	e7f7      	b.n	800520a <_Balloc+0x66>
 800521a:	bf00      	nop
 800521c:	080078c5 	.word	0x080078c5
 8005220:	0800794c 	.word	0x0800794c

08005224 <_Bfree>:
 8005224:	b570      	push	{r4, r5, r6, lr}
 8005226:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005228:	4605      	mov	r5, r0
 800522a:	460c      	mov	r4, r1
 800522c:	b976      	cbnz	r6, 800524c <_Bfree+0x28>
 800522e:	2010      	movs	r0, #16
 8005230:	f7ff ffa2 	bl	8005178 <malloc>
 8005234:	4602      	mov	r2, r0
 8005236:	6268      	str	r0, [r5, #36]	; 0x24
 8005238:	b920      	cbnz	r0, 8005244 <_Bfree+0x20>
 800523a:	4b09      	ldr	r3, [pc, #36]	; (8005260 <_Bfree+0x3c>)
 800523c:	4809      	ldr	r0, [pc, #36]	; (8005264 <_Bfree+0x40>)
 800523e:	218a      	movs	r1, #138	; 0x8a
 8005240:	f000 fd54 	bl	8005cec <__assert_func>
 8005244:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005248:	6006      	str	r6, [r0, #0]
 800524a:	60c6      	str	r6, [r0, #12]
 800524c:	b13c      	cbz	r4, 800525e <_Bfree+0x3a>
 800524e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005250:	6862      	ldr	r2, [r4, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005258:	6021      	str	r1, [r4, #0]
 800525a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800525e:	bd70      	pop	{r4, r5, r6, pc}
 8005260:	080078c5 	.word	0x080078c5
 8005264:	0800794c 	.word	0x0800794c

08005268 <__multadd>:
 8005268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800526c:	690e      	ldr	r6, [r1, #16]
 800526e:	4607      	mov	r7, r0
 8005270:	4698      	mov	r8, r3
 8005272:	460c      	mov	r4, r1
 8005274:	f101 0014 	add.w	r0, r1, #20
 8005278:	2300      	movs	r3, #0
 800527a:	6805      	ldr	r5, [r0, #0]
 800527c:	b2a9      	uxth	r1, r5
 800527e:	fb02 8101 	mla	r1, r2, r1, r8
 8005282:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005286:	0c2d      	lsrs	r5, r5, #16
 8005288:	fb02 c505 	mla	r5, r2, r5, ip
 800528c:	b289      	uxth	r1, r1
 800528e:	3301      	adds	r3, #1
 8005290:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005294:	429e      	cmp	r6, r3
 8005296:	f840 1b04 	str.w	r1, [r0], #4
 800529a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800529e:	dcec      	bgt.n	800527a <__multadd+0x12>
 80052a0:	f1b8 0f00 	cmp.w	r8, #0
 80052a4:	d022      	beq.n	80052ec <__multadd+0x84>
 80052a6:	68a3      	ldr	r3, [r4, #8]
 80052a8:	42b3      	cmp	r3, r6
 80052aa:	dc19      	bgt.n	80052e0 <__multadd+0x78>
 80052ac:	6861      	ldr	r1, [r4, #4]
 80052ae:	4638      	mov	r0, r7
 80052b0:	3101      	adds	r1, #1
 80052b2:	f7ff ff77 	bl	80051a4 <_Balloc>
 80052b6:	4605      	mov	r5, r0
 80052b8:	b928      	cbnz	r0, 80052c6 <__multadd+0x5e>
 80052ba:	4602      	mov	r2, r0
 80052bc:	4b0d      	ldr	r3, [pc, #52]	; (80052f4 <__multadd+0x8c>)
 80052be:	480e      	ldr	r0, [pc, #56]	; (80052f8 <__multadd+0x90>)
 80052c0:	21b5      	movs	r1, #181	; 0xb5
 80052c2:	f000 fd13 	bl	8005cec <__assert_func>
 80052c6:	6922      	ldr	r2, [r4, #16]
 80052c8:	3202      	adds	r2, #2
 80052ca:	f104 010c 	add.w	r1, r4, #12
 80052ce:	0092      	lsls	r2, r2, #2
 80052d0:	300c      	adds	r0, #12
 80052d2:	f7ff ff59 	bl	8005188 <memcpy>
 80052d6:	4621      	mov	r1, r4
 80052d8:	4638      	mov	r0, r7
 80052da:	f7ff ffa3 	bl	8005224 <_Bfree>
 80052de:	462c      	mov	r4, r5
 80052e0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80052e4:	3601      	adds	r6, #1
 80052e6:	f8c3 8014 	str.w	r8, [r3, #20]
 80052ea:	6126      	str	r6, [r4, #16]
 80052ec:	4620      	mov	r0, r4
 80052ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052f2:	bf00      	nop
 80052f4:	0800793b 	.word	0x0800793b
 80052f8:	0800794c 	.word	0x0800794c

080052fc <__hi0bits>:
 80052fc:	0c03      	lsrs	r3, r0, #16
 80052fe:	041b      	lsls	r3, r3, #16
 8005300:	b9d3      	cbnz	r3, 8005338 <__hi0bits+0x3c>
 8005302:	0400      	lsls	r0, r0, #16
 8005304:	2310      	movs	r3, #16
 8005306:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800530a:	bf04      	itt	eq
 800530c:	0200      	lsleq	r0, r0, #8
 800530e:	3308      	addeq	r3, #8
 8005310:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005314:	bf04      	itt	eq
 8005316:	0100      	lsleq	r0, r0, #4
 8005318:	3304      	addeq	r3, #4
 800531a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800531e:	bf04      	itt	eq
 8005320:	0080      	lsleq	r0, r0, #2
 8005322:	3302      	addeq	r3, #2
 8005324:	2800      	cmp	r0, #0
 8005326:	db05      	blt.n	8005334 <__hi0bits+0x38>
 8005328:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800532c:	f103 0301 	add.w	r3, r3, #1
 8005330:	bf08      	it	eq
 8005332:	2320      	moveq	r3, #32
 8005334:	4618      	mov	r0, r3
 8005336:	4770      	bx	lr
 8005338:	2300      	movs	r3, #0
 800533a:	e7e4      	b.n	8005306 <__hi0bits+0xa>

0800533c <__lo0bits>:
 800533c:	6803      	ldr	r3, [r0, #0]
 800533e:	f013 0207 	ands.w	r2, r3, #7
 8005342:	4601      	mov	r1, r0
 8005344:	d00b      	beq.n	800535e <__lo0bits+0x22>
 8005346:	07da      	lsls	r2, r3, #31
 8005348:	d424      	bmi.n	8005394 <__lo0bits+0x58>
 800534a:	0798      	lsls	r0, r3, #30
 800534c:	bf49      	itett	mi
 800534e:	085b      	lsrmi	r3, r3, #1
 8005350:	089b      	lsrpl	r3, r3, #2
 8005352:	2001      	movmi	r0, #1
 8005354:	600b      	strmi	r3, [r1, #0]
 8005356:	bf5c      	itt	pl
 8005358:	600b      	strpl	r3, [r1, #0]
 800535a:	2002      	movpl	r0, #2
 800535c:	4770      	bx	lr
 800535e:	b298      	uxth	r0, r3
 8005360:	b9b0      	cbnz	r0, 8005390 <__lo0bits+0x54>
 8005362:	0c1b      	lsrs	r3, r3, #16
 8005364:	2010      	movs	r0, #16
 8005366:	f013 0fff 	tst.w	r3, #255	; 0xff
 800536a:	bf04      	itt	eq
 800536c:	0a1b      	lsreq	r3, r3, #8
 800536e:	3008      	addeq	r0, #8
 8005370:	071a      	lsls	r2, r3, #28
 8005372:	bf04      	itt	eq
 8005374:	091b      	lsreq	r3, r3, #4
 8005376:	3004      	addeq	r0, #4
 8005378:	079a      	lsls	r2, r3, #30
 800537a:	bf04      	itt	eq
 800537c:	089b      	lsreq	r3, r3, #2
 800537e:	3002      	addeq	r0, #2
 8005380:	07da      	lsls	r2, r3, #31
 8005382:	d403      	bmi.n	800538c <__lo0bits+0x50>
 8005384:	085b      	lsrs	r3, r3, #1
 8005386:	f100 0001 	add.w	r0, r0, #1
 800538a:	d005      	beq.n	8005398 <__lo0bits+0x5c>
 800538c:	600b      	str	r3, [r1, #0]
 800538e:	4770      	bx	lr
 8005390:	4610      	mov	r0, r2
 8005392:	e7e8      	b.n	8005366 <__lo0bits+0x2a>
 8005394:	2000      	movs	r0, #0
 8005396:	4770      	bx	lr
 8005398:	2020      	movs	r0, #32
 800539a:	4770      	bx	lr

0800539c <__i2b>:
 800539c:	b510      	push	{r4, lr}
 800539e:	460c      	mov	r4, r1
 80053a0:	2101      	movs	r1, #1
 80053a2:	f7ff feff 	bl	80051a4 <_Balloc>
 80053a6:	4602      	mov	r2, r0
 80053a8:	b928      	cbnz	r0, 80053b6 <__i2b+0x1a>
 80053aa:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <__i2b+0x24>)
 80053ac:	4805      	ldr	r0, [pc, #20]	; (80053c4 <__i2b+0x28>)
 80053ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80053b2:	f000 fc9b 	bl	8005cec <__assert_func>
 80053b6:	2301      	movs	r3, #1
 80053b8:	6144      	str	r4, [r0, #20]
 80053ba:	6103      	str	r3, [r0, #16]
 80053bc:	bd10      	pop	{r4, pc}
 80053be:	bf00      	nop
 80053c0:	0800793b 	.word	0x0800793b
 80053c4:	0800794c 	.word	0x0800794c

080053c8 <__multiply>:
 80053c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053cc:	4614      	mov	r4, r2
 80053ce:	690a      	ldr	r2, [r1, #16]
 80053d0:	6923      	ldr	r3, [r4, #16]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	bfb8      	it	lt
 80053d6:	460b      	movlt	r3, r1
 80053d8:	460d      	mov	r5, r1
 80053da:	bfbc      	itt	lt
 80053dc:	4625      	movlt	r5, r4
 80053de:	461c      	movlt	r4, r3
 80053e0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80053e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80053e8:	68ab      	ldr	r3, [r5, #8]
 80053ea:	6869      	ldr	r1, [r5, #4]
 80053ec:	eb0a 0709 	add.w	r7, sl, r9
 80053f0:	42bb      	cmp	r3, r7
 80053f2:	b085      	sub	sp, #20
 80053f4:	bfb8      	it	lt
 80053f6:	3101      	addlt	r1, #1
 80053f8:	f7ff fed4 	bl	80051a4 <_Balloc>
 80053fc:	b930      	cbnz	r0, 800540c <__multiply+0x44>
 80053fe:	4602      	mov	r2, r0
 8005400:	4b42      	ldr	r3, [pc, #264]	; (800550c <__multiply+0x144>)
 8005402:	4843      	ldr	r0, [pc, #268]	; (8005510 <__multiply+0x148>)
 8005404:	f240 115d 	movw	r1, #349	; 0x15d
 8005408:	f000 fc70 	bl	8005cec <__assert_func>
 800540c:	f100 0614 	add.w	r6, r0, #20
 8005410:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005414:	4633      	mov	r3, r6
 8005416:	2200      	movs	r2, #0
 8005418:	4543      	cmp	r3, r8
 800541a:	d31e      	bcc.n	800545a <__multiply+0x92>
 800541c:	f105 0c14 	add.w	ip, r5, #20
 8005420:	f104 0314 	add.w	r3, r4, #20
 8005424:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005428:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800542c:	9202      	str	r2, [sp, #8]
 800542e:	ebac 0205 	sub.w	r2, ip, r5
 8005432:	3a15      	subs	r2, #21
 8005434:	f022 0203 	bic.w	r2, r2, #3
 8005438:	3204      	adds	r2, #4
 800543a:	f105 0115 	add.w	r1, r5, #21
 800543e:	458c      	cmp	ip, r1
 8005440:	bf38      	it	cc
 8005442:	2204      	movcc	r2, #4
 8005444:	9201      	str	r2, [sp, #4]
 8005446:	9a02      	ldr	r2, [sp, #8]
 8005448:	9303      	str	r3, [sp, #12]
 800544a:	429a      	cmp	r2, r3
 800544c:	d808      	bhi.n	8005460 <__multiply+0x98>
 800544e:	2f00      	cmp	r7, #0
 8005450:	dc55      	bgt.n	80054fe <__multiply+0x136>
 8005452:	6107      	str	r7, [r0, #16]
 8005454:	b005      	add	sp, #20
 8005456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800545a:	f843 2b04 	str.w	r2, [r3], #4
 800545e:	e7db      	b.n	8005418 <__multiply+0x50>
 8005460:	f8b3 a000 	ldrh.w	sl, [r3]
 8005464:	f1ba 0f00 	cmp.w	sl, #0
 8005468:	d020      	beq.n	80054ac <__multiply+0xe4>
 800546a:	f105 0e14 	add.w	lr, r5, #20
 800546e:	46b1      	mov	r9, r6
 8005470:	2200      	movs	r2, #0
 8005472:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005476:	f8d9 b000 	ldr.w	fp, [r9]
 800547a:	b2a1      	uxth	r1, r4
 800547c:	fa1f fb8b 	uxth.w	fp, fp
 8005480:	fb0a b101 	mla	r1, sl, r1, fp
 8005484:	4411      	add	r1, r2
 8005486:	f8d9 2000 	ldr.w	r2, [r9]
 800548a:	0c24      	lsrs	r4, r4, #16
 800548c:	0c12      	lsrs	r2, r2, #16
 800548e:	fb0a 2404 	mla	r4, sl, r4, r2
 8005492:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005496:	b289      	uxth	r1, r1
 8005498:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800549c:	45f4      	cmp	ip, lr
 800549e:	f849 1b04 	str.w	r1, [r9], #4
 80054a2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80054a6:	d8e4      	bhi.n	8005472 <__multiply+0xaa>
 80054a8:	9901      	ldr	r1, [sp, #4]
 80054aa:	5072      	str	r2, [r6, r1]
 80054ac:	9a03      	ldr	r2, [sp, #12]
 80054ae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80054b2:	3304      	adds	r3, #4
 80054b4:	f1b9 0f00 	cmp.w	r9, #0
 80054b8:	d01f      	beq.n	80054fa <__multiply+0x132>
 80054ba:	6834      	ldr	r4, [r6, #0]
 80054bc:	f105 0114 	add.w	r1, r5, #20
 80054c0:	46b6      	mov	lr, r6
 80054c2:	f04f 0a00 	mov.w	sl, #0
 80054c6:	880a      	ldrh	r2, [r1, #0]
 80054c8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80054cc:	fb09 b202 	mla	r2, r9, r2, fp
 80054d0:	4492      	add	sl, r2
 80054d2:	b2a4      	uxth	r4, r4
 80054d4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80054d8:	f84e 4b04 	str.w	r4, [lr], #4
 80054dc:	f851 4b04 	ldr.w	r4, [r1], #4
 80054e0:	f8be 2000 	ldrh.w	r2, [lr]
 80054e4:	0c24      	lsrs	r4, r4, #16
 80054e6:	fb09 2404 	mla	r4, r9, r4, r2
 80054ea:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80054ee:	458c      	cmp	ip, r1
 80054f0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80054f4:	d8e7      	bhi.n	80054c6 <__multiply+0xfe>
 80054f6:	9a01      	ldr	r2, [sp, #4]
 80054f8:	50b4      	str	r4, [r6, r2]
 80054fa:	3604      	adds	r6, #4
 80054fc:	e7a3      	b.n	8005446 <__multiply+0x7e>
 80054fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1a5      	bne.n	8005452 <__multiply+0x8a>
 8005506:	3f01      	subs	r7, #1
 8005508:	e7a1      	b.n	800544e <__multiply+0x86>
 800550a:	bf00      	nop
 800550c:	0800793b 	.word	0x0800793b
 8005510:	0800794c 	.word	0x0800794c

08005514 <__pow5mult>:
 8005514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005518:	4615      	mov	r5, r2
 800551a:	f012 0203 	ands.w	r2, r2, #3
 800551e:	4606      	mov	r6, r0
 8005520:	460f      	mov	r7, r1
 8005522:	d007      	beq.n	8005534 <__pow5mult+0x20>
 8005524:	4c25      	ldr	r4, [pc, #148]	; (80055bc <__pow5mult+0xa8>)
 8005526:	3a01      	subs	r2, #1
 8005528:	2300      	movs	r3, #0
 800552a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800552e:	f7ff fe9b 	bl	8005268 <__multadd>
 8005532:	4607      	mov	r7, r0
 8005534:	10ad      	asrs	r5, r5, #2
 8005536:	d03d      	beq.n	80055b4 <__pow5mult+0xa0>
 8005538:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800553a:	b97c      	cbnz	r4, 800555c <__pow5mult+0x48>
 800553c:	2010      	movs	r0, #16
 800553e:	f7ff fe1b 	bl	8005178 <malloc>
 8005542:	4602      	mov	r2, r0
 8005544:	6270      	str	r0, [r6, #36]	; 0x24
 8005546:	b928      	cbnz	r0, 8005554 <__pow5mult+0x40>
 8005548:	4b1d      	ldr	r3, [pc, #116]	; (80055c0 <__pow5mult+0xac>)
 800554a:	481e      	ldr	r0, [pc, #120]	; (80055c4 <__pow5mult+0xb0>)
 800554c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005550:	f000 fbcc 	bl	8005cec <__assert_func>
 8005554:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005558:	6004      	str	r4, [r0, #0]
 800555a:	60c4      	str	r4, [r0, #12]
 800555c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005560:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005564:	b94c      	cbnz	r4, 800557a <__pow5mult+0x66>
 8005566:	f240 2171 	movw	r1, #625	; 0x271
 800556a:	4630      	mov	r0, r6
 800556c:	f7ff ff16 	bl	800539c <__i2b>
 8005570:	2300      	movs	r3, #0
 8005572:	f8c8 0008 	str.w	r0, [r8, #8]
 8005576:	4604      	mov	r4, r0
 8005578:	6003      	str	r3, [r0, #0]
 800557a:	f04f 0900 	mov.w	r9, #0
 800557e:	07eb      	lsls	r3, r5, #31
 8005580:	d50a      	bpl.n	8005598 <__pow5mult+0x84>
 8005582:	4639      	mov	r1, r7
 8005584:	4622      	mov	r2, r4
 8005586:	4630      	mov	r0, r6
 8005588:	f7ff ff1e 	bl	80053c8 <__multiply>
 800558c:	4639      	mov	r1, r7
 800558e:	4680      	mov	r8, r0
 8005590:	4630      	mov	r0, r6
 8005592:	f7ff fe47 	bl	8005224 <_Bfree>
 8005596:	4647      	mov	r7, r8
 8005598:	106d      	asrs	r5, r5, #1
 800559a:	d00b      	beq.n	80055b4 <__pow5mult+0xa0>
 800559c:	6820      	ldr	r0, [r4, #0]
 800559e:	b938      	cbnz	r0, 80055b0 <__pow5mult+0x9c>
 80055a0:	4622      	mov	r2, r4
 80055a2:	4621      	mov	r1, r4
 80055a4:	4630      	mov	r0, r6
 80055a6:	f7ff ff0f 	bl	80053c8 <__multiply>
 80055aa:	6020      	str	r0, [r4, #0]
 80055ac:	f8c0 9000 	str.w	r9, [r0]
 80055b0:	4604      	mov	r4, r0
 80055b2:	e7e4      	b.n	800557e <__pow5mult+0x6a>
 80055b4:	4638      	mov	r0, r7
 80055b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055ba:	bf00      	nop
 80055bc:	08007aa0 	.word	0x08007aa0
 80055c0:	080078c5 	.word	0x080078c5
 80055c4:	0800794c 	.word	0x0800794c

080055c8 <__lshift>:
 80055c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055cc:	460c      	mov	r4, r1
 80055ce:	6849      	ldr	r1, [r1, #4]
 80055d0:	6923      	ldr	r3, [r4, #16]
 80055d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80055d6:	68a3      	ldr	r3, [r4, #8]
 80055d8:	4607      	mov	r7, r0
 80055da:	4691      	mov	r9, r2
 80055dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80055e0:	f108 0601 	add.w	r6, r8, #1
 80055e4:	42b3      	cmp	r3, r6
 80055e6:	db0b      	blt.n	8005600 <__lshift+0x38>
 80055e8:	4638      	mov	r0, r7
 80055ea:	f7ff fddb 	bl	80051a4 <_Balloc>
 80055ee:	4605      	mov	r5, r0
 80055f0:	b948      	cbnz	r0, 8005606 <__lshift+0x3e>
 80055f2:	4602      	mov	r2, r0
 80055f4:	4b28      	ldr	r3, [pc, #160]	; (8005698 <__lshift+0xd0>)
 80055f6:	4829      	ldr	r0, [pc, #164]	; (800569c <__lshift+0xd4>)
 80055f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80055fc:	f000 fb76 	bl	8005cec <__assert_func>
 8005600:	3101      	adds	r1, #1
 8005602:	005b      	lsls	r3, r3, #1
 8005604:	e7ee      	b.n	80055e4 <__lshift+0x1c>
 8005606:	2300      	movs	r3, #0
 8005608:	f100 0114 	add.w	r1, r0, #20
 800560c:	f100 0210 	add.w	r2, r0, #16
 8005610:	4618      	mov	r0, r3
 8005612:	4553      	cmp	r3, sl
 8005614:	db33      	blt.n	800567e <__lshift+0xb6>
 8005616:	6920      	ldr	r0, [r4, #16]
 8005618:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800561c:	f104 0314 	add.w	r3, r4, #20
 8005620:	f019 091f 	ands.w	r9, r9, #31
 8005624:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005628:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800562c:	d02b      	beq.n	8005686 <__lshift+0xbe>
 800562e:	f1c9 0e20 	rsb	lr, r9, #32
 8005632:	468a      	mov	sl, r1
 8005634:	2200      	movs	r2, #0
 8005636:	6818      	ldr	r0, [r3, #0]
 8005638:	fa00 f009 	lsl.w	r0, r0, r9
 800563c:	4302      	orrs	r2, r0
 800563e:	f84a 2b04 	str.w	r2, [sl], #4
 8005642:	f853 2b04 	ldr.w	r2, [r3], #4
 8005646:	459c      	cmp	ip, r3
 8005648:	fa22 f20e 	lsr.w	r2, r2, lr
 800564c:	d8f3      	bhi.n	8005636 <__lshift+0x6e>
 800564e:	ebac 0304 	sub.w	r3, ip, r4
 8005652:	3b15      	subs	r3, #21
 8005654:	f023 0303 	bic.w	r3, r3, #3
 8005658:	3304      	adds	r3, #4
 800565a:	f104 0015 	add.w	r0, r4, #21
 800565e:	4584      	cmp	ip, r0
 8005660:	bf38      	it	cc
 8005662:	2304      	movcc	r3, #4
 8005664:	50ca      	str	r2, [r1, r3]
 8005666:	b10a      	cbz	r2, 800566c <__lshift+0xa4>
 8005668:	f108 0602 	add.w	r6, r8, #2
 800566c:	3e01      	subs	r6, #1
 800566e:	4638      	mov	r0, r7
 8005670:	612e      	str	r6, [r5, #16]
 8005672:	4621      	mov	r1, r4
 8005674:	f7ff fdd6 	bl	8005224 <_Bfree>
 8005678:	4628      	mov	r0, r5
 800567a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800567e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005682:	3301      	adds	r3, #1
 8005684:	e7c5      	b.n	8005612 <__lshift+0x4a>
 8005686:	3904      	subs	r1, #4
 8005688:	f853 2b04 	ldr.w	r2, [r3], #4
 800568c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005690:	459c      	cmp	ip, r3
 8005692:	d8f9      	bhi.n	8005688 <__lshift+0xc0>
 8005694:	e7ea      	b.n	800566c <__lshift+0xa4>
 8005696:	bf00      	nop
 8005698:	0800793b 	.word	0x0800793b
 800569c:	0800794c 	.word	0x0800794c

080056a0 <__mcmp>:
 80056a0:	b530      	push	{r4, r5, lr}
 80056a2:	6902      	ldr	r2, [r0, #16]
 80056a4:	690c      	ldr	r4, [r1, #16]
 80056a6:	1b12      	subs	r2, r2, r4
 80056a8:	d10e      	bne.n	80056c8 <__mcmp+0x28>
 80056aa:	f100 0314 	add.w	r3, r0, #20
 80056ae:	3114      	adds	r1, #20
 80056b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80056b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80056b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80056bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80056c0:	42a5      	cmp	r5, r4
 80056c2:	d003      	beq.n	80056cc <__mcmp+0x2c>
 80056c4:	d305      	bcc.n	80056d2 <__mcmp+0x32>
 80056c6:	2201      	movs	r2, #1
 80056c8:	4610      	mov	r0, r2
 80056ca:	bd30      	pop	{r4, r5, pc}
 80056cc:	4283      	cmp	r3, r0
 80056ce:	d3f3      	bcc.n	80056b8 <__mcmp+0x18>
 80056d0:	e7fa      	b.n	80056c8 <__mcmp+0x28>
 80056d2:	f04f 32ff 	mov.w	r2, #4294967295
 80056d6:	e7f7      	b.n	80056c8 <__mcmp+0x28>

080056d8 <__mdiff>:
 80056d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056dc:	460c      	mov	r4, r1
 80056de:	4606      	mov	r6, r0
 80056e0:	4611      	mov	r1, r2
 80056e2:	4620      	mov	r0, r4
 80056e4:	4617      	mov	r7, r2
 80056e6:	f7ff ffdb 	bl	80056a0 <__mcmp>
 80056ea:	1e05      	subs	r5, r0, #0
 80056ec:	d110      	bne.n	8005710 <__mdiff+0x38>
 80056ee:	4629      	mov	r1, r5
 80056f0:	4630      	mov	r0, r6
 80056f2:	f7ff fd57 	bl	80051a4 <_Balloc>
 80056f6:	b930      	cbnz	r0, 8005706 <__mdiff+0x2e>
 80056f8:	4b39      	ldr	r3, [pc, #228]	; (80057e0 <__mdiff+0x108>)
 80056fa:	4602      	mov	r2, r0
 80056fc:	f240 2132 	movw	r1, #562	; 0x232
 8005700:	4838      	ldr	r0, [pc, #224]	; (80057e4 <__mdiff+0x10c>)
 8005702:	f000 faf3 	bl	8005cec <__assert_func>
 8005706:	2301      	movs	r3, #1
 8005708:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800570c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005710:	bfa4      	itt	ge
 8005712:	463b      	movge	r3, r7
 8005714:	4627      	movge	r7, r4
 8005716:	4630      	mov	r0, r6
 8005718:	6879      	ldr	r1, [r7, #4]
 800571a:	bfa6      	itte	ge
 800571c:	461c      	movge	r4, r3
 800571e:	2500      	movge	r5, #0
 8005720:	2501      	movlt	r5, #1
 8005722:	f7ff fd3f 	bl	80051a4 <_Balloc>
 8005726:	b920      	cbnz	r0, 8005732 <__mdiff+0x5a>
 8005728:	4b2d      	ldr	r3, [pc, #180]	; (80057e0 <__mdiff+0x108>)
 800572a:	4602      	mov	r2, r0
 800572c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005730:	e7e6      	b.n	8005700 <__mdiff+0x28>
 8005732:	693e      	ldr	r6, [r7, #16]
 8005734:	60c5      	str	r5, [r0, #12]
 8005736:	6925      	ldr	r5, [r4, #16]
 8005738:	f107 0114 	add.w	r1, r7, #20
 800573c:	f104 0914 	add.w	r9, r4, #20
 8005740:	f100 0e14 	add.w	lr, r0, #20
 8005744:	f107 0210 	add.w	r2, r7, #16
 8005748:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800574c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005750:	46f2      	mov	sl, lr
 8005752:	2700      	movs	r7, #0
 8005754:	f859 3b04 	ldr.w	r3, [r9], #4
 8005758:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800575c:	fa1f f883 	uxth.w	r8, r3
 8005760:	fa17 f78b 	uxtah	r7, r7, fp
 8005764:	0c1b      	lsrs	r3, r3, #16
 8005766:	eba7 0808 	sub.w	r8, r7, r8
 800576a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800576e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005772:	fa1f f888 	uxth.w	r8, r8
 8005776:	141f      	asrs	r7, r3, #16
 8005778:	454d      	cmp	r5, r9
 800577a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800577e:	f84a 3b04 	str.w	r3, [sl], #4
 8005782:	d8e7      	bhi.n	8005754 <__mdiff+0x7c>
 8005784:	1b2b      	subs	r3, r5, r4
 8005786:	3b15      	subs	r3, #21
 8005788:	f023 0303 	bic.w	r3, r3, #3
 800578c:	3304      	adds	r3, #4
 800578e:	3415      	adds	r4, #21
 8005790:	42a5      	cmp	r5, r4
 8005792:	bf38      	it	cc
 8005794:	2304      	movcc	r3, #4
 8005796:	4419      	add	r1, r3
 8005798:	4473      	add	r3, lr
 800579a:	469e      	mov	lr, r3
 800579c:	460d      	mov	r5, r1
 800579e:	4565      	cmp	r5, ip
 80057a0:	d30e      	bcc.n	80057c0 <__mdiff+0xe8>
 80057a2:	f10c 0203 	add.w	r2, ip, #3
 80057a6:	1a52      	subs	r2, r2, r1
 80057a8:	f022 0203 	bic.w	r2, r2, #3
 80057ac:	3903      	subs	r1, #3
 80057ae:	458c      	cmp	ip, r1
 80057b0:	bf38      	it	cc
 80057b2:	2200      	movcc	r2, #0
 80057b4:	441a      	add	r2, r3
 80057b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80057ba:	b17b      	cbz	r3, 80057dc <__mdiff+0x104>
 80057bc:	6106      	str	r6, [r0, #16]
 80057be:	e7a5      	b.n	800570c <__mdiff+0x34>
 80057c0:	f855 8b04 	ldr.w	r8, [r5], #4
 80057c4:	fa17 f488 	uxtah	r4, r7, r8
 80057c8:	1422      	asrs	r2, r4, #16
 80057ca:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80057ce:	b2a4      	uxth	r4, r4
 80057d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80057d4:	f84e 4b04 	str.w	r4, [lr], #4
 80057d8:	1417      	asrs	r7, r2, #16
 80057da:	e7e0      	b.n	800579e <__mdiff+0xc6>
 80057dc:	3e01      	subs	r6, #1
 80057de:	e7ea      	b.n	80057b6 <__mdiff+0xde>
 80057e0:	0800793b 	.word	0x0800793b
 80057e4:	0800794c 	.word	0x0800794c

080057e8 <__d2b>:
 80057e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80057ec:	4689      	mov	r9, r1
 80057ee:	2101      	movs	r1, #1
 80057f0:	ec57 6b10 	vmov	r6, r7, d0
 80057f4:	4690      	mov	r8, r2
 80057f6:	f7ff fcd5 	bl	80051a4 <_Balloc>
 80057fa:	4604      	mov	r4, r0
 80057fc:	b930      	cbnz	r0, 800580c <__d2b+0x24>
 80057fe:	4602      	mov	r2, r0
 8005800:	4b25      	ldr	r3, [pc, #148]	; (8005898 <__d2b+0xb0>)
 8005802:	4826      	ldr	r0, [pc, #152]	; (800589c <__d2b+0xb4>)
 8005804:	f240 310a 	movw	r1, #778	; 0x30a
 8005808:	f000 fa70 	bl	8005cec <__assert_func>
 800580c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005810:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005814:	bb35      	cbnz	r5, 8005864 <__d2b+0x7c>
 8005816:	2e00      	cmp	r6, #0
 8005818:	9301      	str	r3, [sp, #4]
 800581a:	d028      	beq.n	800586e <__d2b+0x86>
 800581c:	4668      	mov	r0, sp
 800581e:	9600      	str	r6, [sp, #0]
 8005820:	f7ff fd8c 	bl	800533c <__lo0bits>
 8005824:	9900      	ldr	r1, [sp, #0]
 8005826:	b300      	cbz	r0, 800586a <__d2b+0x82>
 8005828:	9a01      	ldr	r2, [sp, #4]
 800582a:	f1c0 0320 	rsb	r3, r0, #32
 800582e:	fa02 f303 	lsl.w	r3, r2, r3
 8005832:	430b      	orrs	r3, r1
 8005834:	40c2      	lsrs	r2, r0
 8005836:	6163      	str	r3, [r4, #20]
 8005838:	9201      	str	r2, [sp, #4]
 800583a:	9b01      	ldr	r3, [sp, #4]
 800583c:	61a3      	str	r3, [r4, #24]
 800583e:	2b00      	cmp	r3, #0
 8005840:	bf14      	ite	ne
 8005842:	2202      	movne	r2, #2
 8005844:	2201      	moveq	r2, #1
 8005846:	6122      	str	r2, [r4, #16]
 8005848:	b1d5      	cbz	r5, 8005880 <__d2b+0x98>
 800584a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800584e:	4405      	add	r5, r0
 8005850:	f8c9 5000 	str.w	r5, [r9]
 8005854:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005858:	f8c8 0000 	str.w	r0, [r8]
 800585c:	4620      	mov	r0, r4
 800585e:	b003      	add	sp, #12
 8005860:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005864:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005868:	e7d5      	b.n	8005816 <__d2b+0x2e>
 800586a:	6161      	str	r1, [r4, #20]
 800586c:	e7e5      	b.n	800583a <__d2b+0x52>
 800586e:	a801      	add	r0, sp, #4
 8005870:	f7ff fd64 	bl	800533c <__lo0bits>
 8005874:	9b01      	ldr	r3, [sp, #4]
 8005876:	6163      	str	r3, [r4, #20]
 8005878:	2201      	movs	r2, #1
 800587a:	6122      	str	r2, [r4, #16]
 800587c:	3020      	adds	r0, #32
 800587e:	e7e3      	b.n	8005848 <__d2b+0x60>
 8005880:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005884:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005888:	f8c9 0000 	str.w	r0, [r9]
 800588c:	6918      	ldr	r0, [r3, #16]
 800588e:	f7ff fd35 	bl	80052fc <__hi0bits>
 8005892:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005896:	e7df      	b.n	8005858 <__d2b+0x70>
 8005898:	0800793b 	.word	0x0800793b
 800589c:	0800794c 	.word	0x0800794c

080058a0 <_calloc_r>:
 80058a0:	b513      	push	{r0, r1, r4, lr}
 80058a2:	434a      	muls	r2, r1
 80058a4:	4611      	mov	r1, r2
 80058a6:	9201      	str	r2, [sp, #4]
 80058a8:	f000 f85a 	bl	8005960 <_malloc_r>
 80058ac:	4604      	mov	r4, r0
 80058ae:	b118      	cbz	r0, 80058b8 <_calloc_r+0x18>
 80058b0:	9a01      	ldr	r2, [sp, #4]
 80058b2:	2100      	movs	r1, #0
 80058b4:	f7fe f94a 	bl	8003b4c <memset>
 80058b8:	4620      	mov	r0, r4
 80058ba:	b002      	add	sp, #8
 80058bc:	bd10      	pop	{r4, pc}
	...

080058c0 <_free_r>:
 80058c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058c2:	2900      	cmp	r1, #0
 80058c4:	d048      	beq.n	8005958 <_free_r+0x98>
 80058c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058ca:	9001      	str	r0, [sp, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f1a1 0404 	sub.w	r4, r1, #4
 80058d2:	bfb8      	it	lt
 80058d4:	18e4      	addlt	r4, r4, r3
 80058d6:	f000 fa65 	bl	8005da4 <__malloc_lock>
 80058da:	4a20      	ldr	r2, [pc, #128]	; (800595c <_free_r+0x9c>)
 80058dc:	9801      	ldr	r0, [sp, #4]
 80058de:	6813      	ldr	r3, [r2, #0]
 80058e0:	4615      	mov	r5, r2
 80058e2:	b933      	cbnz	r3, 80058f2 <_free_r+0x32>
 80058e4:	6063      	str	r3, [r4, #4]
 80058e6:	6014      	str	r4, [r2, #0]
 80058e8:	b003      	add	sp, #12
 80058ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058ee:	f000 ba5f 	b.w	8005db0 <__malloc_unlock>
 80058f2:	42a3      	cmp	r3, r4
 80058f4:	d90b      	bls.n	800590e <_free_r+0x4e>
 80058f6:	6821      	ldr	r1, [r4, #0]
 80058f8:	1862      	adds	r2, r4, r1
 80058fa:	4293      	cmp	r3, r2
 80058fc:	bf04      	itt	eq
 80058fe:	681a      	ldreq	r2, [r3, #0]
 8005900:	685b      	ldreq	r3, [r3, #4]
 8005902:	6063      	str	r3, [r4, #4]
 8005904:	bf04      	itt	eq
 8005906:	1852      	addeq	r2, r2, r1
 8005908:	6022      	streq	r2, [r4, #0]
 800590a:	602c      	str	r4, [r5, #0]
 800590c:	e7ec      	b.n	80058e8 <_free_r+0x28>
 800590e:	461a      	mov	r2, r3
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	b10b      	cbz	r3, 8005918 <_free_r+0x58>
 8005914:	42a3      	cmp	r3, r4
 8005916:	d9fa      	bls.n	800590e <_free_r+0x4e>
 8005918:	6811      	ldr	r1, [r2, #0]
 800591a:	1855      	adds	r5, r2, r1
 800591c:	42a5      	cmp	r5, r4
 800591e:	d10b      	bne.n	8005938 <_free_r+0x78>
 8005920:	6824      	ldr	r4, [r4, #0]
 8005922:	4421      	add	r1, r4
 8005924:	1854      	adds	r4, r2, r1
 8005926:	42a3      	cmp	r3, r4
 8005928:	6011      	str	r1, [r2, #0]
 800592a:	d1dd      	bne.n	80058e8 <_free_r+0x28>
 800592c:	681c      	ldr	r4, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	6053      	str	r3, [r2, #4]
 8005932:	4421      	add	r1, r4
 8005934:	6011      	str	r1, [r2, #0]
 8005936:	e7d7      	b.n	80058e8 <_free_r+0x28>
 8005938:	d902      	bls.n	8005940 <_free_r+0x80>
 800593a:	230c      	movs	r3, #12
 800593c:	6003      	str	r3, [r0, #0]
 800593e:	e7d3      	b.n	80058e8 <_free_r+0x28>
 8005940:	6825      	ldr	r5, [r4, #0]
 8005942:	1961      	adds	r1, r4, r5
 8005944:	428b      	cmp	r3, r1
 8005946:	bf04      	itt	eq
 8005948:	6819      	ldreq	r1, [r3, #0]
 800594a:	685b      	ldreq	r3, [r3, #4]
 800594c:	6063      	str	r3, [r4, #4]
 800594e:	bf04      	itt	eq
 8005950:	1949      	addeq	r1, r1, r5
 8005952:	6021      	streq	r1, [r4, #0]
 8005954:	6054      	str	r4, [r2, #4]
 8005956:	e7c7      	b.n	80058e8 <_free_r+0x28>
 8005958:	b003      	add	sp, #12
 800595a:	bd30      	pop	{r4, r5, pc}
 800595c:	20000200 	.word	0x20000200

08005960 <_malloc_r>:
 8005960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005962:	1ccd      	adds	r5, r1, #3
 8005964:	f025 0503 	bic.w	r5, r5, #3
 8005968:	3508      	adds	r5, #8
 800596a:	2d0c      	cmp	r5, #12
 800596c:	bf38      	it	cc
 800596e:	250c      	movcc	r5, #12
 8005970:	2d00      	cmp	r5, #0
 8005972:	4606      	mov	r6, r0
 8005974:	db01      	blt.n	800597a <_malloc_r+0x1a>
 8005976:	42a9      	cmp	r1, r5
 8005978:	d903      	bls.n	8005982 <_malloc_r+0x22>
 800597a:	230c      	movs	r3, #12
 800597c:	6033      	str	r3, [r6, #0]
 800597e:	2000      	movs	r0, #0
 8005980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005982:	f000 fa0f 	bl	8005da4 <__malloc_lock>
 8005986:	4921      	ldr	r1, [pc, #132]	; (8005a0c <_malloc_r+0xac>)
 8005988:	680a      	ldr	r2, [r1, #0]
 800598a:	4614      	mov	r4, r2
 800598c:	b99c      	cbnz	r4, 80059b6 <_malloc_r+0x56>
 800598e:	4f20      	ldr	r7, [pc, #128]	; (8005a10 <_malloc_r+0xb0>)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	b923      	cbnz	r3, 800599e <_malloc_r+0x3e>
 8005994:	4621      	mov	r1, r4
 8005996:	4630      	mov	r0, r6
 8005998:	f000 f998 	bl	8005ccc <_sbrk_r>
 800599c:	6038      	str	r0, [r7, #0]
 800599e:	4629      	mov	r1, r5
 80059a0:	4630      	mov	r0, r6
 80059a2:	f000 f993 	bl	8005ccc <_sbrk_r>
 80059a6:	1c43      	adds	r3, r0, #1
 80059a8:	d123      	bne.n	80059f2 <_malloc_r+0x92>
 80059aa:	230c      	movs	r3, #12
 80059ac:	6033      	str	r3, [r6, #0]
 80059ae:	4630      	mov	r0, r6
 80059b0:	f000 f9fe 	bl	8005db0 <__malloc_unlock>
 80059b4:	e7e3      	b.n	800597e <_malloc_r+0x1e>
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	1b5b      	subs	r3, r3, r5
 80059ba:	d417      	bmi.n	80059ec <_malloc_r+0x8c>
 80059bc:	2b0b      	cmp	r3, #11
 80059be:	d903      	bls.n	80059c8 <_malloc_r+0x68>
 80059c0:	6023      	str	r3, [r4, #0]
 80059c2:	441c      	add	r4, r3
 80059c4:	6025      	str	r5, [r4, #0]
 80059c6:	e004      	b.n	80059d2 <_malloc_r+0x72>
 80059c8:	6863      	ldr	r3, [r4, #4]
 80059ca:	42a2      	cmp	r2, r4
 80059cc:	bf0c      	ite	eq
 80059ce:	600b      	streq	r3, [r1, #0]
 80059d0:	6053      	strne	r3, [r2, #4]
 80059d2:	4630      	mov	r0, r6
 80059d4:	f000 f9ec 	bl	8005db0 <__malloc_unlock>
 80059d8:	f104 000b 	add.w	r0, r4, #11
 80059dc:	1d23      	adds	r3, r4, #4
 80059de:	f020 0007 	bic.w	r0, r0, #7
 80059e2:	1ac2      	subs	r2, r0, r3
 80059e4:	d0cc      	beq.n	8005980 <_malloc_r+0x20>
 80059e6:	1a1b      	subs	r3, r3, r0
 80059e8:	50a3      	str	r3, [r4, r2]
 80059ea:	e7c9      	b.n	8005980 <_malloc_r+0x20>
 80059ec:	4622      	mov	r2, r4
 80059ee:	6864      	ldr	r4, [r4, #4]
 80059f0:	e7cc      	b.n	800598c <_malloc_r+0x2c>
 80059f2:	1cc4      	adds	r4, r0, #3
 80059f4:	f024 0403 	bic.w	r4, r4, #3
 80059f8:	42a0      	cmp	r0, r4
 80059fa:	d0e3      	beq.n	80059c4 <_malloc_r+0x64>
 80059fc:	1a21      	subs	r1, r4, r0
 80059fe:	4630      	mov	r0, r6
 8005a00:	f000 f964 	bl	8005ccc <_sbrk_r>
 8005a04:	3001      	adds	r0, #1
 8005a06:	d1dd      	bne.n	80059c4 <_malloc_r+0x64>
 8005a08:	e7cf      	b.n	80059aa <_malloc_r+0x4a>
 8005a0a:	bf00      	nop
 8005a0c:	20000200 	.word	0x20000200
 8005a10:	20000204 	.word	0x20000204

08005a14 <__ssputs_r>:
 8005a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a18:	688e      	ldr	r6, [r1, #8]
 8005a1a:	429e      	cmp	r6, r3
 8005a1c:	4682      	mov	sl, r0
 8005a1e:	460c      	mov	r4, r1
 8005a20:	4690      	mov	r8, r2
 8005a22:	461f      	mov	r7, r3
 8005a24:	d838      	bhi.n	8005a98 <__ssputs_r+0x84>
 8005a26:	898a      	ldrh	r2, [r1, #12]
 8005a28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a2c:	d032      	beq.n	8005a94 <__ssputs_r+0x80>
 8005a2e:	6825      	ldr	r5, [r4, #0]
 8005a30:	6909      	ldr	r1, [r1, #16]
 8005a32:	eba5 0901 	sub.w	r9, r5, r1
 8005a36:	6965      	ldr	r5, [r4, #20]
 8005a38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a40:	3301      	adds	r3, #1
 8005a42:	444b      	add	r3, r9
 8005a44:	106d      	asrs	r5, r5, #1
 8005a46:	429d      	cmp	r5, r3
 8005a48:	bf38      	it	cc
 8005a4a:	461d      	movcc	r5, r3
 8005a4c:	0553      	lsls	r3, r2, #21
 8005a4e:	d531      	bpl.n	8005ab4 <__ssputs_r+0xa0>
 8005a50:	4629      	mov	r1, r5
 8005a52:	f7ff ff85 	bl	8005960 <_malloc_r>
 8005a56:	4606      	mov	r6, r0
 8005a58:	b950      	cbnz	r0, 8005a70 <__ssputs_r+0x5c>
 8005a5a:	230c      	movs	r3, #12
 8005a5c:	f8ca 3000 	str.w	r3, [sl]
 8005a60:	89a3      	ldrh	r3, [r4, #12]
 8005a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a66:	81a3      	strh	r3, [r4, #12]
 8005a68:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a70:	6921      	ldr	r1, [r4, #16]
 8005a72:	464a      	mov	r2, r9
 8005a74:	f7ff fb88 	bl	8005188 <memcpy>
 8005a78:	89a3      	ldrh	r3, [r4, #12]
 8005a7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a82:	81a3      	strh	r3, [r4, #12]
 8005a84:	6126      	str	r6, [r4, #16]
 8005a86:	6165      	str	r5, [r4, #20]
 8005a88:	444e      	add	r6, r9
 8005a8a:	eba5 0509 	sub.w	r5, r5, r9
 8005a8e:	6026      	str	r6, [r4, #0]
 8005a90:	60a5      	str	r5, [r4, #8]
 8005a92:	463e      	mov	r6, r7
 8005a94:	42be      	cmp	r6, r7
 8005a96:	d900      	bls.n	8005a9a <__ssputs_r+0x86>
 8005a98:	463e      	mov	r6, r7
 8005a9a:	4632      	mov	r2, r6
 8005a9c:	6820      	ldr	r0, [r4, #0]
 8005a9e:	4641      	mov	r1, r8
 8005aa0:	f000 f966 	bl	8005d70 <memmove>
 8005aa4:	68a3      	ldr	r3, [r4, #8]
 8005aa6:	6822      	ldr	r2, [r4, #0]
 8005aa8:	1b9b      	subs	r3, r3, r6
 8005aaa:	4432      	add	r2, r6
 8005aac:	60a3      	str	r3, [r4, #8]
 8005aae:	6022      	str	r2, [r4, #0]
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	e7db      	b.n	8005a6c <__ssputs_r+0x58>
 8005ab4:	462a      	mov	r2, r5
 8005ab6:	f000 f981 	bl	8005dbc <_realloc_r>
 8005aba:	4606      	mov	r6, r0
 8005abc:	2800      	cmp	r0, #0
 8005abe:	d1e1      	bne.n	8005a84 <__ssputs_r+0x70>
 8005ac0:	6921      	ldr	r1, [r4, #16]
 8005ac2:	4650      	mov	r0, sl
 8005ac4:	f7ff fefc 	bl	80058c0 <_free_r>
 8005ac8:	e7c7      	b.n	8005a5a <__ssputs_r+0x46>
	...

08005acc <_svfiprintf_r>:
 8005acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad0:	4698      	mov	r8, r3
 8005ad2:	898b      	ldrh	r3, [r1, #12]
 8005ad4:	061b      	lsls	r3, r3, #24
 8005ad6:	b09d      	sub	sp, #116	; 0x74
 8005ad8:	4607      	mov	r7, r0
 8005ada:	460d      	mov	r5, r1
 8005adc:	4614      	mov	r4, r2
 8005ade:	d50e      	bpl.n	8005afe <_svfiprintf_r+0x32>
 8005ae0:	690b      	ldr	r3, [r1, #16]
 8005ae2:	b963      	cbnz	r3, 8005afe <_svfiprintf_r+0x32>
 8005ae4:	2140      	movs	r1, #64	; 0x40
 8005ae6:	f7ff ff3b 	bl	8005960 <_malloc_r>
 8005aea:	6028      	str	r0, [r5, #0]
 8005aec:	6128      	str	r0, [r5, #16]
 8005aee:	b920      	cbnz	r0, 8005afa <_svfiprintf_r+0x2e>
 8005af0:	230c      	movs	r3, #12
 8005af2:	603b      	str	r3, [r7, #0]
 8005af4:	f04f 30ff 	mov.w	r0, #4294967295
 8005af8:	e0d1      	b.n	8005c9e <_svfiprintf_r+0x1d2>
 8005afa:	2340      	movs	r3, #64	; 0x40
 8005afc:	616b      	str	r3, [r5, #20]
 8005afe:	2300      	movs	r3, #0
 8005b00:	9309      	str	r3, [sp, #36]	; 0x24
 8005b02:	2320      	movs	r3, #32
 8005b04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b08:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b0c:	2330      	movs	r3, #48	; 0x30
 8005b0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005cb8 <_svfiprintf_r+0x1ec>
 8005b12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b16:	f04f 0901 	mov.w	r9, #1
 8005b1a:	4623      	mov	r3, r4
 8005b1c:	469a      	mov	sl, r3
 8005b1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b22:	b10a      	cbz	r2, 8005b28 <_svfiprintf_r+0x5c>
 8005b24:	2a25      	cmp	r2, #37	; 0x25
 8005b26:	d1f9      	bne.n	8005b1c <_svfiprintf_r+0x50>
 8005b28:	ebba 0b04 	subs.w	fp, sl, r4
 8005b2c:	d00b      	beq.n	8005b46 <_svfiprintf_r+0x7a>
 8005b2e:	465b      	mov	r3, fp
 8005b30:	4622      	mov	r2, r4
 8005b32:	4629      	mov	r1, r5
 8005b34:	4638      	mov	r0, r7
 8005b36:	f7ff ff6d 	bl	8005a14 <__ssputs_r>
 8005b3a:	3001      	adds	r0, #1
 8005b3c:	f000 80aa 	beq.w	8005c94 <_svfiprintf_r+0x1c8>
 8005b40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b42:	445a      	add	r2, fp
 8005b44:	9209      	str	r2, [sp, #36]	; 0x24
 8005b46:	f89a 3000 	ldrb.w	r3, [sl]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f000 80a2 	beq.w	8005c94 <_svfiprintf_r+0x1c8>
 8005b50:	2300      	movs	r3, #0
 8005b52:	f04f 32ff 	mov.w	r2, #4294967295
 8005b56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b5a:	f10a 0a01 	add.w	sl, sl, #1
 8005b5e:	9304      	str	r3, [sp, #16]
 8005b60:	9307      	str	r3, [sp, #28]
 8005b62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b66:	931a      	str	r3, [sp, #104]	; 0x68
 8005b68:	4654      	mov	r4, sl
 8005b6a:	2205      	movs	r2, #5
 8005b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b70:	4851      	ldr	r0, [pc, #324]	; (8005cb8 <_svfiprintf_r+0x1ec>)
 8005b72:	f7fa fb35 	bl	80001e0 <memchr>
 8005b76:	9a04      	ldr	r2, [sp, #16]
 8005b78:	b9d8      	cbnz	r0, 8005bb2 <_svfiprintf_r+0xe6>
 8005b7a:	06d0      	lsls	r0, r2, #27
 8005b7c:	bf44      	itt	mi
 8005b7e:	2320      	movmi	r3, #32
 8005b80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b84:	0711      	lsls	r1, r2, #28
 8005b86:	bf44      	itt	mi
 8005b88:	232b      	movmi	r3, #43	; 0x2b
 8005b8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b8e:	f89a 3000 	ldrb.w	r3, [sl]
 8005b92:	2b2a      	cmp	r3, #42	; 0x2a
 8005b94:	d015      	beq.n	8005bc2 <_svfiprintf_r+0xf6>
 8005b96:	9a07      	ldr	r2, [sp, #28]
 8005b98:	4654      	mov	r4, sl
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	f04f 0c0a 	mov.w	ip, #10
 8005ba0:	4621      	mov	r1, r4
 8005ba2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ba6:	3b30      	subs	r3, #48	; 0x30
 8005ba8:	2b09      	cmp	r3, #9
 8005baa:	d94e      	bls.n	8005c4a <_svfiprintf_r+0x17e>
 8005bac:	b1b0      	cbz	r0, 8005bdc <_svfiprintf_r+0x110>
 8005bae:	9207      	str	r2, [sp, #28]
 8005bb0:	e014      	b.n	8005bdc <_svfiprintf_r+0x110>
 8005bb2:	eba0 0308 	sub.w	r3, r0, r8
 8005bb6:	fa09 f303 	lsl.w	r3, r9, r3
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	9304      	str	r3, [sp, #16]
 8005bbe:	46a2      	mov	sl, r4
 8005bc0:	e7d2      	b.n	8005b68 <_svfiprintf_r+0x9c>
 8005bc2:	9b03      	ldr	r3, [sp, #12]
 8005bc4:	1d19      	adds	r1, r3, #4
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	9103      	str	r1, [sp, #12]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	bfbb      	ittet	lt
 8005bce:	425b      	neglt	r3, r3
 8005bd0:	f042 0202 	orrlt.w	r2, r2, #2
 8005bd4:	9307      	strge	r3, [sp, #28]
 8005bd6:	9307      	strlt	r3, [sp, #28]
 8005bd8:	bfb8      	it	lt
 8005bda:	9204      	strlt	r2, [sp, #16]
 8005bdc:	7823      	ldrb	r3, [r4, #0]
 8005bde:	2b2e      	cmp	r3, #46	; 0x2e
 8005be0:	d10c      	bne.n	8005bfc <_svfiprintf_r+0x130>
 8005be2:	7863      	ldrb	r3, [r4, #1]
 8005be4:	2b2a      	cmp	r3, #42	; 0x2a
 8005be6:	d135      	bne.n	8005c54 <_svfiprintf_r+0x188>
 8005be8:	9b03      	ldr	r3, [sp, #12]
 8005bea:	1d1a      	adds	r2, r3, #4
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	9203      	str	r2, [sp, #12]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	bfb8      	it	lt
 8005bf4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005bf8:	3402      	adds	r4, #2
 8005bfa:	9305      	str	r3, [sp, #20]
 8005bfc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005cc8 <_svfiprintf_r+0x1fc>
 8005c00:	7821      	ldrb	r1, [r4, #0]
 8005c02:	2203      	movs	r2, #3
 8005c04:	4650      	mov	r0, sl
 8005c06:	f7fa faeb 	bl	80001e0 <memchr>
 8005c0a:	b140      	cbz	r0, 8005c1e <_svfiprintf_r+0x152>
 8005c0c:	2340      	movs	r3, #64	; 0x40
 8005c0e:	eba0 000a 	sub.w	r0, r0, sl
 8005c12:	fa03 f000 	lsl.w	r0, r3, r0
 8005c16:	9b04      	ldr	r3, [sp, #16]
 8005c18:	4303      	orrs	r3, r0
 8005c1a:	3401      	adds	r4, #1
 8005c1c:	9304      	str	r3, [sp, #16]
 8005c1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c22:	4826      	ldr	r0, [pc, #152]	; (8005cbc <_svfiprintf_r+0x1f0>)
 8005c24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c28:	2206      	movs	r2, #6
 8005c2a:	f7fa fad9 	bl	80001e0 <memchr>
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	d038      	beq.n	8005ca4 <_svfiprintf_r+0x1d8>
 8005c32:	4b23      	ldr	r3, [pc, #140]	; (8005cc0 <_svfiprintf_r+0x1f4>)
 8005c34:	bb1b      	cbnz	r3, 8005c7e <_svfiprintf_r+0x1b2>
 8005c36:	9b03      	ldr	r3, [sp, #12]
 8005c38:	3307      	adds	r3, #7
 8005c3a:	f023 0307 	bic.w	r3, r3, #7
 8005c3e:	3308      	adds	r3, #8
 8005c40:	9303      	str	r3, [sp, #12]
 8005c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c44:	4433      	add	r3, r6
 8005c46:	9309      	str	r3, [sp, #36]	; 0x24
 8005c48:	e767      	b.n	8005b1a <_svfiprintf_r+0x4e>
 8005c4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c4e:	460c      	mov	r4, r1
 8005c50:	2001      	movs	r0, #1
 8005c52:	e7a5      	b.n	8005ba0 <_svfiprintf_r+0xd4>
 8005c54:	2300      	movs	r3, #0
 8005c56:	3401      	adds	r4, #1
 8005c58:	9305      	str	r3, [sp, #20]
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	f04f 0c0a 	mov.w	ip, #10
 8005c60:	4620      	mov	r0, r4
 8005c62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c66:	3a30      	subs	r2, #48	; 0x30
 8005c68:	2a09      	cmp	r2, #9
 8005c6a:	d903      	bls.n	8005c74 <_svfiprintf_r+0x1a8>
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d0c5      	beq.n	8005bfc <_svfiprintf_r+0x130>
 8005c70:	9105      	str	r1, [sp, #20]
 8005c72:	e7c3      	b.n	8005bfc <_svfiprintf_r+0x130>
 8005c74:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c78:	4604      	mov	r4, r0
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e7f0      	b.n	8005c60 <_svfiprintf_r+0x194>
 8005c7e:	ab03      	add	r3, sp, #12
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	462a      	mov	r2, r5
 8005c84:	4b0f      	ldr	r3, [pc, #60]	; (8005cc4 <_svfiprintf_r+0x1f8>)
 8005c86:	a904      	add	r1, sp, #16
 8005c88:	4638      	mov	r0, r7
 8005c8a:	f7fe f807 	bl	8003c9c <_printf_float>
 8005c8e:	1c42      	adds	r2, r0, #1
 8005c90:	4606      	mov	r6, r0
 8005c92:	d1d6      	bne.n	8005c42 <_svfiprintf_r+0x176>
 8005c94:	89ab      	ldrh	r3, [r5, #12]
 8005c96:	065b      	lsls	r3, r3, #25
 8005c98:	f53f af2c 	bmi.w	8005af4 <_svfiprintf_r+0x28>
 8005c9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c9e:	b01d      	add	sp, #116	; 0x74
 8005ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ca4:	ab03      	add	r3, sp, #12
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	462a      	mov	r2, r5
 8005caa:	4b06      	ldr	r3, [pc, #24]	; (8005cc4 <_svfiprintf_r+0x1f8>)
 8005cac:	a904      	add	r1, sp, #16
 8005cae:	4638      	mov	r0, r7
 8005cb0:	f7fe fa98 	bl	80041e4 <_printf_i>
 8005cb4:	e7eb      	b.n	8005c8e <_svfiprintf_r+0x1c2>
 8005cb6:	bf00      	nop
 8005cb8:	08007aac 	.word	0x08007aac
 8005cbc:	08007ab6 	.word	0x08007ab6
 8005cc0:	08003c9d 	.word	0x08003c9d
 8005cc4:	08005a15 	.word	0x08005a15
 8005cc8:	08007ab2 	.word	0x08007ab2

08005ccc <_sbrk_r>:
 8005ccc:	b538      	push	{r3, r4, r5, lr}
 8005cce:	4d06      	ldr	r5, [pc, #24]	; (8005ce8 <_sbrk_r+0x1c>)
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	4604      	mov	r4, r0
 8005cd4:	4608      	mov	r0, r1
 8005cd6:	602b      	str	r3, [r5, #0]
 8005cd8:	f7fc fbf8 	bl	80024cc <_sbrk>
 8005cdc:	1c43      	adds	r3, r0, #1
 8005cde:	d102      	bne.n	8005ce6 <_sbrk_r+0x1a>
 8005ce0:	682b      	ldr	r3, [r5, #0]
 8005ce2:	b103      	cbz	r3, 8005ce6 <_sbrk_r+0x1a>
 8005ce4:	6023      	str	r3, [r4, #0]
 8005ce6:	bd38      	pop	{r3, r4, r5, pc}
 8005ce8:	2000024c 	.word	0x2000024c

08005cec <__assert_func>:
 8005cec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005cee:	4614      	mov	r4, r2
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	4b09      	ldr	r3, [pc, #36]	; (8005d18 <__assert_func+0x2c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4605      	mov	r5, r0
 8005cf8:	68d8      	ldr	r0, [r3, #12]
 8005cfa:	b14c      	cbz	r4, 8005d10 <__assert_func+0x24>
 8005cfc:	4b07      	ldr	r3, [pc, #28]	; (8005d1c <__assert_func+0x30>)
 8005cfe:	9100      	str	r1, [sp, #0]
 8005d00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005d04:	4906      	ldr	r1, [pc, #24]	; (8005d20 <__assert_func+0x34>)
 8005d06:	462b      	mov	r3, r5
 8005d08:	f000 f80e 	bl	8005d28 <fiprintf>
 8005d0c:	f000 faa4 	bl	8006258 <abort>
 8005d10:	4b04      	ldr	r3, [pc, #16]	; (8005d24 <__assert_func+0x38>)
 8005d12:	461c      	mov	r4, r3
 8005d14:	e7f3      	b.n	8005cfe <__assert_func+0x12>
 8005d16:	bf00      	nop
 8005d18:	20000008 	.word	0x20000008
 8005d1c:	08007abd 	.word	0x08007abd
 8005d20:	08007aca 	.word	0x08007aca
 8005d24:	08007af8 	.word	0x08007af8

08005d28 <fiprintf>:
 8005d28:	b40e      	push	{r1, r2, r3}
 8005d2a:	b503      	push	{r0, r1, lr}
 8005d2c:	4601      	mov	r1, r0
 8005d2e:	ab03      	add	r3, sp, #12
 8005d30:	4805      	ldr	r0, [pc, #20]	; (8005d48 <fiprintf+0x20>)
 8005d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d36:	6800      	ldr	r0, [r0, #0]
 8005d38:	9301      	str	r3, [sp, #4]
 8005d3a:	f000 f88f 	bl	8005e5c <_vfiprintf_r>
 8005d3e:	b002      	add	sp, #8
 8005d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d44:	b003      	add	sp, #12
 8005d46:	4770      	bx	lr
 8005d48:	20000008 	.word	0x20000008

08005d4c <__ascii_mbtowc>:
 8005d4c:	b082      	sub	sp, #8
 8005d4e:	b901      	cbnz	r1, 8005d52 <__ascii_mbtowc+0x6>
 8005d50:	a901      	add	r1, sp, #4
 8005d52:	b142      	cbz	r2, 8005d66 <__ascii_mbtowc+0x1a>
 8005d54:	b14b      	cbz	r3, 8005d6a <__ascii_mbtowc+0x1e>
 8005d56:	7813      	ldrb	r3, [r2, #0]
 8005d58:	600b      	str	r3, [r1, #0]
 8005d5a:	7812      	ldrb	r2, [r2, #0]
 8005d5c:	1e10      	subs	r0, r2, #0
 8005d5e:	bf18      	it	ne
 8005d60:	2001      	movne	r0, #1
 8005d62:	b002      	add	sp, #8
 8005d64:	4770      	bx	lr
 8005d66:	4610      	mov	r0, r2
 8005d68:	e7fb      	b.n	8005d62 <__ascii_mbtowc+0x16>
 8005d6a:	f06f 0001 	mvn.w	r0, #1
 8005d6e:	e7f8      	b.n	8005d62 <__ascii_mbtowc+0x16>

08005d70 <memmove>:
 8005d70:	4288      	cmp	r0, r1
 8005d72:	b510      	push	{r4, lr}
 8005d74:	eb01 0402 	add.w	r4, r1, r2
 8005d78:	d902      	bls.n	8005d80 <memmove+0x10>
 8005d7a:	4284      	cmp	r4, r0
 8005d7c:	4623      	mov	r3, r4
 8005d7e:	d807      	bhi.n	8005d90 <memmove+0x20>
 8005d80:	1e43      	subs	r3, r0, #1
 8005d82:	42a1      	cmp	r1, r4
 8005d84:	d008      	beq.n	8005d98 <memmove+0x28>
 8005d86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d8e:	e7f8      	b.n	8005d82 <memmove+0x12>
 8005d90:	4402      	add	r2, r0
 8005d92:	4601      	mov	r1, r0
 8005d94:	428a      	cmp	r2, r1
 8005d96:	d100      	bne.n	8005d9a <memmove+0x2a>
 8005d98:	bd10      	pop	{r4, pc}
 8005d9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005da2:	e7f7      	b.n	8005d94 <memmove+0x24>

08005da4 <__malloc_lock>:
 8005da4:	4801      	ldr	r0, [pc, #4]	; (8005dac <__malloc_lock+0x8>)
 8005da6:	f000 bc17 	b.w	80065d8 <__retarget_lock_acquire_recursive>
 8005daa:	bf00      	nop
 8005dac:	20000254 	.word	0x20000254

08005db0 <__malloc_unlock>:
 8005db0:	4801      	ldr	r0, [pc, #4]	; (8005db8 <__malloc_unlock+0x8>)
 8005db2:	f000 bc12 	b.w	80065da <__retarget_lock_release_recursive>
 8005db6:	bf00      	nop
 8005db8:	20000254 	.word	0x20000254

08005dbc <_realloc_r>:
 8005dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dbe:	4607      	mov	r7, r0
 8005dc0:	4614      	mov	r4, r2
 8005dc2:	460e      	mov	r6, r1
 8005dc4:	b921      	cbnz	r1, 8005dd0 <_realloc_r+0x14>
 8005dc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005dca:	4611      	mov	r1, r2
 8005dcc:	f7ff bdc8 	b.w	8005960 <_malloc_r>
 8005dd0:	b922      	cbnz	r2, 8005ddc <_realloc_r+0x20>
 8005dd2:	f7ff fd75 	bl	80058c0 <_free_r>
 8005dd6:	4625      	mov	r5, r4
 8005dd8:	4628      	mov	r0, r5
 8005dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ddc:	f000 fc62 	bl	80066a4 <_malloc_usable_size_r>
 8005de0:	42a0      	cmp	r0, r4
 8005de2:	d20f      	bcs.n	8005e04 <_realloc_r+0x48>
 8005de4:	4621      	mov	r1, r4
 8005de6:	4638      	mov	r0, r7
 8005de8:	f7ff fdba 	bl	8005960 <_malloc_r>
 8005dec:	4605      	mov	r5, r0
 8005dee:	2800      	cmp	r0, #0
 8005df0:	d0f2      	beq.n	8005dd8 <_realloc_r+0x1c>
 8005df2:	4631      	mov	r1, r6
 8005df4:	4622      	mov	r2, r4
 8005df6:	f7ff f9c7 	bl	8005188 <memcpy>
 8005dfa:	4631      	mov	r1, r6
 8005dfc:	4638      	mov	r0, r7
 8005dfe:	f7ff fd5f 	bl	80058c0 <_free_r>
 8005e02:	e7e9      	b.n	8005dd8 <_realloc_r+0x1c>
 8005e04:	4635      	mov	r5, r6
 8005e06:	e7e7      	b.n	8005dd8 <_realloc_r+0x1c>

08005e08 <__sfputc_r>:
 8005e08:	6893      	ldr	r3, [r2, #8]
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	b410      	push	{r4}
 8005e10:	6093      	str	r3, [r2, #8]
 8005e12:	da08      	bge.n	8005e26 <__sfputc_r+0x1e>
 8005e14:	6994      	ldr	r4, [r2, #24]
 8005e16:	42a3      	cmp	r3, r4
 8005e18:	db01      	blt.n	8005e1e <__sfputc_r+0x16>
 8005e1a:	290a      	cmp	r1, #10
 8005e1c:	d103      	bne.n	8005e26 <__sfputc_r+0x1e>
 8005e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e22:	f000 b94b 	b.w	80060bc <__swbuf_r>
 8005e26:	6813      	ldr	r3, [r2, #0]
 8005e28:	1c58      	adds	r0, r3, #1
 8005e2a:	6010      	str	r0, [r2, #0]
 8005e2c:	7019      	strb	r1, [r3, #0]
 8005e2e:	4608      	mov	r0, r1
 8005e30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <__sfputs_r>:
 8005e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e38:	4606      	mov	r6, r0
 8005e3a:	460f      	mov	r7, r1
 8005e3c:	4614      	mov	r4, r2
 8005e3e:	18d5      	adds	r5, r2, r3
 8005e40:	42ac      	cmp	r4, r5
 8005e42:	d101      	bne.n	8005e48 <__sfputs_r+0x12>
 8005e44:	2000      	movs	r0, #0
 8005e46:	e007      	b.n	8005e58 <__sfputs_r+0x22>
 8005e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e4c:	463a      	mov	r2, r7
 8005e4e:	4630      	mov	r0, r6
 8005e50:	f7ff ffda 	bl	8005e08 <__sfputc_r>
 8005e54:	1c43      	adds	r3, r0, #1
 8005e56:	d1f3      	bne.n	8005e40 <__sfputs_r+0xa>
 8005e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e5c <_vfiprintf_r>:
 8005e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e60:	460d      	mov	r5, r1
 8005e62:	b09d      	sub	sp, #116	; 0x74
 8005e64:	4614      	mov	r4, r2
 8005e66:	4698      	mov	r8, r3
 8005e68:	4606      	mov	r6, r0
 8005e6a:	b118      	cbz	r0, 8005e74 <_vfiprintf_r+0x18>
 8005e6c:	6983      	ldr	r3, [r0, #24]
 8005e6e:	b90b      	cbnz	r3, 8005e74 <_vfiprintf_r+0x18>
 8005e70:	f000 fb14 	bl	800649c <__sinit>
 8005e74:	4b89      	ldr	r3, [pc, #548]	; (800609c <_vfiprintf_r+0x240>)
 8005e76:	429d      	cmp	r5, r3
 8005e78:	d11b      	bne.n	8005eb2 <_vfiprintf_r+0x56>
 8005e7a:	6875      	ldr	r5, [r6, #4]
 8005e7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e7e:	07d9      	lsls	r1, r3, #31
 8005e80:	d405      	bmi.n	8005e8e <_vfiprintf_r+0x32>
 8005e82:	89ab      	ldrh	r3, [r5, #12]
 8005e84:	059a      	lsls	r2, r3, #22
 8005e86:	d402      	bmi.n	8005e8e <_vfiprintf_r+0x32>
 8005e88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e8a:	f000 fba5 	bl	80065d8 <__retarget_lock_acquire_recursive>
 8005e8e:	89ab      	ldrh	r3, [r5, #12]
 8005e90:	071b      	lsls	r3, r3, #28
 8005e92:	d501      	bpl.n	8005e98 <_vfiprintf_r+0x3c>
 8005e94:	692b      	ldr	r3, [r5, #16]
 8005e96:	b9eb      	cbnz	r3, 8005ed4 <_vfiprintf_r+0x78>
 8005e98:	4629      	mov	r1, r5
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	f000 f96e 	bl	800617c <__swsetup_r>
 8005ea0:	b1c0      	cbz	r0, 8005ed4 <_vfiprintf_r+0x78>
 8005ea2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ea4:	07dc      	lsls	r4, r3, #31
 8005ea6:	d50e      	bpl.n	8005ec6 <_vfiprintf_r+0x6a>
 8005ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eac:	b01d      	add	sp, #116	; 0x74
 8005eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb2:	4b7b      	ldr	r3, [pc, #492]	; (80060a0 <_vfiprintf_r+0x244>)
 8005eb4:	429d      	cmp	r5, r3
 8005eb6:	d101      	bne.n	8005ebc <_vfiprintf_r+0x60>
 8005eb8:	68b5      	ldr	r5, [r6, #8]
 8005eba:	e7df      	b.n	8005e7c <_vfiprintf_r+0x20>
 8005ebc:	4b79      	ldr	r3, [pc, #484]	; (80060a4 <_vfiprintf_r+0x248>)
 8005ebe:	429d      	cmp	r5, r3
 8005ec0:	bf08      	it	eq
 8005ec2:	68f5      	ldreq	r5, [r6, #12]
 8005ec4:	e7da      	b.n	8005e7c <_vfiprintf_r+0x20>
 8005ec6:	89ab      	ldrh	r3, [r5, #12]
 8005ec8:	0598      	lsls	r0, r3, #22
 8005eca:	d4ed      	bmi.n	8005ea8 <_vfiprintf_r+0x4c>
 8005ecc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ece:	f000 fb84 	bl	80065da <__retarget_lock_release_recursive>
 8005ed2:	e7e9      	b.n	8005ea8 <_vfiprintf_r+0x4c>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ed8:	2320      	movs	r3, #32
 8005eda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ede:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ee2:	2330      	movs	r3, #48	; 0x30
 8005ee4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80060a8 <_vfiprintf_r+0x24c>
 8005ee8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005eec:	f04f 0901 	mov.w	r9, #1
 8005ef0:	4623      	mov	r3, r4
 8005ef2:	469a      	mov	sl, r3
 8005ef4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ef8:	b10a      	cbz	r2, 8005efe <_vfiprintf_r+0xa2>
 8005efa:	2a25      	cmp	r2, #37	; 0x25
 8005efc:	d1f9      	bne.n	8005ef2 <_vfiprintf_r+0x96>
 8005efe:	ebba 0b04 	subs.w	fp, sl, r4
 8005f02:	d00b      	beq.n	8005f1c <_vfiprintf_r+0xc0>
 8005f04:	465b      	mov	r3, fp
 8005f06:	4622      	mov	r2, r4
 8005f08:	4629      	mov	r1, r5
 8005f0a:	4630      	mov	r0, r6
 8005f0c:	f7ff ff93 	bl	8005e36 <__sfputs_r>
 8005f10:	3001      	adds	r0, #1
 8005f12:	f000 80aa 	beq.w	800606a <_vfiprintf_r+0x20e>
 8005f16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f18:	445a      	add	r2, fp
 8005f1a:	9209      	str	r2, [sp, #36]	; 0x24
 8005f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 80a2 	beq.w	800606a <_vfiprintf_r+0x20e>
 8005f26:	2300      	movs	r3, #0
 8005f28:	f04f 32ff 	mov.w	r2, #4294967295
 8005f2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f30:	f10a 0a01 	add.w	sl, sl, #1
 8005f34:	9304      	str	r3, [sp, #16]
 8005f36:	9307      	str	r3, [sp, #28]
 8005f38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f3c:	931a      	str	r3, [sp, #104]	; 0x68
 8005f3e:	4654      	mov	r4, sl
 8005f40:	2205      	movs	r2, #5
 8005f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f46:	4858      	ldr	r0, [pc, #352]	; (80060a8 <_vfiprintf_r+0x24c>)
 8005f48:	f7fa f94a 	bl	80001e0 <memchr>
 8005f4c:	9a04      	ldr	r2, [sp, #16]
 8005f4e:	b9d8      	cbnz	r0, 8005f88 <_vfiprintf_r+0x12c>
 8005f50:	06d1      	lsls	r1, r2, #27
 8005f52:	bf44      	itt	mi
 8005f54:	2320      	movmi	r3, #32
 8005f56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f5a:	0713      	lsls	r3, r2, #28
 8005f5c:	bf44      	itt	mi
 8005f5e:	232b      	movmi	r3, #43	; 0x2b
 8005f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f64:	f89a 3000 	ldrb.w	r3, [sl]
 8005f68:	2b2a      	cmp	r3, #42	; 0x2a
 8005f6a:	d015      	beq.n	8005f98 <_vfiprintf_r+0x13c>
 8005f6c:	9a07      	ldr	r2, [sp, #28]
 8005f6e:	4654      	mov	r4, sl
 8005f70:	2000      	movs	r0, #0
 8005f72:	f04f 0c0a 	mov.w	ip, #10
 8005f76:	4621      	mov	r1, r4
 8005f78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f7c:	3b30      	subs	r3, #48	; 0x30
 8005f7e:	2b09      	cmp	r3, #9
 8005f80:	d94e      	bls.n	8006020 <_vfiprintf_r+0x1c4>
 8005f82:	b1b0      	cbz	r0, 8005fb2 <_vfiprintf_r+0x156>
 8005f84:	9207      	str	r2, [sp, #28]
 8005f86:	e014      	b.n	8005fb2 <_vfiprintf_r+0x156>
 8005f88:	eba0 0308 	sub.w	r3, r0, r8
 8005f8c:	fa09 f303 	lsl.w	r3, r9, r3
 8005f90:	4313      	orrs	r3, r2
 8005f92:	9304      	str	r3, [sp, #16]
 8005f94:	46a2      	mov	sl, r4
 8005f96:	e7d2      	b.n	8005f3e <_vfiprintf_r+0xe2>
 8005f98:	9b03      	ldr	r3, [sp, #12]
 8005f9a:	1d19      	adds	r1, r3, #4
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	9103      	str	r1, [sp, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	bfbb      	ittet	lt
 8005fa4:	425b      	neglt	r3, r3
 8005fa6:	f042 0202 	orrlt.w	r2, r2, #2
 8005faa:	9307      	strge	r3, [sp, #28]
 8005fac:	9307      	strlt	r3, [sp, #28]
 8005fae:	bfb8      	it	lt
 8005fb0:	9204      	strlt	r2, [sp, #16]
 8005fb2:	7823      	ldrb	r3, [r4, #0]
 8005fb4:	2b2e      	cmp	r3, #46	; 0x2e
 8005fb6:	d10c      	bne.n	8005fd2 <_vfiprintf_r+0x176>
 8005fb8:	7863      	ldrb	r3, [r4, #1]
 8005fba:	2b2a      	cmp	r3, #42	; 0x2a
 8005fbc:	d135      	bne.n	800602a <_vfiprintf_r+0x1ce>
 8005fbe:	9b03      	ldr	r3, [sp, #12]
 8005fc0:	1d1a      	adds	r2, r3, #4
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	9203      	str	r2, [sp, #12]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	bfb8      	it	lt
 8005fca:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fce:	3402      	adds	r4, #2
 8005fd0:	9305      	str	r3, [sp, #20]
 8005fd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80060b8 <_vfiprintf_r+0x25c>
 8005fd6:	7821      	ldrb	r1, [r4, #0]
 8005fd8:	2203      	movs	r2, #3
 8005fda:	4650      	mov	r0, sl
 8005fdc:	f7fa f900 	bl	80001e0 <memchr>
 8005fe0:	b140      	cbz	r0, 8005ff4 <_vfiprintf_r+0x198>
 8005fe2:	2340      	movs	r3, #64	; 0x40
 8005fe4:	eba0 000a 	sub.w	r0, r0, sl
 8005fe8:	fa03 f000 	lsl.w	r0, r3, r0
 8005fec:	9b04      	ldr	r3, [sp, #16]
 8005fee:	4303      	orrs	r3, r0
 8005ff0:	3401      	adds	r4, #1
 8005ff2:	9304      	str	r3, [sp, #16]
 8005ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ff8:	482c      	ldr	r0, [pc, #176]	; (80060ac <_vfiprintf_r+0x250>)
 8005ffa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ffe:	2206      	movs	r2, #6
 8006000:	f7fa f8ee 	bl	80001e0 <memchr>
 8006004:	2800      	cmp	r0, #0
 8006006:	d03f      	beq.n	8006088 <_vfiprintf_r+0x22c>
 8006008:	4b29      	ldr	r3, [pc, #164]	; (80060b0 <_vfiprintf_r+0x254>)
 800600a:	bb1b      	cbnz	r3, 8006054 <_vfiprintf_r+0x1f8>
 800600c:	9b03      	ldr	r3, [sp, #12]
 800600e:	3307      	adds	r3, #7
 8006010:	f023 0307 	bic.w	r3, r3, #7
 8006014:	3308      	adds	r3, #8
 8006016:	9303      	str	r3, [sp, #12]
 8006018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800601a:	443b      	add	r3, r7
 800601c:	9309      	str	r3, [sp, #36]	; 0x24
 800601e:	e767      	b.n	8005ef0 <_vfiprintf_r+0x94>
 8006020:	fb0c 3202 	mla	r2, ip, r2, r3
 8006024:	460c      	mov	r4, r1
 8006026:	2001      	movs	r0, #1
 8006028:	e7a5      	b.n	8005f76 <_vfiprintf_r+0x11a>
 800602a:	2300      	movs	r3, #0
 800602c:	3401      	adds	r4, #1
 800602e:	9305      	str	r3, [sp, #20]
 8006030:	4619      	mov	r1, r3
 8006032:	f04f 0c0a 	mov.w	ip, #10
 8006036:	4620      	mov	r0, r4
 8006038:	f810 2b01 	ldrb.w	r2, [r0], #1
 800603c:	3a30      	subs	r2, #48	; 0x30
 800603e:	2a09      	cmp	r2, #9
 8006040:	d903      	bls.n	800604a <_vfiprintf_r+0x1ee>
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0c5      	beq.n	8005fd2 <_vfiprintf_r+0x176>
 8006046:	9105      	str	r1, [sp, #20]
 8006048:	e7c3      	b.n	8005fd2 <_vfiprintf_r+0x176>
 800604a:	fb0c 2101 	mla	r1, ip, r1, r2
 800604e:	4604      	mov	r4, r0
 8006050:	2301      	movs	r3, #1
 8006052:	e7f0      	b.n	8006036 <_vfiprintf_r+0x1da>
 8006054:	ab03      	add	r3, sp, #12
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	462a      	mov	r2, r5
 800605a:	4b16      	ldr	r3, [pc, #88]	; (80060b4 <_vfiprintf_r+0x258>)
 800605c:	a904      	add	r1, sp, #16
 800605e:	4630      	mov	r0, r6
 8006060:	f7fd fe1c 	bl	8003c9c <_printf_float>
 8006064:	4607      	mov	r7, r0
 8006066:	1c78      	adds	r0, r7, #1
 8006068:	d1d6      	bne.n	8006018 <_vfiprintf_r+0x1bc>
 800606a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800606c:	07d9      	lsls	r1, r3, #31
 800606e:	d405      	bmi.n	800607c <_vfiprintf_r+0x220>
 8006070:	89ab      	ldrh	r3, [r5, #12]
 8006072:	059a      	lsls	r2, r3, #22
 8006074:	d402      	bmi.n	800607c <_vfiprintf_r+0x220>
 8006076:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006078:	f000 faaf 	bl	80065da <__retarget_lock_release_recursive>
 800607c:	89ab      	ldrh	r3, [r5, #12]
 800607e:	065b      	lsls	r3, r3, #25
 8006080:	f53f af12 	bmi.w	8005ea8 <_vfiprintf_r+0x4c>
 8006084:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006086:	e711      	b.n	8005eac <_vfiprintf_r+0x50>
 8006088:	ab03      	add	r3, sp, #12
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	462a      	mov	r2, r5
 800608e:	4b09      	ldr	r3, [pc, #36]	; (80060b4 <_vfiprintf_r+0x258>)
 8006090:	a904      	add	r1, sp, #16
 8006092:	4630      	mov	r0, r6
 8006094:	f7fe f8a6 	bl	80041e4 <_printf_i>
 8006098:	e7e4      	b.n	8006064 <_vfiprintf_r+0x208>
 800609a:	bf00      	nop
 800609c:	08007c24 	.word	0x08007c24
 80060a0:	08007c44 	.word	0x08007c44
 80060a4:	08007c04 	.word	0x08007c04
 80060a8:	08007aac 	.word	0x08007aac
 80060ac:	08007ab6 	.word	0x08007ab6
 80060b0:	08003c9d 	.word	0x08003c9d
 80060b4:	08005e37 	.word	0x08005e37
 80060b8:	08007ab2 	.word	0x08007ab2

080060bc <__swbuf_r>:
 80060bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060be:	460e      	mov	r6, r1
 80060c0:	4614      	mov	r4, r2
 80060c2:	4605      	mov	r5, r0
 80060c4:	b118      	cbz	r0, 80060ce <__swbuf_r+0x12>
 80060c6:	6983      	ldr	r3, [r0, #24]
 80060c8:	b90b      	cbnz	r3, 80060ce <__swbuf_r+0x12>
 80060ca:	f000 f9e7 	bl	800649c <__sinit>
 80060ce:	4b21      	ldr	r3, [pc, #132]	; (8006154 <__swbuf_r+0x98>)
 80060d0:	429c      	cmp	r4, r3
 80060d2:	d12b      	bne.n	800612c <__swbuf_r+0x70>
 80060d4:	686c      	ldr	r4, [r5, #4]
 80060d6:	69a3      	ldr	r3, [r4, #24]
 80060d8:	60a3      	str	r3, [r4, #8]
 80060da:	89a3      	ldrh	r3, [r4, #12]
 80060dc:	071a      	lsls	r2, r3, #28
 80060de:	d52f      	bpl.n	8006140 <__swbuf_r+0x84>
 80060e0:	6923      	ldr	r3, [r4, #16]
 80060e2:	b36b      	cbz	r3, 8006140 <__swbuf_r+0x84>
 80060e4:	6923      	ldr	r3, [r4, #16]
 80060e6:	6820      	ldr	r0, [r4, #0]
 80060e8:	1ac0      	subs	r0, r0, r3
 80060ea:	6963      	ldr	r3, [r4, #20]
 80060ec:	b2f6      	uxtb	r6, r6
 80060ee:	4283      	cmp	r3, r0
 80060f0:	4637      	mov	r7, r6
 80060f2:	dc04      	bgt.n	80060fe <__swbuf_r+0x42>
 80060f4:	4621      	mov	r1, r4
 80060f6:	4628      	mov	r0, r5
 80060f8:	f000 f93c 	bl	8006374 <_fflush_r>
 80060fc:	bb30      	cbnz	r0, 800614c <__swbuf_r+0x90>
 80060fe:	68a3      	ldr	r3, [r4, #8]
 8006100:	3b01      	subs	r3, #1
 8006102:	60a3      	str	r3, [r4, #8]
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	6022      	str	r2, [r4, #0]
 800610a:	701e      	strb	r6, [r3, #0]
 800610c:	6963      	ldr	r3, [r4, #20]
 800610e:	3001      	adds	r0, #1
 8006110:	4283      	cmp	r3, r0
 8006112:	d004      	beq.n	800611e <__swbuf_r+0x62>
 8006114:	89a3      	ldrh	r3, [r4, #12]
 8006116:	07db      	lsls	r3, r3, #31
 8006118:	d506      	bpl.n	8006128 <__swbuf_r+0x6c>
 800611a:	2e0a      	cmp	r6, #10
 800611c:	d104      	bne.n	8006128 <__swbuf_r+0x6c>
 800611e:	4621      	mov	r1, r4
 8006120:	4628      	mov	r0, r5
 8006122:	f000 f927 	bl	8006374 <_fflush_r>
 8006126:	b988      	cbnz	r0, 800614c <__swbuf_r+0x90>
 8006128:	4638      	mov	r0, r7
 800612a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800612c:	4b0a      	ldr	r3, [pc, #40]	; (8006158 <__swbuf_r+0x9c>)
 800612e:	429c      	cmp	r4, r3
 8006130:	d101      	bne.n	8006136 <__swbuf_r+0x7a>
 8006132:	68ac      	ldr	r4, [r5, #8]
 8006134:	e7cf      	b.n	80060d6 <__swbuf_r+0x1a>
 8006136:	4b09      	ldr	r3, [pc, #36]	; (800615c <__swbuf_r+0xa0>)
 8006138:	429c      	cmp	r4, r3
 800613a:	bf08      	it	eq
 800613c:	68ec      	ldreq	r4, [r5, #12]
 800613e:	e7ca      	b.n	80060d6 <__swbuf_r+0x1a>
 8006140:	4621      	mov	r1, r4
 8006142:	4628      	mov	r0, r5
 8006144:	f000 f81a 	bl	800617c <__swsetup_r>
 8006148:	2800      	cmp	r0, #0
 800614a:	d0cb      	beq.n	80060e4 <__swbuf_r+0x28>
 800614c:	f04f 37ff 	mov.w	r7, #4294967295
 8006150:	e7ea      	b.n	8006128 <__swbuf_r+0x6c>
 8006152:	bf00      	nop
 8006154:	08007c24 	.word	0x08007c24
 8006158:	08007c44 	.word	0x08007c44
 800615c:	08007c04 	.word	0x08007c04

08006160 <__ascii_wctomb>:
 8006160:	b149      	cbz	r1, 8006176 <__ascii_wctomb+0x16>
 8006162:	2aff      	cmp	r2, #255	; 0xff
 8006164:	bf85      	ittet	hi
 8006166:	238a      	movhi	r3, #138	; 0x8a
 8006168:	6003      	strhi	r3, [r0, #0]
 800616a:	700a      	strbls	r2, [r1, #0]
 800616c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006170:	bf98      	it	ls
 8006172:	2001      	movls	r0, #1
 8006174:	4770      	bx	lr
 8006176:	4608      	mov	r0, r1
 8006178:	4770      	bx	lr
	...

0800617c <__swsetup_r>:
 800617c:	4b32      	ldr	r3, [pc, #200]	; (8006248 <__swsetup_r+0xcc>)
 800617e:	b570      	push	{r4, r5, r6, lr}
 8006180:	681d      	ldr	r5, [r3, #0]
 8006182:	4606      	mov	r6, r0
 8006184:	460c      	mov	r4, r1
 8006186:	b125      	cbz	r5, 8006192 <__swsetup_r+0x16>
 8006188:	69ab      	ldr	r3, [r5, #24]
 800618a:	b913      	cbnz	r3, 8006192 <__swsetup_r+0x16>
 800618c:	4628      	mov	r0, r5
 800618e:	f000 f985 	bl	800649c <__sinit>
 8006192:	4b2e      	ldr	r3, [pc, #184]	; (800624c <__swsetup_r+0xd0>)
 8006194:	429c      	cmp	r4, r3
 8006196:	d10f      	bne.n	80061b8 <__swsetup_r+0x3c>
 8006198:	686c      	ldr	r4, [r5, #4]
 800619a:	89a3      	ldrh	r3, [r4, #12]
 800619c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061a0:	0719      	lsls	r1, r3, #28
 80061a2:	d42c      	bmi.n	80061fe <__swsetup_r+0x82>
 80061a4:	06dd      	lsls	r5, r3, #27
 80061a6:	d411      	bmi.n	80061cc <__swsetup_r+0x50>
 80061a8:	2309      	movs	r3, #9
 80061aa:	6033      	str	r3, [r6, #0]
 80061ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80061b0:	81a3      	strh	r3, [r4, #12]
 80061b2:	f04f 30ff 	mov.w	r0, #4294967295
 80061b6:	e03e      	b.n	8006236 <__swsetup_r+0xba>
 80061b8:	4b25      	ldr	r3, [pc, #148]	; (8006250 <__swsetup_r+0xd4>)
 80061ba:	429c      	cmp	r4, r3
 80061bc:	d101      	bne.n	80061c2 <__swsetup_r+0x46>
 80061be:	68ac      	ldr	r4, [r5, #8]
 80061c0:	e7eb      	b.n	800619a <__swsetup_r+0x1e>
 80061c2:	4b24      	ldr	r3, [pc, #144]	; (8006254 <__swsetup_r+0xd8>)
 80061c4:	429c      	cmp	r4, r3
 80061c6:	bf08      	it	eq
 80061c8:	68ec      	ldreq	r4, [r5, #12]
 80061ca:	e7e6      	b.n	800619a <__swsetup_r+0x1e>
 80061cc:	0758      	lsls	r0, r3, #29
 80061ce:	d512      	bpl.n	80061f6 <__swsetup_r+0x7a>
 80061d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061d2:	b141      	cbz	r1, 80061e6 <__swsetup_r+0x6a>
 80061d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061d8:	4299      	cmp	r1, r3
 80061da:	d002      	beq.n	80061e2 <__swsetup_r+0x66>
 80061dc:	4630      	mov	r0, r6
 80061de:	f7ff fb6f 	bl	80058c0 <_free_r>
 80061e2:	2300      	movs	r3, #0
 80061e4:	6363      	str	r3, [r4, #52]	; 0x34
 80061e6:	89a3      	ldrh	r3, [r4, #12]
 80061e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80061ec:	81a3      	strh	r3, [r4, #12]
 80061ee:	2300      	movs	r3, #0
 80061f0:	6063      	str	r3, [r4, #4]
 80061f2:	6923      	ldr	r3, [r4, #16]
 80061f4:	6023      	str	r3, [r4, #0]
 80061f6:	89a3      	ldrh	r3, [r4, #12]
 80061f8:	f043 0308 	orr.w	r3, r3, #8
 80061fc:	81a3      	strh	r3, [r4, #12]
 80061fe:	6923      	ldr	r3, [r4, #16]
 8006200:	b94b      	cbnz	r3, 8006216 <__swsetup_r+0x9a>
 8006202:	89a3      	ldrh	r3, [r4, #12]
 8006204:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800620c:	d003      	beq.n	8006216 <__swsetup_r+0x9a>
 800620e:	4621      	mov	r1, r4
 8006210:	4630      	mov	r0, r6
 8006212:	f000 fa07 	bl	8006624 <__smakebuf_r>
 8006216:	89a0      	ldrh	r0, [r4, #12]
 8006218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800621c:	f010 0301 	ands.w	r3, r0, #1
 8006220:	d00a      	beq.n	8006238 <__swsetup_r+0xbc>
 8006222:	2300      	movs	r3, #0
 8006224:	60a3      	str	r3, [r4, #8]
 8006226:	6963      	ldr	r3, [r4, #20]
 8006228:	425b      	negs	r3, r3
 800622a:	61a3      	str	r3, [r4, #24]
 800622c:	6923      	ldr	r3, [r4, #16]
 800622e:	b943      	cbnz	r3, 8006242 <__swsetup_r+0xc6>
 8006230:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006234:	d1ba      	bne.n	80061ac <__swsetup_r+0x30>
 8006236:	bd70      	pop	{r4, r5, r6, pc}
 8006238:	0781      	lsls	r1, r0, #30
 800623a:	bf58      	it	pl
 800623c:	6963      	ldrpl	r3, [r4, #20]
 800623e:	60a3      	str	r3, [r4, #8]
 8006240:	e7f4      	b.n	800622c <__swsetup_r+0xb0>
 8006242:	2000      	movs	r0, #0
 8006244:	e7f7      	b.n	8006236 <__swsetup_r+0xba>
 8006246:	bf00      	nop
 8006248:	20000008 	.word	0x20000008
 800624c:	08007c24 	.word	0x08007c24
 8006250:	08007c44 	.word	0x08007c44
 8006254:	08007c04 	.word	0x08007c04

08006258 <abort>:
 8006258:	b508      	push	{r3, lr}
 800625a:	2006      	movs	r0, #6
 800625c:	f000 fa52 	bl	8006704 <raise>
 8006260:	2001      	movs	r0, #1
 8006262:	f7fc f8bb 	bl	80023dc <_exit>
	...

08006268 <__sflush_r>:
 8006268:	898a      	ldrh	r2, [r1, #12]
 800626a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800626e:	4605      	mov	r5, r0
 8006270:	0710      	lsls	r0, r2, #28
 8006272:	460c      	mov	r4, r1
 8006274:	d458      	bmi.n	8006328 <__sflush_r+0xc0>
 8006276:	684b      	ldr	r3, [r1, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	dc05      	bgt.n	8006288 <__sflush_r+0x20>
 800627c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800627e:	2b00      	cmp	r3, #0
 8006280:	dc02      	bgt.n	8006288 <__sflush_r+0x20>
 8006282:	2000      	movs	r0, #0
 8006284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006288:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800628a:	2e00      	cmp	r6, #0
 800628c:	d0f9      	beq.n	8006282 <__sflush_r+0x1a>
 800628e:	2300      	movs	r3, #0
 8006290:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006294:	682f      	ldr	r7, [r5, #0]
 8006296:	602b      	str	r3, [r5, #0]
 8006298:	d032      	beq.n	8006300 <__sflush_r+0x98>
 800629a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800629c:	89a3      	ldrh	r3, [r4, #12]
 800629e:	075a      	lsls	r2, r3, #29
 80062a0:	d505      	bpl.n	80062ae <__sflush_r+0x46>
 80062a2:	6863      	ldr	r3, [r4, #4]
 80062a4:	1ac0      	subs	r0, r0, r3
 80062a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062a8:	b10b      	cbz	r3, 80062ae <__sflush_r+0x46>
 80062aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062ac:	1ac0      	subs	r0, r0, r3
 80062ae:	2300      	movs	r3, #0
 80062b0:	4602      	mov	r2, r0
 80062b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062b4:	6a21      	ldr	r1, [r4, #32]
 80062b6:	4628      	mov	r0, r5
 80062b8:	47b0      	blx	r6
 80062ba:	1c43      	adds	r3, r0, #1
 80062bc:	89a3      	ldrh	r3, [r4, #12]
 80062be:	d106      	bne.n	80062ce <__sflush_r+0x66>
 80062c0:	6829      	ldr	r1, [r5, #0]
 80062c2:	291d      	cmp	r1, #29
 80062c4:	d82c      	bhi.n	8006320 <__sflush_r+0xb8>
 80062c6:	4a2a      	ldr	r2, [pc, #168]	; (8006370 <__sflush_r+0x108>)
 80062c8:	40ca      	lsrs	r2, r1
 80062ca:	07d6      	lsls	r6, r2, #31
 80062cc:	d528      	bpl.n	8006320 <__sflush_r+0xb8>
 80062ce:	2200      	movs	r2, #0
 80062d0:	6062      	str	r2, [r4, #4]
 80062d2:	04d9      	lsls	r1, r3, #19
 80062d4:	6922      	ldr	r2, [r4, #16]
 80062d6:	6022      	str	r2, [r4, #0]
 80062d8:	d504      	bpl.n	80062e4 <__sflush_r+0x7c>
 80062da:	1c42      	adds	r2, r0, #1
 80062dc:	d101      	bne.n	80062e2 <__sflush_r+0x7a>
 80062de:	682b      	ldr	r3, [r5, #0]
 80062e0:	b903      	cbnz	r3, 80062e4 <__sflush_r+0x7c>
 80062e2:	6560      	str	r0, [r4, #84]	; 0x54
 80062e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062e6:	602f      	str	r7, [r5, #0]
 80062e8:	2900      	cmp	r1, #0
 80062ea:	d0ca      	beq.n	8006282 <__sflush_r+0x1a>
 80062ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062f0:	4299      	cmp	r1, r3
 80062f2:	d002      	beq.n	80062fa <__sflush_r+0x92>
 80062f4:	4628      	mov	r0, r5
 80062f6:	f7ff fae3 	bl	80058c0 <_free_r>
 80062fa:	2000      	movs	r0, #0
 80062fc:	6360      	str	r0, [r4, #52]	; 0x34
 80062fe:	e7c1      	b.n	8006284 <__sflush_r+0x1c>
 8006300:	6a21      	ldr	r1, [r4, #32]
 8006302:	2301      	movs	r3, #1
 8006304:	4628      	mov	r0, r5
 8006306:	47b0      	blx	r6
 8006308:	1c41      	adds	r1, r0, #1
 800630a:	d1c7      	bne.n	800629c <__sflush_r+0x34>
 800630c:	682b      	ldr	r3, [r5, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d0c4      	beq.n	800629c <__sflush_r+0x34>
 8006312:	2b1d      	cmp	r3, #29
 8006314:	d001      	beq.n	800631a <__sflush_r+0xb2>
 8006316:	2b16      	cmp	r3, #22
 8006318:	d101      	bne.n	800631e <__sflush_r+0xb6>
 800631a:	602f      	str	r7, [r5, #0]
 800631c:	e7b1      	b.n	8006282 <__sflush_r+0x1a>
 800631e:	89a3      	ldrh	r3, [r4, #12]
 8006320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006324:	81a3      	strh	r3, [r4, #12]
 8006326:	e7ad      	b.n	8006284 <__sflush_r+0x1c>
 8006328:	690f      	ldr	r7, [r1, #16]
 800632a:	2f00      	cmp	r7, #0
 800632c:	d0a9      	beq.n	8006282 <__sflush_r+0x1a>
 800632e:	0793      	lsls	r3, r2, #30
 8006330:	680e      	ldr	r6, [r1, #0]
 8006332:	bf08      	it	eq
 8006334:	694b      	ldreq	r3, [r1, #20]
 8006336:	600f      	str	r7, [r1, #0]
 8006338:	bf18      	it	ne
 800633a:	2300      	movne	r3, #0
 800633c:	eba6 0807 	sub.w	r8, r6, r7
 8006340:	608b      	str	r3, [r1, #8]
 8006342:	f1b8 0f00 	cmp.w	r8, #0
 8006346:	dd9c      	ble.n	8006282 <__sflush_r+0x1a>
 8006348:	6a21      	ldr	r1, [r4, #32]
 800634a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800634c:	4643      	mov	r3, r8
 800634e:	463a      	mov	r2, r7
 8006350:	4628      	mov	r0, r5
 8006352:	47b0      	blx	r6
 8006354:	2800      	cmp	r0, #0
 8006356:	dc06      	bgt.n	8006366 <__sflush_r+0xfe>
 8006358:	89a3      	ldrh	r3, [r4, #12]
 800635a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800635e:	81a3      	strh	r3, [r4, #12]
 8006360:	f04f 30ff 	mov.w	r0, #4294967295
 8006364:	e78e      	b.n	8006284 <__sflush_r+0x1c>
 8006366:	4407      	add	r7, r0
 8006368:	eba8 0800 	sub.w	r8, r8, r0
 800636c:	e7e9      	b.n	8006342 <__sflush_r+0xda>
 800636e:	bf00      	nop
 8006370:	20400001 	.word	0x20400001

08006374 <_fflush_r>:
 8006374:	b538      	push	{r3, r4, r5, lr}
 8006376:	690b      	ldr	r3, [r1, #16]
 8006378:	4605      	mov	r5, r0
 800637a:	460c      	mov	r4, r1
 800637c:	b913      	cbnz	r3, 8006384 <_fflush_r+0x10>
 800637e:	2500      	movs	r5, #0
 8006380:	4628      	mov	r0, r5
 8006382:	bd38      	pop	{r3, r4, r5, pc}
 8006384:	b118      	cbz	r0, 800638e <_fflush_r+0x1a>
 8006386:	6983      	ldr	r3, [r0, #24]
 8006388:	b90b      	cbnz	r3, 800638e <_fflush_r+0x1a>
 800638a:	f000 f887 	bl	800649c <__sinit>
 800638e:	4b14      	ldr	r3, [pc, #80]	; (80063e0 <_fflush_r+0x6c>)
 8006390:	429c      	cmp	r4, r3
 8006392:	d11b      	bne.n	80063cc <_fflush_r+0x58>
 8006394:	686c      	ldr	r4, [r5, #4]
 8006396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0ef      	beq.n	800637e <_fflush_r+0xa>
 800639e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80063a0:	07d0      	lsls	r0, r2, #31
 80063a2:	d404      	bmi.n	80063ae <_fflush_r+0x3a>
 80063a4:	0599      	lsls	r1, r3, #22
 80063a6:	d402      	bmi.n	80063ae <_fflush_r+0x3a>
 80063a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063aa:	f000 f915 	bl	80065d8 <__retarget_lock_acquire_recursive>
 80063ae:	4628      	mov	r0, r5
 80063b0:	4621      	mov	r1, r4
 80063b2:	f7ff ff59 	bl	8006268 <__sflush_r>
 80063b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063b8:	07da      	lsls	r2, r3, #31
 80063ba:	4605      	mov	r5, r0
 80063bc:	d4e0      	bmi.n	8006380 <_fflush_r+0xc>
 80063be:	89a3      	ldrh	r3, [r4, #12]
 80063c0:	059b      	lsls	r3, r3, #22
 80063c2:	d4dd      	bmi.n	8006380 <_fflush_r+0xc>
 80063c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063c6:	f000 f908 	bl	80065da <__retarget_lock_release_recursive>
 80063ca:	e7d9      	b.n	8006380 <_fflush_r+0xc>
 80063cc:	4b05      	ldr	r3, [pc, #20]	; (80063e4 <_fflush_r+0x70>)
 80063ce:	429c      	cmp	r4, r3
 80063d0:	d101      	bne.n	80063d6 <_fflush_r+0x62>
 80063d2:	68ac      	ldr	r4, [r5, #8]
 80063d4:	e7df      	b.n	8006396 <_fflush_r+0x22>
 80063d6:	4b04      	ldr	r3, [pc, #16]	; (80063e8 <_fflush_r+0x74>)
 80063d8:	429c      	cmp	r4, r3
 80063da:	bf08      	it	eq
 80063dc:	68ec      	ldreq	r4, [r5, #12]
 80063de:	e7da      	b.n	8006396 <_fflush_r+0x22>
 80063e0:	08007c24 	.word	0x08007c24
 80063e4:	08007c44 	.word	0x08007c44
 80063e8:	08007c04 	.word	0x08007c04

080063ec <std>:
 80063ec:	2300      	movs	r3, #0
 80063ee:	b510      	push	{r4, lr}
 80063f0:	4604      	mov	r4, r0
 80063f2:	e9c0 3300 	strd	r3, r3, [r0]
 80063f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063fa:	6083      	str	r3, [r0, #8]
 80063fc:	8181      	strh	r1, [r0, #12]
 80063fe:	6643      	str	r3, [r0, #100]	; 0x64
 8006400:	81c2      	strh	r2, [r0, #14]
 8006402:	6183      	str	r3, [r0, #24]
 8006404:	4619      	mov	r1, r3
 8006406:	2208      	movs	r2, #8
 8006408:	305c      	adds	r0, #92	; 0x5c
 800640a:	f7fd fb9f 	bl	8003b4c <memset>
 800640e:	4b05      	ldr	r3, [pc, #20]	; (8006424 <std+0x38>)
 8006410:	6263      	str	r3, [r4, #36]	; 0x24
 8006412:	4b05      	ldr	r3, [pc, #20]	; (8006428 <std+0x3c>)
 8006414:	62a3      	str	r3, [r4, #40]	; 0x28
 8006416:	4b05      	ldr	r3, [pc, #20]	; (800642c <std+0x40>)
 8006418:	62e3      	str	r3, [r4, #44]	; 0x2c
 800641a:	4b05      	ldr	r3, [pc, #20]	; (8006430 <std+0x44>)
 800641c:	6224      	str	r4, [r4, #32]
 800641e:	6323      	str	r3, [r4, #48]	; 0x30
 8006420:	bd10      	pop	{r4, pc}
 8006422:	bf00      	nop
 8006424:	0800673d 	.word	0x0800673d
 8006428:	0800675f 	.word	0x0800675f
 800642c:	08006797 	.word	0x08006797
 8006430:	080067bb 	.word	0x080067bb

08006434 <_cleanup_r>:
 8006434:	4901      	ldr	r1, [pc, #4]	; (800643c <_cleanup_r+0x8>)
 8006436:	f000 b8af 	b.w	8006598 <_fwalk_reent>
 800643a:	bf00      	nop
 800643c:	08006375 	.word	0x08006375

08006440 <__sfmoreglue>:
 8006440:	b570      	push	{r4, r5, r6, lr}
 8006442:	1e4a      	subs	r2, r1, #1
 8006444:	2568      	movs	r5, #104	; 0x68
 8006446:	4355      	muls	r5, r2
 8006448:	460e      	mov	r6, r1
 800644a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800644e:	f7ff fa87 	bl	8005960 <_malloc_r>
 8006452:	4604      	mov	r4, r0
 8006454:	b140      	cbz	r0, 8006468 <__sfmoreglue+0x28>
 8006456:	2100      	movs	r1, #0
 8006458:	e9c0 1600 	strd	r1, r6, [r0]
 800645c:	300c      	adds	r0, #12
 800645e:	60a0      	str	r0, [r4, #8]
 8006460:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006464:	f7fd fb72 	bl	8003b4c <memset>
 8006468:	4620      	mov	r0, r4
 800646a:	bd70      	pop	{r4, r5, r6, pc}

0800646c <__sfp_lock_acquire>:
 800646c:	4801      	ldr	r0, [pc, #4]	; (8006474 <__sfp_lock_acquire+0x8>)
 800646e:	f000 b8b3 	b.w	80065d8 <__retarget_lock_acquire_recursive>
 8006472:	bf00      	nop
 8006474:	20000258 	.word	0x20000258

08006478 <__sfp_lock_release>:
 8006478:	4801      	ldr	r0, [pc, #4]	; (8006480 <__sfp_lock_release+0x8>)
 800647a:	f000 b8ae 	b.w	80065da <__retarget_lock_release_recursive>
 800647e:	bf00      	nop
 8006480:	20000258 	.word	0x20000258

08006484 <__sinit_lock_acquire>:
 8006484:	4801      	ldr	r0, [pc, #4]	; (800648c <__sinit_lock_acquire+0x8>)
 8006486:	f000 b8a7 	b.w	80065d8 <__retarget_lock_acquire_recursive>
 800648a:	bf00      	nop
 800648c:	20000253 	.word	0x20000253

08006490 <__sinit_lock_release>:
 8006490:	4801      	ldr	r0, [pc, #4]	; (8006498 <__sinit_lock_release+0x8>)
 8006492:	f000 b8a2 	b.w	80065da <__retarget_lock_release_recursive>
 8006496:	bf00      	nop
 8006498:	20000253 	.word	0x20000253

0800649c <__sinit>:
 800649c:	b510      	push	{r4, lr}
 800649e:	4604      	mov	r4, r0
 80064a0:	f7ff fff0 	bl	8006484 <__sinit_lock_acquire>
 80064a4:	69a3      	ldr	r3, [r4, #24]
 80064a6:	b11b      	cbz	r3, 80064b0 <__sinit+0x14>
 80064a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064ac:	f7ff bff0 	b.w	8006490 <__sinit_lock_release>
 80064b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80064b4:	6523      	str	r3, [r4, #80]	; 0x50
 80064b6:	4b13      	ldr	r3, [pc, #76]	; (8006504 <__sinit+0x68>)
 80064b8:	4a13      	ldr	r2, [pc, #76]	; (8006508 <__sinit+0x6c>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80064be:	42a3      	cmp	r3, r4
 80064c0:	bf04      	itt	eq
 80064c2:	2301      	moveq	r3, #1
 80064c4:	61a3      	streq	r3, [r4, #24]
 80064c6:	4620      	mov	r0, r4
 80064c8:	f000 f820 	bl	800650c <__sfp>
 80064cc:	6060      	str	r0, [r4, #4]
 80064ce:	4620      	mov	r0, r4
 80064d0:	f000 f81c 	bl	800650c <__sfp>
 80064d4:	60a0      	str	r0, [r4, #8]
 80064d6:	4620      	mov	r0, r4
 80064d8:	f000 f818 	bl	800650c <__sfp>
 80064dc:	2200      	movs	r2, #0
 80064de:	60e0      	str	r0, [r4, #12]
 80064e0:	2104      	movs	r1, #4
 80064e2:	6860      	ldr	r0, [r4, #4]
 80064e4:	f7ff ff82 	bl	80063ec <std>
 80064e8:	68a0      	ldr	r0, [r4, #8]
 80064ea:	2201      	movs	r2, #1
 80064ec:	2109      	movs	r1, #9
 80064ee:	f7ff ff7d 	bl	80063ec <std>
 80064f2:	68e0      	ldr	r0, [r4, #12]
 80064f4:	2202      	movs	r2, #2
 80064f6:	2112      	movs	r1, #18
 80064f8:	f7ff ff78 	bl	80063ec <std>
 80064fc:	2301      	movs	r3, #1
 80064fe:	61a3      	str	r3, [r4, #24]
 8006500:	e7d2      	b.n	80064a8 <__sinit+0xc>
 8006502:	bf00      	nop
 8006504:	08007880 	.word	0x08007880
 8006508:	08006435 	.word	0x08006435

0800650c <__sfp>:
 800650c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800650e:	4607      	mov	r7, r0
 8006510:	f7ff ffac 	bl	800646c <__sfp_lock_acquire>
 8006514:	4b1e      	ldr	r3, [pc, #120]	; (8006590 <__sfp+0x84>)
 8006516:	681e      	ldr	r6, [r3, #0]
 8006518:	69b3      	ldr	r3, [r6, #24]
 800651a:	b913      	cbnz	r3, 8006522 <__sfp+0x16>
 800651c:	4630      	mov	r0, r6
 800651e:	f7ff ffbd 	bl	800649c <__sinit>
 8006522:	3648      	adds	r6, #72	; 0x48
 8006524:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006528:	3b01      	subs	r3, #1
 800652a:	d503      	bpl.n	8006534 <__sfp+0x28>
 800652c:	6833      	ldr	r3, [r6, #0]
 800652e:	b30b      	cbz	r3, 8006574 <__sfp+0x68>
 8006530:	6836      	ldr	r6, [r6, #0]
 8006532:	e7f7      	b.n	8006524 <__sfp+0x18>
 8006534:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006538:	b9d5      	cbnz	r5, 8006570 <__sfp+0x64>
 800653a:	4b16      	ldr	r3, [pc, #88]	; (8006594 <__sfp+0x88>)
 800653c:	60e3      	str	r3, [r4, #12]
 800653e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006542:	6665      	str	r5, [r4, #100]	; 0x64
 8006544:	f000 f847 	bl	80065d6 <__retarget_lock_init_recursive>
 8006548:	f7ff ff96 	bl	8006478 <__sfp_lock_release>
 800654c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006550:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006554:	6025      	str	r5, [r4, #0]
 8006556:	61a5      	str	r5, [r4, #24]
 8006558:	2208      	movs	r2, #8
 800655a:	4629      	mov	r1, r5
 800655c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006560:	f7fd faf4 	bl	8003b4c <memset>
 8006564:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006568:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800656c:	4620      	mov	r0, r4
 800656e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006570:	3468      	adds	r4, #104	; 0x68
 8006572:	e7d9      	b.n	8006528 <__sfp+0x1c>
 8006574:	2104      	movs	r1, #4
 8006576:	4638      	mov	r0, r7
 8006578:	f7ff ff62 	bl	8006440 <__sfmoreglue>
 800657c:	4604      	mov	r4, r0
 800657e:	6030      	str	r0, [r6, #0]
 8006580:	2800      	cmp	r0, #0
 8006582:	d1d5      	bne.n	8006530 <__sfp+0x24>
 8006584:	f7ff ff78 	bl	8006478 <__sfp_lock_release>
 8006588:	230c      	movs	r3, #12
 800658a:	603b      	str	r3, [r7, #0]
 800658c:	e7ee      	b.n	800656c <__sfp+0x60>
 800658e:	bf00      	nop
 8006590:	08007880 	.word	0x08007880
 8006594:	ffff0001 	.word	0xffff0001

08006598 <_fwalk_reent>:
 8006598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800659c:	4606      	mov	r6, r0
 800659e:	4688      	mov	r8, r1
 80065a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80065a4:	2700      	movs	r7, #0
 80065a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065aa:	f1b9 0901 	subs.w	r9, r9, #1
 80065ae:	d505      	bpl.n	80065bc <_fwalk_reent+0x24>
 80065b0:	6824      	ldr	r4, [r4, #0]
 80065b2:	2c00      	cmp	r4, #0
 80065b4:	d1f7      	bne.n	80065a6 <_fwalk_reent+0xe>
 80065b6:	4638      	mov	r0, r7
 80065b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065bc:	89ab      	ldrh	r3, [r5, #12]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d907      	bls.n	80065d2 <_fwalk_reent+0x3a>
 80065c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065c6:	3301      	adds	r3, #1
 80065c8:	d003      	beq.n	80065d2 <_fwalk_reent+0x3a>
 80065ca:	4629      	mov	r1, r5
 80065cc:	4630      	mov	r0, r6
 80065ce:	47c0      	blx	r8
 80065d0:	4307      	orrs	r7, r0
 80065d2:	3568      	adds	r5, #104	; 0x68
 80065d4:	e7e9      	b.n	80065aa <_fwalk_reent+0x12>

080065d6 <__retarget_lock_init_recursive>:
 80065d6:	4770      	bx	lr

080065d8 <__retarget_lock_acquire_recursive>:
 80065d8:	4770      	bx	lr

080065da <__retarget_lock_release_recursive>:
 80065da:	4770      	bx	lr

080065dc <__swhatbuf_r>:
 80065dc:	b570      	push	{r4, r5, r6, lr}
 80065de:	460e      	mov	r6, r1
 80065e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065e4:	2900      	cmp	r1, #0
 80065e6:	b096      	sub	sp, #88	; 0x58
 80065e8:	4614      	mov	r4, r2
 80065ea:	461d      	mov	r5, r3
 80065ec:	da07      	bge.n	80065fe <__swhatbuf_r+0x22>
 80065ee:	2300      	movs	r3, #0
 80065f0:	602b      	str	r3, [r5, #0]
 80065f2:	89b3      	ldrh	r3, [r6, #12]
 80065f4:	061a      	lsls	r2, r3, #24
 80065f6:	d410      	bmi.n	800661a <__swhatbuf_r+0x3e>
 80065f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065fc:	e00e      	b.n	800661c <__swhatbuf_r+0x40>
 80065fe:	466a      	mov	r2, sp
 8006600:	f000 f902 	bl	8006808 <_fstat_r>
 8006604:	2800      	cmp	r0, #0
 8006606:	dbf2      	blt.n	80065ee <__swhatbuf_r+0x12>
 8006608:	9a01      	ldr	r2, [sp, #4]
 800660a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800660e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006612:	425a      	negs	r2, r3
 8006614:	415a      	adcs	r2, r3
 8006616:	602a      	str	r2, [r5, #0]
 8006618:	e7ee      	b.n	80065f8 <__swhatbuf_r+0x1c>
 800661a:	2340      	movs	r3, #64	; 0x40
 800661c:	2000      	movs	r0, #0
 800661e:	6023      	str	r3, [r4, #0]
 8006620:	b016      	add	sp, #88	; 0x58
 8006622:	bd70      	pop	{r4, r5, r6, pc}

08006624 <__smakebuf_r>:
 8006624:	898b      	ldrh	r3, [r1, #12]
 8006626:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006628:	079d      	lsls	r5, r3, #30
 800662a:	4606      	mov	r6, r0
 800662c:	460c      	mov	r4, r1
 800662e:	d507      	bpl.n	8006640 <__smakebuf_r+0x1c>
 8006630:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006634:	6023      	str	r3, [r4, #0]
 8006636:	6123      	str	r3, [r4, #16]
 8006638:	2301      	movs	r3, #1
 800663a:	6163      	str	r3, [r4, #20]
 800663c:	b002      	add	sp, #8
 800663e:	bd70      	pop	{r4, r5, r6, pc}
 8006640:	ab01      	add	r3, sp, #4
 8006642:	466a      	mov	r2, sp
 8006644:	f7ff ffca 	bl	80065dc <__swhatbuf_r>
 8006648:	9900      	ldr	r1, [sp, #0]
 800664a:	4605      	mov	r5, r0
 800664c:	4630      	mov	r0, r6
 800664e:	f7ff f987 	bl	8005960 <_malloc_r>
 8006652:	b948      	cbnz	r0, 8006668 <__smakebuf_r+0x44>
 8006654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006658:	059a      	lsls	r2, r3, #22
 800665a:	d4ef      	bmi.n	800663c <__smakebuf_r+0x18>
 800665c:	f023 0303 	bic.w	r3, r3, #3
 8006660:	f043 0302 	orr.w	r3, r3, #2
 8006664:	81a3      	strh	r3, [r4, #12]
 8006666:	e7e3      	b.n	8006630 <__smakebuf_r+0xc>
 8006668:	4b0d      	ldr	r3, [pc, #52]	; (80066a0 <__smakebuf_r+0x7c>)
 800666a:	62b3      	str	r3, [r6, #40]	; 0x28
 800666c:	89a3      	ldrh	r3, [r4, #12]
 800666e:	6020      	str	r0, [r4, #0]
 8006670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006674:	81a3      	strh	r3, [r4, #12]
 8006676:	9b00      	ldr	r3, [sp, #0]
 8006678:	6163      	str	r3, [r4, #20]
 800667a:	9b01      	ldr	r3, [sp, #4]
 800667c:	6120      	str	r0, [r4, #16]
 800667e:	b15b      	cbz	r3, 8006698 <__smakebuf_r+0x74>
 8006680:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006684:	4630      	mov	r0, r6
 8006686:	f000 f8d1 	bl	800682c <_isatty_r>
 800668a:	b128      	cbz	r0, 8006698 <__smakebuf_r+0x74>
 800668c:	89a3      	ldrh	r3, [r4, #12]
 800668e:	f023 0303 	bic.w	r3, r3, #3
 8006692:	f043 0301 	orr.w	r3, r3, #1
 8006696:	81a3      	strh	r3, [r4, #12]
 8006698:	89a0      	ldrh	r0, [r4, #12]
 800669a:	4305      	orrs	r5, r0
 800669c:	81a5      	strh	r5, [r4, #12]
 800669e:	e7cd      	b.n	800663c <__smakebuf_r+0x18>
 80066a0:	08006435 	.word	0x08006435

080066a4 <_malloc_usable_size_r>:
 80066a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066a8:	1f18      	subs	r0, r3, #4
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	bfbc      	itt	lt
 80066ae:	580b      	ldrlt	r3, [r1, r0]
 80066b0:	18c0      	addlt	r0, r0, r3
 80066b2:	4770      	bx	lr

080066b4 <_raise_r>:
 80066b4:	291f      	cmp	r1, #31
 80066b6:	b538      	push	{r3, r4, r5, lr}
 80066b8:	4604      	mov	r4, r0
 80066ba:	460d      	mov	r5, r1
 80066bc:	d904      	bls.n	80066c8 <_raise_r+0x14>
 80066be:	2316      	movs	r3, #22
 80066c0:	6003      	str	r3, [r0, #0]
 80066c2:	f04f 30ff 	mov.w	r0, #4294967295
 80066c6:	bd38      	pop	{r3, r4, r5, pc}
 80066c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80066ca:	b112      	cbz	r2, 80066d2 <_raise_r+0x1e>
 80066cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80066d0:	b94b      	cbnz	r3, 80066e6 <_raise_r+0x32>
 80066d2:	4620      	mov	r0, r4
 80066d4:	f000 f830 	bl	8006738 <_getpid_r>
 80066d8:	462a      	mov	r2, r5
 80066da:	4601      	mov	r1, r0
 80066dc:	4620      	mov	r0, r4
 80066de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066e2:	f000 b817 	b.w	8006714 <_kill_r>
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d00a      	beq.n	8006700 <_raise_r+0x4c>
 80066ea:	1c59      	adds	r1, r3, #1
 80066ec:	d103      	bne.n	80066f6 <_raise_r+0x42>
 80066ee:	2316      	movs	r3, #22
 80066f0:	6003      	str	r3, [r0, #0]
 80066f2:	2001      	movs	r0, #1
 80066f4:	e7e7      	b.n	80066c6 <_raise_r+0x12>
 80066f6:	2400      	movs	r4, #0
 80066f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80066fc:	4628      	mov	r0, r5
 80066fe:	4798      	blx	r3
 8006700:	2000      	movs	r0, #0
 8006702:	e7e0      	b.n	80066c6 <_raise_r+0x12>

08006704 <raise>:
 8006704:	4b02      	ldr	r3, [pc, #8]	; (8006710 <raise+0xc>)
 8006706:	4601      	mov	r1, r0
 8006708:	6818      	ldr	r0, [r3, #0]
 800670a:	f7ff bfd3 	b.w	80066b4 <_raise_r>
 800670e:	bf00      	nop
 8006710:	20000008 	.word	0x20000008

08006714 <_kill_r>:
 8006714:	b538      	push	{r3, r4, r5, lr}
 8006716:	4d07      	ldr	r5, [pc, #28]	; (8006734 <_kill_r+0x20>)
 8006718:	2300      	movs	r3, #0
 800671a:	4604      	mov	r4, r0
 800671c:	4608      	mov	r0, r1
 800671e:	4611      	mov	r1, r2
 8006720:	602b      	str	r3, [r5, #0]
 8006722:	f7fb fe4b 	bl	80023bc <_kill>
 8006726:	1c43      	adds	r3, r0, #1
 8006728:	d102      	bne.n	8006730 <_kill_r+0x1c>
 800672a:	682b      	ldr	r3, [r5, #0]
 800672c:	b103      	cbz	r3, 8006730 <_kill_r+0x1c>
 800672e:	6023      	str	r3, [r4, #0]
 8006730:	bd38      	pop	{r3, r4, r5, pc}
 8006732:	bf00      	nop
 8006734:	2000024c 	.word	0x2000024c

08006738 <_getpid_r>:
 8006738:	f7fb be38 	b.w	80023ac <_getpid>

0800673c <__sread>:
 800673c:	b510      	push	{r4, lr}
 800673e:	460c      	mov	r4, r1
 8006740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006744:	f000 f894 	bl	8006870 <_read_r>
 8006748:	2800      	cmp	r0, #0
 800674a:	bfab      	itete	ge
 800674c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800674e:	89a3      	ldrhlt	r3, [r4, #12]
 8006750:	181b      	addge	r3, r3, r0
 8006752:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006756:	bfac      	ite	ge
 8006758:	6563      	strge	r3, [r4, #84]	; 0x54
 800675a:	81a3      	strhlt	r3, [r4, #12]
 800675c:	bd10      	pop	{r4, pc}

0800675e <__swrite>:
 800675e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006762:	461f      	mov	r7, r3
 8006764:	898b      	ldrh	r3, [r1, #12]
 8006766:	05db      	lsls	r3, r3, #23
 8006768:	4605      	mov	r5, r0
 800676a:	460c      	mov	r4, r1
 800676c:	4616      	mov	r6, r2
 800676e:	d505      	bpl.n	800677c <__swrite+0x1e>
 8006770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006774:	2302      	movs	r3, #2
 8006776:	2200      	movs	r2, #0
 8006778:	f000 f868 	bl	800684c <_lseek_r>
 800677c:	89a3      	ldrh	r3, [r4, #12]
 800677e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006782:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006786:	81a3      	strh	r3, [r4, #12]
 8006788:	4632      	mov	r2, r6
 800678a:	463b      	mov	r3, r7
 800678c:	4628      	mov	r0, r5
 800678e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006792:	f000 b817 	b.w	80067c4 <_write_r>

08006796 <__sseek>:
 8006796:	b510      	push	{r4, lr}
 8006798:	460c      	mov	r4, r1
 800679a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800679e:	f000 f855 	bl	800684c <_lseek_r>
 80067a2:	1c43      	adds	r3, r0, #1
 80067a4:	89a3      	ldrh	r3, [r4, #12]
 80067a6:	bf15      	itete	ne
 80067a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80067aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80067ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80067b2:	81a3      	strheq	r3, [r4, #12]
 80067b4:	bf18      	it	ne
 80067b6:	81a3      	strhne	r3, [r4, #12]
 80067b8:	bd10      	pop	{r4, pc}

080067ba <__sclose>:
 80067ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067be:	f000 b813 	b.w	80067e8 <_close_r>
	...

080067c4 <_write_r>:
 80067c4:	b538      	push	{r3, r4, r5, lr}
 80067c6:	4d07      	ldr	r5, [pc, #28]	; (80067e4 <_write_r+0x20>)
 80067c8:	4604      	mov	r4, r0
 80067ca:	4608      	mov	r0, r1
 80067cc:	4611      	mov	r1, r2
 80067ce:	2200      	movs	r2, #0
 80067d0:	602a      	str	r2, [r5, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	f7fb fe29 	bl	800242a <_write>
 80067d8:	1c43      	adds	r3, r0, #1
 80067da:	d102      	bne.n	80067e2 <_write_r+0x1e>
 80067dc:	682b      	ldr	r3, [r5, #0]
 80067de:	b103      	cbz	r3, 80067e2 <_write_r+0x1e>
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	bd38      	pop	{r3, r4, r5, pc}
 80067e4:	2000024c 	.word	0x2000024c

080067e8 <_close_r>:
 80067e8:	b538      	push	{r3, r4, r5, lr}
 80067ea:	4d06      	ldr	r5, [pc, #24]	; (8006804 <_close_r+0x1c>)
 80067ec:	2300      	movs	r3, #0
 80067ee:	4604      	mov	r4, r0
 80067f0:	4608      	mov	r0, r1
 80067f2:	602b      	str	r3, [r5, #0]
 80067f4:	f7fb fe35 	bl	8002462 <_close>
 80067f8:	1c43      	adds	r3, r0, #1
 80067fa:	d102      	bne.n	8006802 <_close_r+0x1a>
 80067fc:	682b      	ldr	r3, [r5, #0]
 80067fe:	b103      	cbz	r3, 8006802 <_close_r+0x1a>
 8006800:	6023      	str	r3, [r4, #0]
 8006802:	bd38      	pop	{r3, r4, r5, pc}
 8006804:	2000024c 	.word	0x2000024c

08006808 <_fstat_r>:
 8006808:	b538      	push	{r3, r4, r5, lr}
 800680a:	4d07      	ldr	r5, [pc, #28]	; (8006828 <_fstat_r+0x20>)
 800680c:	2300      	movs	r3, #0
 800680e:	4604      	mov	r4, r0
 8006810:	4608      	mov	r0, r1
 8006812:	4611      	mov	r1, r2
 8006814:	602b      	str	r3, [r5, #0]
 8006816:	f7fb fe30 	bl	800247a <_fstat>
 800681a:	1c43      	adds	r3, r0, #1
 800681c:	d102      	bne.n	8006824 <_fstat_r+0x1c>
 800681e:	682b      	ldr	r3, [r5, #0]
 8006820:	b103      	cbz	r3, 8006824 <_fstat_r+0x1c>
 8006822:	6023      	str	r3, [r4, #0]
 8006824:	bd38      	pop	{r3, r4, r5, pc}
 8006826:	bf00      	nop
 8006828:	2000024c 	.word	0x2000024c

0800682c <_isatty_r>:
 800682c:	b538      	push	{r3, r4, r5, lr}
 800682e:	4d06      	ldr	r5, [pc, #24]	; (8006848 <_isatty_r+0x1c>)
 8006830:	2300      	movs	r3, #0
 8006832:	4604      	mov	r4, r0
 8006834:	4608      	mov	r0, r1
 8006836:	602b      	str	r3, [r5, #0]
 8006838:	f7fb fe2f 	bl	800249a <_isatty>
 800683c:	1c43      	adds	r3, r0, #1
 800683e:	d102      	bne.n	8006846 <_isatty_r+0x1a>
 8006840:	682b      	ldr	r3, [r5, #0]
 8006842:	b103      	cbz	r3, 8006846 <_isatty_r+0x1a>
 8006844:	6023      	str	r3, [r4, #0]
 8006846:	bd38      	pop	{r3, r4, r5, pc}
 8006848:	2000024c 	.word	0x2000024c

0800684c <_lseek_r>:
 800684c:	b538      	push	{r3, r4, r5, lr}
 800684e:	4d07      	ldr	r5, [pc, #28]	; (800686c <_lseek_r+0x20>)
 8006850:	4604      	mov	r4, r0
 8006852:	4608      	mov	r0, r1
 8006854:	4611      	mov	r1, r2
 8006856:	2200      	movs	r2, #0
 8006858:	602a      	str	r2, [r5, #0]
 800685a:	461a      	mov	r2, r3
 800685c:	f7fb fe28 	bl	80024b0 <_lseek>
 8006860:	1c43      	adds	r3, r0, #1
 8006862:	d102      	bne.n	800686a <_lseek_r+0x1e>
 8006864:	682b      	ldr	r3, [r5, #0]
 8006866:	b103      	cbz	r3, 800686a <_lseek_r+0x1e>
 8006868:	6023      	str	r3, [r4, #0]
 800686a:	bd38      	pop	{r3, r4, r5, pc}
 800686c:	2000024c 	.word	0x2000024c

08006870 <_read_r>:
 8006870:	b538      	push	{r3, r4, r5, lr}
 8006872:	4d07      	ldr	r5, [pc, #28]	; (8006890 <_read_r+0x20>)
 8006874:	4604      	mov	r4, r0
 8006876:	4608      	mov	r0, r1
 8006878:	4611      	mov	r1, r2
 800687a:	2200      	movs	r2, #0
 800687c:	602a      	str	r2, [r5, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	f7fb fdb6 	bl	80023f0 <_read>
 8006884:	1c43      	adds	r3, r0, #1
 8006886:	d102      	bne.n	800688e <_read_r+0x1e>
 8006888:	682b      	ldr	r3, [r5, #0]
 800688a:	b103      	cbz	r3, 800688e <_read_r+0x1e>
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	bd38      	pop	{r3, r4, r5, pc}
 8006890:	2000024c 	.word	0x2000024c

08006894 <pow>:
 8006894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006898:	ec59 8b10 	vmov	r8, r9, d0
 800689c:	ec57 6b11 	vmov	r6, r7, d1
 80068a0:	f000 f8a6 	bl	80069f0 <__ieee754_pow>
 80068a4:	4b4e      	ldr	r3, [pc, #312]	; (80069e0 <pow+0x14c>)
 80068a6:	f993 3000 	ldrsb.w	r3, [r3]
 80068aa:	3301      	adds	r3, #1
 80068ac:	ec55 4b10 	vmov	r4, r5, d0
 80068b0:	d015      	beq.n	80068de <pow+0x4a>
 80068b2:	4632      	mov	r2, r6
 80068b4:	463b      	mov	r3, r7
 80068b6:	4630      	mov	r0, r6
 80068b8:	4639      	mov	r1, r7
 80068ba:	f7fa f937 	bl	8000b2c <__aeabi_dcmpun>
 80068be:	b970      	cbnz	r0, 80068de <pow+0x4a>
 80068c0:	4642      	mov	r2, r8
 80068c2:	464b      	mov	r3, r9
 80068c4:	4640      	mov	r0, r8
 80068c6:	4649      	mov	r1, r9
 80068c8:	f7fa f930 	bl	8000b2c <__aeabi_dcmpun>
 80068cc:	2200      	movs	r2, #0
 80068ce:	2300      	movs	r3, #0
 80068d0:	b148      	cbz	r0, 80068e6 <pow+0x52>
 80068d2:	4630      	mov	r0, r6
 80068d4:	4639      	mov	r1, r7
 80068d6:	f7fa f8f7 	bl	8000ac8 <__aeabi_dcmpeq>
 80068da:	2800      	cmp	r0, #0
 80068dc:	d17d      	bne.n	80069da <pow+0x146>
 80068de:	ec45 4b10 	vmov	d0, r4, r5
 80068e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068e6:	4640      	mov	r0, r8
 80068e8:	4649      	mov	r1, r9
 80068ea:	f7fa f8ed 	bl	8000ac8 <__aeabi_dcmpeq>
 80068ee:	b1e0      	cbz	r0, 800692a <pow+0x96>
 80068f0:	2200      	movs	r2, #0
 80068f2:	2300      	movs	r3, #0
 80068f4:	4630      	mov	r0, r6
 80068f6:	4639      	mov	r1, r7
 80068f8:	f7fa f8e6 	bl	8000ac8 <__aeabi_dcmpeq>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	d16c      	bne.n	80069da <pow+0x146>
 8006900:	ec47 6b10 	vmov	d0, r6, r7
 8006904:	f000 fe53 	bl	80075ae <finite>
 8006908:	2800      	cmp	r0, #0
 800690a:	d0e8      	beq.n	80068de <pow+0x4a>
 800690c:	2200      	movs	r2, #0
 800690e:	2300      	movs	r3, #0
 8006910:	4630      	mov	r0, r6
 8006912:	4639      	mov	r1, r7
 8006914:	f7fa f8e2 	bl	8000adc <__aeabi_dcmplt>
 8006918:	2800      	cmp	r0, #0
 800691a:	d0e0      	beq.n	80068de <pow+0x4a>
 800691c:	f7fd f8ec 	bl	8003af8 <__errno>
 8006920:	2321      	movs	r3, #33	; 0x21
 8006922:	6003      	str	r3, [r0, #0]
 8006924:	2400      	movs	r4, #0
 8006926:	4d2f      	ldr	r5, [pc, #188]	; (80069e4 <pow+0x150>)
 8006928:	e7d9      	b.n	80068de <pow+0x4a>
 800692a:	ec45 4b10 	vmov	d0, r4, r5
 800692e:	f000 fe3e 	bl	80075ae <finite>
 8006932:	bbb8      	cbnz	r0, 80069a4 <pow+0x110>
 8006934:	ec49 8b10 	vmov	d0, r8, r9
 8006938:	f000 fe39 	bl	80075ae <finite>
 800693c:	b390      	cbz	r0, 80069a4 <pow+0x110>
 800693e:	ec47 6b10 	vmov	d0, r6, r7
 8006942:	f000 fe34 	bl	80075ae <finite>
 8006946:	b368      	cbz	r0, 80069a4 <pow+0x110>
 8006948:	4622      	mov	r2, r4
 800694a:	462b      	mov	r3, r5
 800694c:	4620      	mov	r0, r4
 800694e:	4629      	mov	r1, r5
 8006950:	f7fa f8ec 	bl	8000b2c <__aeabi_dcmpun>
 8006954:	b160      	cbz	r0, 8006970 <pow+0xdc>
 8006956:	f7fd f8cf 	bl	8003af8 <__errno>
 800695a:	2321      	movs	r3, #33	; 0x21
 800695c:	6003      	str	r3, [r0, #0]
 800695e:	2200      	movs	r2, #0
 8006960:	2300      	movs	r3, #0
 8006962:	4610      	mov	r0, r2
 8006964:	4619      	mov	r1, r3
 8006966:	f7f9 ff71 	bl	800084c <__aeabi_ddiv>
 800696a:	4604      	mov	r4, r0
 800696c:	460d      	mov	r5, r1
 800696e:	e7b6      	b.n	80068de <pow+0x4a>
 8006970:	f7fd f8c2 	bl	8003af8 <__errno>
 8006974:	2322      	movs	r3, #34	; 0x22
 8006976:	6003      	str	r3, [r0, #0]
 8006978:	2200      	movs	r2, #0
 800697a:	2300      	movs	r3, #0
 800697c:	4640      	mov	r0, r8
 800697e:	4649      	mov	r1, r9
 8006980:	f7fa f8ac 	bl	8000adc <__aeabi_dcmplt>
 8006984:	2400      	movs	r4, #0
 8006986:	b158      	cbz	r0, 80069a0 <pow+0x10c>
 8006988:	ec47 6b10 	vmov	d0, r6, r7
 800698c:	f000 fe24 	bl	80075d8 <rint>
 8006990:	4632      	mov	r2, r6
 8006992:	ec51 0b10 	vmov	r0, r1, d0
 8006996:	463b      	mov	r3, r7
 8006998:	f7fa f896 	bl	8000ac8 <__aeabi_dcmpeq>
 800699c:	2800      	cmp	r0, #0
 800699e:	d0c2      	beq.n	8006926 <pow+0x92>
 80069a0:	4d11      	ldr	r5, [pc, #68]	; (80069e8 <pow+0x154>)
 80069a2:	e79c      	b.n	80068de <pow+0x4a>
 80069a4:	2200      	movs	r2, #0
 80069a6:	2300      	movs	r3, #0
 80069a8:	4620      	mov	r0, r4
 80069aa:	4629      	mov	r1, r5
 80069ac:	f7fa f88c 	bl	8000ac8 <__aeabi_dcmpeq>
 80069b0:	2800      	cmp	r0, #0
 80069b2:	d094      	beq.n	80068de <pow+0x4a>
 80069b4:	ec49 8b10 	vmov	d0, r8, r9
 80069b8:	f000 fdf9 	bl	80075ae <finite>
 80069bc:	2800      	cmp	r0, #0
 80069be:	d08e      	beq.n	80068de <pow+0x4a>
 80069c0:	ec47 6b10 	vmov	d0, r6, r7
 80069c4:	f000 fdf3 	bl	80075ae <finite>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	d088      	beq.n	80068de <pow+0x4a>
 80069cc:	f7fd f894 	bl	8003af8 <__errno>
 80069d0:	2322      	movs	r3, #34	; 0x22
 80069d2:	6003      	str	r3, [r0, #0]
 80069d4:	2400      	movs	r4, #0
 80069d6:	2500      	movs	r5, #0
 80069d8:	e781      	b.n	80068de <pow+0x4a>
 80069da:	4d04      	ldr	r5, [pc, #16]	; (80069ec <pow+0x158>)
 80069dc:	2400      	movs	r4, #0
 80069de:	e77e      	b.n	80068de <pow+0x4a>
 80069e0:	200001d8 	.word	0x200001d8
 80069e4:	fff00000 	.word	0xfff00000
 80069e8:	7ff00000 	.word	0x7ff00000
 80069ec:	3ff00000 	.word	0x3ff00000

080069f0 <__ieee754_pow>:
 80069f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f4:	ed2d 8b06 	vpush	{d8-d10}
 80069f8:	b08d      	sub	sp, #52	; 0x34
 80069fa:	ed8d 1b02 	vstr	d1, [sp, #8]
 80069fe:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8006a02:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8006a06:	ea56 0100 	orrs.w	r1, r6, r0
 8006a0a:	ec53 2b10 	vmov	r2, r3, d0
 8006a0e:	f000 84d1 	beq.w	80073b4 <__ieee754_pow+0x9c4>
 8006a12:	497f      	ldr	r1, [pc, #508]	; (8006c10 <__ieee754_pow+0x220>)
 8006a14:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8006a18:	428c      	cmp	r4, r1
 8006a1a:	ee10 8a10 	vmov	r8, s0
 8006a1e:	4699      	mov	r9, r3
 8006a20:	dc09      	bgt.n	8006a36 <__ieee754_pow+0x46>
 8006a22:	d103      	bne.n	8006a2c <__ieee754_pow+0x3c>
 8006a24:	b97a      	cbnz	r2, 8006a46 <__ieee754_pow+0x56>
 8006a26:	42a6      	cmp	r6, r4
 8006a28:	dd02      	ble.n	8006a30 <__ieee754_pow+0x40>
 8006a2a:	e00c      	b.n	8006a46 <__ieee754_pow+0x56>
 8006a2c:	428e      	cmp	r6, r1
 8006a2e:	dc02      	bgt.n	8006a36 <__ieee754_pow+0x46>
 8006a30:	428e      	cmp	r6, r1
 8006a32:	d110      	bne.n	8006a56 <__ieee754_pow+0x66>
 8006a34:	b178      	cbz	r0, 8006a56 <__ieee754_pow+0x66>
 8006a36:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006a3a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006a3e:	ea54 0308 	orrs.w	r3, r4, r8
 8006a42:	f000 84b7 	beq.w	80073b4 <__ieee754_pow+0x9c4>
 8006a46:	4873      	ldr	r0, [pc, #460]	; (8006c14 <__ieee754_pow+0x224>)
 8006a48:	b00d      	add	sp, #52	; 0x34
 8006a4a:	ecbd 8b06 	vpop	{d8-d10}
 8006a4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a52:	f000 bdb9 	b.w	80075c8 <nan>
 8006a56:	f1b9 0f00 	cmp.w	r9, #0
 8006a5a:	da36      	bge.n	8006aca <__ieee754_pow+0xda>
 8006a5c:	496e      	ldr	r1, [pc, #440]	; (8006c18 <__ieee754_pow+0x228>)
 8006a5e:	428e      	cmp	r6, r1
 8006a60:	dc51      	bgt.n	8006b06 <__ieee754_pow+0x116>
 8006a62:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8006a66:	428e      	cmp	r6, r1
 8006a68:	f340 84af 	ble.w	80073ca <__ieee754_pow+0x9da>
 8006a6c:	1531      	asrs	r1, r6, #20
 8006a6e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006a72:	2914      	cmp	r1, #20
 8006a74:	dd0f      	ble.n	8006a96 <__ieee754_pow+0xa6>
 8006a76:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8006a7a:	fa20 fc01 	lsr.w	ip, r0, r1
 8006a7e:	fa0c f101 	lsl.w	r1, ip, r1
 8006a82:	4281      	cmp	r1, r0
 8006a84:	f040 84a1 	bne.w	80073ca <__ieee754_pow+0x9da>
 8006a88:	f00c 0c01 	and.w	ip, ip, #1
 8006a8c:	f1cc 0102 	rsb	r1, ip, #2
 8006a90:	9100      	str	r1, [sp, #0]
 8006a92:	b180      	cbz	r0, 8006ab6 <__ieee754_pow+0xc6>
 8006a94:	e059      	b.n	8006b4a <__ieee754_pow+0x15a>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	d155      	bne.n	8006b46 <__ieee754_pow+0x156>
 8006a9a:	f1c1 0114 	rsb	r1, r1, #20
 8006a9e:	fa46 fc01 	asr.w	ip, r6, r1
 8006aa2:	fa0c f101 	lsl.w	r1, ip, r1
 8006aa6:	42b1      	cmp	r1, r6
 8006aa8:	f040 848c 	bne.w	80073c4 <__ieee754_pow+0x9d4>
 8006aac:	f00c 0c01 	and.w	ip, ip, #1
 8006ab0:	f1cc 0102 	rsb	r1, ip, #2
 8006ab4:	9100      	str	r1, [sp, #0]
 8006ab6:	4959      	ldr	r1, [pc, #356]	; (8006c1c <__ieee754_pow+0x22c>)
 8006ab8:	428e      	cmp	r6, r1
 8006aba:	d12d      	bne.n	8006b18 <__ieee754_pow+0x128>
 8006abc:	2f00      	cmp	r7, #0
 8006abe:	da79      	bge.n	8006bb4 <__ieee754_pow+0x1c4>
 8006ac0:	4956      	ldr	r1, [pc, #344]	; (8006c1c <__ieee754_pow+0x22c>)
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	f7f9 fec2 	bl	800084c <__aeabi_ddiv>
 8006ac8:	e016      	b.n	8006af8 <__ieee754_pow+0x108>
 8006aca:	2100      	movs	r1, #0
 8006acc:	9100      	str	r1, [sp, #0]
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	d13b      	bne.n	8006b4a <__ieee754_pow+0x15a>
 8006ad2:	494f      	ldr	r1, [pc, #316]	; (8006c10 <__ieee754_pow+0x220>)
 8006ad4:	428e      	cmp	r6, r1
 8006ad6:	d1ee      	bne.n	8006ab6 <__ieee754_pow+0xc6>
 8006ad8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006adc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006ae0:	ea53 0308 	orrs.w	r3, r3, r8
 8006ae4:	f000 8466 	beq.w	80073b4 <__ieee754_pow+0x9c4>
 8006ae8:	4b4d      	ldr	r3, [pc, #308]	; (8006c20 <__ieee754_pow+0x230>)
 8006aea:	429c      	cmp	r4, r3
 8006aec:	dd0d      	ble.n	8006b0a <__ieee754_pow+0x11a>
 8006aee:	2f00      	cmp	r7, #0
 8006af0:	f280 8464 	bge.w	80073bc <__ieee754_pow+0x9cc>
 8006af4:	2000      	movs	r0, #0
 8006af6:	2100      	movs	r1, #0
 8006af8:	ec41 0b10 	vmov	d0, r0, r1
 8006afc:	b00d      	add	sp, #52	; 0x34
 8006afe:	ecbd 8b06 	vpop	{d8-d10}
 8006b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b06:	2102      	movs	r1, #2
 8006b08:	e7e0      	b.n	8006acc <__ieee754_pow+0xdc>
 8006b0a:	2f00      	cmp	r7, #0
 8006b0c:	daf2      	bge.n	8006af4 <__ieee754_pow+0x104>
 8006b0e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8006b12:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006b16:	e7ef      	b.n	8006af8 <__ieee754_pow+0x108>
 8006b18:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8006b1c:	d104      	bne.n	8006b28 <__ieee754_pow+0x138>
 8006b1e:	4610      	mov	r0, r2
 8006b20:	4619      	mov	r1, r3
 8006b22:	f7f9 fd69 	bl	80005f8 <__aeabi_dmul>
 8006b26:	e7e7      	b.n	8006af8 <__ieee754_pow+0x108>
 8006b28:	493e      	ldr	r1, [pc, #248]	; (8006c24 <__ieee754_pow+0x234>)
 8006b2a:	428f      	cmp	r7, r1
 8006b2c:	d10d      	bne.n	8006b4a <__ieee754_pow+0x15a>
 8006b2e:	f1b9 0f00 	cmp.w	r9, #0
 8006b32:	db0a      	blt.n	8006b4a <__ieee754_pow+0x15a>
 8006b34:	ec43 2b10 	vmov	d0, r2, r3
 8006b38:	b00d      	add	sp, #52	; 0x34
 8006b3a:	ecbd 8b06 	vpop	{d8-d10}
 8006b3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b42:	f000 bc77 	b.w	8007434 <__ieee754_sqrt>
 8006b46:	2100      	movs	r1, #0
 8006b48:	9100      	str	r1, [sp, #0]
 8006b4a:	ec43 2b10 	vmov	d0, r2, r3
 8006b4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b52:	f000 fd23 	bl	800759c <fabs>
 8006b56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b5a:	ec51 0b10 	vmov	r0, r1, d0
 8006b5e:	f1b8 0f00 	cmp.w	r8, #0
 8006b62:	d12a      	bne.n	8006bba <__ieee754_pow+0x1ca>
 8006b64:	b12c      	cbz	r4, 8006b72 <__ieee754_pow+0x182>
 8006b66:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8006c1c <__ieee754_pow+0x22c>
 8006b6a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8006b6e:	45e6      	cmp	lr, ip
 8006b70:	d123      	bne.n	8006bba <__ieee754_pow+0x1ca>
 8006b72:	2f00      	cmp	r7, #0
 8006b74:	da05      	bge.n	8006b82 <__ieee754_pow+0x192>
 8006b76:	4602      	mov	r2, r0
 8006b78:	460b      	mov	r3, r1
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	4927      	ldr	r1, [pc, #156]	; (8006c1c <__ieee754_pow+0x22c>)
 8006b7e:	f7f9 fe65 	bl	800084c <__aeabi_ddiv>
 8006b82:	f1b9 0f00 	cmp.w	r9, #0
 8006b86:	dab7      	bge.n	8006af8 <__ieee754_pow+0x108>
 8006b88:	9b00      	ldr	r3, [sp, #0]
 8006b8a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006b8e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006b92:	4323      	orrs	r3, r4
 8006b94:	d108      	bne.n	8006ba8 <__ieee754_pow+0x1b8>
 8006b96:	4602      	mov	r2, r0
 8006b98:	460b      	mov	r3, r1
 8006b9a:	4610      	mov	r0, r2
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	f7f9 fb73 	bl	8000288 <__aeabi_dsub>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	e78d      	b.n	8006ac4 <__ieee754_pow+0xd4>
 8006ba8:	9b00      	ldr	r3, [sp, #0]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d1a4      	bne.n	8006af8 <__ieee754_pow+0x108>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006bb4:	4610      	mov	r0, r2
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	e79e      	b.n	8006af8 <__ieee754_pow+0x108>
 8006bba:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8006bbe:	f10c 35ff 	add.w	r5, ip, #4294967295
 8006bc2:	950a      	str	r5, [sp, #40]	; 0x28
 8006bc4:	9d00      	ldr	r5, [sp, #0]
 8006bc6:	46ac      	mov	ip, r5
 8006bc8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006bca:	ea5c 0505 	orrs.w	r5, ip, r5
 8006bce:	d0e4      	beq.n	8006b9a <__ieee754_pow+0x1aa>
 8006bd0:	4b15      	ldr	r3, [pc, #84]	; (8006c28 <__ieee754_pow+0x238>)
 8006bd2:	429e      	cmp	r6, r3
 8006bd4:	f340 80fc 	ble.w	8006dd0 <__ieee754_pow+0x3e0>
 8006bd8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006bdc:	429e      	cmp	r6, r3
 8006bde:	4b10      	ldr	r3, [pc, #64]	; (8006c20 <__ieee754_pow+0x230>)
 8006be0:	dd07      	ble.n	8006bf2 <__ieee754_pow+0x202>
 8006be2:	429c      	cmp	r4, r3
 8006be4:	dc0a      	bgt.n	8006bfc <__ieee754_pow+0x20c>
 8006be6:	2f00      	cmp	r7, #0
 8006be8:	da84      	bge.n	8006af4 <__ieee754_pow+0x104>
 8006bea:	a307      	add	r3, pc, #28	; (adr r3, 8006c08 <__ieee754_pow+0x218>)
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	e795      	b.n	8006b1e <__ieee754_pow+0x12e>
 8006bf2:	429c      	cmp	r4, r3
 8006bf4:	dbf7      	blt.n	8006be6 <__ieee754_pow+0x1f6>
 8006bf6:	4b09      	ldr	r3, [pc, #36]	; (8006c1c <__ieee754_pow+0x22c>)
 8006bf8:	429c      	cmp	r4, r3
 8006bfa:	dd17      	ble.n	8006c2c <__ieee754_pow+0x23c>
 8006bfc:	2f00      	cmp	r7, #0
 8006bfe:	dcf4      	bgt.n	8006bea <__ieee754_pow+0x1fa>
 8006c00:	e778      	b.n	8006af4 <__ieee754_pow+0x104>
 8006c02:	bf00      	nop
 8006c04:	f3af 8000 	nop.w
 8006c08:	8800759c 	.word	0x8800759c
 8006c0c:	7e37e43c 	.word	0x7e37e43c
 8006c10:	7ff00000 	.word	0x7ff00000
 8006c14:	08007af8 	.word	0x08007af8
 8006c18:	433fffff 	.word	0x433fffff
 8006c1c:	3ff00000 	.word	0x3ff00000
 8006c20:	3fefffff 	.word	0x3fefffff
 8006c24:	3fe00000 	.word	0x3fe00000
 8006c28:	41e00000 	.word	0x41e00000
 8006c2c:	4b64      	ldr	r3, [pc, #400]	; (8006dc0 <__ieee754_pow+0x3d0>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f7f9 fb2a 	bl	8000288 <__aeabi_dsub>
 8006c34:	a356      	add	r3, pc, #344	; (adr r3, 8006d90 <__ieee754_pow+0x3a0>)
 8006c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	460d      	mov	r5, r1
 8006c3e:	f7f9 fcdb 	bl	80005f8 <__aeabi_dmul>
 8006c42:	a355      	add	r3, pc, #340	; (adr r3, 8006d98 <__ieee754_pow+0x3a8>)
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	4606      	mov	r6, r0
 8006c4a:	460f      	mov	r7, r1
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	4629      	mov	r1, r5
 8006c50:	f7f9 fcd2 	bl	80005f8 <__aeabi_dmul>
 8006c54:	4b5b      	ldr	r3, [pc, #364]	; (8006dc4 <__ieee754_pow+0x3d4>)
 8006c56:	4682      	mov	sl, r0
 8006c58:	468b      	mov	fp, r1
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	4629      	mov	r1, r5
 8006c60:	f7f9 fcca 	bl	80005f8 <__aeabi_dmul>
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	a14d      	add	r1, pc, #308	; (adr r1, 8006da0 <__ieee754_pow+0x3b0>)
 8006c6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c6e:	f7f9 fb0b 	bl	8000288 <__aeabi_dsub>
 8006c72:	4622      	mov	r2, r4
 8006c74:	462b      	mov	r3, r5
 8006c76:	f7f9 fcbf 	bl	80005f8 <__aeabi_dmul>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	2000      	movs	r0, #0
 8006c80:	4951      	ldr	r1, [pc, #324]	; (8006dc8 <__ieee754_pow+0x3d8>)
 8006c82:	f7f9 fb01 	bl	8000288 <__aeabi_dsub>
 8006c86:	4622      	mov	r2, r4
 8006c88:	4680      	mov	r8, r0
 8006c8a:	4689      	mov	r9, r1
 8006c8c:	462b      	mov	r3, r5
 8006c8e:	4620      	mov	r0, r4
 8006c90:	4629      	mov	r1, r5
 8006c92:	f7f9 fcb1 	bl	80005f8 <__aeabi_dmul>
 8006c96:	4602      	mov	r2, r0
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4640      	mov	r0, r8
 8006c9c:	4649      	mov	r1, r9
 8006c9e:	f7f9 fcab 	bl	80005f8 <__aeabi_dmul>
 8006ca2:	a341      	add	r3, pc, #260	; (adr r3, 8006da8 <__ieee754_pow+0x3b8>)
 8006ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca8:	f7f9 fca6 	bl	80005f8 <__aeabi_dmul>
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	4650      	mov	r0, sl
 8006cb2:	4659      	mov	r1, fp
 8006cb4:	f7f9 fae8 	bl	8000288 <__aeabi_dsub>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	460b      	mov	r3, r1
 8006cbc:	4680      	mov	r8, r0
 8006cbe:	4689      	mov	r9, r1
 8006cc0:	4630      	mov	r0, r6
 8006cc2:	4639      	mov	r1, r7
 8006cc4:	f7f9 fae2 	bl	800028c <__adddf3>
 8006cc8:	2400      	movs	r4, #0
 8006cca:	4632      	mov	r2, r6
 8006ccc:	463b      	mov	r3, r7
 8006cce:	4620      	mov	r0, r4
 8006cd0:	460d      	mov	r5, r1
 8006cd2:	f7f9 fad9 	bl	8000288 <__aeabi_dsub>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	460b      	mov	r3, r1
 8006cda:	4640      	mov	r0, r8
 8006cdc:	4649      	mov	r1, r9
 8006cde:	f7f9 fad3 	bl	8000288 <__aeabi_dsub>
 8006ce2:	9b00      	ldr	r3, [sp, #0]
 8006ce4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	4682      	mov	sl, r0
 8006cec:	468b      	mov	fp, r1
 8006cee:	f040 81f1 	bne.w	80070d4 <__ieee754_pow+0x6e4>
 8006cf2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8006db0 <__ieee754_pow+0x3c0>
 8006cf6:	eeb0 8a47 	vmov.f32	s16, s14
 8006cfa:	eef0 8a67 	vmov.f32	s17, s15
 8006cfe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d02:	2600      	movs	r6, #0
 8006d04:	4632      	mov	r2, r6
 8006d06:	463b      	mov	r3, r7
 8006d08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d0c:	f7f9 fabc 	bl	8000288 <__aeabi_dsub>
 8006d10:	4622      	mov	r2, r4
 8006d12:	462b      	mov	r3, r5
 8006d14:	f7f9 fc70 	bl	80005f8 <__aeabi_dmul>
 8006d18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d1c:	4680      	mov	r8, r0
 8006d1e:	4689      	mov	r9, r1
 8006d20:	4650      	mov	r0, sl
 8006d22:	4659      	mov	r1, fp
 8006d24:	f7f9 fc68 	bl	80005f8 <__aeabi_dmul>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	4640      	mov	r0, r8
 8006d2e:	4649      	mov	r1, r9
 8006d30:	f7f9 faac 	bl	800028c <__adddf3>
 8006d34:	4632      	mov	r2, r6
 8006d36:	463b      	mov	r3, r7
 8006d38:	4680      	mov	r8, r0
 8006d3a:	4689      	mov	r9, r1
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	4629      	mov	r1, r5
 8006d40:	f7f9 fc5a 	bl	80005f8 <__aeabi_dmul>
 8006d44:	460b      	mov	r3, r1
 8006d46:	4604      	mov	r4, r0
 8006d48:	460d      	mov	r5, r1
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	4649      	mov	r1, r9
 8006d4e:	4640      	mov	r0, r8
 8006d50:	f7f9 fa9c 	bl	800028c <__adddf3>
 8006d54:	4b1d      	ldr	r3, [pc, #116]	; (8006dcc <__ieee754_pow+0x3dc>)
 8006d56:	4299      	cmp	r1, r3
 8006d58:	ec45 4b19 	vmov	d9, r4, r5
 8006d5c:	4606      	mov	r6, r0
 8006d5e:	460f      	mov	r7, r1
 8006d60:	468b      	mov	fp, r1
 8006d62:	f340 82fe 	ble.w	8007362 <__ieee754_pow+0x972>
 8006d66:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006d6a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006d6e:	4303      	orrs	r3, r0
 8006d70:	f000 81f0 	beq.w	8007154 <__ieee754_pow+0x764>
 8006d74:	a310      	add	r3, pc, #64	; (adr r3, 8006db8 <__ieee754_pow+0x3c8>)
 8006d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7a:	ec51 0b18 	vmov	r0, r1, d8
 8006d7e:	f7f9 fc3b 	bl	80005f8 <__aeabi_dmul>
 8006d82:	a30d      	add	r3, pc, #52	; (adr r3, 8006db8 <__ieee754_pow+0x3c8>)
 8006d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d88:	e6cb      	b.n	8006b22 <__ieee754_pow+0x132>
 8006d8a:	bf00      	nop
 8006d8c:	f3af 8000 	nop.w
 8006d90:	60000000 	.word	0x60000000
 8006d94:	3ff71547 	.word	0x3ff71547
 8006d98:	f85ddf44 	.word	0xf85ddf44
 8006d9c:	3e54ae0b 	.word	0x3e54ae0b
 8006da0:	55555555 	.word	0x55555555
 8006da4:	3fd55555 	.word	0x3fd55555
 8006da8:	652b82fe 	.word	0x652b82fe
 8006dac:	3ff71547 	.word	0x3ff71547
 8006db0:	00000000 	.word	0x00000000
 8006db4:	bff00000 	.word	0xbff00000
 8006db8:	8800759c 	.word	0x8800759c
 8006dbc:	7e37e43c 	.word	0x7e37e43c
 8006dc0:	3ff00000 	.word	0x3ff00000
 8006dc4:	3fd00000 	.word	0x3fd00000
 8006dc8:	3fe00000 	.word	0x3fe00000
 8006dcc:	408fffff 	.word	0x408fffff
 8006dd0:	4bd7      	ldr	r3, [pc, #860]	; (8007130 <__ieee754_pow+0x740>)
 8006dd2:	ea03 0309 	and.w	r3, r3, r9
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	b92b      	cbnz	r3, 8006de6 <__ieee754_pow+0x3f6>
 8006dda:	4bd6      	ldr	r3, [pc, #856]	; (8007134 <__ieee754_pow+0x744>)
 8006ddc:	f7f9 fc0c 	bl	80005f8 <__aeabi_dmul>
 8006de0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006de4:	460c      	mov	r4, r1
 8006de6:	1523      	asrs	r3, r4, #20
 8006de8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006dec:	4413      	add	r3, r2
 8006dee:	9309      	str	r3, [sp, #36]	; 0x24
 8006df0:	4bd1      	ldr	r3, [pc, #836]	; (8007138 <__ieee754_pow+0x748>)
 8006df2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006df6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006dfa:	429c      	cmp	r4, r3
 8006dfc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006e00:	dd08      	ble.n	8006e14 <__ieee754_pow+0x424>
 8006e02:	4bce      	ldr	r3, [pc, #824]	; (800713c <__ieee754_pow+0x74c>)
 8006e04:	429c      	cmp	r4, r3
 8006e06:	f340 8163 	ble.w	80070d0 <__ieee754_pow+0x6e0>
 8006e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e10:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006e14:	2400      	movs	r4, #0
 8006e16:	00e3      	lsls	r3, r4, #3
 8006e18:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e1a:	4bc9      	ldr	r3, [pc, #804]	; (8007140 <__ieee754_pow+0x750>)
 8006e1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e20:	ed93 7b00 	vldr	d7, [r3]
 8006e24:	4629      	mov	r1, r5
 8006e26:	ec53 2b17 	vmov	r2, r3, d7
 8006e2a:	eeb0 8a47 	vmov.f32	s16, s14
 8006e2e:	eef0 8a67 	vmov.f32	s17, s15
 8006e32:	4682      	mov	sl, r0
 8006e34:	f7f9 fa28 	bl	8000288 <__aeabi_dsub>
 8006e38:	4652      	mov	r2, sl
 8006e3a:	4606      	mov	r6, r0
 8006e3c:	460f      	mov	r7, r1
 8006e3e:	462b      	mov	r3, r5
 8006e40:	ec51 0b18 	vmov	r0, r1, d8
 8006e44:	f7f9 fa22 	bl	800028c <__adddf3>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	49bd      	ldr	r1, [pc, #756]	; (8007144 <__ieee754_pow+0x754>)
 8006e50:	f7f9 fcfc 	bl	800084c <__aeabi_ddiv>
 8006e54:	ec41 0b19 	vmov	d9, r0, r1
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	4639      	mov	r1, r7
 8006e60:	f7f9 fbca 	bl	80005f8 <__aeabi_dmul>
 8006e64:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006e68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e6c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e70:	2300      	movs	r3, #0
 8006e72:	9304      	str	r3, [sp, #16]
 8006e74:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006e78:	46ab      	mov	fp, r5
 8006e7a:	106d      	asrs	r5, r5, #1
 8006e7c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006e80:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006e84:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006e88:	2200      	movs	r2, #0
 8006e8a:	4640      	mov	r0, r8
 8006e8c:	4649      	mov	r1, r9
 8006e8e:	4614      	mov	r4, r2
 8006e90:	461d      	mov	r5, r3
 8006e92:	f7f9 fbb1 	bl	80005f8 <__aeabi_dmul>
 8006e96:	4602      	mov	r2, r0
 8006e98:	460b      	mov	r3, r1
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	4639      	mov	r1, r7
 8006e9e:	f7f9 f9f3 	bl	8000288 <__aeabi_dsub>
 8006ea2:	ec53 2b18 	vmov	r2, r3, d8
 8006ea6:	4606      	mov	r6, r0
 8006ea8:	460f      	mov	r7, r1
 8006eaa:	4620      	mov	r0, r4
 8006eac:	4629      	mov	r1, r5
 8006eae:	f7f9 f9eb 	bl	8000288 <__aeabi_dsub>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	4650      	mov	r0, sl
 8006eb8:	4659      	mov	r1, fp
 8006eba:	f7f9 f9e5 	bl	8000288 <__aeabi_dsub>
 8006ebe:	4642      	mov	r2, r8
 8006ec0:	464b      	mov	r3, r9
 8006ec2:	f7f9 fb99 	bl	80005f8 <__aeabi_dmul>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	460b      	mov	r3, r1
 8006eca:	4630      	mov	r0, r6
 8006ecc:	4639      	mov	r1, r7
 8006ece:	f7f9 f9db 	bl	8000288 <__aeabi_dsub>
 8006ed2:	ec53 2b19 	vmov	r2, r3, d9
 8006ed6:	f7f9 fb8f 	bl	80005f8 <__aeabi_dmul>
 8006eda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ede:	ec41 0b18 	vmov	d8, r0, r1
 8006ee2:	4610      	mov	r0, r2
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	f7f9 fb87 	bl	80005f8 <__aeabi_dmul>
 8006eea:	a37d      	add	r3, pc, #500	; (adr r3, 80070e0 <__ieee754_pow+0x6f0>)
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	460d      	mov	r5, r1
 8006ef4:	f7f9 fb80 	bl	80005f8 <__aeabi_dmul>
 8006ef8:	a37b      	add	r3, pc, #492	; (adr r3, 80070e8 <__ieee754_pow+0x6f8>)
 8006efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efe:	f7f9 f9c5 	bl	800028c <__adddf3>
 8006f02:	4622      	mov	r2, r4
 8006f04:	462b      	mov	r3, r5
 8006f06:	f7f9 fb77 	bl	80005f8 <__aeabi_dmul>
 8006f0a:	a379      	add	r3, pc, #484	; (adr r3, 80070f0 <__ieee754_pow+0x700>)
 8006f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f10:	f7f9 f9bc 	bl	800028c <__adddf3>
 8006f14:	4622      	mov	r2, r4
 8006f16:	462b      	mov	r3, r5
 8006f18:	f7f9 fb6e 	bl	80005f8 <__aeabi_dmul>
 8006f1c:	a376      	add	r3, pc, #472	; (adr r3, 80070f8 <__ieee754_pow+0x708>)
 8006f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f22:	f7f9 f9b3 	bl	800028c <__adddf3>
 8006f26:	4622      	mov	r2, r4
 8006f28:	462b      	mov	r3, r5
 8006f2a:	f7f9 fb65 	bl	80005f8 <__aeabi_dmul>
 8006f2e:	a374      	add	r3, pc, #464	; (adr r3, 8007100 <__ieee754_pow+0x710>)
 8006f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f34:	f7f9 f9aa 	bl	800028c <__adddf3>
 8006f38:	4622      	mov	r2, r4
 8006f3a:	462b      	mov	r3, r5
 8006f3c:	f7f9 fb5c 	bl	80005f8 <__aeabi_dmul>
 8006f40:	a371      	add	r3, pc, #452	; (adr r3, 8007108 <__ieee754_pow+0x718>)
 8006f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f46:	f7f9 f9a1 	bl	800028c <__adddf3>
 8006f4a:	4622      	mov	r2, r4
 8006f4c:	4606      	mov	r6, r0
 8006f4e:	460f      	mov	r7, r1
 8006f50:	462b      	mov	r3, r5
 8006f52:	4620      	mov	r0, r4
 8006f54:	4629      	mov	r1, r5
 8006f56:	f7f9 fb4f 	bl	80005f8 <__aeabi_dmul>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	4630      	mov	r0, r6
 8006f60:	4639      	mov	r1, r7
 8006f62:	f7f9 fb49 	bl	80005f8 <__aeabi_dmul>
 8006f66:	4642      	mov	r2, r8
 8006f68:	4604      	mov	r4, r0
 8006f6a:	460d      	mov	r5, r1
 8006f6c:	464b      	mov	r3, r9
 8006f6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f72:	f7f9 f98b 	bl	800028c <__adddf3>
 8006f76:	ec53 2b18 	vmov	r2, r3, d8
 8006f7a:	f7f9 fb3d 	bl	80005f8 <__aeabi_dmul>
 8006f7e:	4622      	mov	r2, r4
 8006f80:	462b      	mov	r3, r5
 8006f82:	f7f9 f983 	bl	800028c <__adddf3>
 8006f86:	4642      	mov	r2, r8
 8006f88:	4682      	mov	sl, r0
 8006f8a:	468b      	mov	fp, r1
 8006f8c:	464b      	mov	r3, r9
 8006f8e:	4640      	mov	r0, r8
 8006f90:	4649      	mov	r1, r9
 8006f92:	f7f9 fb31 	bl	80005f8 <__aeabi_dmul>
 8006f96:	4b6c      	ldr	r3, [pc, #432]	; (8007148 <__ieee754_pow+0x758>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	4606      	mov	r6, r0
 8006f9c:	460f      	mov	r7, r1
 8006f9e:	f7f9 f975 	bl	800028c <__adddf3>
 8006fa2:	4652      	mov	r2, sl
 8006fa4:	465b      	mov	r3, fp
 8006fa6:	f7f9 f971 	bl	800028c <__adddf3>
 8006faa:	9c04      	ldr	r4, [sp, #16]
 8006fac:	460d      	mov	r5, r1
 8006fae:	4622      	mov	r2, r4
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	4640      	mov	r0, r8
 8006fb4:	4649      	mov	r1, r9
 8006fb6:	f7f9 fb1f 	bl	80005f8 <__aeabi_dmul>
 8006fba:	4b63      	ldr	r3, [pc, #396]	; (8007148 <__ieee754_pow+0x758>)
 8006fbc:	4680      	mov	r8, r0
 8006fbe:	4689      	mov	r9, r1
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	4629      	mov	r1, r5
 8006fc6:	f7f9 f95f 	bl	8000288 <__aeabi_dsub>
 8006fca:	4632      	mov	r2, r6
 8006fcc:	463b      	mov	r3, r7
 8006fce:	f7f9 f95b 	bl	8000288 <__aeabi_dsub>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	4650      	mov	r0, sl
 8006fd8:	4659      	mov	r1, fp
 8006fda:	f7f9 f955 	bl	8000288 <__aeabi_dsub>
 8006fde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006fe2:	f7f9 fb09 	bl	80005f8 <__aeabi_dmul>
 8006fe6:	4622      	mov	r2, r4
 8006fe8:	4606      	mov	r6, r0
 8006fea:	460f      	mov	r7, r1
 8006fec:	462b      	mov	r3, r5
 8006fee:	ec51 0b18 	vmov	r0, r1, d8
 8006ff2:	f7f9 fb01 	bl	80005f8 <__aeabi_dmul>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	4639      	mov	r1, r7
 8006ffe:	f7f9 f945 	bl	800028c <__adddf3>
 8007002:	4606      	mov	r6, r0
 8007004:	460f      	mov	r7, r1
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	4640      	mov	r0, r8
 800700c:	4649      	mov	r1, r9
 800700e:	f7f9 f93d 	bl	800028c <__adddf3>
 8007012:	9c04      	ldr	r4, [sp, #16]
 8007014:	a33e      	add	r3, pc, #248	; (adr r3, 8007110 <__ieee754_pow+0x720>)
 8007016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701a:	4620      	mov	r0, r4
 800701c:	460d      	mov	r5, r1
 800701e:	f7f9 faeb 	bl	80005f8 <__aeabi_dmul>
 8007022:	4642      	mov	r2, r8
 8007024:	ec41 0b18 	vmov	d8, r0, r1
 8007028:	464b      	mov	r3, r9
 800702a:	4620      	mov	r0, r4
 800702c:	4629      	mov	r1, r5
 800702e:	f7f9 f92b 	bl	8000288 <__aeabi_dsub>
 8007032:	4602      	mov	r2, r0
 8007034:	460b      	mov	r3, r1
 8007036:	4630      	mov	r0, r6
 8007038:	4639      	mov	r1, r7
 800703a:	f7f9 f925 	bl	8000288 <__aeabi_dsub>
 800703e:	a336      	add	r3, pc, #216	; (adr r3, 8007118 <__ieee754_pow+0x728>)
 8007040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007044:	f7f9 fad8 	bl	80005f8 <__aeabi_dmul>
 8007048:	a335      	add	r3, pc, #212	; (adr r3, 8007120 <__ieee754_pow+0x730>)
 800704a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704e:	4606      	mov	r6, r0
 8007050:	460f      	mov	r7, r1
 8007052:	4620      	mov	r0, r4
 8007054:	4629      	mov	r1, r5
 8007056:	f7f9 facf 	bl	80005f8 <__aeabi_dmul>
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	4630      	mov	r0, r6
 8007060:	4639      	mov	r1, r7
 8007062:	f7f9 f913 	bl	800028c <__adddf3>
 8007066:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007068:	4b38      	ldr	r3, [pc, #224]	; (800714c <__ieee754_pow+0x75c>)
 800706a:	4413      	add	r3, r2
 800706c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007070:	f7f9 f90c 	bl	800028c <__adddf3>
 8007074:	4682      	mov	sl, r0
 8007076:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007078:	468b      	mov	fp, r1
 800707a:	f7f9 fa53 	bl	8000524 <__aeabi_i2d>
 800707e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007080:	4b33      	ldr	r3, [pc, #204]	; (8007150 <__ieee754_pow+0x760>)
 8007082:	4413      	add	r3, r2
 8007084:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007088:	4606      	mov	r6, r0
 800708a:	460f      	mov	r7, r1
 800708c:	4652      	mov	r2, sl
 800708e:	465b      	mov	r3, fp
 8007090:	ec51 0b18 	vmov	r0, r1, d8
 8007094:	f7f9 f8fa 	bl	800028c <__adddf3>
 8007098:	4642      	mov	r2, r8
 800709a:	464b      	mov	r3, r9
 800709c:	f7f9 f8f6 	bl	800028c <__adddf3>
 80070a0:	4632      	mov	r2, r6
 80070a2:	463b      	mov	r3, r7
 80070a4:	f7f9 f8f2 	bl	800028c <__adddf3>
 80070a8:	9c04      	ldr	r4, [sp, #16]
 80070aa:	4632      	mov	r2, r6
 80070ac:	463b      	mov	r3, r7
 80070ae:	4620      	mov	r0, r4
 80070b0:	460d      	mov	r5, r1
 80070b2:	f7f9 f8e9 	bl	8000288 <__aeabi_dsub>
 80070b6:	4642      	mov	r2, r8
 80070b8:	464b      	mov	r3, r9
 80070ba:	f7f9 f8e5 	bl	8000288 <__aeabi_dsub>
 80070be:	ec53 2b18 	vmov	r2, r3, d8
 80070c2:	f7f9 f8e1 	bl	8000288 <__aeabi_dsub>
 80070c6:	4602      	mov	r2, r0
 80070c8:	460b      	mov	r3, r1
 80070ca:	4650      	mov	r0, sl
 80070cc:	4659      	mov	r1, fp
 80070ce:	e606      	b.n	8006cde <__ieee754_pow+0x2ee>
 80070d0:	2401      	movs	r4, #1
 80070d2:	e6a0      	b.n	8006e16 <__ieee754_pow+0x426>
 80070d4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007128 <__ieee754_pow+0x738>
 80070d8:	e60d      	b.n	8006cf6 <__ieee754_pow+0x306>
 80070da:	bf00      	nop
 80070dc:	f3af 8000 	nop.w
 80070e0:	4a454eef 	.word	0x4a454eef
 80070e4:	3fca7e28 	.word	0x3fca7e28
 80070e8:	93c9db65 	.word	0x93c9db65
 80070ec:	3fcd864a 	.word	0x3fcd864a
 80070f0:	a91d4101 	.word	0xa91d4101
 80070f4:	3fd17460 	.word	0x3fd17460
 80070f8:	518f264d 	.word	0x518f264d
 80070fc:	3fd55555 	.word	0x3fd55555
 8007100:	db6fabff 	.word	0xdb6fabff
 8007104:	3fdb6db6 	.word	0x3fdb6db6
 8007108:	33333303 	.word	0x33333303
 800710c:	3fe33333 	.word	0x3fe33333
 8007110:	e0000000 	.word	0xe0000000
 8007114:	3feec709 	.word	0x3feec709
 8007118:	dc3a03fd 	.word	0xdc3a03fd
 800711c:	3feec709 	.word	0x3feec709
 8007120:	145b01f5 	.word	0x145b01f5
 8007124:	be3e2fe0 	.word	0xbe3e2fe0
 8007128:	00000000 	.word	0x00000000
 800712c:	3ff00000 	.word	0x3ff00000
 8007130:	7ff00000 	.word	0x7ff00000
 8007134:	43400000 	.word	0x43400000
 8007138:	0003988e 	.word	0x0003988e
 800713c:	000bb679 	.word	0x000bb679
 8007140:	08007c68 	.word	0x08007c68
 8007144:	3ff00000 	.word	0x3ff00000
 8007148:	40080000 	.word	0x40080000
 800714c:	08007c88 	.word	0x08007c88
 8007150:	08007c78 	.word	0x08007c78
 8007154:	a3b5      	add	r3, pc, #724	; (adr r3, 800742c <__ieee754_pow+0xa3c>)
 8007156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715a:	4640      	mov	r0, r8
 800715c:	4649      	mov	r1, r9
 800715e:	f7f9 f895 	bl	800028c <__adddf3>
 8007162:	4622      	mov	r2, r4
 8007164:	ec41 0b1a 	vmov	d10, r0, r1
 8007168:	462b      	mov	r3, r5
 800716a:	4630      	mov	r0, r6
 800716c:	4639      	mov	r1, r7
 800716e:	f7f9 f88b 	bl	8000288 <__aeabi_dsub>
 8007172:	4602      	mov	r2, r0
 8007174:	460b      	mov	r3, r1
 8007176:	ec51 0b1a 	vmov	r0, r1, d10
 800717a:	f7f9 fccd 	bl	8000b18 <__aeabi_dcmpgt>
 800717e:	2800      	cmp	r0, #0
 8007180:	f47f adf8 	bne.w	8006d74 <__ieee754_pow+0x384>
 8007184:	4aa4      	ldr	r2, [pc, #656]	; (8007418 <__ieee754_pow+0xa28>)
 8007186:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800718a:	4293      	cmp	r3, r2
 800718c:	f340 810b 	ble.w	80073a6 <__ieee754_pow+0x9b6>
 8007190:	151b      	asrs	r3, r3, #20
 8007192:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007196:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800719a:	fa4a f303 	asr.w	r3, sl, r3
 800719e:	445b      	add	r3, fp
 80071a0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80071a4:	4e9d      	ldr	r6, [pc, #628]	; (800741c <__ieee754_pow+0xa2c>)
 80071a6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80071aa:	4116      	asrs	r6, r2
 80071ac:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80071b0:	2000      	movs	r0, #0
 80071b2:	ea23 0106 	bic.w	r1, r3, r6
 80071b6:	f1c2 0214 	rsb	r2, r2, #20
 80071ba:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80071be:	fa4a fa02 	asr.w	sl, sl, r2
 80071c2:	f1bb 0f00 	cmp.w	fp, #0
 80071c6:	4602      	mov	r2, r0
 80071c8:	460b      	mov	r3, r1
 80071ca:	4620      	mov	r0, r4
 80071cc:	4629      	mov	r1, r5
 80071ce:	bfb8      	it	lt
 80071d0:	f1ca 0a00 	rsblt	sl, sl, #0
 80071d4:	f7f9 f858 	bl	8000288 <__aeabi_dsub>
 80071d8:	ec41 0b19 	vmov	d9, r0, r1
 80071dc:	4642      	mov	r2, r8
 80071de:	464b      	mov	r3, r9
 80071e0:	ec51 0b19 	vmov	r0, r1, d9
 80071e4:	f7f9 f852 	bl	800028c <__adddf3>
 80071e8:	2400      	movs	r4, #0
 80071ea:	a379      	add	r3, pc, #484	; (adr r3, 80073d0 <__ieee754_pow+0x9e0>)
 80071ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f0:	4620      	mov	r0, r4
 80071f2:	460d      	mov	r5, r1
 80071f4:	f7f9 fa00 	bl	80005f8 <__aeabi_dmul>
 80071f8:	ec53 2b19 	vmov	r2, r3, d9
 80071fc:	4606      	mov	r6, r0
 80071fe:	460f      	mov	r7, r1
 8007200:	4620      	mov	r0, r4
 8007202:	4629      	mov	r1, r5
 8007204:	f7f9 f840 	bl	8000288 <__aeabi_dsub>
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	4640      	mov	r0, r8
 800720e:	4649      	mov	r1, r9
 8007210:	f7f9 f83a 	bl	8000288 <__aeabi_dsub>
 8007214:	a370      	add	r3, pc, #448	; (adr r3, 80073d8 <__ieee754_pow+0x9e8>)
 8007216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721a:	f7f9 f9ed 	bl	80005f8 <__aeabi_dmul>
 800721e:	a370      	add	r3, pc, #448	; (adr r3, 80073e0 <__ieee754_pow+0x9f0>)
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	4680      	mov	r8, r0
 8007226:	4689      	mov	r9, r1
 8007228:	4620      	mov	r0, r4
 800722a:	4629      	mov	r1, r5
 800722c:	f7f9 f9e4 	bl	80005f8 <__aeabi_dmul>
 8007230:	4602      	mov	r2, r0
 8007232:	460b      	mov	r3, r1
 8007234:	4640      	mov	r0, r8
 8007236:	4649      	mov	r1, r9
 8007238:	f7f9 f828 	bl	800028c <__adddf3>
 800723c:	4604      	mov	r4, r0
 800723e:	460d      	mov	r5, r1
 8007240:	4602      	mov	r2, r0
 8007242:	460b      	mov	r3, r1
 8007244:	4630      	mov	r0, r6
 8007246:	4639      	mov	r1, r7
 8007248:	f7f9 f820 	bl	800028c <__adddf3>
 800724c:	4632      	mov	r2, r6
 800724e:	463b      	mov	r3, r7
 8007250:	4680      	mov	r8, r0
 8007252:	4689      	mov	r9, r1
 8007254:	f7f9 f818 	bl	8000288 <__aeabi_dsub>
 8007258:	4602      	mov	r2, r0
 800725a:	460b      	mov	r3, r1
 800725c:	4620      	mov	r0, r4
 800725e:	4629      	mov	r1, r5
 8007260:	f7f9 f812 	bl	8000288 <__aeabi_dsub>
 8007264:	4642      	mov	r2, r8
 8007266:	4606      	mov	r6, r0
 8007268:	460f      	mov	r7, r1
 800726a:	464b      	mov	r3, r9
 800726c:	4640      	mov	r0, r8
 800726e:	4649      	mov	r1, r9
 8007270:	f7f9 f9c2 	bl	80005f8 <__aeabi_dmul>
 8007274:	a35c      	add	r3, pc, #368	; (adr r3, 80073e8 <__ieee754_pow+0x9f8>)
 8007276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727a:	4604      	mov	r4, r0
 800727c:	460d      	mov	r5, r1
 800727e:	f7f9 f9bb 	bl	80005f8 <__aeabi_dmul>
 8007282:	a35b      	add	r3, pc, #364	; (adr r3, 80073f0 <__ieee754_pow+0xa00>)
 8007284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007288:	f7f8 fffe 	bl	8000288 <__aeabi_dsub>
 800728c:	4622      	mov	r2, r4
 800728e:	462b      	mov	r3, r5
 8007290:	f7f9 f9b2 	bl	80005f8 <__aeabi_dmul>
 8007294:	a358      	add	r3, pc, #352	; (adr r3, 80073f8 <__ieee754_pow+0xa08>)
 8007296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729a:	f7f8 fff7 	bl	800028c <__adddf3>
 800729e:	4622      	mov	r2, r4
 80072a0:	462b      	mov	r3, r5
 80072a2:	f7f9 f9a9 	bl	80005f8 <__aeabi_dmul>
 80072a6:	a356      	add	r3, pc, #344	; (adr r3, 8007400 <__ieee754_pow+0xa10>)
 80072a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ac:	f7f8 ffec 	bl	8000288 <__aeabi_dsub>
 80072b0:	4622      	mov	r2, r4
 80072b2:	462b      	mov	r3, r5
 80072b4:	f7f9 f9a0 	bl	80005f8 <__aeabi_dmul>
 80072b8:	a353      	add	r3, pc, #332	; (adr r3, 8007408 <__ieee754_pow+0xa18>)
 80072ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072be:	f7f8 ffe5 	bl	800028c <__adddf3>
 80072c2:	4622      	mov	r2, r4
 80072c4:	462b      	mov	r3, r5
 80072c6:	f7f9 f997 	bl	80005f8 <__aeabi_dmul>
 80072ca:	4602      	mov	r2, r0
 80072cc:	460b      	mov	r3, r1
 80072ce:	4640      	mov	r0, r8
 80072d0:	4649      	mov	r1, r9
 80072d2:	f7f8 ffd9 	bl	8000288 <__aeabi_dsub>
 80072d6:	4604      	mov	r4, r0
 80072d8:	460d      	mov	r5, r1
 80072da:	4602      	mov	r2, r0
 80072dc:	460b      	mov	r3, r1
 80072de:	4640      	mov	r0, r8
 80072e0:	4649      	mov	r1, r9
 80072e2:	f7f9 f989 	bl	80005f8 <__aeabi_dmul>
 80072e6:	2200      	movs	r2, #0
 80072e8:	ec41 0b19 	vmov	d9, r0, r1
 80072ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80072f0:	4620      	mov	r0, r4
 80072f2:	4629      	mov	r1, r5
 80072f4:	f7f8 ffc8 	bl	8000288 <__aeabi_dsub>
 80072f8:	4602      	mov	r2, r0
 80072fa:	460b      	mov	r3, r1
 80072fc:	ec51 0b19 	vmov	r0, r1, d9
 8007300:	f7f9 faa4 	bl	800084c <__aeabi_ddiv>
 8007304:	4632      	mov	r2, r6
 8007306:	4604      	mov	r4, r0
 8007308:	460d      	mov	r5, r1
 800730a:	463b      	mov	r3, r7
 800730c:	4640      	mov	r0, r8
 800730e:	4649      	mov	r1, r9
 8007310:	f7f9 f972 	bl	80005f8 <__aeabi_dmul>
 8007314:	4632      	mov	r2, r6
 8007316:	463b      	mov	r3, r7
 8007318:	f7f8 ffb8 	bl	800028c <__adddf3>
 800731c:	4602      	mov	r2, r0
 800731e:	460b      	mov	r3, r1
 8007320:	4620      	mov	r0, r4
 8007322:	4629      	mov	r1, r5
 8007324:	f7f8 ffb0 	bl	8000288 <__aeabi_dsub>
 8007328:	4642      	mov	r2, r8
 800732a:	464b      	mov	r3, r9
 800732c:	f7f8 ffac 	bl	8000288 <__aeabi_dsub>
 8007330:	460b      	mov	r3, r1
 8007332:	4602      	mov	r2, r0
 8007334:	493a      	ldr	r1, [pc, #232]	; (8007420 <__ieee754_pow+0xa30>)
 8007336:	2000      	movs	r0, #0
 8007338:	f7f8 ffa6 	bl	8000288 <__aeabi_dsub>
 800733c:	e9cd 0100 	strd	r0, r1, [sp]
 8007340:	9b01      	ldr	r3, [sp, #4]
 8007342:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800734a:	da2f      	bge.n	80073ac <__ieee754_pow+0x9bc>
 800734c:	4650      	mov	r0, sl
 800734e:	ed9d 0b00 	vldr	d0, [sp]
 8007352:	f000 f9cd 	bl	80076f0 <scalbn>
 8007356:	ec51 0b10 	vmov	r0, r1, d0
 800735a:	ec53 2b18 	vmov	r2, r3, d8
 800735e:	f7ff bbe0 	b.w	8006b22 <__ieee754_pow+0x132>
 8007362:	4b30      	ldr	r3, [pc, #192]	; (8007424 <__ieee754_pow+0xa34>)
 8007364:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007368:	429e      	cmp	r6, r3
 800736a:	f77f af0b 	ble.w	8007184 <__ieee754_pow+0x794>
 800736e:	4b2e      	ldr	r3, [pc, #184]	; (8007428 <__ieee754_pow+0xa38>)
 8007370:	440b      	add	r3, r1
 8007372:	4303      	orrs	r3, r0
 8007374:	d00b      	beq.n	800738e <__ieee754_pow+0x99e>
 8007376:	a326      	add	r3, pc, #152	; (adr r3, 8007410 <__ieee754_pow+0xa20>)
 8007378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737c:	ec51 0b18 	vmov	r0, r1, d8
 8007380:	f7f9 f93a 	bl	80005f8 <__aeabi_dmul>
 8007384:	a322      	add	r3, pc, #136	; (adr r3, 8007410 <__ieee754_pow+0xa20>)
 8007386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738a:	f7ff bbca 	b.w	8006b22 <__ieee754_pow+0x132>
 800738e:	4622      	mov	r2, r4
 8007390:	462b      	mov	r3, r5
 8007392:	f7f8 ff79 	bl	8000288 <__aeabi_dsub>
 8007396:	4642      	mov	r2, r8
 8007398:	464b      	mov	r3, r9
 800739a:	f7f9 fbb3 	bl	8000b04 <__aeabi_dcmpge>
 800739e:	2800      	cmp	r0, #0
 80073a0:	f43f aef0 	beq.w	8007184 <__ieee754_pow+0x794>
 80073a4:	e7e7      	b.n	8007376 <__ieee754_pow+0x986>
 80073a6:	f04f 0a00 	mov.w	sl, #0
 80073aa:	e717      	b.n	80071dc <__ieee754_pow+0x7ec>
 80073ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073b0:	4619      	mov	r1, r3
 80073b2:	e7d2      	b.n	800735a <__ieee754_pow+0x96a>
 80073b4:	491a      	ldr	r1, [pc, #104]	; (8007420 <__ieee754_pow+0xa30>)
 80073b6:	2000      	movs	r0, #0
 80073b8:	f7ff bb9e 	b.w	8006af8 <__ieee754_pow+0x108>
 80073bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073c0:	f7ff bb9a 	b.w	8006af8 <__ieee754_pow+0x108>
 80073c4:	9000      	str	r0, [sp, #0]
 80073c6:	f7ff bb76 	b.w	8006ab6 <__ieee754_pow+0xc6>
 80073ca:	2100      	movs	r1, #0
 80073cc:	f7ff bb60 	b.w	8006a90 <__ieee754_pow+0xa0>
 80073d0:	00000000 	.word	0x00000000
 80073d4:	3fe62e43 	.word	0x3fe62e43
 80073d8:	fefa39ef 	.word	0xfefa39ef
 80073dc:	3fe62e42 	.word	0x3fe62e42
 80073e0:	0ca86c39 	.word	0x0ca86c39
 80073e4:	be205c61 	.word	0xbe205c61
 80073e8:	72bea4d0 	.word	0x72bea4d0
 80073ec:	3e663769 	.word	0x3e663769
 80073f0:	c5d26bf1 	.word	0xc5d26bf1
 80073f4:	3ebbbd41 	.word	0x3ebbbd41
 80073f8:	af25de2c 	.word	0xaf25de2c
 80073fc:	3f11566a 	.word	0x3f11566a
 8007400:	16bebd93 	.word	0x16bebd93
 8007404:	3f66c16c 	.word	0x3f66c16c
 8007408:	5555553e 	.word	0x5555553e
 800740c:	3fc55555 	.word	0x3fc55555
 8007410:	c2f8f359 	.word	0xc2f8f359
 8007414:	01a56e1f 	.word	0x01a56e1f
 8007418:	3fe00000 	.word	0x3fe00000
 800741c:	000fffff 	.word	0x000fffff
 8007420:	3ff00000 	.word	0x3ff00000
 8007424:	4090cbff 	.word	0x4090cbff
 8007428:	3f6f3400 	.word	0x3f6f3400
 800742c:	652b82fe 	.word	0x652b82fe
 8007430:	3c971547 	.word	0x3c971547

08007434 <__ieee754_sqrt>:
 8007434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007438:	ec55 4b10 	vmov	r4, r5, d0
 800743c:	4e56      	ldr	r6, [pc, #344]	; (8007598 <__ieee754_sqrt+0x164>)
 800743e:	43ae      	bics	r6, r5
 8007440:	ee10 0a10 	vmov	r0, s0
 8007444:	ee10 3a10 	vmov	r3, s0
 8007448:	4629      	mov	r1, r5
 800744a:	462a      	mov	r2, r5
 800744c:	d110      	bne.n	8007470 <__ieee754_sqrt+0x3c>
 800744e:	ee10 2a10 	vmov	r2, s0
 8007452:	462b      	mov	r3, r5
 8007454:	f7f9 f8d0 	bl	80005f8 <__aeabi_dmul>
 8007458:	4602      	mov	r2, r0
 800745a:	460b      	mov	r3, r1
 800745c:	4620      	mov	r0, r4
 800745e:	4629      	mov	r1, r5
 8007460:	f7f8 ff14 	bl	800028c <__adddf3>
 8007464:	4604      	mov	r4, r0
 8007466:	460d      	mov	r5, r1
 8007468:	ec45 4b10 	vmov	d0, r4, r5
 800746c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007470:	2d00      	cmp	r5, #0
 8007472:	dc10      	bgt.n	8007496 <__ieee754_sqrt+0x62>
 8007474:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007478:	4330      	orrs	r0, r6
 800747a:	d0f5      	beq.n	8007468 <__ieee754_sqrt+0x34>
 800747c:	b15d      	cbz	r5, 8007496 <__ieee754_sqrt+0x62>
 800747e:	ee10 2a10 	vmov	r2, s0
 8007482:	462b      	mov	r3, r5
 8007484:	ee10 0a10 	vmov	r0, s0
 8007488:	f7f8 fefe 	bl	8000288 <__aeabi_dsub>
 800748c:	4602      	mov	r2, r0
 800748e:	460b      	mov	r3, r1
 8007490:	f7f9 f9dc 	bl	800084c <__aeabi_ddiv>
 8007494:	e7e6      	b.n	8007464 <__ieee754_sqrt+0x30>
 8007496:	1509      	asrs	r1, r1, #20
 8007498:	d076      	beq.n	8007588 <__ieee754_sqrt+0x154>
 800749a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800749e:	07ce      	lsls	r6, r1, #31
 80074a0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80074a4:	bf5e      	ittt	pl
 80074a6:	0fda      	lsrpl	r2, r3, #31
 80074a8:	005b      	lslpl	r3, r3, #1
 80074aa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80074ae:	0fda      	lsrs	r2, r3, #31
 80074b0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80074b4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80074b8:	2000      	movs	r0, #0
 80074ba:	106d      	asrs	r5, r5, #1
 80074bc:	005b      	lsls	r3, r3, #1
 80074be:	f04f 0e16 	mov.w	lr, #22
 80074c2:	4684      	mov	ip, r0
 80074c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80074c8:	eb0c 0401 	add.w	r4, ip, r1
 80074cc:	4294      	cmp	r4, r2
 80074ce:	bfde      	ittt	le
 80074d0:	1b12      	suble	r2, r2, r4
 80074d2:	eb04 0c01 	addle.w	ip, r4, r1
 80074d6:	1840      	addle	r0, r0, r1
 80074d8:	0052      	lsls	r2, r2, #1
 80074da:	f1be 0e01 	subs.w	lr, lr, #1
 80074de:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80074e2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80074e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80074ea:	d1ed      	bne.n	80074c8 <__ieee754_sqrt+0x94>
 80074ec:	4671      	mov	r1, lr
 80074ee:	2720      	movs	r7, #32
 80074f0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80074f4:	4562      	cmp	r2, ip
 80074f6:	eb04 060e 	add.w	r6, r4, lr
 80074fa:	dc02      	bgt.n	8007502 <__ieee754_sqrt+0xce>
 80074fc:	d113      	bne.n	8007526 <__ieee754_sqrt+0xf2>
 80074fe:	429e      	cmp	r6, r3
 8007500:	d811      	bhi.n	8007526 <__ieee754_sqrt+0xf2>
 8007502:	2e00      	cmp	r6, #0
 8007504:	eb06 0e04 	add.w	lr, r6, r4
 8007508:	da43      	bge.n	8007592 <__ieee754_sqrt+0x15e>
 800750a:	f1be 0f00 	cmp.w	lr, #0
 800750e:	db40      	blt.n	8007592 <__ieee754_sqrt+0x15e>
 8007510:	f10c 0801 	add.w	r8, ip, #1
 8007514:	eba2 020c 	sub.w	r2, r2, ip
 8007518:	429e      	cmp	r6, r3
 800751a:	bf88      	it	hi
 800751c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007520:	1b9b      	subs	r3, r3, r6
 8007522:	4421      	add	r1, r4
 8007524:	46c4      	mov	ip, r8
 8007526:	0052      	lsls	r2, r2, #1
 8007528:	3f01      	subs	r7, #1
 800752a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800752e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007532:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007536:	d1dd      	bne.n	80074f4 <__ieee754_sqrt+0xc0>
 8007538:	4313      	orrs	r3, r2
 800753a:	d006      	beq.n	800754a <__ieee754_sqrt+0x116>
 800753c:	1c4c      	adds	r4, r1, #1
 800753e:	bf13      	iteet	ne
 8007540:	3101      	addne	r1, #1
 8007542:	3001      	addeq	r0, #1
 8007544:	4639      	moveq	r1, r7
 8007546:	f021 0101 	bicne.w	r1, r1, #1
 800754a:	1043      	asrs	r3, r0, #1
 800754c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007550:	0849      	lsrs	r1, r1, #1
 8007552:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007556:	07c2      	lsls	r2, r0, #31
 8007558:	bf48      	it	mi
 800755a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800755e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007562:	460c      	mov	r4, r1
 8007564:	463d      	mov	r5, r7
 8007566:	e77f      	b.n	8007468 <__ieee754_sqrt+0x34>
 8007568:	0ada      	lsrs	r2, r3, #11
 800756a:	3815      	subs	r0, #21
 800756c:	055b      	lsls	r3, r3, #21
 800756e:	2a00      	cmp	r2, #0
 8007570:	d0fa      	beq.n	8007568 <__ieee754_sqrt+0x134>
 8007572:	02d7      	lsls	r7, r2, #11
 8007574:	d50a      	bpl.n	800758c <__ieee754_sqrt+0x158>
 8007576:	f1c1 0420 	rsb	r4, r1, #32
 800757a:	fa23 f404 	lsr.w	r4, r3, r4
 800757e:	1e4d      	subs	r5, r1, #1
 8007580:	408b      	lsls	r3, r1
 8007582:	4322      	orrs	r2, r4
 8007584:	1b41      	subs	r1, r0, r5
 8007586:	e788      	b.n	800749a <__ieee754_sqrt+0x66>
 8007588:	4608      	mov	r0, r1
 800758a:	e7f0      	b.n	800756e <__ieee754_sqrt+0x13a>
 800758c:	0052      	lsls	r2, r2, #1
 800758e:	3101      	adds	r1, #1
 8007590:	e7ef      	b.n	8007572 <__ieee754_sqrt+0x13e>
 8007592:	46e0      	mov	r8, ip
 8007594:	e7be      	b.n	8007514 <__ieee754_sqrt+0xe0>
 8007596:	bf00      	nop
 8007598:	7ff00000 	.word	0x7ff00000

0800759c <fabs>:
 800759c:	ec51 0b10 	vmov	r0, r1, d0
 80075a0:	ee10 2a10 	vmov	r2, s0
 80075a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80075a8:	ec43 2b10 	vmov	d0, r2, r3
 80075ac:	4770      	bx	lr

080075ae <finite>:
 80075ae:	b082      	sub	sp, #8
 80075b0:	ed8d 0b00 	vstr	d0, [sp]
 80075b4:	9801      	ldr	r0, [sp, #4]
 80075b6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80075ba:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80075be:	0fc0      	lsrs	r0, r0, #31
 80075c0:	b002      	add	sp, #8
 80075c2:	4770      	bx	lr
 80075c4:	0000      	movs	r0, r0
	...

080075c8 <nan>:
 80075c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80075d0 <nan+0x8>
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	00000000 	.word	0x00000000
 80075d4:	7ff80000 	.word	0x7ff80000

080075d8 <rint>:
 80075d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075da:	ec51 0b10 	vmov	r0, r1, d0
 80075de:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80075e2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80075e6:	2e13      	cmp	r6, #19
 80075e8:	ee10 4a10 	vmov	r4, s0
 80075ec:	460b      	mov	r3, r1
 80075ee:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80075f2:	dc58      	bgt.n	80076a6 <rint+0xce>
 80075f4:	2e00      	cmp	r6, #0
 80075f6:	da2b      	bge.n	8007650 <rint+0x78>
 80075f8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80075fc:	4302      	orrs	r2, r0
 80075fe:	d023      	beq.n	8007648 <rint+0x70>
 8007600:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007604:	4302      	orrs	r2, r0
 8007606:	4254      	negs	r4, r2
 8007608:	4314      	orrs	r4, r2
 800760a:	0c4b      	lsrs	r3, r1, #17
 800760c:	0b24      	lsrs	r4, r4, #12
 800760e:	045b      	lsls	r3, r3, #17
 8007610:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007614:	ea44 0103 	orr.w	r1, r4, r3
 8007618:	4b32      	ldr	r3, [pc, #200]	; (80076e4 <rint+0x10c>)
 800761a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800761e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007622:	4602      	mov	r2, r0
 8007624:	460b      	mov	r3, r1
 8007626:	4630      	mov	r0, r6
 8007628:	4639      	mov	r1, r7
 800762a:	f7f8 fe2f 	bl	800028c <__adddf3>
 800762e:	e9cd 0100 	strd	r0, r1, [sp]
 8007632:	463b      	mov	r3, r7
 8007634:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007638:	4632      	mov	r2, r6
 800763a:	f7f8 fe25 	bl	8000288 <__aeabi_dsub>
 800763e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007642:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8007646:	4639      	mov	r1, r7
 8007648:	ec41 0b10 	vmov	d0, r0, r1
 800764c:	b003      	add	sp, #12
 800764e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007650:	4a25      	ldr	r2, [pc, #148]	; (80076e8 <rint+0x110>)
 8007652:	4132      	asrs	r2, r6
 8007654:	ea01 0702 	and.w	r7, r1, r2
 8007658:	4307      	orrs	r7, r0
 800765a:	d0f5      	beq.n	8007648 <rint+0x70>
 800765c:	0851      	lsrs	r1, r2, #1
 800765e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8007662:	4314      	orrs	r4, r2
 8007664:	d00c      	beq.n	8007680 <rint+0xa8>
 8007666:	ea23 0201 	bic.w	r2, r3, r1
 800766a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800766e:	2e13      	cmp	r6, #19
 8007670:	fa43 f606 	asr.w	r6, r3, r6
 8007674:	bf0c      	ite	eq
 8007676:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800767a:	2400      	movne	r4, #0
 800767c:	ea42 0306 	orr.w	r3, r2, r6
 8007680:	4918      	ldr	r1, [pc, #96]	; (80076e4 <rint+0x10c>)
 8007682:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007686:	4622      	mov	r2, r4
 8007688:	e9d5 4500 	ldrd	r4, r5, [r5]
 800768c:	4620      	mov	r0, r4
 800768e:	4629      	mov	r1, r5
 8007690:	f7f8 fdfc 	bl	800028c <__adddf3>
 8007694:	e9cd 0100 	strd	r0, r1, [sp]
 8007698:	e9dd 0100 	ldrd	r0, r1, [sp]
 800769c:	4622      	mov	r2, r4
 800769e:	462b      	mov	r3, r5
 80076a0:	f7f8 fdf2 	bl	8000288 <__aeabi_dsub>
 80076a4:	e7d0      	b.n	8007648 <rint+0x70>
 80076a6:	2e33      	cmp	r6, #51	; 0x33
 80076a8:	dd07      	ble.n	80076ba <rint+0xe2>
 80076aa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80076ae:	d1cb      	bne.n	8007648 <rint+0x70>
 80076b0:	ee10 2a10 	vmov	r2, s0
 80076b4:	f7f8 fdea 	bl	800028c <__adddf3>
 80076b8:	e7c6      	b.n	8007648 <rint+0x70>
 80076ba:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80076be:	f04f 36ff 	mov.w	r6, #4294967295
 80076c2:	40d6      	lsrs	r6, r2
 80076c4:	4230      	tst	r0, r6
 80076c6:	d0bf      	beq.n	8007648 <rint+0x70>
 80076c8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80076cc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80076d0:	bf1f      	itttt	ne
 80076d2:	ea24 0101 	bicne.w	r1, r4, r1
 80076d6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80076da:	fa44 f202 	asrne.w	r2, r4, r2
 80076de:	ea41 0402 	orrne.w	r4, r1, r2
 80076e2:	e7cd      	b.n	8007680 <rint+0xa8>
 80076e4:	08007c98 	.word	0x08007c98
 80076e8:	000fffff 	.word	0x000fffff
 80076ec:	00000000 	.word	0x00000000

080076f0 <scalbn>:
 80076f0:	b570      	push	{r4, r5, r6, lr}
 80076f2:	ec55 4b10 	vmov	r4, r5, d0
 80076f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80076fa:	4606      	mov	r6, r0
 80076fc:	462b      	mov	r3, r5
 80076fe:	b99a      	cbnz	r2, 8007728 <scalbn+0x38>
 8007700:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007704:	4323      	orrs	r3, r4
 8007706:	d036      	beq.n	8007776 <scalbn+0x86>
 8007708:	4b39      	ldr	r3, [pc, #228]	; (80077f0 <scalbn+0x100>)
 800770a:	4629      	mov	r1, r5
 800770c:	ee10 0a10 	vmov	r0, s0
 8007710:	2200      	movs	r2, #0
 8007712:	f7f8 ff71 	bl	80005f8 <__aeabi_dmul>
 8007716:	4b37      	ldr	r3, [pc, #220]	; (80077f4 <scalbn+0x104>)
 8007718:	429e      	cmp	r6, r3
 800771a:	4604      	mov	r4, r0
 800771c:	460d      	mov	r5, r1
 800771e:	da10      	bge.n	8007742 <scalbn+0x52>
 8007720:	a32b      	add	r3, pc, #172	; (adr r3, 80077d0 <scalbn+0xe0>)
 8007722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007726:	e03a      	b.n	800779e <scalbn+0xae>
 8007728:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800772c:	428a      	cmp	r2, r1
 800772e:	d10c      	bne.n	800774a <scalbn+0x5a>
 8007730:	ee10 2a10 	vmov	r2, s0
 8007734:	4620      	mov	r0, r4
 8007736:	4629      	mov	r1, r5
 8007738:	f7f8 fda8 	bl	800028c <__adddf3>
 800773c:	4604      	mov	r4, r0
 800773e:	460d      	mov	r5, r1
 8007740:	e019      	b.n	8007776 <scalbn+0x86>
 8007742:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007746:	460b      	mov	r3, r1
 8007748:	3a36      	subs	r2, #54	; 0x36
 800774a:	4432      	add	r2, r6
 800774c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007750:	428a      	cmp	r2, r1
 8007752:	dd08      	ble.n	8007766 <scalbn+0x76>
 8007754:	2d00      	cmp	r5, #0
 8007756:	a120      	add	r1, pc, #128	; (adr r1, 80077d8 <scalbn+0xe8>)
 8007758:	e9d1 0100 	ldrd	r0, r1, [r1]
 800775c:	da1c      	bge.n	8007798 <scalbn+0xa8>
 800775e:	a120      	add	r1, pc, #128	; (adr r1, 80077e0 <scalbn+0xf0>)
 8007760:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007764:	e018      	b.n	8007798 <scalbn+0xa8>
 8007766:	2a00      	cmp	r2, #0
 8007768:	dd08      	ble.n	800777c <scalbn+0x8c>
 800776a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800776e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007772:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007776:	ec45 4b10 	vmov	d0, r4, r5
 800777a:	bd70      	pop	{r4, r5, r6, pc}
 800777c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007780:	da19      	bge.n	80077b6 <scalbn+0xc6>
 8007782:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007786:	429e      	cmp	r6, r3
 8007788:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800778c:	dd0a      	ble.n	80077a4 <scalbn+0xb4>
 800778e:	a112      	add	r1, pc, #72	; (adr r1, 80077d8 <scalbn+0xe8>)
 8007790:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1e2      	bne.n	800775e <scalbn+0x6e>
 8007798:	a30f      	add	r3, pc, #60	; (adr r3, 80077d8 <scalbn+0xe8>)
 800779a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779e:	f7f8 ff2b 	bl	80005f8 <__aeabi_dmul>
 80077a2:	e7cb      	b.n	800773c <scalbn+0x4c>
 80077a4:	a10a      	add	r1, pc, #40	; (adr r1, 80077d0 <scalbn+0xe0>)
 80077a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d0b8      	beq.n	8007720 <scalbn+0x30>
 80077ae:	a10e      	add	r1, pc, #56	; (adr r1, 80077e8 <scalbn+0xf8>)
 80077b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077b4:	e7b4      	b.n	8007720 <scalbn+0x30>
 80077b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80077ba:	3236      	adds	r2, #54	; 0x36
 80077bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80077c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80077c4:	4620      	mov	r0, r4
 80077c6:	4b0c      	ldr	r3, [pc, #48]	; (80077f8 <scalbn+0x108>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	e7e8      	b.n	800779e <scalbn+0xae>
 80077cc:	f3af 8000 	nop.w
 80077d0:	c2f8f359 	.word	0xc2f8f359
 80077d4:	01a56e1f 	.word	0x01a56e1f
 80077d8:	8800759c 	.word	0x8800759c
 80077dc:	7e37e43c 	.word	0x7e37e43c
 80077e0:	8800759c 	.word	0x8800759c
 80077e4:	fe37e43c 	.word	0xfe37e43c
 80077e8:	c2f8f359 	.word	0xc2f8f359
 80077ec:	81a56e1f 	.word	0x81a56e1f
 80077f0:	43500000 	.word	0x43500000
 80077f4:	ffff3cb0 	.word	0xffff3cb0
 80077f8:	3c900000 	.word	0x3c900000

080077fc <_init>:
 80077fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fe:	bf00      	nop
 8007800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007802:	bc08      	pop	{r3}
 8007804:	469e      	mov	lr, r3
 8007806:	4770      	bx	lr

08007808 <_fini>:
 8007808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780a:	bf00      	nop
 800780c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800780e:	bc08      	pop	{r3}
 8007810:	469e      	mov	lr, r3
 8007812:	4770      	bx	lr


vrs_cvicenie_09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08005c10  08005c10  00015c10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800602c  0800602c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800602c  0800602c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800602c  0800602c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800602c  0800602c  0001602c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006030  08006030  00016030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000088  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000264  20000264  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d3d3  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002433  00000000  00000000  0002d5df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000818  00000000  00000000  0002fa18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000710  00000000  00000000  00030230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000192ba  00000000  00000000  00030940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008a5d  00000000  00000000  00049bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007cbb7  00000000  00000000  00052657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000cf20e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030ec  00000000  00000000  000cf264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005bf4 	.word	0x08005bf4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08005bf4 	.word	0x08005bf4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	683a      	ldr	r2, [r7, #0]
 8000bb6:	619a      	str	r2, [r3, #24]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <resetSegments>:
extern DisplayDigitData_ DisplayDigit_0;
extern DisplayDigitData_ DisplayDigit_1;
extern DisplayDigitData_ DisplayDigit_2;
extern DisplayDigitData_ DisplayDigit_3;
static uint8_t indexer = 0;
void resetSegments(void) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	SEGMENT_A_OFF;
 8000be4:	2102      	movs	r1, #2
 8000be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bea:	f7ff ffdd 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	SEGMENT_B_OFF;
 8000bee:	2101      	movs	r1, #1
 8000bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf4:	f7ff ffd8 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	SEGMENT_C_OFF;
 8000bf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c00:	f7ff ffd2 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	SEGMENT_D_OFF;
 8000c04:	2120      	movs	r1, #32
 8000c06:	480c      	ldr	r0, [pc, #48]	; (8000c38 <resetSegments+0x58>)
 8000c08:	f7ff ffce 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	SEGMENT_E_OFF;
 8000c0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c14:	f7ff ffc8 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	SEGMENT_F_OFF;
 8000c18:	2108      	movs	r1, #8
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1e:	f7ff ffc3 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	SEGMENT_G_OFF;
 8000c22:	2110      	movs	r1, #16
 8000c24:	4804      	ldr	r0, [pc, #16]	; (8000c38 <resetSegments+0x58>)
 8000c26:	f7ff ffbf 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	SEGMENT_DP_OFF;
 8000c2a:	2102      	movs	r1, #2
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <resetSegments+0x58>)
 8000c2e:	f7ff ffbb 	bl	8000ba8 <LL_GPIO_SetOutputPin>
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	48000400 	.word	0x48000400

08000c3c <resetDigits>:
	SEGMENT_F_ON;
	SEGMENT_G_ON;
	SEGMENT_DP_ON;
}

void resetDigits(void) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	DIGIT_0_OFF;
 8000c40:	2101      	movs	r1, #1
 8000c42:	480d      	ldr	r0, [pc, #52]	; (8000c78 <resetDigits+0x3c>)
 8000c44:	f7ff ffbe 	bl	8000bc4 <LL_GPIO_ResetOutputPin>
	DIGIT_1_OFF;
 8000c48:	2110      	movs	r1, #16
 8000c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4e:	f7ff ffb9 	bl	8000bc4 <LL_GPIO_ResetOutputPin>
	DIGIT_2_OFF;
 8000c52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5a:	f7ff ffb3 	bl	8000bc4 <LL_GPIO_ResetOutputPin>
	DIGIT_3_OFF;
 8000c5e:	2104      	movs	r1, #4
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c64:	f7ff ffae 	bl	8000bc4 <LL_GPIO_ResetOutputPin>
	DIGIT_TIME_OFF;
 8000c68:	2180      	movs	r1, #128	; 0x80
 8000c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6e:	f7ff ffa9 	bl	8000bc4 <LL_GPIO_ResetOutputPin>
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	48000400 	.word	0x48000400

08000c7c <segmentsOn>:
	DIGIT_2_ON;
	DIGIT_3_ON;
	DIGIT_TIME_ON;
}

void segmentsOn(uint8_t index, SegmentDigitStruct digitStruct) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	e883 0006 	stmia.w	r3, {r1, r2}
 8000c88:	4603      	mov	r3, r0
 8000c8a:	73fb      	strb	r3, [r7, #15]
//	resetSegments();
	if (digitStruct.sA)
 8000c8c:	793b      	ldrb	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d005      	beq.n	8000c9e <segmentsOn+0x22>
		SEGMENT_A_ON;
 8000c92:	2102      	movs	r1, #2
 8000c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c98:	f7ff ff94 	bl	8000bc4 <LL_GPIO_ResetOutputPin>
 8000c9c:	e004      	b.n	8000ca8 <segmentsOn+0x2c>
	else SEGMENT_A_OFF;
 8000c9e:	2102      	movs	r1, #2
 8000ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca4:	f7ff ff80 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	if (digitStruct.sB)
 8000ca8:	797b      	ldrb	r3, [r7, #5]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d005      	beq.n	8000cba <segmentsOn+0x3e>
		SEGMENT_B_ON;
 8000cae:	2101      	movs	r1, #1
 8000cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb4:	f7ff ff86 	bl	8000bc4 <LL_GPIO_ResetOutputPin>
 8000cb8:	e004      	b.n	8000cc4 <segmentsOn+0x48>
	else SEGMENT_B_OFF;
 8000cba:	2101      	movs	r1, #1
 8000cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc0:	f7ff ff72 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	if (digitStruct.sC)
 8000cc4:	79bb      	ldrb	r3, [r7, #6]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d006      	beq.n	8000cd8 <segmentsOn+0x5c>
		SEGMENT_C_ON;
 8000cca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd2:	f7ff ff77 	bl	8000bc4 <LL_GPIO_ResetOutputPin>
 8000cd6:	e005      	b.n	8000ce4 <segmentsOn+0x68>
	else SEGMENT_C_OFF;
 8000cd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce0:	f7ff ff62 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	if (digitStruct.sD)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d004      	beq.n	8000cf4 <segmentsOn+0x78>
		SEGMENT_D_ON;
 8000cea:	2120      	movs	r1, #32
 8000cec:	4833      	ldr	r0, [pc, #204]	; (8000dbc <segmentsOn+0x140>)
 8000cee:	f7ff ff69 	bl	8000bc4 <LL_GPIO_ResetOutputPin>
 8000cf2:	e003      	b.n	8000cfc <segmentsOn+0x80>
	else SEGMENT_D_OFF;
 8000cf4:	2120      	movs	r1, #32
 8000cf6:	4831      	ldr	r0, [pc, #196]	; (8000dbc <segmentsOn+0x140>)
 8000cf8:	f7ff ff56 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	if (digitStruct.sE)
 8000cfc:	7a3b      	ldrb	r3, [r7, #8]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d006      	beq.n	8000d10 <segmentsOn+0x94>
		SEGMENT_E_ON;
 8000d02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0a:	f7ff ff5b 	bl	8000bc4 <LL_GPIO_ResetOutputPin>
 8000d0e:	e005      	b.n	8000d1c <segmentsOn+0xa0>
	else SEGMENT_E_OFF;
 8000d10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d18:	f7ff ff46 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	if (digitStruct.sF)
 8000d1c:	7a7b      	ldrb	r3, [r7, #9]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d005      	beq.n	8000d2e <segmentsOn+0xb2>
		SEGMENT_F_ON;
 8000d22:	2108      	movs	r1, #8
 8000d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d28:	f7ff ff4c 	bl	8000bc4 <LL_GPIO_ResetOutputPin>
 8000d2c:	e004      	b.n	8000d38 <segmentsOn+0xbc>
	else SEGMENT_F_OFF;
 8000d2e:	2108      	movs	r1, #8
 8000d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d34:	f7ff ff38 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	if (digitStruct.sG)
 8000d38:	7abb      	ldrb	r3, [r7, #10]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d004      	beq.n	8000d48 <segmentsOn+0xcc>
		SEGMENT_G_ON;
 8000d3e:	2110      	movs	r1, #16
 8000d40:	481e      	ldr	r0, [pc, #120]	; (8000dbc <segmentsOn+0x140>)
 8000d42:	f7ff ff3f 	bl	8000bc4 <LL_GPIO_ResetOutputPin>
 8000d46:	e003      	b.n	8000d50 <segmentsOn+0xd4>
	else SEGMENT_G_OFF;
 8000d48:	2110      	movs	r1, #16
 8000d4a:	481c      	ldr	r0, [pc, #112]	; (8000dbc <segmentsOn+0x140>)
 8000d4c:	f7ff ff2c 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	if (digitStruct.sDot)
 8000d50:	7afb      	ldrb	r3, [r7, #11]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d004      	beq.n	8000d60 <segmentsOn+0xe4>
		SEGMENT_DP_ON;
 8000d56:	2102      	movs	r1, #2
 8000d58:	4818      	ldr	r0, [pc, #96]	; (8000dbc <segmentsOn+0x140>)
 8000d5a:	f7ff ff33 	bl	8000bc4 <LL_GPIO_ResetOutputPin>
 8000d5e:	e003      	b.n	8000d68 <segmentsOn+0xec>
	else SEGMENT_DP_OFF;
 8000d60:	2102      	movs	r1, #2
 8000d62:	4816      	ldr	r0, [pc, #88]	; (8000dbc <segmentsOn+0x140>)
 8000d64:	f7ff ff20 	bl	8000ba8 <LL_GPIO_SetOutputPin>

	resetDigits();
 8000d68:	f7ff ff68 	bl	8000c3c <resetDigits>
	if (index == 0)
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d104      	bne.n	8000d7c <segmentsOn+0x100>
		DIGIT_0_ON;
 8000d72:	2101      	movs	r1, #1
 8000d74:	4811      	ldr	r0, [pc, #68]	; (8000dbc <segmentsOn+0x140>)
 8000d76:	f7ff ff17 	bl	8000ba8 <LL_GPIO_SetOutputPin>
		DIGIT_1_ON;
	else if (index == 2)
		DIGIT_2_ON;
	else if (index == 3)
		DIGIT_3_ON;
}
 8000d7a:	e01a      	b.n	8000db2 <segmentsOn+0x136>
	else if (index == 1)
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d105      	bne.n	8000d8e <segmentsOn+0x112>
		DIGIT_1_ON;
 8000d82:	2110      	movs	r1, #16
 8000d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d88:	f7ff ff0e 	bl	8000ba8 <LL_GPIO_SetOutputPin>
}
 8000d8c:	e011      	b.n	8000db2 <segmentsOn+0x136>
	else if (index == 2)
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d106      	bne.n	8000da2 <segmentsOn+0x126>
		DIGIT_2_ON;
 8000d94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9c:	f7ff ff04 	bl	8000ba8 <LL_GPIO_SetOutputPin>
}
 8000da0:	e007      	b.n	8000db2 <segmentsOn+0x136>
	else if (index == 3)
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	d104      	bne.n	8000db2 <segmentsOn+0x136>
		DIGIT_3_ON;
 8000da8:	2104      	movs	r1, #4
 8000daa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dae:	f7ff fefb 	bl	8000ba8 <LL_GPIO_SetOutputPin>
}
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	48000400 	.word	0x48000400

08000dc0 <displayCharOnDigit>:

void displayCharOnDigit(DisplayDigitData_ digitData) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	80b8      	strh	r0, [r7, #4]
	SegmentDigitStruct digitStruct = GetSegmentDigit(digitData.chr);
 8000dc8:	797a      	ldrb	r2, [r7, #5]
 8000dca:	f107 0308 	add.w	r3, r7, #8
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 f879 	bl	8000ec8 <GetSegmentDigit>
	segmentsOn(digitData.index, digitStruct);
 8000dd6:	7938      	ldrb	r0, [r7, #4]
 8000dd8:	f107 0308 	add.w	r3, r7, #8
 8000ddc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000de0:	f7ff ff4c 	bl	8000c7c <segmentsOn>
}
 8000de4:	bf00      	nop
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <updateDisplay>:
void updateDisplay(void) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0

	switch (indexer) {
 8000df0:	4b30      	ldr	r3, [pc, #192]	; (8000eb4 <updateDisplay+0xc8>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b03      	cmp	r3, #3
 8000df6:	d80b      	bhi.n	8000e10 <updateDisplay+0x24>
 8000df8:	a201      	add	r2, pc, #4	; (adr r2, 8000e00 <updateDisplay+0x14>)
 8000dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfe:	bf00      	nop
 8000e00:	08000e21 	.word	0x08000e21
 8000e04:	08000e45 	.word	0x08000e45
 8000e08:	08000e69 	.word	0x08000e69
 8000e0c:	08000e8d 	.word	0x08000e8d
	default:
		resetDigits();
 8000e10:	f7ff ff14 	bl	8000c3c <resetDigits>
		resetSegments();
 8000e14:	f7ff fee4 	bl	8000be0 <resetSegments>
		indexer = 0;
 8000e18:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <updateDisplay+0xc8>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	701a      	strb	r2, [r3, #0]
		break;
 8000e1e:	e047      	b.n	8000eb0 <updateDisplay+0xc4>
	case 0:
		displayCharOnDigit(DisplayDigit_0);
 8000e20:	4b25      	ldr	r3, [pc, #148]	; (8000eb8 <updateDisplay+0xcc>)
 8000e22:	781a      	ldrb	r2, [r3, #0]
 8000e24:	785b      	ldrb	r3, [r3, #1]
 8000e26:	021b      	lsls	r3, r3, #8
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f362 030f 	bfi	r3, r2, #0, #16
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ffc5 	bl	8000dc0 <displayCharOnDigit>
		indexer++;
 8000e36:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <updateDisplay+0xc8>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <updateDisplay+0xc8>)
 8000e40:	701a      	strb	r2, [r3, #0]
		break;
 8000e42:	e035      	b.n	8000eb0 <updateDisplay+0xc4>
	case 1:
		displayCharOnDigit(DisplayDigit_1);
 8000e44:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <updateDisplay+0xd0>)
 8000e46:	781a      	ldrb	r2, [r3, #0]
 8000e48:	785b      	ldrb	r3, [r3, #1]
 8000e4a:	021b      	lsls	r3, r3, #8
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f362 030f 	bfi	r3, r2, #0, #16
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ffb3 	bl	8000dc0 <displayCharOnDigit>
		indexer++;
 8000e5a:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <updateDisplay+0xc8>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <updateDisplay+0xc8>)
 8000e64:	701a      	strb	r2, [r3, #0]
		break;
 8000e66:	e023      	b.n	8000eb0 <updateDisplay+0xc4>
	case 2:
		displayCharOnDigit(DisplayDigit_2);
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <updateDisplay+0xd4>)
 8000e6a:	781a      	ldrb	r2, [r3, #0]
 8000e6c:	785b      	ldrb	r3, [r3, #1]
 8000e6e:	021b      	lsls	r3, r3, #8
 8000e70:	431a      	orrs	r2, r3
 8000e72:	2300      	movs	r3, #0
 8000e74:	f362 030f 	bfi	r3, r2, #0, #16
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ffa1 	bl	8000dc0 <displayCharOnDigit>
		indexer++;
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <updateDisplay+0xc8>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	3301      	adds	r3, #1
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <updateDisplay+0xc8>)
 8000e88:	701a      	strb	r2, [r3, #0]
		break;
 8000e8a:	e011      	b.n	8000eb0 <updateDisplay+0xc4>
	case 3:
		displayCharOnDigit(DisplayDigit_3);
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <updateDisplay+0xd8>)
 8000e8e:	781a      	ldrb	r2, [r3, #0]
 8000e90:	785b      	ldrb	r3, [r3, #1]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	431a      	orrs	r2, r3
 8000e96:	2300      	movs	r3, #0
 8000e98:	f362 030f 	bfi	r3, r2, #0, #16
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff8f 	bl	8000dc0 <displayCharOnDigit>
		indexer++;
 8000ea2:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <updateDisplay+0xc8>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4b02      	ldr	r3, [pc, #8]	; (8000eb4 <updateDisplay+0xc8>)
 8000eac:	701a      	strb	r2, [r3, #0]
		break;
 8000eae:	bf00      	nop

	}
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	200001f8 	.word	0x200001f8
 8000eb8:	20000214 	.word	0x20000214
 8000ebc:	2000020c 	.word	0x2000020c
 8000ec0:	20000208 	.word	0x20000208
 8000ec4:	20000210 	.word	0x20000210

08000ec8 <GetSegmentDigit>:
		0x08, // _
		0x01, //-
		0x80, //.,
		};

SegmentDigitStruct GetSegmentDigit(uint8_t chr) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	70fb      	strb	r3, [r7, #3]
	SegmentDigitStruct result;
	if ((chr >= '0' && chr <= '9') || (chr >= 'A' && chr <= 'Z')
 8000ed4:	78fb      	ldrb	r3, [r7, #3]
 8000ed6:	2b2f      	cmp	r3, #47	; 0x2f
 8000ed8:	d902      	bls.n	8000ee0 <GetSegmentDigit+0x18>
 8000eda:	78fb      	ldrb	r3, [r7, #3]
 8000edc:	2b39      	cmp	r3, #57	; 0x39
 8000ede:	d909      	bls.n	8000ef4 <GetSegmentDigit+0x2c>
 8000ee0:	78fb      	ldrb	r3, [r7, #3]
 8000ee2:	2b40      	cmp	r3, #64	; 0x40
 8000ee4:	d902      	bls.n	8000eec <GetSegmentDigit+0x24>
 8000ee6:	78fb      	ldrb	r3, [r7, #3]
 8000ee8:	2b5a      	cmp	r3, #90	; 0x5a
 8000eea:	d903      	bls.n	8000ef4 <GetSegmentDigit+0x2c>
			|| chr == '_') {
 8000eec:	78fb      	ldrb	r3, [r7, #3]
 8000eee:	2b5f      	cmp	r3, #95	; 0x5f
 8000ef0:	f040 8086 	bne.w	8001000 <GetSegmentDigit+0x138>
		uint8_t fontChar = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	75fb      	strb	r3, [r7, #23]
		uint8_t index = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	75bb      	strb	r3, [r7, #22]
		if (chr >= '0' && chr <= '9') {
 8000efc:	78fb      	ldrb	r3, [r7, #3]
 8000efe:	2b2f      	cmp	r3, #47	; 0x2f
 8000f00:	d90a      	bls.n	8000f18 <GetSegmentDigit+0x50>
 8000f02:	78fb      	ldrb	r3, [r7, #3]
 8000f04:	2b39      	cmp	r3, #57	; 0x39
 8000f06:	d807      	bhi.n	8000f18 <GetSegmentDigit+0x50>
			index = chr - '0';
 8000f08:	78fb      	ldrb	r3, [r7, #3]
 8000f0a:	3b30      	subs	r3, #48	; 0x30
 8000f0c:	75bb      	strb	r3, [r7, #22]
			fontChar = Font_Table[FONTS_DIGITS_START + index];
 8000f0e:	7dbb      	ldrb	r3, [r7, #22]
 8000f10:	4a4a      	ldr	r2, [pc, #296]	; (800103c <GetSegmentDigit+0x174>)
 8000f12:	5cd3      	ldrb	r3, [r2, r3]
 8000f14:	75fb      	strb	r3, [r7, #23]
 8000f16:	e022      	b.n	8000f5e <GetSegmentDigit+0x96>
		} else if (chr >= 'A' && chr <= 'Z') {
 8000f18:	78fb      	ldrb	r3, [r7, #3]
 8000f1a:	2b40      	cmp	r3, #64	; 0x40
 8000f1c:	d90b      	bls.n	8000f36 <GetSegmentDigit+0x6e>
 8000f1e:	78fb      	ldrb	r3, [r7, #3]
 8000f20:	2b5a      	cmp	r3, #90	; 0x5a
 8000f22:	d808      	bhi.n	8000f36 <GetSegmentDigit+0x6e>
			index = chr - 'A';
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	3b41      	subs	r3, #65	; 0x41
 8000f28:	75bb      	strb	r3, [r7, #22]
			fontChar = Font_Table[FONTS_CHARS_START + index];
 8000f2a:	7dbb      	ldrb	r3, [r7, #22]
 8000f2c:	330a      	adds	r3, #10
 8000f2e:	4a43      	ldr	r2, [pc, #268]	; (800103c <GetSegmentDigit+0x174>)
 8000f30:	5cd3      	ldrb	r3, [r2, r3]
 8000f32:	75fb      	strb	r3, [r7, #23]
 8000f34:	e013      	b.n	8000f5e <GetSegmentDigit+0x96>
		} else if (chr == '_') {
 8000f36:	78fb      	ldrb	r3, [r7, #3]
 8000f38:	2b5f      	cmp	r3, #95	; 0x5f
 8000f3a:	d102      	bne.n	8000f42 <GetSegmentDigit+0x7a>
			fontChar = Font_Table[FONTS_UNDERSCORE];
 8000f3c:	2308      	movs	r3, #8
 8000f3e:	75fb      	strb	r3, [r7, #23]
 8000f40:	e00d      	b.n	8000f5e <GetSegmentDigit+0x96>
		}else if(chr == '-'){
 8000f42:	78fb      	ldrb	r3, [r7, #3]
 8000f44:	2b2d      	cmp	r3, #45	; 0x2d
 8000f46:	d102      	bne.n	8000f4e <GetSegmentDigit+0x86>
			fontChar = Font_Table[FONTS_MINUS];
 8000f48:	2301      	movs	r3, #1
 8000f4a:	75fb      	strb	r3, [r7, #23]
 8000f4c:	e007      	b.n	8000f5e <GetSegmentDigit+0x96>
		}else if(chr == '.' || chr == ','){
 8000f4e:	78fb      	ldrb	r3, [r7, #3]
 8000f50:	2b2e      	cmp	r3, #46	; 0x2e
 8000f52:	d002      	beq.n	8000f5a <GetSegmentDigit+0x92>
 8000f54:	78fb      	ldrb	r3, [r7, #3]
 8000f56:	2b2c      	cmp	r3, #44	; 0x2c
 8000f58:	d101      	bne.n	8000f5e <GetSegmentDigit+0x96>
			fontChar = Font_Table[FONTS_DOT];
 8000f5a:	2380      	movs	r3, #128	; 0x80
 8000f5c:	75fb      	strb	r3, [r7, #23]
		}
		result.sA = fontChar & ConverterValue_SegmentA ? true : false;
 8000f5e:	2240      	movs	r2, #64	; 0x40
 8000f60:	7dfb      	ldrb	r3, [r7, #23]
 8000f62:	4013      	ands	r3, r2
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	bf14      	ite	ne
 8000f6a:	2301      	movne	r3, #1
 8000f6c:	2300      	moveq	r3, #0
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	733b      	strb	r3, [r7, #12]
		result.sB = fontChar & ConverterValue_SegmentB ? true : false;
 8000f72:	2220      	movs	r2, #32
 8000f74:	7dfb      	ldrb	r3, [r7, #23]
 8000f76:	4013      	ands	r3, r2
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	bf14      	ite	ne
 8000f7e:	2301      	movne	r3, #1
 8000f80:	2300      	moveq	r3, #0
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	737b      	strb	r3, [r7, #13]
		result.sC = fontChar & ConverterValue_SegmentC ? true : false;
 8000f86:	2210      	movs	r2, #16
 8000f88:	7dfb      	ldrb	r3, [r7, #23]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	bf14      	ite	ne
 8000f92:	2301      	movne	r3, #1
 8000f94:	2300      	moveq	r3, #0
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	73bb      	strb	r3, [r7, #14]
		result.sD = fontChar & ConverterValue_SegmentD ? true : false;
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	7dfb      	ldrb	r3, [r7, #23]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	bf14      	ite	ne
 8000fa6:	2301      	movne	r3, #1
 8000fa8:	2300      	moveq	r3, #0
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	73fb      	strb	r3, [r7, #15]
		result.sE = fontChar & ConverterValue_SegmentE ? true : false;
 8000fae:	2204      	movs	r2, #4
 8000fb0:	7dfb      	ldrb	r3, [r7, #23]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	bf14      	ite	ne
 8000fba:	2301      	movne	r3, #1
 8000fbc:	2300      	moveq	r3, #0
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	743b      	strb	r3, [r7, #16]
		result.sF = fontChar & ConverterValue_SegmentF ? true : false;
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	7dfb      	ldrb	r3, [r7, #23]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	bf14      	ite	ne
 8000fce:	2301      	movne	r3, #1
 8000fd0:	2300      	moveq	r3, #0
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	747b      	strb	r3, [r7, #17]
		result.sG = fontChar & ConverterValue_SegmentG ? true : false;
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	7dfb      	ldrb	r3, [r7, #23]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	bf14      	ite	ne
 8000fe2:	2301      	movne	r3, #1
 8000fe4:	2300      	moveq	r3, #0
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	74bb      	strb	r3, [r7, #18]
		result.sDot = fontChar & ConverterValue_SegmentDot ? true : false;
 8000fea:	2280      	movs	r2, #128	; 0x80
 8000fec:	7dfb      	ldrb	r3, [r7, #23]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	bf14      	ite	ne
 8000ff6:	2301      	movne	r3, #1
 8000ff8:	2300      	moveq	r3, #0
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	74fb      	strb	r3, [r7, #19]
			|| chr == '_') {
 8000ffe:	e00f      	b.n	8001020 <GetSegmentDigit+0x158>
	}
	else{
		result.sA = true;
 8001000:	2301      	movs	r3, #1
 8001002:	733b      	strb	r3, [r7, #12]
		result.sB = true;
 8001004:	2301      	movs	r3, #1
 8001006:	737b      	strb	r3, [r7, #13]
		result.sC = true;
 8001008:	2301      	movs	r3, #1
 800100a:	73bb      	strb	r3, [r7, #14]
		result.sD = true;
 800100c:	2301      	movs	r3, #1
 800100e:	73fb      	strb	r3, [r7, #15]
		result.sE = true;
 8001010:	2301      	movs	r3, #1
 8001012:	743b      	strb	r3, [r7, #16]
		result.sF = true;
 8001014:	2301      	movs	r3, #1
 8001016:	747b      	strb	r3, [r7, #17]
		result.sG = true;
 8001018:	2301      	movs	r3, #1
 800101a:	74bb      	strb	r3, [r7, #18]
		result.sDot = true;
 800101c:	2301      	movs	r3, #1
 800101e:	74fb      	strb	r3, [r7, #19]
	}
	return result;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	461a      	mov	r2, r3
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	cb03      	ldmia	r3!, {r0, r1}
 800102a:	6010      	str	r0, [r2, #0]
 800102c:	6051      	str	r1, [r2, #4]
}
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	371c      	adds	r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	08005c10 	.word	0x08005c10

08001040 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800104a:	695a      	ldr	r2, [r3, #20]
 800104c:	4907      	ldr	r1, [pc, #28]	; (800106c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4313      	orrs	r3, r2
 8001052:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001056:	695a      	ldr	r2, [r3, #20]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4013      	ands	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800105e:	68fb      	ldr	r3, [r7, #12]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	40021000 	.word	0x40021000

08001070 <LL_GPIO_ResetOutputPin>:
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	463b      	mov	r3, r7
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
 80010a0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80010a2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80010a6:	f7ff ffcb 	bl	8001040 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80010aa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80010ae:	f7ff ffc7 	bl	8001040 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80010b2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80010b6:	f7ff ffc3 	bl	8001040 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, S_B_Pin|S_A_Pin|D_3_Pin|S_F_Pin
 80010ba:	f641 119f 	movw	r1, #6559	; 0x199f
 80010be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c2:	f7ff ffd5 	bl	8001070 <LL_GPIO_ResetOutputPin>
                          |D_1_Pin|D_T_Pin|S_C_Pin|S_E_Pin
                          |D_2_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, D_0_Pin|S_DP_Pin|S_G_Pin|S_D_Pin);
 80010c6:	2133      	movs	r1, #51	; 0x33
 80010c8:	4822      	ldr	r0, [pc, #136]	; (8001154 <MX_GPIO_Init+0xc8>)
 80010ca:	f7ff ffd1 	bl	8001070 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = S_B_Pin|S_A_Pin|D_3_Pin|S_F_Pin
 80010ce:	f641 139f 	movw	r3, #6559	; 0x199f
 80010d2:	603b      	str	r3, [r7, #0]
                          |D_1_Pin|D_T_Pin|S_C_Pin|S_E_Pin
                          |D_2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010d4:	2301      	movs	r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010e0:	2300      	movs	r3, #0
 80010e2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	463b      	mov	r3, r7
 80010e6:	4619      	mov	r1, r3
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ec:	f001 f9b0 	bl	8002450 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = D_0_Pin|S_DP_Pin|S_G_Pin|S_D_Pin;
 80010f0:	2333      	movs	r3, #51	; 0x33
 80010f2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010f4:	2301      	movs	r3, #1
 80010f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001100:	2300      	movs	r3, #0
 8001102:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001104:	463b      	mov	r3, r7
 8001106:	4619      	mov	r1, r3
 8001108:	4812      	ldr	r0, [pc, #72]	; (8001154 <MX_GPIO_Init+0xc8>)
 800110a:	f001 f9a1 	bl	8002450 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 800110e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001112:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001114:	2302      	movs	r3, #2
 8001116:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001118:	2303      	movs	r3, #3
 800111a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001124:	2307      	movs	r3, #7
 8001126:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001128:	463b      	mov	r3, r7
 800112a:	4619      	mov	r1, r3
 800112c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001130:	f001 f98e 	bl	8002450 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TLACIDLO_Pin;
 8001134:	2308      	movs	r3, #8
 8001136:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001138:	2300      	movs	r3, #0
 800113a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800113c:	2301      	movs	r3, #1
 800113e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TLACIDLO_GPIO_Port, &GPIO_InitStruct);
 8001140:	463b      	mov	r3, r7
 8001142:	4619      	mov	r1, r3
 8001144:	4803      	ldr	r0, [pc, #12]	; (8001154 <MX_GPIO_Init+0xc8>)
 8001146:	f001 f983 	bl	8002450 <LL_GPIO_Init>

}
 800114a:	bf00      	nop
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	48000400 	.word	0x48000400

08001158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <__NVIC_GetPriorityGrouping+0x18>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	f003 0307 	and.w	r3, r3, #7
}
 8001166:	4618      	mov	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	2b00      	cmp	r3, #0
 8001184:	db0b      	blt.n	800119e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	f003 021f 	and.w	r2, r3, #31
 800118c:	4907      	ldr	r1, [pc, #28]	; (80011ac <__NVIC_EnableIRQ+0x38>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	095b      	lsrs	r3, r3, #5
 8001194:	2001      	movs	r0, #1
 8001196:	fa00 f202 	lsl.w	r2, r0, r2
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000e100 	.word	0xe000e100

080011b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	db0a      	blt.n	80011da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	490c      	ldr	r1, [pc, #48]	; (80011fc <__NVIC_SetPriority+0x4c>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	440b      	add	r3, r1
 80011d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d8:	e00a      	b.n	80011f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4908      	ldr	r1, [pc, #32]	; (8001200 <__NVIC_SetPriority+0x50>)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	3b04      	subs	r3, #4
 80011e8:	0112      	lsls	r2, r2, #4
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	440b      	add	r3, r1
 80011ee:	761a      	strb	r2, [r3, #24]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000e100 	.word	0xe000e100
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	; 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f1c3 0307 	rsb	r3, r3, #7
 800121e:	2b04      	cmp	r3, #4
 8001220:	bf28      	it	cs
 8001222:	2304      	movcs	r3, #4
 8001224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3304      	adds	r3, #4
 800122a:	2b06      	cmp	r3, #6
 800122c:	d902      	bls.n	8001234 <NVIC_EncodePriority+0x30>
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3b03      	subs	r3, #3
 8001232:	e000      	b.n	8001236 <NVIC_EncodePriority+0x32>
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	f04f 32ff 	mov.w	r2, #4294967295
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43da      	mvns	r2, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	401a      	ands	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800124c:	f04f 31ff 	mov.w	r1, #4294967295
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa01 f303 	lsl.w	r3, r1, r3
 8001256:	43d9      	mvns	r1, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	4313      	orrs	r3, r2
         );
}
 800125e:	4618      	mov	r0, r3
 8001260:	3724      	adds	r7, #36	; 0x24
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f043 0201 	orr.w	r2, r3, #1
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	601a      	str	r2, [r3, #0]
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	601a      	str	r2, [r3, #0]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	601a      	str	r2, [r3, #0]
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b085      	sub	sp, #20
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	60f8      	str	r0, [r7, #12]
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80012de:	f023 0306 	bic.w	r3, r3, #6
 80012e2:	68b9      	ldr	r1, [r7, #8]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	430a      	orrs	r2, r1
 80012e8:	431a      	orrs	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	60da      	str	r2, [r3, #12]
}
 80012ee:	bf00      	nop
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	60da      	str	r2, [r3, #12]
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f043 0204 	orr.w	r2, r3, #4
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	601a      	str	r2, [r3, #0]
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 0204 	bic.w	r2, r3, #4
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	601a      	str	r2, [r3, #0]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b02      	cmp	r3, #2
 800136c:	d101      	bne.n	8001372 <LL_I2C_IsActiveFlag_TXIS+0x18>
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0320 	and.w	r3, r3, #32
 8001390:	2b20      	cmp	r3, #32
 8001392:	d101      	bne.n	8001398 <LL_I2C_IsActiveFlag_STOP+0x18>
 8001394:	2301      	movs	r3, #1
 8001396:	e000      	b.n	800139a <LL_I2C_IsActiveFlag_STOP+0x1a>
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	f043 0220 	orr.w	r2, r3, #32
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	61da      	str	r2, [r3, #28]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	605a      	str	r2, [r3, #4]
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	0d5b      	lsrs	r3, r3, #21
 80013fe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <LL_I2C_HandleTransfer+0x48>)
 8001404:	430b      	orrs	r3, r1
 8001406:	43db      	mvns	r3, r3
 8001408:	401a      	ands	r2, r3
 800140a:	68b9      	ldr	r1, [r7, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4319      	orrs	r1, r3
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	041b      	lsls	r3, r3, #16
 8001414:	4319      	orrs	r1, r3
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	4319      	orrs	r1, r3
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	430b      	orrs	r3, r1
 800141e:	431a      	orrs	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	03ff7bff 	.word	0x03ff7bff

08001434 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001440:	78fa      	ldrb	r2, [r7, #3]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <LL_AHB1_GRP1_EnableClock>:
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800145e:	695a      	ldr	r2, [r3, #20]
 8001460:	4907      	ldr	r1, [pc, #28]	; (8001480 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4313      	orrs	r3, r2
 8001466:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800146a:	695a      	ldr	r2, [r3, #20]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4013      	ands	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001472:	68fb      	ldr	r3, [r7, #12]
}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	40021000 	.word	0x40021000

08001484 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800148e:	69da      	ldr	r2, [r3, #28]
 8001490:	4907      	ldr	r1, [pc, #28]	; (80014b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4313      	orrs	r3, r2
 8001496:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800149a:	69da      	ldr	r2, [r3, #28]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4013      	ands	r3, r2
 80014a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014a2:	68fb      	ldr	r3, [r7, #12]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	40021000 	.word	0x40021000

080014b4 <MX_I2C1_Init>:
extern volatile uint8_t ubReceiveIndex;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08e      	sub	sp, #56	; 0x38
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]
 80014ca:	615a      	str	r2, [r3, #20]
 80014cc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
 80014dc:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80014de:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80014e2:	f7ff ffb7 	bl	8001454 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80014e6:	23c0      	movs	r3, #192	; 0xc0
 80014e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80014ea:	2302      	movs	r3, #2
 80014ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80014ee:	2303      	movs	r3, #3
 80014f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80014f2:	2301      	movs	r3, #1
 80014f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80014f6:	2301      	movs	r3, #1
 80014f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80014fa:	2304      	movs	r3, #4
 80014fc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	4619      	mov	r1, r3
 8001502:	4821      	ldr	r0, [pc, #132]	; (8001588 <MX_I2C1_Init+0xd4>)
 8001504:	f000 ffa4 	bl	8002450 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001508:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800150c:	f7ff ffba 	bl	8001484 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001510:	f7ff fe22 	bl	8001158 <__NVIC_GetPriorityGrouping>
 8001514:	4603      	mov	r3, r0
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fe72 	bl	8001204 <NVIC_EncodePriority>
 8001520:	4603      	mov	r3, r0
 8001522:	4619      	mov	r1, r3
 8001524:	201f      	movs	r0, #31
 8001526:	f7ff fe43 	bl	80011b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800152a:	201f      	movs	r0, #31
 800152c:	f7ff fe22 	bl	8001174 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001530:	4816      	ldr	r0, [pc, #88]	; (800158c <MX_I2C1_Init+0xd8>)
 8001532:	f7ff ff48 	bl	80013c6 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8001536:	4815      	ldr	r0, [pc, #84]	; (800158c <MX_I2C1_Init+0xd8>)
 8001538:	f7ff fedf 	bl	80012fa <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800153c:	4813      	ldr	r0, [pc, #76]	; (800158c <MX_I2C1_Init+0xd8>)
 800153e:	f7ff feb4 	bl	80012aa <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001542:	4812      	ldr	r0, [pc, #72]	; (800158c <MX_I2C1_Init+0xd8>)
 8001544:	f7ff fea1 	bl	800128a <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 800154c:	4b10      	ldr	r3, [pc, #64]	; (8001590 <MX_I2C1_Init+0xdc>)
 800154e:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8001558:	2302      	movs	r3, #2
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800155c:	2300      	movs	r3, #0
 800155e:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001560:	2300      	movs	r3, #0
 8001562:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001564:	f107 031c 	add.w	r3, r7, #28
 8001568:	4619      	mov	r1, r3
 800156a:	4808      	ldr	r0, [pc, #32]	; (800158c <MX_I2C1_Init+0xd8>)
 800156c:	f001 f883 	bl	8002676 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001570:	2200      	movs	r2, #0
 8001572:	2100      	movs	r1, #0
 8001574:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_I2C1_Init+0xd8>)
 8001576:	f7ff fea8 	bl	80012ca <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 800157a:	4804      	ldr	r0, [pc, #16]	; (800158c <MX_I2C1_Init+0xd8>)
 800157c:	f7ff fe75 	bl	800126a <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8001580:	bf00      	nop
 8001582:	3738      	adds	r7, #56	; 0x38
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	48000400 	.word	0x48000400
 800158c:	40005400 	.word	0x40005400
 8001590:	2000090e 	.word	0x2000090e

08001594 <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b085      	sub	sp, #20
 8001598:	af02      	add	r7, sp, #8
 800159a:	4604      	mov	r4, r0
 800159c:	4608      	mov	r0, r1
 800159e:	4611      	mov	r1, r2
 80015a0:	461a      	mov	r2, r3
 80015a2:	4623      	mov	r3, r4
 80015a4:	71fb      	strb	r3, [r7, #7]
 80015a6:	4603      	mov	r3, r0
 80015a8:	71bb      	strb	r3, [r7, #6]
 80015aa:	460b      	mov	r3, r1
 80015ac:	717b      	strb	r3, [r7, #5]
 80015ae:	4613      	mov	r3, r2
 80015b0:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 80015b2:	793b      	ldrb	r3, [r7, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 80015b8:	79bb      	ldrb	r3, [r7, #6]
 80015ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015be:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80015c0:	7979      	ldrb	r1, [r7, #5]
 80015c2:	4b14      	ldr	r3, [pc, #80]	; (8001614 <i2c_master_write+0x80>)
 80015c4:	9301      	str	r3, [sp, #4]
 80015c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2302      	movs	r3, #2
 80015ce:	2200      	movs	r2, #0
 80015d0:	4811      	ldr	r0, [pc, #68]	; (8001618 <i2c_master_write+0x84>)
 80015d2:	f7ff ff09 	bl	80013e8 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 80015d6:	79bb      	ldrb	r3, [r7, #6]
 80015d8:	4619      	mov	r1, r3
 80015da:	480f      	ldr	r0, [pc, #60]	; (8001618 <i2c_master_write+0x84>)
 80015dc:	f7ff ff2a 	bl	8001434 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80015e0:	e00a      	b.n	80015f8 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 80015e2:	480d      	ldr	r0, [pc, #52]	; (8001618 <i2c_master_write+0x84>)
 80015e4:	f7ff feb9 	bl	800135a <LL_I2C_IsActiveFlag_TXIS>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d004      	beq.n	80015f8 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	4619      	mov	r1, r3
 80015f2:	4809      	ldr	r0, [pc, #36]	; (8001618 <i2c_master_write+0x84>)
 80015f4:	f7ff ff1e 	bl	8001434 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80015f8:	4807      	ldr	r0, [pc, #28]	; (8001618 <i2c_master_write+0x84>)
 80015fa:	f7ff fec1 	bl	8001380 <LL_I2C_IsActiveFlag_STOP>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0ee      	beq.n	80015e2 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001604:	4804      	ldr	r0, [pc, #16]	; (8001618 <i2c_master_write+0x84>)
 8001606:	f7ff fece 	bl	80013a6 <LL_I2C_ClearFlag_STOP>
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	bd90      	pop	{r4, r7, pc}
 8001612:	bf00      	nop
 8001614:	80002000 	.word	0x80002000
 8001618:	40005400 	.word	0x40005400

0800161c <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af02      	add	r7, sp, #8
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	4608      	mov	r0, r1
 8001626:	4611      	mov	r1, r2
 8001628:	461a      	mov	r2, r3
 800162a:	4603      	mov	r3, r0
 800162c:	70fb      	strb	r3, [r7, #3]
 800162e:	460b      	mov	r3, r1
 8001630:	70bb      	strb	r3, [r7, #2]
 8001632:	4613      	mov	r3, r2
 8001634:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 8001636:	4a30      	ldr	r2, [pc, #192]	; (80016f8 <i2c_master_read+0xdc>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6013      	str	r3, [r2, #0]

	if(read_flag)
 800163c:	7c3b      	ldrb	r3, [r7, #16]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8001642:	78bb      	ldrb	r3, [r7, #2]
 8001644:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001648:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 800164a:	4b2c      	ldr	r3, [pc, #176]	; (80016fc <i2c_master_read+0xe0>)
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8001650:	482b      	ldr	r0, [pc, #172]	; (8001700 <i2c_master_read+0xe4>)
 8001652:	f7ff fe62 	bl	800131a <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001656:	7879      	ldrb	r1, [r7, #1]
 8001658:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <i2c_master_read+0xe8>)
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	2301      	movs	r3, #1
 8001664:	2200      	movs	r2, #0
 8001666:	4826      	ldr	r0, [pc, #152]	; (8001700 <i2c_master_read+0xe4>)
 8001668:	f7ff febe 	bl	80013e8 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800166c:	e00a      	b.n	8001684 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 800166e:	4824      	ldr	r0, [pc, #144]	; (8001700 <i2c_master_read+0xe4>)
 8001670:	f7ff fe73 	bl	800135a <LL_I2C_IsActiveFlag_TXIS>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d004      	beq.n	8001684 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 800167a:	78bb      	ldrb	r3, [r7, #2]
 800167c:	4619      	mov	r1, r3
 800167e:	4820      	ldr	r0, [pc, #128]	; (8001700 <i2c_master_read+0xe4>)
 8001680:	f7ff fed8 	bl	8001434 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001684:	481e      	ldr	r0, [pc, #120]	; (8001700 <i2c_master_read+0xe4>)
 8001686:	f7ff fe7b 	bl	8001380 <LL_I2C_IsActiveFlag_STOP>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0ee      	beq.n	800166e <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001690:	481b      	ldr	r0, [pc, #108]	; (8001700 <i2c_master_read+0xe4>)
 8001692:	f7ff fe88 	bl	80013a6 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8001696:	bf00      	nop
 8001698:	4819      	ldr	r0, [pc, #100]	; (8001700 <i2c_master_read+0xe4>)
 800169a:	f7ff fe71 	bl	8001380 <LL_I2C_IsActiveFlag_STOP>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1f9      	bne.n	8001698 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 80016a4:	7879      	ldrb	r1, [r7, #1]
 80016a6:	78fb      	ldrb	r3, [r7, #3]
 80016a8:	4a17      	ldr	r2, [pc, #92]	; (8001708 <i2c_master_read+0xec>)
 80016aa:	9201      	str	r2, [sp, #4]
 80016ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016b0:	9200      	str	r2, [sp, #0]
 80016b2:	2200      	movs	r2, #0
 80016b4:	4812      	ldr	r0, [pc, #72]	; (8001700 <i2c_master_read+0xe4>)
 80016b6:	f7ff fe97 	bl	80013e8 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 80016ba:	bf00      	nop
 80016bc:	4810      	ldr	r0, [pc, #64]	; (8001700 <i2c_master_read+0xe4>)
 80016be:	f7ff fe5f 	bl	8001380 <LL_I2C_IsActiveFlag_STOP>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0f9      	beq.n	80016bc <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <i2c_master_read+0xe4>)
 80016ca:	f7ff fe6c 	bl	80013a6 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 80016ce:	480c      	ldr	r0, [pc, #48]	; (8001700 <i2c_master_read+0xe4>)
 80016d0:	f7ff fe33 	bl	800133a <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <i2c_master_read+0xe4>)
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	4a09      	ldr	r2, [pc, #36]	; (8001700 <i2c_master_read+0xe4>)
 80016da:	f043 0310 	orr.w	r3, r3, #16
 80016de:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 80016e0:	4b0a      	ldr	r3, [pc, #40]	; (800170c <i2c_master_read+0xf0>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 80016e6:	4b05      	ldr	r3, [pc, #20]	; (80016fc <i2c_master_read+0xe0>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 80016ec:	4b02      	ldr	r3, [pc, #8]	; (80016f8 <i2c_master_read+0xdc>)
 80016ee:	681b      	ldr	r3, [r3, #0]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	2000021c 	.word	0x2000021c
 80016fc:	20000220 	.word	0x20000220
 8001700:	40005400 	.word	0x40005400
 8001704:	80002000 	.word	0x80002000
 8001708:	80002400 	.word	0x80002400
 800170c:	20000218 	.word	0x20000218

08001710 <__NVIC_SetPriorityGrouping>:
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <__NVIC_SetPriorityGrouping+0x44>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800172c:	4013      	ands	r3, r2
 800172e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800173c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001742:	4a04      	ldr	r2, [pc, #16]	; (8001754 <__NVIC_SetPriorityGrouping+0x44>)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	60d3      	str	r3, [r2, #12]
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <LL_RCC_HSI_Enable+0x1c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a04      	ldr	r2, [pc, #16]	; (8001774 <LL_RCC_HSI_Enable+0x1c>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40021000 	.word	0x40021000

08001778 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <LL_RCC_HSI_IsReady+0x20>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b02      	cmp	r3, #2
 8001786:	bf0c      	ite	eq
 8001788:	2301      	moveq	r3, #1
 800178a:	2300      	movne	r3, #0
 800178c:	b2db      	uxtb	r3, r3
}
 800178e:	4618      	mov	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	40021000 	.word	0x40021000

0800179c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80017a4:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	4904      	ldr	r1, [pc, #16]	; (80017c4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	600b      	str	r3, [r1, #0]
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000

080017c8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <LL_RCC_SetSysClkSource+0x24>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f023 0203 	bic.w	r2, r3, #3
 80017d8:	4904      	ldr	r1, [pc, #16]	; (80017ec <LL_RCC_SetSysClkSource+0x24>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4313      	orrs	r3, r2
 80017de:	604b      	str	r3, [r1, #4]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	40021000 	.word	0x40021000

080017f0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <LL_RCC_GetSysClkSource+0x18>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 030c 	and.w	r3, r3, #12
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000

0800180c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <LL_RCC_SetAHBPrescaler+0x24>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800181c:	4904      	ldr	r1, [pc, #16]	; (8001830 <LL_RCC_SetAHBPrescaler+0x24>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	40021000 	.word	0x40021000

08001834 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <LL_RCC_SetAPB1Prescaler+0x24>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001844:	4904      	ldr	r1, [pc, #16]	; (8001858 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4313      	orrs	r3, r2
 800184a:	604b      	str	r3, [r1, #4]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	40021000 	.word	0x40021000

0800185c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800186c:	4904      	ldr	r1, [pc, #16]	; (8001880 <LL_RCC_SetAPB2Prescaler+0x24>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	40021000 	.word	0x40021000

08001884 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <LL_RCC_SetI2CClockSource+0x2c>)
 800188e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	0e1b      	lsrs	r3, r3, #24
 8001894:	43db      	mvns	r3, r3
 8001896:	401a      	ands	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800189e:	4904      	ldr	r1, [pc, #16]	; (80018b0 <LL_RCC_SetI2CClockSource+0x2c>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	630b      	str	r3, [r1, #48]	; 0x30
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	40021000 	.word	0x40021000

080018b4 <LL_APB1_GRP1_EnableClock>:
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018be:	69da      	ldr	r2, [r3, #28]
 80018c0:	4907      	ldr	r1, [pc, #28]	; (80018e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018ca:	69da      	ldr	r2, [r3, #28]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4013      	ands	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018d2:	68fb      	ldr	r3, [r7, #12]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	40021000 	.word	0x40021000

080018e4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018ee:	699a      	ldr	r2, [r3, #24]
 80018f0:	4907      	ldr	r1, [pc, #28]	; (8001910 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018fa:	699a      	ldr	r2, [r3, #24]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4013      	ands	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001902:	68fb      	ldr	r3, [r7, #12]
}
 8001904:	bf00      	nop
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	40021000 	.word	0x40021000

08001914 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <LL_FLASH_SetLatency+0x24>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f023 0207 	bic.w	r2, r3, #7
 8001924:	4904      	ldr	r1, [pc, #16]	; (8001938 <LL_FLASH_SetLatency+0x24>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4313      	orrs	r3, r2
 800192a:	600b      	str	r3, [r1, #0]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	40022000 	.word	0x40022000

0800193c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <LL_FLASH_GetLatency+0x18>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0307 	and.w	r3, r3, #7
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40022000 	.word	0x40022000

08001958 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	DisplayDigit_0.index = 0;
 800195e:	4b4d      	ldr	r3, [pc, #308]	; (8001a94 <main+0x13c>)
 8001960:	2200      	movs	r2, #0
 8001962:	701a      	strb	r2, [r3, #0]
	DisplayDigit_0.chr = 0;
 8001964:	4b4b      	ldr	r3, [pc, #300]	; (8001a94 <main+0x13c>)
 8001966:	2200      	movs	r2, #0
 8001968:	705a      	strb	r2, [r3, #1]
	DisplayDigit_1.index = 1;
 800196a:	4b4b      	ldr	r3, [pc, #300]	; (8001a98 <main+0x140>)
 800196c:	2201      	movs	r2, #1
 800196e:	701a      	strb	r2, [r3, #0]
	DisplayDigit_1.chr = 0;
 8001970:	4b49      	ldr	r3, [pc, #292]	; (8001a98 <main+0x140>)
 8001972:	2200      	movs	r2, #0
 8001974:	705a      	strb	r2, [r3, #1]
	DisplayDigit_2.index = 2;
 8001976:	4b49      	ldr	r3, [pc, #292]	; (8001a9c <main+0x144>)
 8001978:	2202      	movs	r2, #2
 800197a:	701a      	strb	r2, [r3, #0]
	DisplayDigit_2.chr = 0;
 800197c:	4b47      	ldr	r3, [pc, #284]	; (8001a9c <main+0x144>)
 800197e:	2200      	movs	r2, #0
 8001980:	705a      	strb	r2, [r3, #1]
	DisplayDigit_3.index = 3;
 8001982:	4b47      	ldr	r3, [pc, #284]	; (8001aa0 <main+0x148>)
 8001984:	2203      	movs	r2, #3
 8001986:	701a      	strb	r2, [r3, #0]
	DisplayDigit_3.chr = 0;
 8001988:	4b45      	ldr	r3, [pc, #276]	; (8001aa0 <main+0x148>)
 800198a:	2200      	movs	r2, #0
 800198c:	705a      	strb	r2, [r3, #1]
	nextStringSequence = false;
 800198e:	4b45      	ldr	r3, [pc, #276]	; (8001aa4 <main+0x14c>)
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]
	Direction_ direction = Direction_DownUp;
 8001994:	2300      	movs	r3, #0
 8001996:	75fb      	strb	r3, [r7, #23]
	//*aReceiveBuffer_read = 0;
	end_of_read_flag = 0;
 8001998:	4b43      	ldr	r3, [pc, #268]	; (8001aa8 <main+0x150>)
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
	ubReceiveIndex = 0;
 800199e:	4b43      	ldr	r3, [pc, #268]	; (8001aac <main+0x154>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80019a4:	2001      	movs	r0, #1
 80019a6:	f7ff ff9d 	bl	80018e4 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80019aa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80019ae:	f7ff ff81 	bl	80018b4 <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b2:	2003      	movs	r0, #3
 80019b4:	f7ff feac 	bl	8001710 <__NVIC_SetPriorityGrouping>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80019b8:	f000 f888 	bl	8001acc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80019bc:	f7ff fb66 	bl	800108c <MX_GPIO_Init>
	MX_I2C1_Init();
 80019c0:	f7ff fd78 	bl	80014b4 <MX_I2C1_Init>
	MX_TIM6_Init();
 80019c4:	f000 fb96 	bl	80020f4 <MX_TIM6_Init>
	MX_TIM7_Init();
 80019c8:	f000 fbd4 	bl	8002174 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */
	lsm6ds0_init();
 80019cc:	f001 f844 	bl	8002a58 <lsm6ds0_init>
	hts221_init();
 80019d0:	f001 f8bc 	bl	8002b4c <hts221_init>

	uint8_t index = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	75bb      	strb	r3, [r7, #22]
	uint8_t string[STR_LEN] = { 0 };
 80019d8:	2300      	movs	r3, #0
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
	uint8_t lenString = STR_LEN;
 80019e8:	2314      	movs	r3, #20
 80019ea:	757b      	strb	r3, [r7, #21]
	setString(string, TEMPERATURE_STR_TEXT, TEMPERATURE_STR_PROT, temperature);
 80019ec:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <main+0x158>)
 80019ee:	edd3 7a00 	vldr	s15, [r3]
 80019f2:	463b      	mov	r3, r7
 80019f4:	eeb0 0a67 	vmov.f32	s0, s15
 80019f8:	4a2e      	ldr	r2, [pc, #184]	; (8001ab4 <main+0x15c>)
 80019fa:	492f      	ldr	r1, [pc, #188]	; (8001ab8 <main+0x160>)
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 f89b 	bl	8001b38 <setString>
	lenString = strlen((const char*) string);
 8001a02:	463b      	mov	r3, r7
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fbe3 	bl	80001d0 <strlen>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	757b      	strb	r3, [r7, #21]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (nextStringSequence) {
 8001a0e:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <main+0x14c>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0fb      	beq.n	8001a0e <main+0xb6>
			nextStringSequence = false;
 8001a16:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <main+0x14c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
			lsm6ds0_get_acc(acc, (acc + 1), (acc + 2));
 8001a1c:	4b27      	ldr	r3, [pc, #156]	; (8001abc <main+0x164>)
 8001a1e:	4a28      	ldr	r2, [pc, #160]	; (8001ac0 <main+0x168>)
 8001a20:	4619      	mov	r1, r3
 8001a22:	4828      	ldr	r0, [pc, #160]	; (8001ac4 <main+0x16c>)
 8001a24:	f000 ffb6 	bl	8002994 <lsm6ds0_get_acc>
			hts221_get_humidity(&humidity);
 8001a28:	4827      	ldr	r0, [pc, #156]	; (8001ac8 <main+0x170>)
 8001a2a:	f001 f8dd 	bl	8002be8 <hts221_get_humidity>
			hts221_get_temperature(&temperature);
 8001a2e:	4820      	ldr	r0, [pc, #128]	; (8001ab0 <main+0x158>)
 8001a30:	f001 f92a 	bl	8002c88 <hts221_get_temperature>
			displayString(index, string, lenString);
 8001a34:	7d7a      	ldrb	r2, [r7, #21]
 8001a36:	4639      	mov	r1, r7
 8001a38:	7dbb      	ldrb	r3, [r7, #22]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 f896 	bl	8001b6c <displayString>
			if (index + STR_DISP_LEN < lenString
 8001a40:	7dbb      	ldrb	r3, [r7, #22]
 8001a42:	1d1a      	adds	r2, r3, #4
 8001a44:	7d7b      	ldrb	r3, [r7, #21]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	da06      	bge.n	8001a58 <main+0x100>
					&& direction == Direction_DownUp) {
 8001a4a:	7dfb      	ldrb	r3, [r7, #23]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d103      	bne.n	8001a58 <main+0x100>
				index++;
 8001a50:	7dbb      	ldrb	r3, [r7, #22]
 8001a52:	3301      	adds	r3, #1
 8001a54:	75bb      	strb	r3, [r7, #22]
 8001a56:	e009      	b.n	8001a6c <main+0x114>
			} else if (index + STR_DISP_LEN >= lenString
 8001a58:	7dbb      	ldrb	r3, [r7, #22]
 8001a5a:	1d1a      	adds	r2, r3, #4
 8001a5c:	7d7b      	ldrb	r3, [r7, #21]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	db04      	blt.n	8001a6c <main+0x114>
					&& direction == Direction_DownUp) {
 8001a62:	7dfb      	ldrb	r3, [r7, #23]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <main+0x114>
				direction = Direction_UpDown;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	75fb      	strb	r3, [r7, #23]
			}

			if (index > 0 && direction == Direction_UpDown) {
 8001a6c:	7dbb      	ldrb	r3, [r7, #22]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d006      	beq.n	8001a80 <main+0x128>
 8001a72:	7dfb      	ldrb	r3, [r7, #23]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d103      	bne.n	8001a80 <main+0x128>
				index--;
 8001a78:	7dbb      	ldrb	r3, [r7, #22]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	75bb      	strb	r3, [r7, #22]
 8001a7e:	e007      	b.n	8001a90 <main+0x138>
			} else if (index == 0 && direction == Direction_UpDown) {
 8001a80:	7dbb      	ldrb	r3, [r7, #22]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1c3      	bne.n	8001a0e <main+0xb6>
 8001a86:	7dfb      	ldrb	r3, [r7, #23]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d1c0      	bne.n	8001a0e <main+0xb6>
				direction = Direction_DownUp;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	75fb      	strb	r3, [r7, #23]
		if (nextStringSequence) {
 8001a90:	e7bd      	b.n	8001a0e <main+0xb6>
 8001a92:	bf00      	nop
 8001a94:	20000214 	.word	0x20000214
 8001a98:	2000020c 	.word	0x2000020c
 8001a9c:	20000208 	.word	0x20000208
 8001aa0:	20000210 	.word	0x20000210
 8001aa4:	20000230 	.word	0x20000230
 8001aa8:	20000220 	.word	0x20000220
 8001aac:	20000218 	.word	0x20000218
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	08005c40 	.word	0x08005c40
 8001ab8:	08005c38 	.word	0x08005c38
 8001abc:	20000228 	.word	0x20000228
 8001ac0:	2000022c 	.word	0x2000022c
 8001ac4:	20000224 	.word	0x20000224
 8001ac8:	20000234 	.word	0x20000234

08001acc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f7ff ff1f 	bl	8001914 <LL_FLASH_SetLatency>
	while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0) {
 8001ad6:	bf00      	nop
 8001ad8:	f7ff ff30 	bl	800193c <LL_FLASH_GetLatency>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1fa      	bne.n	8001ad8 <SystemClock_Config+0xc>
	}
	LL_RCC_HSI_Enable();
 8001ae2:	f7ff fe39 	bl	8001758 <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while (LL_RCC_HSI_IsReady() != 1) {
 8001ae6:	bf00      	nop
 8001ae8:	f7ff fe46 	bl	8001778 <LL_RCC_HSI_IsReady>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d1fa      	bne.n	8001ae8 <SystemClock_Config+0x1c>

	}
	LL_RCC_HSI_SetCalibTrimming(16);
 8001af2:	2010      	movs	r0, #16
 8001af4:	f7ff fe52 	bl	800179c <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001af8:	2000      	movs	r0, #0
 8001afa:	f7ff fe87 	bl	800180c <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001afe:	2000      	movs	r0, #0
 8001b00:	f7ff fe98 	bl	8001834 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001b04:	2000      	movs	r0, #0
 8001b06:	f7ff fea9 	bl	800185c <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	f7ff fe5c 	bl	80017c8 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8001b10:	bf00      	nop
 8001b12:	f7ff fe6d 	bl	80017f0 <LL_RCC_GetSysClkSource>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1fa      	bne.n	8001b12 <SystemClock_Config+0x46>

	}
	LL_Init1msTick(8000000);
 8001b1c:	4805      	ldr	r0, [pc, #20]	; (8001b34 <SystemClock_Config+0x68>)
 8001b1e:	f000 fead 	bl	800287c <LL_Init1msTick>
	LL_SetSystemCoreClock(8000000);
 8001b22:	4804      	ldr	r0, [pc, #16]	; (8001b34 <SystemClock_Config+0x68>)
 8001b24:	f000 fede 	bl	80028e4 <LL_SetSystemCoreClock>
	LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001b28:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001b2c:	f7ff feaa 	bl	8001884 <LL_RCC_SetI2CClockSource>
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	007a1200 	.word	0x007a1200

08001b38 <setString>:

/* USER CODE BEGIN 4 */
void setString(uint8_t *str, const uint8_t *strText, const uint8_t *strProt,
		float value) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
 8001b44:	ed87 0a00 	vstr	s0, [r7]
	strcpy((char*) str, (const char*) strText);
 8001b48:	68b9      	ldr	r1, [r7, #8]
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f001 fe40 	bl	80037d0 <strcpy>
	sprintf((char*) str, (const char*) strProt, value);
 8001b50:	6838      	ldr	r0, [r7, #0]
 8001b52:	f7fe fcf9 	bl	8000548 <__aeabi_f2d>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f001 fe17 	bl	8003790 <siprintf>
}
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <displayString>:
uint8_t displayString(uint8_t index, uint8_t *str, uint8_t length) {
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	6039      	str	r1, [r7, #0]
 8001b76:	71fb      	strb	r3, [r7, #7]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	71bb      	strb	r3, [r7, #6]
	uint8_t result = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	73fb      	strb	r3, [r7, #15]
	if (index + STR_DISP_LEN <= length) {
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	1cda      	adds	r2, r3, #3
 8001b84:	79bb      	ldrb	r3, [r7, #6]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	da15      	bge.n	8001bb6 <displayString+0x4a>
		uint8_t dispStr[STR_DISP_LEN] = { 0 };
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]
		memcpy(dispStr, str + index, STR_DISP_LEN);
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	60bb      	str	r3, [r7, #8]
		result = index + STR_DISP_LEN;
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	73fb      	strb	r3, [r7, #15]
		DisplayDigit_0.chr = dispStr[0];
 8001b9e:	7a3a      	ldrb	r2, [r7, #8]
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <displayString+0x58>)
 8001ba2:	705a      	strb	r2, [r3, #1]
		DisplayDigit_1.chr = dispStr[1];
 8001ba4:	7a7a      	ldrb	r2, [r7, #9]
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <displayString+0x5c>)
 8001ba8:	705a      	strb	r2, [r3, #1]
		DisplayDigit_2.chr = dispStr[2];
 8001baa:	7aba      	ldrb	r2, [r7, #10]
 8001bac:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <displayString+0x60>)
 8001bae:	705a      	strb	r2, [r3, #1]
		DisplayDigit_3.chr = dispStr[3];
 8001bb0:	7afa      	ldrb	r2, [r7, #11]
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <displayString+0x64>)
 8001bb4:	705a      	strb	r2, [r3, #1]

	}
	return result;
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	20000214 	.word	0x20000214
 8001bc8:	2000020c 	.word	0x2000020c
 8001bcc:	20000208 	.word	0x20000208
 8001bd0:	20000210 	.word	0x20000210

08001bd4 <LL_I2C_IsActiveFlag_RXNE>:
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d101      	bne.n	8001bec <LL_I2C_IsActiveFlag_RXNE+0x18>
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <LL_I2C_ReceiveData8>:
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	b2db      	uxtb	r3, r3
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f06f 0201 	mvn.w	r2, #1
 8001c22:	611a      	str	r2, [r3, #16]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001c5a:	e7fe      	b.n	8001c5a <NMI_Handler+0x4>

08001c5c <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8001c60:	e7fe      	b.n	8001c60 <HardFault_Handler+0x4>

08001c62 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001c66:	e7fe      	b.n	8001c66 <MemManage_Handler+0x4>

08001c68 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8001c6c:	e7fe      	b.n	8001c6c <BusFault_Handler+0x4>

08001c6e <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8001c72:	e7fe      	b.n	8001c72 <UsageFault_Handler+0x4>

08001c74 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0
	/* USER CODE END SysTick_IRQn 0 */

	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <I2C1_EV_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
 */
void I2C1_EV_IRQHandler(void) {
 8001cac:	b598      	push	{r3, r4, r7, lr}
 8001cae:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C1_EV_IRQn 0 */
	if (LL_I2C_IsActiveFlag_RXNE(I2C1)) {
 8001cb0:	4812      	ldr	r0, [pc, #72]	; (8001cfc <I2C1_EV_IRQHandler+0x50>)
 8001cb2:	f7ff ff8f 	bl	8001bd4 <LL_I2C_IsActiveFlag_RXNE>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d01c      	beq.n	8001cf6 <I2C1_EV_IRQHandler+0x4a>
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8001cbc:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <I2C1_EV_IRQHandler+0x54>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <I2C1_EV_IRQHandler+0x58>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	1c59      	adds	r1, r3, #1
 8001cc8:	b2c8      	uxtb	r0, r1
 8001cca:	490e      	ldr	r1, [pc, #56]	; (8001d04 <I2C1_EV_IRQHandler+0x58>)
 8001ccc:	7008      	strb	r0, [r1, #0]
 8001cce:	18d4      	adds	r4, r2, r3
 8001cd0:	480a      	ldr	r0, [pc, #40]	; (8001cfc <I2C1_EV_IRQHandler+0x50>)
 8001cd2:	f7ff ff92 	bl	8001bfa <LL_I2C_ReceiveData8>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <I2C1_EV_IRQHandler+0x58>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b13      	cmp	r3, #19
 8001ce2:	d903      	bls.n	8001cec <I2C1_EV_IRQHandler+0x40>
 8001ce4:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <I2C1_EV_IRQHandler+0x58>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	701a      	strb	r2, [r3, #0]
 8001cea:	e001      	b.n	8001cf0 <I2C1_EV_IRQHandler+0x44>
 8001cec:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <I2C1_EV_IRQHandler+0x58>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <I2C1_EV_IRQHandler+0x5c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
	/* USER CODE END I2C1_EV_IRQn 0 */

	/* USER CODE BEGIN I2C1_EV_IRQn 1 */

	/* USER CODE END I2C1_EV_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd98      	pop	{r3, r4, r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40005400 	.word	0x40005400
 8001d00:	2000021c 	.word	0x2000021c
 8001d04:	20000218 	.word	0x20000218
 8001d08:	20000220 	.word	0x20000220

08001d0c <TIM6_DAC1_IRQHandler>:

/**
 * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
 */
void TIM6_DAC1_IRQHandler(void) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC1_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM6)) {
 8001d10:	4806      	ldr	r0, [pc, #24]	; (8001d2c <TIM6_DAC1_IRQHandler+0x20>)
 8001d12:	f7ff ff8d 	bl	8001c30 <LL_TIM_IsActiveFlag_UPDATE>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <TIM6_DAC1_IRQHandler+0x14>
		updateDisplay();
 8001d1c:	f7ff f866 	bl	8000dec <updateDisplay>
	}
	/* USER CODE END TIM6_DAC1_IRQn 0 */

	/* USER CODE BEGIN TIM6_DAC1_IRQn 1 */
	LL_TIM_ClearFlag_UPDATE(TIM6);
 8001d20:	4802      	ldr	r0, [pc, #8]	; (8001d2c <TIM6_DAC1_IRQHandler+0x20>)
 8001d22:	f7ff ff77 	bl	8001c14 <LL_TIM_ClearFlag_UPDATE>
	/* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40001000 	.word	0x40001000

08001d30 <TIM7_DAC2_IRQHandler>:

/**
 * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
 */
void TIM7_DAC2_IRQHandler(void) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM7_DAC2_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM7)) {
 8001d34:	4806      	ldr	r0, [pc, #24]	; (8001d50 <TIM7_DAC2_IRQHandler+0x20>)
 8001d36:	f7ff ff7b 	bl	8001c30 <LL_TIM_IsActiveFlag_UPDATE>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d002      	beq.n	8001d46 <TIM7_DAC2_IRQHandler+0x16>
		nextStringSequence = true;
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <TIM7_DAC2_IRQHandler+0x24>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END TIM7_DAC2_IRQn 0 */

	/* USER CODE BEGIN TIM7_DAC2_IRQn 1 */
	LL_TIM_ClearFlag_UPDATE(TIM7);
 8001d46:	4802      	ldr	r0, [pc, #8]	; (8001d50 <TIM7_DAC2_IRQHandler+0x20>)
 8001d48:	f7ff ff64 	bl	8001c14 <LL_TIM_ClearFlag_UPDATE>
	/* USER CODE END TIM7_DAC2_IRQn 1 */
}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40001400 	.word	0x40001400
 8001d54:	20000230 	.word	0x20000230

08001d58 <_getpid>:
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <_kill>:
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
 8001d72:	f001 f871 	bl	8002e58 <__errno>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2216      	movs	r2, #22
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <_exit>:
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	f04f 31ff 	mov.w	r1, #4294967295
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ffe7 	bl	8001d68 <_kill>
 8001d9a:	e7fe      	b.n	8001d9a <_exit+0x12>

08001d9c <_read>:
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	e00a      	b.n	8001dc4 <_read+0x28>
 8001dae:	f3af 8000 	nop.w
 8001db2:	4601      	mov	r1, r0
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	60ba      	str	r2, [r7, #8]
 8001dba:	b2ca      	uxtb	r2, r1
 8001dbc:	701a      	strb	r2, [r3, #0]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	dbf0      	blt.n	8001dae <_read+0x12>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <_write>:
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b086      	sub	sp, #24
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	60f8      	str	r0, [r7, #12]
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	e009      	b.n	8001dfc <_write+0x26>
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	60ba      	str	r2, [r7, #8]
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f3af 8000 	nop.w
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	dbf1      	blt.n	8001de8 <_write+0x12>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <_close>:
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <_fstat>:
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	6039      	str	r1, [r7, #0]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	2300      	movs	r3, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <_isatty>:
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	2301      	movs	r3, #1
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <_lseek>:
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <_sbrk>:
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	4a14      	ldr	r2, [pc, #80]	; (8001ed4 <_sbrk+0x5c>)
 8001e82:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <_sbrk+0x60>)
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	4b13      	ldr	r3, [pc, #76]	; (8001edc <_sbrk+0x64>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d102      	bne.n	8001e9a <_sbrk+0x22>
 8001e94:	4b11      	ldr	r3, [pc, #68]	; (8001edc <_sbrk+0x64>)
 8001e96:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <_sbrk+0x68>)
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <_sbrk+0x64>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d207      	bcs.n	8001eb8 <_sbrk+0x40>
 8001ea8:	f000 ffd6 	bl	8002e58 <__errno>
 8001eac:	4603      	mov	r3, r0
 8001eae:	220c      	movs	r2, #12
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb6:	e009      	b.n	8001ecc <_sbrk+0x54>
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <_sbrk+0x64>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	4b07      	ldr	r3, [pc, #28]	; (8001edc <_sbrk+0x64>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	4a05      	ldr	r2, [pc, #20]	; (8001edc <_sbrk+0x64>)
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20003000 	.word	0x20003000
 8001ed8:	00000400 	.word	0x00000400
 8001edc:	200001fc 	.word	0x200001fc
 8001ee0:	20000268 	.word	0x20000268

08001ee4 <SystemInit>:
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <SystemInit+0x20>)
 8001eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eee:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <SystemInit+0x20>)
 8001ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ef4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_GetPriorityGrouping>:
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <__NVIC_GetPriorityGrouping+0x18>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	0a1b      	lsrs	r3, r3, #8
 8001f12:	f003 0307 	and.w	r3, r3, #7
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_EnableIRQ>:
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	db0b      	blt.n	8001f4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	f003 021f 	and.w	r2, r3, #31
 8001f3c:	4907      	ldr	r1, [pc, #28]	; (8001f5c <__NVIC_EnableIRQ+0x38>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	2001      	movs	r0, #1
 8001f46:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000e100 	.word	0xe000e100

08001f60 <__NVIC_SetPriority>:
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	6039      	str	r1, [r7, #0]
 8001f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	db0a      	blt.n	8001f8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	490c      	ldr	r1, [pc, #48]	; (8001fac <__NVIC_SetPriority+0x4c>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	0112      	lsls	r2, r2, #4
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	440b      	add	r3, r1
 8001f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f88:	e00a      	b.n	8001fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4908      	ldr	r1, [pc, #32]	; (8001fb0 <__NVIC_SetPriority+0x50>)
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	3b04      	subs	r3, #4
 8001f98:	0112      	lsls	r2, r2, #4
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	761a      	strb	r2, [r3, #24]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000e100 	.word	0xe000e100
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <NVIC_EncodePriority>:
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	; 0x24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f1c3 0307 	rsb	r3, r3, #7
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	bf28      	it	cs
 8001fd2:	2304      	movcs	r3, #4
 8001fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d902      	bls.n	8001fe4 <NVIC_EncodePriority+0x30>
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3b03      	subs	r3, #3
 8001fe2:	e000      	b.n	8001fe6 <NVIC_EncodePriority+0x32>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	43d9      	mvns	r1, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	4313      	orrs	r3, r2
}
 800200e:	4618      	mov	r0, r3
 8002010:	3724      	adds	r7, #36	; 0x24
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <LL_APB1_GRP1_EnableClock>:
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002024:	4b08      	ldr	r3, [pc, #32]	; (8002048 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002026:	69da      	ldr	r2, [r3, #28]
 8002028:	4907      	ldr	r1, [pc, #28]	; (8002048 <LL_APB1_GRP1_EnableClock+0x2c>)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4313      	orrs	r3, r2
 800202e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002032:	69da      	ldr	r2, [r3, #28]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4013      	ands	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800203a:	68fb      	ldr	r3, [r7, #12]
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	40021000 	.word	0x40021000

0800204c <LL_TIM_EnableCounter>:
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f043 0201 	orr.w	r2, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	601a      	str	r2, [r3, #0]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_TIM_DisableARRPreload>:
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	601a      	str	r2, [r3, #0]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_TIM_SetTriggerOutput>:
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	605a      	str	r2, [r3, #4]
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <LL_TIM_DisableMasterSlaveMode>:
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	609a      	str	r2, [r3, #8]
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	f043 0201 	orr.w	r2, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	60da      	str	r2, [r3, #12]
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <MX_TIM6_Init>:

/* USER CODE END 0 */

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80020fa:	1d3b      	adds	r3, r7, #4
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8002108:	2010      	movs	r0, #16
 800210a:	f7ff ff87 	bl	800201c <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_DAC1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800210e:	f7ff fefb 	bl	8001f08 <__NVIC_GetPriorityGrouping>
 8002112:	4603      	mov	r3, r0
 8002114:	2200      	movs	r2, #0
 8002116:	2100      	movs	r1, #0
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff4b 	bl	8001fb4 <NVIC_EncodePriority>
 800211e:	4603      	mov	r3, r0
 8002120:	4619      	mov	r1, r3
 8002122:	2036      	movs	r0, #54	; 0x36
 8002124:	f7ff ff1c 	bl	8001f60 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8002128:	2036      	movs	r0, #54	; 0x36
 800212a:	f7ff fefb 	bl	8001f24 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 800212e:	f240 331f 	movw	r3, #799	; 0x31f
 8002132:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002134:	2300      	movs	r3, #0
 8002136:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 49;
 8002138:	2331      	movs	r3, #49	; 0x31
 800213a:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	4619      	mov	r1, r3
 8002140:	480b      	ldr	r0, [pc, #44]	; (8002170 <MX_TIM6_Init+0x7c>)
 8002142:	f000 fb0f 	bl	8002764 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 8002146:	480a      	ldr	r0, [pc, #40]	; (8002170 <MX_TIM6_Init+0x7c>)
 8002148:	f7ff ff90 	bl	800206c <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 800214c:	2100      	movs	r1, #0
 800214e:	4808      	ldr	r0, [pc, #32]	; (8002170 <MX_TIM6_Init+0x7c>)
 8002150:	f7ff ff9c 	bl	800208c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8002154:	4806      	ldr	r0, [pc, #24]	; (8002170 <MX_TIM6_Init+0x7c>)
 8002156:	f7ff ffac 	bl	80020b2 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */
	LL_TIM_EnableIT_UPDATE(TIM6);
 800215a:	4805      	ldr	r0, [pc, #20]	; (8002170 <MX_TIM6_Init+0x7c>)
 800215c:	f7ff ffb9 	bl	80020d2 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM6);
 8002160:	4803      	ldr	r0, [pc, #12]	; (8002170 <MX_TIM6_Init+0x7c>)
 8002162:	f7ff ff73 	bl	800204c <LL_TIM_EnableCounter>
  /* USER CODE END TIM6_Init 2 */

}
 8002166:	bf00      	nop
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40001000 	.word	0x40001000

08002174 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800217a:	1d3b      	adds	r3, r7, #4
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8002188:	2020      	movs	r0, #32
 800218a:	f7ff ff47 	bl	800201c <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_DAC2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800218e:	f7ff febb 	bl	8001f08 <__NVIC_GetPriorityGrouping>
 8002192:	4603      	mov	r3, r0
 8002194:	2200      	movs	r2, #0
 8002196:	2100      	movs	r1, #0
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff0b 	bl	8001fb4 <NVIC_EncodePriority>
 800219e:	4603      	mov	r3, r0
 80021a0:	4619      	mov	r1, r3
 80021a2:	2037      	movs	r0, #55	; 0x37
 80021a4:	f7ff fedc 	bl	8001f60 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 80021a8:	2037      	movs	r0, #55	; 0x37
 80021aa:	f7ff febb 	bl	8001f24 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 7999;
 80021ae:	f641 733f 	movw	r3, #7999	; 0x1f3f
 80021b2:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 999;
 80021b8:	f240 33e7 	movw	r3, #999	; 0x3e7
 80021bc:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 80021be:	1d3b      	adds	r3, r7, #4
 80021c0:	4619      	mov	r1, r3
 80021c2:	480b      	ldr	r0, [pc, #44]	; (80021f0 <MX_TIM7_Init+0x7c>)
 80021c4:	f000 face 	bl	8002764 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM7);
 80021c8:	4809      	ldr	r0, [pc, #36]	; (80021f0 <MX_TIM7_Init+0x7c>)
 80021ca:	f7ff ff4f 	bl	800206c <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 80021ce:	2100      	movs	r1, #0
 80021d0:	4807      	ldr	r0, [pc, #28]	; (80021f0 <MX_TIM7_Init+0x7c>)
 80021d2:	f7ff ff5b 	bl	800208c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 80021d6:	4806      	ldr	r0, [pc, #24]	; (80021f0 <MX_TIM7_Init+0x7c>)
 80021d8:	f7ff ff6b 	bl	80020b2 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */
	LL_TIM_EnableIT_UPDATE(TIM7);
 80021dc:	4804      	ldr	r0, [pc, #16]	; (80021f0 <MX_TIM7_Init+0x7c>)
 80021de:	f7ff ff78 	bl	80020d2 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM7);
 80021e2:	4803      	ldr	r0, [pc, #12]	; (80021f0 <MX_TIM7_Init+0x7c>)
 80021e4:	f7ff ff32 	bl	800204c <LL_TIM_EnableCounter>
  /* USER CODE END TIM7_Init 2 */

}
 80021e8:	bf00      	nop
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40001400 	.word	0x40001400

080021f4 <Reset_Handler>:
 80021f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800222c <LoopForever+0x2>
 80021f8:	480d      	ldr	r0, [pc, #52]	; (8002230 <LoopForever+0x6>)
 80021fa:	490e      	ldr	r1, [pc, #56]	; (8002234 <LoopForever+0xa>)
 80021fc:	4a0e      	ldr	r2, [pc, #56]	; (8002238 <LoopForever+0xe>)
 80021fe:	2300      	movs	r3, #0
 8002200:	e002      	b.n	8002208 <LoopCopyDataInit>

08002202 <CopyDataInit>:
 8002202:	58d4      	ldr	r4, [r2, r3]
 8002204:	50c4      	str	r4, [r0, r3]
 8002206:	3304      	adds	r3, #4

08002208 <LoopCopyDataInit>:
 8002208:	18c4      	adds	r4, r0, r3
 800220a:	428c      	cmp	r4, r1
 800220c:	d3f9      	bcc.n	8002202 <CopyDataInit>
 800220e:	4a0b      	ldr	r2, [pc, #44]	; (800223c <LoopForever+0x12>)
 8002210:	4c0b      	ldr	r4, [pc, #44]	; (8002240 <LoopForever+0x16>)
 8002212:	2300      	movs	r3, #0
 8002214:	e001      	b.n	800221a <LoopFillZerobss>

08002216 <FillZerobss>:
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	3204      	adds	r2, #4

0800221a <LoopFillZerobss>:
 800221a:	42a2      	cmp	r2, r4
 800221c:	d3fb      	bcc.n	8002216 <FillZerobss>
 800221e:	f7ff fe61 	bl	8001ee4 <SystemInit>
 8002222:	f000 fe1f 	bl	8002e64 <__libc_init_array>
 8002226:	f7ff fb97 	bl	8001958 <main>

0800222a <LoopForever>:
 800222a:	e7fe      	b.n	800222a <LoopForever>
 800222c:	20003000 	.word	0x20003000
 8002230:	20000000 	.word	0x20000000
 8002234:	200001dc 	.word	0x200001dc
 8002238:	08006034 	.word	0x08006034
 800223c:	200001dc 	.word	0x200001dc
 8002240:	20000264 	.word	0x20000264

08002244 <ADC1_2_IRQHandler>:
 8002244:	e7fe      	b.n	8002244 <ADC1_2_IRQHandler>

08002246 <LL_GPIO_SetPinMode>:
 8002246:	b480      	push	{r7}
 8002248:	b089      	sub	sp, #36	; 0x24
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	fa93 f3a3 	rbit	r3, r3
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	fab3 f383 	clz	r3, r3
 8002268:	b2db      	uxtb	r3, r3
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	2103      	movs	r1, #3
 800226e:	fa01 f303 	lsl.w	r3, r1, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	401a      	ands	r2, r3
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	61fb      	str	r3, [r7, #28]
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	fa93 f3a3 	rbit	r3, r3
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	fab3 f383 	clz	r3, r3
 8002288:	b2db      	uxtb	r3, r3
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	fa01 f303 	lsl.w	r3, r1, r3
 8002292:	431a      	orrs	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	bf00      	nop
 800229a:	3724      	adds	r7, #36	; 0x24
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_GPIO_SetPinOutputType>:
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	43db      	mvns	r3, r3
 80022b8:	401a      	ands	r2, r3
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	fb01 f303 	mul.w	r3, r1, r3
 80022c2:	431a      	orrs	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <LL_GPIO_SetPinSpeed>:
 80022d4:	b480      	push	{r7}
 80022d6:	b089      	sub	sp, #36	; 0x24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	fa93 f3a3 	rbit	r3, r3
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	fab3 f383 	clz	r3, r3
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	2103      	movs	r1, #3
 80022fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	401a      	ands	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	61fb      	str	r3, [r7, #28]
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	fa93 f3a3 	rbit	r3, r3
 800230e:	61bb      	str	r3, [r7, #24]
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	fa01 f303 	lsl.w	r3, r1, r3
 8002320:	431a      	orrs	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	bf00      	nop
 8002328:	3724      	adds	r7, #36	; 0x24
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <LL_GPIO_SetPinPull>:
 8002332:	b480      	push	{r7}
 8002334:	b089      	sub	sp, #36	; 0x24
 8002336:	af00      	add	r7, sp, #0
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	fa93 f3a3 	rbit	r3, r3
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	fab3 f383 	clz	r3, r3
 8002354:	b2db      	uxtb	r3, r3
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	2103      	movs	r1, #3
 800235a:	fa01 f303 	lsl.w	r3, r1, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	401a      	ands	r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	61fb      	str	r3, [r7, #28]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	fa93 f3a3 	rbit	r3, r3
 800236c:	61bb      	str	r3, [r7, #24]
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	fab3 f383 	clz	r3, r3
 8002374:	b2db      	uxtb	r3, r3
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	fa01 f303 	lsl.w	r3, r1, r3
 800237e:	431a      	orrs	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	60da      	str	r2, [r3, #12]
 8002384:	bf00      	nop
 8002386:	3724      	adds	r7, #36	; 0x24
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <LL_GPIO_SetAFPin_0_7>:
 8002390:	b480      	push	{r7}
 8002392:	b089      	sub	sp, #36	; 0x24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a1a      	ldr	r2, [r3, #32]
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	fa93 f3a3 	rbit	r3, r3
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	fab3 f383 	clz	r3, r3
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	210f      	movs	r1, #15
 80023b8:	fa01 f303 	lsl.w	r3, r1, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	401a      	ands	r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	61fb      	str	r3, [r7, #28]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	fa93 f3a3 	rbit	r3, r3
 80023ca:	61bb      	str	r3, [r7, #24]
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	fab3 f383 	clz	r3, r3
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	fa01 f303 	lsl.w	r3, r1, r3
 80023dc:	431a      	orrs	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	621a      	str	r2, [r3, #32]
 80023e2:	bf00      	nop
 80023e4:	3724      	adds	r7, #36	; 0x24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <LL_GPIO_SetAFPin_8_15>:
 80023ee:	b480      	push	{r7}
 80023f0:	b089      	sub	sp, #36	; 0x24
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	0a1b      	lsrs	r3, r3, #8
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	fa93 f3a3 	rbit	r3, r3
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	fab3 f383 	clz	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	210f      	movs	r1, #15
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	401a      	ands	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	0a1b      	lsrs	r3, r3, #8
 8002424:	61fb      	str	r3, [r7, #28]
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	61bb      	str	r3, [r7, #24]
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	fab3 f383 	clz	r3, r3
 8002434:	b2db      	uxtb	r3, r3
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	fa01 f303 	lsl.w	r3, r1, r3
 800243e:	431a      	orrs	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	625a      	str	r2, [r3, #36]	; 0x24
 8002444:	bf00      	nop
 8002446:	3724      	adds	r7, #36	; 0x24
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <LL_GPIO_Init>:
 8002450:	b580      	push	{r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	617b      	str	r3, [r7, #20]
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	fa93 f3a3 	rbit	r3, r3
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	fab3 f383 	clz	r3, r3
 800246e:	b2db      	uxtb	r3, r3
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	e051      	b.n	8002518 <LL_GPIO_Init+0xc8>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	2101      	movs	r1, #1
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	fa01 f303 	lsl.w	r3, r1, r3
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d043      	beq.n	8002512 <LL_GPIO_Init+0xc2>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d003      	beq.n	800249a <LL_GPIO_Init+0x4a>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d10e      	bne.n	80024b8 <LL_GPIO_Init+0x68>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	461a      	mov	r2, r3
 80024a0:	69b9      	ldr	r1, [r7, #24]
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff ff16 	bl	80022d4 <LL_GPIO_SetPinSpeed>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	6819      	ldr	r1, [r3, #0]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	461a      	mov	r2, r3
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff fef6 	bl	80022a4 <LL_GPIO_SetPinOutputType>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	461a      	mov	r2, r3
 80024be:	69b9      	ldr	r1, [r7, #24]
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ff36 	bl	8002332 <LL_GPIO_SetPinPull>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d11a      	bne.n	8002504 <LL_GPIO_Init+0xb4>
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	fa93 f3a3 	rbit	r3, r3
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b07      	cmp	r3, #7
 80024e4:	d807      	bhi.n	80024f6 <LL_GPIO_Init+0xa6>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	461a      	mov	r2, r3
 80024ec:	69b9      	ldr	r1, [r7, #24]
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff ff4e 	bl	8002390 <LL_GPIO_SetAFPin_0_7>
 80024f4:	e006      	b.n	8002504 <LL_GPIO_Init+0xb4>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	461a      	mov	r2, r3
 80024fc:	69b9      	ldr	r1, [r7, #24]
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff ff75 	bl	80023ee <LL_GPIO_SetAFPin_8_15>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	461a      	mov	r2, r3
 800250a:	69b9      	ldr	r1, [r7, #24]
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff fe9a 	bl	8002246 <LL_GPIO_SetPinMode>
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3301      	adds	r3, #1
 8002516:	61fb      	str	r3, [r7, #28]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	fa22 f303 	lsr.w	r3, r2, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1a6      	bne.n	8002474 <LL_GPIO_Init+0x24>
 8002526:	2300      	movs	r3, #0
 8002528:	4618      	mov	r0, r3
 800252a:	3720      	adds	r7, #32
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <LL_I2C_Enable>:
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f043 0201 	orr.w	r2, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <LL_I2C_Disable>:
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f023 0201 	bic.w	r2, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <LL_I2C_ConfigFilters>:
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	0219      	lsls	r1, r3, #8
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	430b      	orrs	r3, r1
 800258c:	431a      	orrs	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	bf00      	nop
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <LL_I2C_SetOwnAddress1>:
 800259e:	b480      	push	{r7}
 80025a0:	b085      	sub	sp, #20
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80025b2:	f023 0307 	bic.w	r3, r3, #7
 80025b6:	68b9      	ldr	r1, [r7, #8]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	431a      	orrs	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	609a      	str	r2, [r3, #8]
 80025c2:	bf00      	nop
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <LL_I2C_EnableOwnAddress1>:
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	609a      	str	r2, [r3, #8]
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <LL_I2C_DisableOwnAddress1>:
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	609a      	str	r2, [r3, #8]
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <LL_I2C_SetTiming>:
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	6039      	str	r1, [r7, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	611a      	str	r2, [r3, #16]
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <LL_I2C_SetMode>:
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	6039      	str	r1, [r7, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <LL_I2C_AcknowledgeNextData>:
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <LL_I2C_Init>:
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	6039      	str	r1, [r7, #0]
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff ff65 	bl	8002550 <LL_I2C_Disable>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	6899      	ldr	r1, [r3, #8]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	461a      	mov	r2, r3
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7ff ff6d 	bl	8002570 <LL_I2C_ConfigFilters>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4619      	mov	r1, r3
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff ffb6 	bl	800260e <LL_I2C_SetTiming>
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ff44 	bl	8002530 <LL_I2C_Enable>
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff ffa0 	bl	80025ee <LL_I2C_DisableOwnAddress1>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	6919      	ldr	r1, [r3, #16]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	461a      	mov	r2, r3
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff ff70 	bl	800259e <LL_I2C_SetOwnAddress1>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d002      	beq.n	80026cc <LL_I2C_Init+0x56>
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff ff81 	bl	80025ce <LL_I2C_EnableOwnAddress1>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4619      	mov	r1, r3
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff ffa9 	bl	800262a <LL_I2C_SetMode>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	4619      	mov	r1, r3
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff ffb6 	bl	8002650 <LL_I2C_AcknowledgeNextData>
 80026e4:	2300      	movs	r3, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <LL_TIM_SetPrescaler>:
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	6039      	str	r1, [r7, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	629a      	str	r2, [r3, #40]	; 0x28
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <LL_TIM_SetAutoReload>:
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	6039      	str	r1, [r7, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	62da      	str	r2, [r3, #44]	; 0x2c
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <LL_TIM_SetRepetitionCounter>:
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	6039      	str	r1, [r7, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	631a      	str	r2, [r3, #48]	; 0x30
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <LL_TIM_GenerateEvent_UPDATE>:
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	f043 0201 	orr.w	r2, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	615a      	str	r2, [r3, #20]
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <LL_TIM_Init>:
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a2f      	ldr	r2, [pc, #188]	; (8002834 <LL_TIM_Init+0xd0>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d007      	beq.n	800278c <LL_TIM_Init+0x28>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002782:	d003      	beq.n	800278c <LL_TIM_Init+0x28>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a2c      	ldr	r2, [pc, #176]	; (8002838 <LL_TIM_Init+0xd4>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d106      	bne.n	800279a <LL_TIM_Init+0x36>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	4313      	orrs	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a25      	ldr	r2, [pc, #148]	; (8002834 <LL_TIM_Init+0xd0>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d013      	beq.n	80027ca <LL_TIM_Init+0x66>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a8:	d00f      	beq.n	80027ca <LL_TIM_Init+0x66>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a22      	ldr	r2, [pc, #136]	; (8002838 <LL_TIM_Init+0xd4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00b      	beq.n	80027ca <LL_TIM_Init+0x66>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a21      	ldr	r2, [pc, #132]	; (800283c <LL_TIM_Init+0xd8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d007      	beq.n	80027ca <LL_TIM_Init+0x66>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a20      	ldr	r2, [pc, #128]	; (8002840 <LL_TIM_Init+0xdc>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d003      	beq.n	80027ca <LL_TIM_Init+0x66>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a1f      	ldr	r2, [pc, #124]	; (8002844 <LL_TIM_Init+0xe0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d106      	bne.n	80027d8 <LL_TIM_Init+0x74>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	4619      	mov	r1, r3
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff ff90 	bl	800270a <LL_TIM_SetAutoReload>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	4619      	mov	r1, r3
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7ff ff7c 	bl	80026ee <LL_TIM_SetPrescaler>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a0e      	ldr	r2, [pc, #56]	; (8002834 <LL_TIM_Init+0xd0>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d00b      	beq.n	8002816 <LL_TIM_Init+0xb2>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a0e      	ldr	r2, [pc, #56]	; (800283c <LL_TIM_Init+0xd8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d007      	beq.n	8002816 <LL_TIM_Init+0xb2>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a0d      	ldr	r2, [pc, #52]	; (8002840 <LL_TIM_Init+0xdc>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d003      	beq.n	8002816 <LL_TIM_Init+0xb2>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a0c      	ldr	r2, [pc, #48]	; (8002844 <LL_TIM_Init+0xe0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d105      	bne.n	8002822 <LL_TIM_Init+0xbe>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	4619      	mov	r1, r3
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff ff82 	bl	8002726 <LL_TIM_SetRepetitionCounter>
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff ff8d 	bl	8002742 <LL_TIM_GenerateEvent_UPDATE>
 8002828:	2300      	movs	r3, #0
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40012c00 	.word	0x40012c00
 8002838:	40000400 	.word	0x40000400
 800283c:	40014000 	.word	0x40014000
 8002840:	40014400 	.word	0x40014400
 8002844:	40014800 	.word	0x40014800

08002848 <LL_InitTick>:
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	fbb2 f3f3 	udiv	r3, r2, r3
 800285a:	4a07      	ldr	r2, [pc, #28]	; (8002878 <LL_InitTick+0x30>)
 800285c:	3b01      	subs	r3, #1
 800285e:	6053      	str	r3, [r2, #4]
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <LL_InitTick+0x30>)
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]
 8002866:	4b04      	ldr	r3, [pc, #16]	; (8002878 <LL_InitTick+0x30>)
 8002868:	2205      	movs	r2, #5
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000e010 	.word	0xe000e010

0800287c <LL_Init1msTick>:
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff ffdd 	bl	8002848 <LL_InitTick>
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <LL_mDelay>:
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <LL_mDelay+0x48>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ae:	d00c      	beq.n	80028ca <LL_mDelay+0x32>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3301      	adds	r3, #1
 80028b4:	607b      	str	r3, [r7, #4]
 80028b6:	e008      	b.n	80028ca <LL_mDelay+0x32>
 80028b8:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <LL_mDelay+0x48>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <LL_mDelay+0x32>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	607b      	str	r3, [r7, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f3      	bne.n	80028b8 <LL_mDelay+0x20>
 80028d0:	bf00      	nop
 80028d2:	bf00      	nop
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	e000e010 	.word	0xe000e010

080028e4 <LL_SetSystemCoreClock>:
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	4a04      	ldr	r2, [pc, #16]	; (8002900 <LL_SetSystemCoreClock+0x1c>)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	20000004 	.word	0x20000004

08002904 <lsm6ds0_read_byte>:
#include "lsm6ds0.h"

uint8_t addres = LSM6DS0_DEVICE_ADDRESS_0;

uint8_t lsm6ds0_read_byte(uint8_t reg_addr)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af02      	add	r7, sp, #8
 800290a:	4603      	mov	r3, r0
 800290c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800290e:	2300      	movs	r3, #0
 8002910:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres, 0));
 8002912:	4b08      	ldr	r3, [pc, #32]	; (8002934 <lsm6ds0_read_byte+0x30>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	79fa      	ldrb	r2, [r7, #7]
 8002918:	f107 000f 	add.w	r0, r7, #15
 800291c:	2100      	movs	r1, #0
 800291e:	9100      	str	r1, [sp, #0]
 8002920:	2101      	movs	r1, #1
 8002922:	f7fe fe7b 	bl	800161c <i2c_master_read>
 8002926:	4603      	mov	r3, r0
 8002928:	781b      	ldrb	r3, [r3, #0]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000008 	.word	0x20000008

08002938 <lsm6ds0_write_byte>:


void lsm6ds0_write_byte(uint8_t reg_addr, uint8_t value)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	460a      	mov	r2, r1
 8002942:	71fb      	strb	r3, [r7, #7]
 8002944:	4613      	mov	r3, r2
 8002946:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres, 0);
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <lsm6ds0_write_byte+0x28>)
 800294a:	781a      	ldrb	r2, [r3, #0]
 800294c:	79f9      	ldrb	r1, [r7, #7]
 800294e:	79b8      	ldrb	r0, [r7, #6]
 8002950:	2300      	movs	r3, #0
 8002952:	f7fe fe1f 	bl	8001594 <i2c_master_write>
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20000008 	.word	0x20000008

08002964 <lsm6ds0_readArray>:


void lsm6ds0_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af02      	add	r7, sp, #8
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	70fb      	strb	r3, [r7, #3]
 8002970:	4613      	mov	r3, r2
 8002972:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addres, 1);
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <lsm6ds0_readArray+0x2c>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	78b9      	ldrb	r1, [r7, #2]
 800297c:	2001      	movs	r0, #1
 800297e:	9000      	str	r0, [sp, #0]
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7fe fe4b 	bl	800161c <i2c_master_read>
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000008 	.word	0x20000008

08002994 <lsm6ds0_get_acc>:
	return (((int16_t)((temp[1] << 8) | temp[0])) >> 3)  + 25;
}


void lsm6ds0_get_acc(float* x, float* y, float* z)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
	int16_t xx, yy, zz;

	uint8_t temp;

	//get current scale and use it for final calculation
    temp = lsm6ds0_read_byte(LSM6DS0_ADDRESS_CTRL1);
 80029a0:	2010      	movs	r0, #16
 80029a2:	f7ff ffaf 	bl	8002904 <lsm6ds0_read_byte>
 80029a6:	4603      	mov	r3, r0
 80029a8:	77fb      	strb	r3, [r7, #31]

	temp = temp >> 2;
 80029aa:	7ffb      	ldrb	r3, [r7, #31]
 80029ac:	089b      	lsrs	r3, r3, #2
 80029ae:	77fb      	strb	r3, [r7, #31]
    temp &= 0x03;			//full scale bits exctracted
 80029b0:	7ffb      	ldrb	r3, [r7, #31]
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	77fb      	strb	r3, [r7, #31]

	lsm6ds0_readArray(data, LSM6DS0_ADDRESS_ACCX, 6);
 80029b8:	f107 0310 	add.w	r3, r7, #16
 80029bc:	2206      	movs	r2, #6
 80029be:	2128      	movs	r1, #40	; 0x28
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff ffcf 	bl	8002964 <lsm6ds0_readArray>

	xx = ((uint16_t)data[1]) << 8 | data[0];
 80029c6:	7c7b      	ldrb	r3, [r7, #17]
 80029c8:	021b      	lsls	r3, r3, #8
 80029ca:	b21a      	sxth	r2, r3
 80029cc:	7c3b      	ldrb	r3, [r7, #16]
 80029ce:	b21b      	sxth	r3, r3
 80029d0:	4313      	orrs	r3, r2
 80029d2:	83bb      	strh	r3, [r7, #28]
	yy = ((uint16_t)data[3]) << 8 | data[2];
 80029d4:	7cfb      	ldrb	r3, [r7, #19]
 80029d6:	021b      	lsls	r3, r3, #8
 80029d8:	b21a      	sxth	r2, r3
 80029da:	7cbb      	ldrb	r3, [r7, #18]
 80029dc:	b21b      	sxth	r3, r3
 80029de:	4313      	orrs	r3, r2
 80029e0:	837b      	strh	r3, [r7, #26]
	zz = ((uint16_t)data[5]) << 8 | data[4];
 80029e2:	7d7b      	ldrb	r3, [r7, #21]
 80029e4:	021b      	lsls	r3, r3, #8
 80029e6:	b21a      	sxth	r2, r3
 80029e8:	7d3b      	ldrb	r3, [r7, #20]
 80029ea:	b21b      	sxth	r3, r3
 80029ec:	4313      	orrs	r3, r2
 80029ee:	833b      	strh	r3, [r7, #24]

	*x = (xx >> 4) / 1000.0f;
 80029f0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80029f4:	111b      	asrs	r3, r3, #4
 80029f6:	b21b      	sxth	r3, r3
 80029f8:	ee07 3a90 	vmov	s15, r3
 80029fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a00:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002a54 <lsm6ds0_get_acc+0xc0>
 8002a04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	edc3 7a00 	vstr	s15, [r3]
	*y = (yy >> 4) / 1000.0f;
 8002a0e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002a12:	111b      	asrs	r3, r3, #4
 8002a14:	b21b      	sxth	r3, r3
 8002a16:	ee07 3a90 	vmov	s15, r3
 8002a1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a1e:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8002a54 <lsm6ds0_get_acc+0xc0>
 8002a22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	edc3 7a00 	vstr	s15, [r3]
	*z = (zz >> 4) / 1000.0f;
 8002a2c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002a30:	111b      	asrs	r3, r3, #4
 8002a32:	b21b      	sxth	r3, r3
 8002a34:	ee07 3a90 	vmov	s15, r3
 8002a38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a3c:	eddf 6a05 	vldr	s13, [pc, #20]	; 8002a54 <lsm6ds0_get_acc+0xc0>
 8002a40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	edc3 7a00 	vstr	s15, [r3]
}
 8002a4a:	bf00      	nop
 8002a4c:	3720      	adds	r7, #32
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	447a0000 	.word	0x447a0000

08002a58 <lsm6ds0_init>:


uint8_t lsm6ds0_init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8002a62:	2064      	movs	r0, #100	; 0x64
 8002a64:	f7ff ff18 	bl	8002898 <LL_mDelay>

	uint8_t val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8002a68:	200f      	movs	r0, #15
 8002a6a:	f7ff ff4b 	bl	8002904 <lsm6ds0_read_byte>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71bb      	strb	r3, [r7, #6]

	if(val == LSM6DS0_WHO_AM_I_VALUE)
 8002a72:	79bb      	ldrb	r3, [r7, #6]
 8002a74:	2b68      	cmp	r3, #104	; 0x68
 8002a76:	d102      	bne.n	8002a7e <lsm6ds0_init+0x26>
	{
		status = 1;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	71fb      	strb	r3, [r7, #7]
 8002a7c:	e00f      	b.n	8002a9e <lsm6ds0_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres = LSM6DS0_DEVICE_ADDRESS_1;
 8002a7e:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <lsm6ds0_init+0x60>)
 8002a80:	22d6      	movs	r2, #214	; 0xd6
 8002a82:	701a      	strb	r2, [r3, #0]
		val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8002a84:	200f      	movs	r0, #15
 8002a86:	f7ff ff3d 	bl	8002904 <lsm6ds0_read_byte>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71bb      	strb	r3, [r7, #6]
		if(val == LSM6DS0_WHO_AM_I_VALUE)
 8002a8e:	79bb      	ldrb	r3, [r7, #6]
 8002a90:	2b68      	cmp	r3, #104	; 0x68
 8002a92:	d102      	bne.n	8002a9a <lsm6ds0_init+0x42>
		{
			status = 1;
 8002a94:	2301      	movs	r3, #1
 8002a96:	71fb      	strb	r3, [r7, #7]
 8002a98:	e001      	b.n	8002a9e <lsm6ds0_init+0x46>
		}
		else
		{
			status = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	71fb      	strb	r3, [r7, #7]
		}
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 8002a9e:	2380      	movs	r3, #128	; 0x80
 8002aa0:	717b      	strb	r3, [r7, #5]
	lsm6ds0_write_byte(LSM6DS0_ADDRESS_CTRL1, ctrl1);
 8002aa2:	797b      	ldrb	r3, [r7, #5]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	2010      	movs	r0, #16
 8002aa8:	f7ff ff46 	bl	8002938 <lsm6ds0_write_byte>

	return status;
 8002aac:	79fb      	ldrb	r3, [r7, #7]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20000008 	.word	0x20000008

08002abc <hts221_read_byte>:

uint8_t addresHTS221 = HTS221_DEVICE_ADDRESS;
Hts221HumidityStruct HumidityFactoryCoef;
Hts221TemperatureStruct TemperatureFactoryCoef;

uint8_t hts221_read_byte(uint8_t reg_addr) {
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addresHTS221, 0));
 8002aca:	4b08      	ldr	r3, [pc, #32]	; (8002aec <hts221_read_byte+0x30>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	79fa      	ldrb	r2, [r7, #7]
 8002ad0:	f107 000f 	add.w	r0, r7, #15
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	9100      	str	r1, [sp, #0]
 8002ad8:	2101      	movs	r1, #1
 8002ada:	f7fe fd9f 	bl	800161c <i2c_master_read>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	781b      	ldrb	r3, [r3, #0]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000009 	.word	0x20000009

08002af0 <hts221_write_byte>:

void hts221_write_byte(uint8_t reg_addr, uint8_t value) {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	460a      	mov	r2, r1
 8002afa:	71fb      	strb	r3, [r7, #7]
 8002afc:	4613      	mov	r3, r2
 8002afe:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addresHTS221, 0);
 8002b00:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <hts221_write_byte+0x28>)
 8002b02:	781a      	ldrb	r2, [r3, #0]
 8002b04:	79f9      	ldrb	r1, [r7, #7]
 8002b06:	79b8      	ldrb	r0, [r7, #6]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f7fe fd43 	bl	8001594 <i2c_master_write>
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20000009 	.word	0x20000009

08002b1c <hts221_readArray>:

void hts221_readArray(uint8_t *data, uint8_t reg, uint8_t length) {
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	70fb      	strb	r3, [r7, #3]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addresHTS221, 1);
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <hts221_readArray+0x2c>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	78b9      	ldrb	r1, [r7, #2]
 8002b34:	2001      	movs	r0, #1
 8002b36:	9000      	str	r0, [sp, #0]
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7fe fd6f 	bl	800161c <i2c_master_read>
}
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20000009 	.word	0x20000009

08002b4c <hts221_init>:

uint8_t hts221_init(void) {
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
	uint8_t result = 0;
 8002b52:	2300      	movs	r3, #0
 8002b54:	71fb      	strb	r3, [r7, #7]
	LL_mDelay(100);
 8002b56:	2064      	movs	r0, #100	; 0x64
 8002b58:	f7ff fe9e 	bl	8002898 <LL_mDelay>
	uint8_t val = hts221_read_byte(HTS221_WHO_AM_I_ADDRES);
 8002b5c:	200f      	movs	r0, #15
 8002b5e:	f7ff ffad 	bl	8002abc <hts221_read_byte>
 8002b62:	4603      	mov	r3, r0
 8002b64:	71bb      	strb	r3, [r7, #6]
	if (val == HTS221_WHO_AM_I_VALUE) {
 8002b66:	79bb      	ldrb	r3, [r7, #6]
 8002b68:	2bbc      	cmp	r3, #188	; 0xbc
 8002b6a:	d134      	bne.n	8002bd6 <hts221_init+0x8a>
		result = 1;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	71fb      	strb	r3, [r7, #7]
		//load reserved bits from device
		uint8_t control1 = hts221_read_byte(HTS221_ADDRESS_CTRL1);
 8002b70:	2020      	movs	r0, #32
 8002b72:	f7ff ffa3 	bl	8002abc <hts221_read_byte>
 8002b76:	4603      	mov	r3, r0
 8002b78:	717b      	strb	r3, [r7, #5]
		//active mode
		control1 &= ~HTS221_PD_MASK;
 8002b7a:	797b      	ldrb	r3, [r7, #5]
 8002b7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b80:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 1) << HTS221_PD_BIT;
 8002b82:	797b      	ldrb	r3, [r7, #5]
 8002b84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b88:	717b      	strb	r3, [r7, #5]
		//output registers not updated until MSB and LSB reading
		control1 &= ~HTS221_BDU_MASK;
 8002b8a:	797b      	ldrb	r3, [r7, #5]
 8002b8c:	f023 0304 	bic.w	r3, r3, #4
 8002b90:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 1) << HTS221_BDU_BIT;
 8002b92:	797b      	ldrb	r3, [r7, #5]
 8002b94:	f043 0304 	orr.w	r3, r3, #4
 8002b98:	717b      	strb	r3, [r7, #5]

		control1 &= ~HTS221_ODR_MASK;
 8002b9a:	797b      	ldrb	r3, [r7, #5]
 8002b9c:	f023 0303 	bic.w	r3, r3, #3
 8002ba0:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 2) << HTS221_ODR_BIT;
 8002ba2:	797b      	ldrb	r3, [r7, #5]
 8002ba4:	f043 0302 	orr.w	r3, r3, #2
 8002ba8:	717b      	strb	r3, [r7, #5]
		//Write config. to device
		hts221_write_byte(HTS221_ADDRESS_CTRL1, control1);
 8002baa:	797b      	ldrb	r3, [r7, #5]
 8002bac:	4619      	mov	r1, r3
 8002bae:	2020      	movs	r0, #32
 8002bb0:	f7ff ff9e 	bl	8002af0 <hts221_write_byte>
		val = hts221_read_byte(HTS221_ADDRESS_CTRL1);
 8002bb4:	2020      	movs	r0, #32
 8002bb6:	f7ff ff81 	bl	8002abc <hts221_read_byte>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	71bb      	strb	r3, [r7, #6]
		result = val == control1 ? 1 : 0;
 8002bbe:	79ba      	ldrb	r2, [r7, #6]
 8002bc0:	797b      	ldrb	r3, [r7, #5]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	bf0c      	ite	eq
 8002bc6:	2301      	moveq	r3, #1
 8002bc8:	2300      	movne	r3, #0
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	71fb      	strb	r3, [r7, #7]
		hts221_get_factory_coef(&HumidityFactoryCoef, &TemperatureFactoryCoef);
 8002bce:	4904      	ldr	r1, [pc, #16]	; (8002be0 <hts221_init+0x94>)
 8002bd0:	4804      	ldr	r0, [pc, #16]	; (8002be4 <hts221_init+0x98>)
 8002bd2:	f000 f8ad 	bl	8002d30 <hts221_get_factory_coef>
	}
	return result;
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	20000244 	.word	0x20000244
 8002be4:	2000024c 	.word	0x2000024c

08002be8 <hts221_get_humidity>:

void hts221_get_humidity(float *humidity) {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2] = { 0 };
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	81bb      	strh	r3, [r7, #12]
	hts221_readArray(buffer, HTS221_ADDRESS_H_OUT_L, 2);
 8002bf4:	f107 030c 	add.w	r3, r7, #12
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	2128      	movs	r1, #40	; 0x28
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ff8d 	bl	8002b1c <hts221_readArray>
	int16_t hOut = ((int16_t) buffer[1]) << 8 | buffer[0];
 8002c02:	7b7b      	ldrb	r3, [r7, #13]
 8002c04:	021b      	lsls	r3, r3, #8
 8002c06:	b21a      	sxth	r2, r3
 8002c08:	7b3b      	ldrb	r3, [r7, #12]
 8002c0a:	b21b      	sxth	r3, r3
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	82fb      	strh	r3, [r7, #22]
	int16_t h0Rh = HumidityFactoryCoef.h0Rh;
 8002c10:	4b1c      	ldr	r3, [pc, #112]	; (8002c84 <hts221_get_humidity+0x9c>)
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	82bb      	strh	r3, [r7, #20]
	int16_t h1Rh = HumidityFactoryCoef.h1Rh;
 8002c16:	4b1b      	ldr	r3, [pc, #108]	; (8002c84 <hts221_get_humidity+0x9c>)
 8002c18:	885b      	ldrh	r3, [r3, #2]
 8002c1a:	827b      	strh	r3, [r7, #18]
	int16_t h0T0 = HumidityFactoryCoef.h0Out;
 8002c1c:	4b19      	ldr	r3, [pc, #100]	; (8002c84 <hts221_get_humidity+0x9c>)
 8002c1e:	889b      	ldrh	r3, [r3, #4]
 8002c20:	823b      	strh	r3, [r7, #16]
	int16_t h1T0 = HumidityFactoryCoef.h1Out;
 8002c22:	4b18      	ldr	r3, [pc, #96]	; (8002c84 <hts221_get_humidity+0x9c>)
 8002c24:	88db      	ldrh	r3, [r3, #6]
 8002c26:	81fb      	strh	r3, [r7, #14]
	*humidity = ((float)(h1Rh - h0Rh) * (float)(hOut - h0T0)) / (float)(h1T0 - h0T0) + h0Rh;
 8002c28:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002c2c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	ee07 3a90 	vmov	s15, r3
 8002c36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c3a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002c3e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	ee07 3a90 	vmov	s15, r3
 8002c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c4c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002c50:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002c54:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	ee07 3a90 	vmov	s15, r3
 8002c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c6a:	ee07 3a90 	vmov	s15, r3
 8002c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	edc3 7a00 	vstr	s15, [r3]
}
 8002c7c:	bf00      	nop
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	2000024c 	.word	0x2000024c

08002c88 <hts221_get_temperature>:

void hts221_get_temperature(float *temperature) {
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2] = { 0 };
 8002c90:	2300      	movs	r3, #0
 8002c92:	81bb      	strh	r3, [r7, #12]
	//hts221_readArray(buffer, HTS221_ADDRESS_T_OUT_L, 2);
	buffer[0] = hts221_read_byte(HTS221_ADDRESS_T_OUT_L);
 8002c94:	202a      	movs	r0, #42	; 0x2a
 8002c96:	f7ff ff11 	bl	8002abc <hts221_read_byte>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	733b      	strb	r3, [r7, #12]
	buffer[1] = hts221_read_byte(HTS221_ADDRESS_T_OUT_H);
 8002c9e:	202b      	movs	r0, #43	; 0x2b
 8002ca0:	f7ff ff0c 	bl	8002abc <hts221_read_byte>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	737b      	strb	r3, [r7, #13]
	int16_t tOut = ((int16_t) buffer[1]) << 8 | buffer[0];
 8002ca8:	7b7b      	ldrb	r3, [r7, #13]
 8002caa:	021b      	lsls	r3, r3, #8
 8002cac:	b21a      	sxth	r2, r3
 8002cae:	7b3b      	ldrb	r3, [r7, #12]
 8002cb0:	b21b      	sxth	r3, r3
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	82fb      	strh	r3, [r7, #22]
	int16_t t0Deg = TemperatureFactoryCoef.t0DegC;
 8002cb6:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <hts221_get_temperature+0xa4>)
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	82bb      	strh	r3, [r7, #20]
	int16_t t1Deg = TemperatureFactoryCoef.t1DegC;
 8002cbc:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <hts221_get_temperature+0xa4>)
 8002cbe:	885b      	ldrh	r3, [r3, #2]
 8002cc0:	827b      	strh	r3, [r7, #18]
	int16_t t0Out = TemperatureFactoryCoef.t0Out;
 8002cc2:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <hts221_get_temperature+0xa4>)
 8002cc4:	889b      	ldrh	r3, [r3, #4]
 8002cc6:	823b      	strh	r3, [r7, #16]
	int16_t t1Out = TemperatureFactoryCoef.t1Out;
 8002cc8:	4b18      	ldr	r3, [pc, #96]	; (8002d2c <hts221_get_temperature+0xa4>)
 8002cca:	88db      	ldrh	r3, [r3, #6]
 8002ccc:	81fb      	strh	r3, [r7, #14]
	*temperature = ((float)(t1Deg - t0Deg) * (float)(tOut - t0Out)) / (float)(t1Out - t0Out) + t0Deg;
 8002cce:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002cd2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	ee07 3a90 	vmov	s15, r3
 8002cdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ce0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002ce4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	ee07 3a90 	vmov	s15, r3
 8002cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cf2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002cf6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002cfa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	ee07 3a90 	vmov	s15, r3
 8002d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d0c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002d10:	ee07 3a90 	vmov	s15, r3
 8002d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	edc3 7a00 	vstr	s15, [r3]
}
 8002d22:	bf00      	nop
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000244 	.word	0x20000244

08002d30 <hts221_get_factory_coef>:

void hts221_get_factory_coef(Hts221HumidityStruct *humidityStruct,
		Hts221TemperatureStruct *temperatureStruct) {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
	//Get humidity factory coef.
	int16_t h0RhX2 = (int16_t)hts221_read_byte(HTS221_ADDRESS_H0_rH_x2);
 8002d3a:	2030      	movs	r0, #48	; 0x30
 8002d3c:	f7ff febe 	bl	8002abc <hts221_read_byte>
 8002d40:	4603      	mov	r3, r0
 8002d42:	83fb      	strh	r3, [r7, #30]
	int16_t h1RhX2 = (int16_t)hts221_read_byte(HTS221_ADDRESS_H1_rH_x2);
 8002d44:	2031      	movs	r0, #49	; 0x31
 8002d46:	f7ff feb9 	bl	8002abc <hts221_read_byte>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	83bb      	strh	r3, [r7, #28]
	uint8_t buffer[4] = { 0 };
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60bb      	str	r3, [r7, #8]
	hts221_readArray(buffer, HTS221_ADDRESS_H0_OUT_L, 2);
 8002d52:	f107 0308 	add.w	r3, r7, #8
 8002d56:	2202      	movs	r2, #2
 8002d58:	2136      	movs	r1, #54	; 0x36
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fede 	bl	8002b1c <hts221_readArray>
	hts221_readArray(buffer + 2, HTS221_ADDRESS_H1_OUT_L, 2);
 8002d60:	f107 0308 	add.w	r3, r7, #8
 8002d64:	3302      	adds	r3, #2
 8002d66:	2202      	movs	r2, #2
 8002d68:	213a      	movs	r1, #58	; 0x3a
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fed6 	bl	8002b1c <hts221_readArray>
	int16_t h0Out = ((int16_t) buffer[1]) << 8 | (int16_t)buffer[0];
 8002d70:	7a7b      	ldrb	r3, [r7, #9]
 8002d72:	021b      	lsls	r3, r3, #8
 8002d74:	b21a      	sxth	r2, r3
 8002d76:	7a3b      	ldrb	r3, [r7, #8]
 8002d78:	b21b      	sxth	r3, r3
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	837b      	strh	r3, [r7, #26]
	int16_t h1Out = ((int16_t) buffer[3]) << 8 | (int16_t)buffer[2];
 8002d7e:	7afb      	ldrb	r3, [r7, #11]
 8002d80:	021b      	lsls	r3, r3, #8
 8002d82:	b21a      	sxth	r2, r3
 8002d84:	7abb      	ldrb	r3, [r7, #10]
 8002d86:	b21b      	sxth	r3, r3
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	833b      	strh	r3, [r7, #24]

	humidityStruct->h0Rh = h0RhX2 >> 1;
 8002d8c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002d90:	105b      	asrs	r3, r3, #1
 8002d92:	b21a      	sxth	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	801a      	strh	r2, [r3, #0]
	humidityStruct->h1Rh = h1RhX2 >> 1;
 8002d98:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002d9c:	105b      	asrs	r3, r3, #1
 8002d9e:	b21a      	sxth	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	805a      	strh	r2, [r3, #2]
	humidityStruct->h0Out = h0Out;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	8b7a      	ldrh	r2, [r7, #26]
 8002da8:	809a      	strh	r2, [r3, #4]
	humidityStruct->h1Out = h1Out;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	8b3a      	ldrh	r2, [r7, #24]
 8002dae:	80da      	strh	r2, [r3, #6]
	//Get temperature factory coef.
	buffer[0] = hts221_read_byte(HTS221_ADDRESS_T0_degC_x8);
 8002db0:	2032      	movs	r0, #50	; 0x32
 8002db2:	f7ff fe83 	bl	8002abc <hts221_read_byte>
 8002db6:	4603      	mov	r3, r0
 8002db8:	723b      	strb	r3, [r7, #8]
	buffer[2] = hts221_read_byte(HTS221_ADDRESS_T1_degC_x8);
 8002dba:	2033      	movs	r0, #51	; 0x33
 8002dbc:	f7ff fe7e 	bl	8002abc <hts221_read_byte>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	72bb      	strb	r3, [r7, #10]
	int16_t t0t1Msb = (int16_t)hts221_read_byte(HTS221_ADDRESS_T1_T0_MSB);
 8002dc4:	2035      	movs	r0, #53	; 0x35
 8002dc6:	f7ff fe79 	bl	8002abc <hts221_read_byte>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	82fb      	strh	r3, [r7, #22]
	buffer[1] = t0t1Msb & 0x03;
 8002dce:	8afb      	ldrh	r3, [r7, #22]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	727b      	strb	r3, [r7, #9]
	buffer[3] = t0t1Msb & 0x0C;
 8002dda:	8afb      	ldrh	r3, [r7, #22]
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	f003 030c 	and.w	r3, r3, #12
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	72fb      	strb	r3, [r7, #11]
	int16_t t0DegX8 = ((int16_t) buffer[1]) << 8 | (int16_t)buffer[0];
 8002de6:	7a7b      	ldrb	r3, [r7, #9]
 8002de8:	021b      	lsls	r3, r3, #8
 8002dea:	b21a      	sxth	r2, r3
 8002dec:	7a3b      	ldrb	r3, [r7, #8]
 8002dee:	b21b      	sxth	r3, r3
 8002df0:	4313      	orrs	r3, r2
 8002df2:	82bb      	strh	r3, [r7, #20]
	int16_t t1DegX8 = ((int16_t) buffer[3]) << 6 | (int16_t)buffer[2];
 8002df4:	7afb      	ldrb	r3, [r7, #11]
 8002df6:	019b      	lsls	r3, r3, #6
 8002df8:	b21a      	sxth	r2, r3
 8002dfa:	7abb      	ldrb	r3, [r7, #10]
 8002dfc:	b21b      	sxth	r3, r3
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	827b      	strh	r3, [r7, #18]
	hts221_readArray(buffer, HTS221_ADDRESS_T0_OUT_L, 4);
 8002e02:	f107 0308 	add.w	r3, r7, #8
 8002e06:	2204      	movs	r2, #4
 8002e08:	213c      	movs	r1, #60	; 0x3c
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fe86 	bl	8002b1c <hts221_readArray>
	//hts221_readArray(buffer + 2, HTS221_ADDRESS_T1_OUT_L, 2);
	int16_t t0Out = ((int16_t) buffer[1]) << 8 | (int16_t)buffer[0];
 8002e10:	7a7b      	ldrb	r3, [r7, #9]
 8002e12:	021b      	lsls	r3, r3, #8
 8002e14:	b21a      	sxth	r2, r3
 8002e16:	7a3b      	ldrb	r3, [r7, #8]
 8002e18:	b21b      	sxth	r3, r3
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	823b      	strh	r3, [r7, #16]
	int16_t t1Out = ((int16_t) buffer[3]) << 8 | (int16_t)buffer[2];
 8002e1e:	7afb      	ldrb	r3, [r7, #11]
 8002e20:	021b      	lsls	r3, r3, #8
 8002e22:	b21a      	sxth	r2, r3
 8002e24:	7abb      	ldrb	r3, [r7, #10]
 8002e26:	b21b      	sxth	r3, r3
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	81fb      	strh	r3, [r7, #14]

	temperatureStruct->t0DegC = t0DegX8 >> 3;
 8002e2c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e30:	10db      	asrs	r3, r3, #3
 8002e32:	b21a      	sxth	r2, r3
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	801a      	strh	r2, [r3, #0]
	temperatureStruct->t1DegC = t1DegX8 >> 3;
 8002e38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e3c:	10db      	asrs	r3, r3, #3
 8002e3e:	b21a      	sxth	r2, r3
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	805a      	strh	r2, [r3, #2]
	temperatureStruct->t0Out = t0Out;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	8a3a      	ldrh	r2, [r7, #16]
 8002e48:	809a      	strh	r2, [r3, #4]
	temperatureStruct->t1Out = t1Out;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	89fa      	ldrh	r2, [r7, #14]
 8002e4e:	80da      	strh	r2, [r3, #6]
}
 8002e50:	bf00      	nop
 8002e52:	3720      	adds	r7, #32
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <__errno>:
 8002e58:	4b01      	ldr	r3, [pc, #4]	; (8002e60 <__errno+0x8>)
 8002e5a:	6818      	ldr	r0, [r3, #0]
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	2000000c 	.word	0x2000000c

08002e64 <__libc_init_array>:
 8002e64:	b570      	push	{r4, r5, r6, lr}
 8002e66:	4d0d      	ldr	r5, [pc, #52]	; (8002e9c <__libc_init_array+0x38>)
 8002e68:	4c0d      	ldr	r4, [pc, #52]	; (8002ea0 <__libc_init_array+0x3c>)
 8002e6a:	1b64      	subs	r4, r4, r5
 8002e6c:	10a4      	asrs	r4, r4, #2
 8002e6e:	2600      	movs	r6, #0
 8002e70:	42a6      	cmp	r6, r4
 8002e72:	d109      	bne.n	8002e88 <__libc_init_array+0x24>
 8002e74:	4d0b      	ldr	r5, [pc, #44]	; (8002ea4 <__libc_init_array+0x40>)
 8002e76:	4c0c      	ldr	r4, [pc, #48]	; (8002ea8 <__libc_init_array+0x44>)
 8002e78:	f002 febc 	bl	8005bf4 <_init>
 8002e7c:	1b64      	subs	r4, r4, r5
 8002e7e:	10a4      	asrs	r4, r4, #2
 8002e80:	2600      	movs	r6, #0
 8002e82:	42a6      	cmp	r6, r4
 8002e84:	d105      	bne.n	8002e92 <__libc_init_array+0x2e>
 8002e86:	bd70      	pop	{r4, r5, r6, pc}
 8002e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e8c:	4798      	blx	r3
 8002e8e:	3601      	adds	r6, #1
 8002e90:	e7ee      	b.n	8002e70 <__libc_init_array+0xc>
 8002e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e96:	4798      	blx	r3
 8002e98:	3601      	adds	r6, #1
 8002e9a:	e7f2      	b.n	8002e82 <__libc_init_array+0x1e>
 8002e9c:	0800602c 	.word	0x0800602c
 8002ea0:	0800602c 	.word	0x0800602c
 8002ea4:	0800602c 	.word	0x0800602c
 8002ea8:	08006030 	.word	0x08006030

08002eac <memset>:
 8002eac:	4402      	add	r2, r0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d100      	bne.n	8002eb6 <memset+0xa>
 8002eb4:	4770      	bx	lr
 8002eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eba:	e7f9      	b.n	8002eb0 <memset+0x4>

08002ebc <__cvt>:
 8002ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ec0:	ec55 4b10 	vmov	r4, r5, d0
 8002ec4:	2d00      	cmp	r5, #0
 8002ec6:	460e      	mov	r6, r1
 8002ec8:	4619      	mov	r1, r3
 8002eca:	462b      	mov	r3, r5
 8002ecc:	bfbb      	ittet	lt
 8002ece:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002ed2:	461d      	movlt	r5, r3
 8002ed4:	2300      	movge	r3, #0
 8002ed6:	232d      	movlt	r3, #45	; 0x2d
 8002ed8:	700b      	strb	r3, [r1, #0]
 8002eda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002edc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002ee0:	4691      	mov	r9, r2
 8002ee2:	f023 0820 	bic.w	r8, r3, #32
 8002ee6:	bfbc      	itt	lt
 8002ee8:	4622      	movlt	r2, r4
 8002eea:	4614      	movlt	r4, r2
 8002eec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002ef0:	d005      	beq.n	8002efe <__cvt+0x42>
 8002ef2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002ef6:	d100      	bne.n	8002efa <__cvt+0x3e>
 8002ef8:	3601      	adds	r6, #1
 8002efa:	2102      	movs	r1, #2
 8002efc:	e000      	b.n	8002f00 <__cvt+0x44>
 8002efe:	2103      	movs	r1, #3
 8002f00:	ab03      	add	r3, sp, #12
 8002f02:	9301      	str	r3, [sp, #4]
 8002f04:	ab02      	add	r3, sp, #8
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	ec45 4b10 	vmov	d0, r4, r5
 8002f0c:	4653      	mov	r3, sl
 8002f0e:	4632      	mov	r2, r6
 8002f10:	f000 fcf2 	bl	80038f8 <_dtoa_r>
 8002f14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002f18:	4607      	mov	r7, r0
 8002f1a:	d102      	bne.n	8002f22 <__cvt+0x66>
 8002f1c:	f019 0f01 	tst.w	r9, #1
 8002f20:	d022      	beq.n	8002f68 <__cvt+0xac>
 8002f22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002f26:	eb07 0906 	add.w	r9, r7, r6
 8002f2a:	d110      	bne.n	8002f4e <__cvt+0x92>
 8002f2c:	783b      	ldrb	r3, [r7, #0]
 8002f2e:	2b30      	cmp	r3, #48	; 0x30
 8002f30:	d10a      	bne.n	8002f48 <__cvt+0x8c>
 8002f32:	2200      	movs	r2, #0
 8002f34:	2300      	movs	r3, #0
 8002f36:	4620      	mov	r0, r4
 8002f38:	4629      	mov	r1, r5
 8002f3a:	f7fd fdc5 	bl	8000ac8 <__aeabi_dcmpeq>
 8002f3e:	b918      	cbnz	r0, 8002f48 <__cvt+0x8c>
 8002f40:	f1c6 0601 	rsb	r6, r6, #1
 8002f44:	f8ca 6000 	str.w	r6, [sl]
 8002f48:	f8da 3000 	ldr.w	r3, [sl]
 8002f4c:	4499      	add	r9, r3
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2300      	movs	r3, #0
 8002f52:	4620      	mov	r0, r4
 8002f54:	4629      	mov	r1, r5
 8002f56:	f7fd fdb7 	bl	8000ac8 <__aeabi_dcmpeq>
 8002f5a:	b108      	cbz	r0, 8002f60 <__cvt+0xa4>
 8002f5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8002f60:	2230      	movs	r2, #48	; 0x30
 8002f62:	9b03      	ldr	r3, [sp, #12]
 8002f64:	454b      	cmp	r3, r9
 8002f66:	d307      	bcc.n	8002f78 <__cvt+0xbc>
 8002f68:	9b03      	ldr	r3, [sp, #12]
 8002f6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002f6c:	1bdb      	subs	r3, r3, r7
 8002f6e:	4638      	mov	r0, r7
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	b004      	add	sp, #16
 8002f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f78:	1c59      	adds	r1, r3, #1
 8002f7a:	9103      	str	r1, [sp, #12]
 8002f7c:	701a      	strb	r2, [r3, #0]
 8002f7e:	e7f0      	b.n	8002f62 <__cvt+0xa6>

08002f80 <__exponent>:
 8002f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f82:	4603      	mov	r3, r0
 8002f84:	2900      	cmp	r1, #0
 8002f86:	bfb8      	it	lt
 8002f88:	4249      	neglt	r1, r1
 8002f8a:	f803 2b02 	strb.w	r2, [r3], #2
 8002f8e:	bfb4      	ite	lt
 8002f90:	222d      	movlt	r2, #45	; 0x2d
 8002f92:	222b      	movge	r2, #43	; 0x2b
 8002f94:	2909      	cmp	r1, #9
 8002f96:	7042      	strb	r2, [r0, #1]
 8002f98:	dd2a      	ble.n	8002ff0 <__exponent+0x70>
 8002f9a:	f10d 0407 	add.w	r4, sp, #7
 8002f9e:	46a4      	mov	ip, r4
 8002fa0:	270a      	movs	r7, #10
 8002fa2:	46a6      	mov	lr, r4
 8002fa4:	460a      	mov	r2, r1
 8002fa6:	fb91 f6f7 	sdiv	r6, r1, r7
 8002faa:	fb07 1516 	mls	r5, r7, r6, r1
 8002fae:	3530      	adds	r5, #48	; 0x30
 8002fb0:	2a63      	cmp	r2, #99	; 0x63
 8002fb2:	f104 34ff 	add.w	r4, r4, #4294967295
 8002fb6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002fba:	4631      	mov	r1, r6
 8002fbc:	dcf1      	bgt.n	8002fa2 <__exponent+0x22>
 8002fbe:	3130      	adds	r1, #48	; 0x30
 8002fc0:	f1ae 0502 	sub.w	r5, lr, #2
 8002fc4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002fc8:	1c44      	adds	r4, r0, #1
 8002fca:	4629      	mov	r1, r5
 8002fcc:	4561      	cmp	r1, ip
 8002fce:	d30a      	bcc.n	8002fe6 <__exponent+0x66>
 8002fd0:	f10d 0209 	add.w	r2, sp, #9
 8002fd4:	eba2 020e 	sub.w	r2, r2, lr
 8002fd8:	4565      	cmp	r5, ip
 8002fda:	bf88      	it	hi
 8002fdc:	2200      	movhi	r2, #0
 8002fde:	4413      	add	r3, r2
 8002fe0:	1a18      	subs	r0, r3, r0
 8002fe2:	b003      	add	sp, #12
 8002fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002fea:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002fee:	e7ed      	b.n	8002fcc <__exponent+0x4c>
 8002ff0:	2330      	movs	r3, #48	; 0x30
 8002ff2:	3130      	adds	r1, #48	; 0x30
 8002ff4:	7083      	strb	r3, [r0, #2]
 8002ff6:	70c1      	strb	r1, [r0, #3]
 8002ff8:	1d03      	adds	r3, r0, #4
 8002ffa:	e7f1      	b.n	8002fe0 <__exponent+0x60>

08002ffc <_printf_float>:
 8002ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003000:	ed2d 8b02 	vpush	{d8}
 8003004:	b08d      	sub	sp, #52	; 0x34
 8003006:	460c      	mov	r4, r1
 8003008:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800300c:	4616      	mov	r6, r2
 800300e:	461f      	mov	r7, r3
 8003010:	4605      	mov	r5, r0
 8003012:	f001 fa5d 	bl	80044d0 <_localeconv_r>
 8003016:	f8d0 a000 	ldr.w	sl, [r0]
 800301a:	4650      	mov	r0, sl
 800301c:	f7fd f8d8 	bl	80001d0 <strlen>
 8003020:	2300      	movs	r3, #0
 8003022:	930a      	str	r3, [sp, #40]	; 0x28
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	9305      	str	r3, [sp, #20]
 8003028:	f8d8 3000 	ldr.w	r3, [r8]
 800302c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003030:	3307      	adds	r3, #7
 8003032:	f023 0307 	bic.w	r3, r3, #7
 8003036:	f103 0208 	add.w	r2, r3, #8
 800303a:	f8c8 2000 	str.w	r2, [r8]
 800303e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003042:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003046:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800304a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800304e:	9307      	str	r3, [sp, #28]
 8003050:	f8cd 8018 	str.w	r8, [sp, #24]
 8003054:	ee08 0a10 	vmov	s16, r0
 8003058:	4b9f      	ldr	r3, [pc, #636]	; (80032d8 <_printf_float+0x2dc>)
 800305a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800305e:	f04f 32ff 	mov.w	r2, #4294967295
 8003062:	f7fd fd63 	bl	8000b2c <__aeabi_dcmpun>
 8003066:	bb88      	cbnz	r0, 80030cc <_printf_float+0xd0>
 8003068:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800306c:	4b9a      	ldr	r3, [pc, #616]	; (80032d8 <_printf_float+0x2dc>)
 800306e:	f04f 32ff 	mov.w	r2, #4294967295
 8003072:	f7fd fd3d 	bl	8000af0 <__aeabi_dcmple>
 8003076:	bb48      	cbnz	r0, 80030cc <_printf_float+0xd0>
 8003078:	2200      	movs	r2, #0
 800307a:	2300      	movs	r3, #0
 800307c:	4640      	mov	r0, r8
 800307e:	4649      	mov	r1, r9
 8003080:	f7fd fd2c 	bl	8000adc <__aeabi_dcmplt>
 8003084:	b110      	cbz	r0, 800308c <_printf_float+0x90>
 8003086:	232d      	movs	r3, #45	; 0x2d
 8003088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800308c:	4b93      	ldr	r3, [pc, #588]	; (80032dc <_printf_float+0x2e0>)
 800308e:	4894      	ldr	r0, [pc, #592]	; (80032e0 <_printf_float+0x2e4>)
 8003090:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003094:	bf94      	ite	ls
 8003096:	4698      	movls	r8, r3
 8003098:	4680      	movhi	r8, r0
 800309a:	2303      	movs	r3, #3
 800309c:	6123      	str	r3, [r4, #16]
 800309e:	9b05      	ldr	r3, [sp, #20]
 80030a0:	f023 0204 	bic.w	r2, r3, #4
 80030a4:	6022      	str	r2, [r4, #0]
 80030a6:	f04f 0900 	mov.w	r9, #0
 80030aa:	9700      	str	r7, [sp, #0]
 80030ac:	4633      	mov	r3, r6
 80030ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80030b0:	4621      	mov	r1, r4
 80030b2:	4628      	mov	r0, r5
 80030b4:	f000 f9d8 	bl	8003468 <_printf_common>
 80030b8:	3001      	adds	r0, #1
 80030ba:	f040 8090 	bne.w	80031de <_printf_float+0x1e2>
 80030be:	f04f 30ff 	mov.w	r0, #4294967295
 80030c2:	b00d      	add	sp, #52	; 0x34
 80030c4:	ecbd 8b02 	vpop	{d8}
 80030c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030cc:	4642      	mov	r2, r8
 80030ce:	464b      	mov	r3, r9
 80030d0:	4640      	mov	r0, r8
 80030d2:	4649      	mov	r1, r9
 80030d4:	f7fd fd2a 	bl	8000b2c <__aeabi_dcmpun>
 80030d8:	b140      	cbz	r0, 80030ec <_printf_float+0xf0>
 80030da:	464b      	mov	r3, r9
 80030dc:	2b00      	cmp	r3, #0
 80030de:	bfbc      	itt	lt
 80030e0:	232d      	movlt	r3, #45	; 0x2d
 80030e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80030e6:	487f      	ldr	r0, [pc, #508]	; (80032e4 <_printf_float+0x2e8>)
 80030e8:	4b7f      	ldr	r3, [pc, #508]	; (80032e8 <_printf_float+0x2ec>)
 80030ea:	e7d1      	b.n	8003090 <_printf_float+0x94>
 80030ec:	6863      	ldr	r3, [r4, #4]
 80030ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80030f2:	9206      	str	r2, [sp, #24]
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	d13f      	bne.n	8003178 <_printf_float+0x17c>
 80030f8:	2306      	movs	r3, #6
 80030fa:	6063      	str	r3, [r4, #4]
 80030fc:	9b05      	ldr	r3, [sp, #20]
 80030fe:	6861      	ldr	r1, [r4, #4]
 8003100:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003104:	2300      	movs	r3, #0
 8003106:	9303      	str	r3, [sp, #12]
 8003108:	ab0a      	add	r3, sp, #40	; 0x28
 800310a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800310e:	ab09      	add	r3, sp, #36	; 0x24
 8003110:	ec49 8b10 	vmov	d0, r8, r9
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	6022      	str	r2, [r4, #0]
 8003118:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800311c:	4628      	mov	r0, r5
 800311e:	f7ff fecd 	bl	8002ebc <__cvt>
 8003122:	9b06      	ldr	r3, [sp, #24]
 8003124:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003126:	2b47      	cmp	r3, #71	; 0x47
 8003128:	4680      	mov	r8, r0
 800312a:	d108      	bne.n	800313e <_printf_float+0x142>
 800312c:	1cc8      	adds	r0, r1, #3
 800312e:	db02      	blt.n	8003136 <_printf_float+0x13a>
 8003130:	6863      	ldr	r3, [r4, #4]
 8003132:	4299      	cmp	r1, r3
 8003134:	dd41      	ble.n	80031ba <_printf_float+0x1be>
 8003136:	f1ab 0b02 	sub.w	fp, fp, #2
 800313a:	fa5f fb8b 	uxtb.w	fp, fp
 800313e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003142:	d820      	bhi.n	8003186 <_printf_float+0x18a>
 8003144:	3901      	subs	r1, #1
 8003146:	465a      	mov	r2, fp
 8003148:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800314c:	9109      	str	r1, [sp, #36]	; 0x24
 800314e:	f7ff ff17 	bl	8002f80 <__exponent>
 8003152:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003154:	1813      	adds	r3, r2, r0
 8003156:	2a01      	cmp	r2, #1
 8003158:	4681      	mov	r9, r0
 800315a:	6123      	str	r3, [r4, #16]
 800315c:	dc02      	bgt.n	8003164 <_printf_float+0x168>
 800315e:	6822      	ldr	r2, [r4, #0]
 8003160:	07d2      	lsls	r2, r2, #31
 8003162:	d501      	bpl.n	8003168 <_printf_float+0x16c>
 8003164:	3301      	adds	r3, #1
 8003166:	6123      	str	r3, [r4, #16]
 8003168:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800316c:	2b00      	cmp	r3, #0
 800316e:	d09c      	beq.n	80030aa <_printf_float+0xae>
 8003170:	232d      	movs	r3, #45	; 0x2d
 8003172:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003176:	e798      	b.n	80030aa <_printf_float+0xae>
 8003178:	9a06      	ldr	r2, [sp, #24]
 800317a:	2a47      	cmp	r2, #71	; 0x47
 800317c:	d1be      	bne.n	80030fc <_printf_float+0x100>
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1bc      	bne.n	80030fc <_printf_float+0x100>
 8003182:	2301      	movs	r3, #1
 8003184:	e7b9      	b.n	80030fa <_printf_float+0xfe>
 8003186:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800318a:	d118      	bne.n	80031be <_printf_float+0x1c2>
 800318c:	2900      	cmp	r1, #0
 800318e:	6863      	ldr	r3, [r4, #4]
 8003190:	dd0b      	ble.n	80031aa <_printf_float+0x1ae>
 8003192:	6121      	str	r1, [r4, #16]
 8003194:	b913      	cbnz	r3, 800319c <_printf_float+0x1a0>
 8003196:	6822      	ldr	r2, [r4, #0]
 8003198:	07d0      	lsls	r0, r2, #31
 800319a:	d502      	bpl.n	80031a2 <_printf_float+0x1a6>
 800319c:	3301      	adds	r3, #1
 800319e:	440b      	add	r3, r1
 80031a0:	6123      	str	r3, [r4, #16]
 80031a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80031a4:	f04f 0900 	mov.w	r9, #0
 80031a8:	e7de      	b.n	8003168 <_printf_float+0x16c>
 80031aa:	b913      	cbnz	r3, 80031b2 <_printf_float+0x1b6>
 80031ac:	6822      	ldr	r2, [r4, #0]
 80031ae:	07d2      	lsls	r2, r2, #31
 80031b0:	d501      	bpl.n	80031b6 <_printf_float+0x1ba>
 80031b2:	3302      	adds	r3, #2
 80031b4:	e7f4      	b.n	80031a0 <_printf_float+0x1a4>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e7f2      	b.n	80031a0 <_printf_float+0x1a4>
 80031ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80031be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031c0:	4299      	cmp	r1, r3
 80031c2:	db05      	blt.n	80031d0 <_printf_float+0x1d4>
 80031c4:	6823      	ldr	r3, [r4, #0]
 80031c6:	6121      	str	r1, [r4, #16]
 80031c8:	07d8      	lsls	r0, r3, #31
 80031ca:	d5ea      	bpl.n	80031a2 <_printf_float+0x1a6>
 80031cc:	1c4b      	adds	r3, r1, #1
 80031ce:	e7e7      	b.n	80031a0 <_printf_float+0x1a4>
 80031d0:	2900      	cmp	r1, #0
 80031d2:	bfd4      	ite	le
 80031d4:	f1c1 0202 	rsble	r2, r1, #2
 80031d8:	2201      	movgt	r2, #1
 80031da:	4413      	add	r3, r2
 80031dc:	e7e0      	b.n	80031a0 <_printf_float+0x1a4>
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	055a      	lsls	r2, r3, #21
 80031e2:	d407      	bmi.n	80031f4 <_printf_float+0x1f8>
 80031e4:	6923      	ldr	r3, [r4, #16]
 80031e6:	4642      	mov	r2, r8
 80031e8:	4631      	mov	r1, r6
 80031ea:	4628      	mov	r0, r5
 80031ec:	47b8      	blx	r7
 80031ee:	3001      	adds	r0, #1
 80031f0:	d12c      	bne.n	800324c <_printf_float+0x250>
 80031f2:	e764      	b.n	80030be <_printf_float+0xc2>
 80031f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80031f8:	f240 80e0 	bls.w	80033bc <_printf_float+0x3c0>
 80031fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003200:	2200      	movs	r2, #0
 8003202:	2300      	movs	r3, #0
 8003204:	f7fd fc60 	bl	8000ac8 <__aeabi_dcmpeq>
 8003208:	2800      	cmp	r0, #0
 800320a:	d034      	beq.n	8003276 <_printf_float+0x27a>
 800320c:	4a37      	ldr	r2, [pc, #220]	; (80032ec <_printf_float+0x2f0>)
 800320e:	2301      	movs	r3, #1
 8003210:	4631      	mov	r1, r6
 8003212:	4628      	mov	r0, r5
 8003214:	47b8      	blx	r7
 8003216:	3001      	adds	r0, #1
 8003218:	f43f af51 	beq.w	80030be <_printf_float+0xc2>
 800321c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003220:	429a      	cmp	r2, r3
 8003222:	db02      	blt.n	800322a <_printf_float+0x22e>
 8003224:	6823      	ldr	r3, [r4, #0]
 8003226:	07d8      	lsls	r0, r3, #31
 8003228:	d510      	bpl.n	800324c <_printf_float+0x250>
 800322a:	ee18 3a10 	vmov	r3, s16
 800322e:	4652      	mov	r2, sl
 8003230:	4631      	mov	r1, r6
 8003232:	4628      	mov	r0, r5
 8003234:	47b8      	blx	r7
 8003236:	3001      	adds	r0, #1
 8003238:	f43f af41 	beq.w	80030be <_printf_float+0xc2>
 800323c:	f04f 0800 	mov.w	r8, #0
 8003240:	f104 091a 	add.w	r9, r4, #26
 8003244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003246:	3b01      	subs	r3, #1
 8003248:	4543      	cmp	r3, r8
 800324a:	dc09      	bgt.n	8003260 <_printf_float+0x264>
 800324c:	6823      	ldr	r3, [r4, #0]
 800324e:	079b      	lsls	r3, r3, #30
 8003250:	f100 8105 	bmi.w	800345e <_printf_float+0x462>
 8003254:	68e0      	ldr	r0, [r4, #12]
 8003256:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003258:	4298      	cmp	r0, r3
 800325a:	bfb8      	it	lt
 800325c:	4618      	movlt	r0, r3
 800325e:	e730      	b.n	80030c2 <_printf_float+0xc6>
 8003260:	2301      	movs	r3, #1
 8003262:	464a      	mov	r2, r9
 8003264:	4631      	mov	r1, r6
 8003266:	4628      	mov	r0, r5
 8003268:	47b8      	blx	r7
 800326a:	3001      	adds	r0, #1
 800326c:	f43f af27 	beq.w	80030be <_printf_float+0xc2>
 8003270:	f108 0801 	add.w	r8, r8, #1
 8003274:	e7e6      	b.n	8003244 <_printf_float+0x248>
 8003276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003278:	2b00      	cmp	r3, #0
 800327a:	dc39      	bgt.n	80032f0 <_printf_float+0x2f4>
 800327c:	4a1b      	ldr	r2, [pc, #108]	; (80032ec <_printf_float+0x2f0>)
 800327e:	2301      	movs	r3, #1
 8003280:	4631      	mov	r1, r6
 8003282:	4628      	mov	r0, r5
 8003284:	47b8      	blx	r7
 8003286:	3001      	adds	r0, #1
 8003288:	f43f af19 	beq.w	80030be <_printf_float+0xc2>
 800328c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003290:	4313      	orrs	r3, r2
 8003292:	d102      	bne.n	800329a <_printf_float+0x29e>
 8003294:	6823      	ldr	r3, [r4, #0]
 8003296:	07d9      	lsls	r1, r3, #31
 8003298:	d5d8      	bpl.n	800324c <_printf_float+0x250>
 800329a:	ee18 3a10 	vmov	r3, s16
 800329e:	4652      	mov	r2, sl
 80032a0:	4631      	mov	r1, r6
 80032a2:	4628      	mov	r0, r5
 80032a4:	47b8      	blx	r7
 80032a6:	3001      	adds	r0, #1
 80032a8:	f43f af09 	beq.w	80030be <_printf_float+0xc2>
 80032ac:	f04f 0900 	mov.w	r9, #0
 80032b0:	f104 0a1a 	add.w	sl, r4, #26
 80032b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032b6:	425b      	negs	r3, r3
 80032b8:	454b      	cmp	r3, r9
 80032ba:	dc01      	bgt.n	80032c0 <_printf_float+0x2c4>
 80032bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032be:	e792      	b.n	80031e6 <_printf_float+0x1ea>
 80032c0:	2301      	movs	r3, #1
 80032c2:	4652      	mov	r2, sl
 80032c4:	4631      	mov	r1, r6
 80032c6:	4628      	mov	r0, r5
 80032c8:	47b8      	blx	r7
 80032ca:	3001      	adds	r0, #1
 80032cc:	f43f aef7 	beq.w	80030be <_printf_float+0xc2>
 80032d0:	f109 0901 	add.w	r9, r9, #1
 80032d4:	e7ee      	b.n	80032b4 <_printf_float+0x2b8>
 80032d6:	bf00      	nop
 80032d8:	7fefffff 	.word	0x7fefffff
 80032dc:	08005c4c 	.word	0x08005c4c
 80032e0:	08005c50 	.word	0x08005c50
 80032e4:	08005c58 	.word	0x08005c58
 80032e8:	08005c54 	.word	0x08005c54
 80032ec:	08005c5c 	.word	0x08005c5c
 80032f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80032f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80032f4:	429a      	cmp	r2, r3
 80032f6:	bfa8      	it	ge
 80032f8:	461a      	movge	r2, r3
 80032fa:	2a00      	cmp	r2, #0
 80032fc:	4691      	mov	r9, r2
 80032fe:	dc37      	bgt.n	8003370 <_printf_float+0x374>
 8003300:	f04f 0b00 	mov.w	fp, #0
 8003304:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003308:	f104 021a 	add.w	r2, r4, #26
 800330c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800330e:	9305      	str	r3, [sp, #20]
 8003310:	eba3 0309 	sub.w	r3, r3, r9
 8003314:	455b      	cmp	r3, fp
 8003316:	dc33      	bgt.n	8003380 <_printf_float+0x384>
 8003318:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800331c:	429a      	cmp	r2, r3
 800331e:	db3b      	blt.n	8003398 <_printf_float+0x39c>
 8003320:	6823      	ldr	r3, [r4, #0]
 8003322:	07da      	lsls	r2, r3, #31
 8003324:	d438      	bmi.n	8003398 <_printf_float+0x39c>
 8003326:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003328:	9b05      	ldr	r3, [sp, #20]
 800332a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	eba2 0901 	sub.w	r9, r2, r1
 8003332:	4599      	cmp	r9, r3
 8003334:	bfa8      	it	ge
 8003336:	4699      	movge	r9, r3
 8003338:	f1b9 0f00 	cmp.w	r9, #0
 800333c:	dc35      	bgt.n	80033aa <_printf_float+0x3ae>
 800333e:	f04f 0800 	mov.w	r8, #0
 8003342:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003346:	f104 0a1a 	add.w	sl, r4, #26
 800334a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800334e:	1a9b      	subs	r3, r3, r2
 8003350:	eba3 0309 	sub.w	r3, r3, r9
 8003354:	4543      	cmp	r3, r8
 8003356:	f77f af79 	ble.w	800324c <_printf_float+0x250>
 800335a:	2301      	movs	r3, #1
 800335c:	4652      	mov	r2, sl
 800335e:	4631      	mov	r1, r6
 8003360:	4628      	mov	r0, r5
 8003362:	47b8      	blx	r7
 8003364:	3001      	adds	r0, #1
 8003366:	f43f aeaa 	beq.w	80030be <_printf_float+0xc2>
 800336a:	f108 0801 	add.w	r8, r8, #1
 800336e:	e7ec      	b.n	800334a <_printf_float+0x34e>
 8003370:	4613      	mov	r3, r2
 8003372:	4631      	mov	r1, r6
 8003374:	4642      	mov	r2, r8
 8003376:	4628      	mov	r0, r5
 8003378:	47b8      	blx	r7
 800337a:	3001      	adds	r0, #1
 800337c:	d1c0      	bne.n	8003300 <_printf_float+0x304>
 800337e:	e69e      	b.n	80030be <_printf_float+0xc2>
 8003380:	2301      	movs	r3, #1
 8003382:	4631      	mov	r1, r6
 8003384:	4628      	mov	r0, r5
 8003386:	9205      	str	r2, [sp, #20]
 8003388:	47b8      	blx	r7
 800338a:	3001      	adds	r0, #1
 800338c:	f43f ae97 	beq.w	80030be <_printf_float+0xc2>
 8003390:	9a05      	ldr	r2, [sp, #20]
 8003392:	f10b 0b01 	add.w	fp, fp, #1
 8003396:	e7b9      	b.n	800330c <_printf_float+0x310>
 8003398:	ee18 3a10 	vmov	r3, s16
 800339c:	4652      	mov	r2, sl
 800339e:	4631      	mov	r1, r6
 80033a0:	4628      	mov	r0, r5
 80033a2:	47b8      	blx	r7
 80033a4:	3001      	adds	r0, #1
 80033a6:	d1be      	bne.n	8003326 <_printf_float+0x32a>
 80033a8:	e689      	b.n	80030be <_printf_float+0xc2>
 80033aa:	9a05      	ldr	r2, [sp, #20]
 80033ac:	464b      	mov	r3, r9
 80033ae:	4442      	add	r2, r8
 80033b0:	4631      	mov	r1, r6
 80033b2:	4628      	mov	r0, r5
 80033b4:	47b8      	blx	r7
 80033b6:	3001      	adds	r0, #1
 80033b8:	d1c1      	bne.n	800333e <_printf_float+0x342>
 80033ba:	e680      	b.n	80030be <_printf_float+0xc2>
 80033bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80033be:	2a01      	cmp	r2, #1
 80033c0:	dc01      	bgt.n	80033c6 <_printf_float+0x3ca>
 80033c2:	07db      	lsls	r3, r3, #31
 80033c4:	d538      	bpl.n	8003438 <_printf_float+0x43c>
 80033c6:	2301      	movs	r3, #1
 80033c8:	4642      	mov	r2, r8
 80033ca:	4631      	mov	r1, r6
 80033cc:	4628      	mov	r0, r5
 80033ce:	47b8      	blx	r7
 80033d0:	3001      	adds	r0, #1
 80033d2:	f43f ae74 	beq.w	80030be <_printf_float+0xc2>
 80033d6:	ee18 3a10 	vmov	r3, s16
 80033da:	4652      	mov	r2, sl
 80033dc:	4631      	mov	r1, r6
 80033de:	4628      	mov	r0, r5
 80033e0:	47b8      	blx	r7
 80033e2:	3001      	adds	r0, #1
 80033e4:	f43f ae6b 	beq.w	80030be <_printf_float+0xc2>
 80033e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80033ec:	2200      	movs	r2, #0
 80033ee:	2300      	movs	r3, #0
 80033f0:	f7fd fb6a 	bl	8000ac8 <__aeabi_dcmpeq>
 80033f4:	b9d8      	cbnz	r0, 800342e <_printf_float+0x432>
 80033f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033f8:	f108 0201 	add.w	r2, r8, #1
 80033fc:	3b01      	subs	r3, #1
 80033fe:	4631      	mov	r1, r6
 8003400:	4628      	mov	r0, r5
 8003402:	47b8      	blx	r7
 8003404:	3001      	adds	r0, #1
 8003406:	d10e      	bne.n	8003426 <_printf_float+0x42a>
 8003408:	e659      	b.n	80030be <_printf_float+0xc2>
 800340a:	2301      	movs	r3, #1
 800340c:	4652      	mov	r2, sl
 800340e:	4631      	mov	r1, r6
 8003410:	4628      	mov	r0, r5
 8003412:	47b8      	blx	r7
 8003414:	3001      	adds	r0, #1
 8003416:	f43f ae52 	beq.w	80030be <_printf_float+0xc2>
 800341a:	f108 0801 	add.w	r8, r8, #1
 800341e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003420:	3b01      	subs	r3, #1
 8003422:	4543      	cmp	r3, r8
 8003424:	dcf1      	bgt.n	800340a <_printf_float+0x40e>
 8003426:	464b      	mov	r3, r9
 8003428:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800342c:	e6dc      	b.n	80031e8 <_printf_float+0x1ec>
 800342e:	f04f 0800 	mov.w	r8, #0
 8003432:	f104 0a1a 	add.w	sl, r4, #26
 8003436:	e7f2      	b.n	800341e <_printf_float+0x422>
 8003438:	2301      	movs	r3, #1
 800343a:	4642      	mov	r2, r8
 800343c:	e7df      	b.n	80033fe <_printf_float+0x402>
 800343e:	2301      	movs	r3, #1
 8003440:	464a      	mov	r2, r9
 8003442:	4631      	mov	r1, r6
 8003444:	4628      	mov	r0, r5
 8003446:	47b8      	blx	r7
 8003448:	3001      	adds	r0, #1
 800344a:	f43f ae38 	beq.w	80030be <_printf_float+0xc2>
 800344e:	f108 0801 	add.w	r8, r8, #1
 8003452:	68e3      	ldr	r3, [r4, #12]
 8003454:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003456:	1a5b      	subs	r3, r3, r1
 8003458:	4543      	cmp	r3, r8
 800345a:	dcf0      	bgt.n	800343e <_printf_float+0x442>
 800345c:	e6fa      	b.n	8003254 <_printf_float+0x258>
 800345e:	f04f 0800 	mov.w	r8, #0
 8003462:	f104 0919 	add.w	r9, r4, #25
 8003466:	e7f4      	b.n	8003452 <_printf_float+0x456>

08003468 <_printf_common>:
 8003468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800346c:	4616      	mov	r6, r2
 800346e:	4699      	mov	r9, r3
 8003470:	688a      	ldr	r2, [r1, #8]
 8003472:	690b      	ldr	r3, [r1, #16]
 8003474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003478:	4293      	cmp	r3, r2
 800347a:	bfb8      	it	lt
 800347c:	4613      	movlt	r3, r2
 800347e:	6033      	str	r3, [r6, #0]
 8003480:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003484:	4607      	mov	r7, r0
 8003486:	460c      	mov	r4, r1
 8003488:	b10a      	cbz	r2, 800348e <_printf_common+0x26>
 800348a:	3301      	adds	r3, #1
 800348c:	6033      	str	r3, [r6, #0]
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	0699      	lsls	r1, r3, #26
 8003492:	bf42      	ittt	mi
 8003494:	6833      	ldrmi	r3, [r6, #0]
 8003496:	3302      	addmi	r3, #2
 8003498:	6033      	strmi	r3, [r6, #0]
 800349a:	6825      	ldr	r5, [r4, #0]
 800349c:	f015 0506 	ands.w	r5, r5, #6
 80034a0:	d106      	bne.n	80034b0 <_printf_common+0x48>
 80034a2:	f104 0a19 	add.w	sl, r4, #25
 80034a6:	68e3      	ldr	r3, [r4, #12]
 80034a8:	6832      	ldr	r2, [r6, #0]
 80034aa:	1a9b      	subs	r3, r3, r2
 80034ac:	42ab      	cmp	r3, r5
 80034ae:	dc26      	bgt.n	80034fe <_printf_common+0x96>
 80034b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034b4:	1e13      	subs	r3, r2, #0
 80034b6:	6822      	ldr	r2, [r4, #0]
 80034b8:	bf18      	it	ne
 80034ba:	2301      	movne	r3, #1
 80034bc:	0692      	lsls	r2, r2, #26
 80034be:	d42b      	bmi.n	8003518 <_printf_common+0xb0>
 80034c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034c4:	4649      	mov	r1, r9
 80034c6:	4638      	mov	r0, r7
 80034c8:	47c0      	blx	r8
 80034ca:	3001      	adds	r0, #1
 80034cc:	d01e      	beq.n	800350c <_printf_common+0xa4>
 80034ce:	6823      	ldr	r3, [r4, #0]
 80034d0:	68e5      	ldr	r5, [r4, #12]
 80034d2:	6832      	ldr	r2, [r6, #0]
 80034d4:	f003 0306 	and.w	r3, r3, #6
 80034d8:	2b04      	cmp	r3, #4
 80034da:	bf08      	it	eq
 80034dc:	1aad      	subeq	r5, r5, r2
 80034de:	68a3      	ldr	r3, [r4, #8]
 80034e0:	6922      	ldr	r2, [r4, #16]
 80034e2:	bf0c      	ite	eq
 80034e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034e8:	2500      	movne	r5, #0
 80034ea:	4293      	cmp	r3, r2
 80034ec:	bfc4      	itt	gt
 80034ee:	1a9b      	subgt	r3, r3, r2
 80034f0:	18ed      	addgt	r5, r5, r3
 80034f2:	2600      	movs	r6, #0
 80034f4:	341a      	adds	r4, #26
 80034f6:	42b5      	cmp	r5, r6
 80034f8:	d11a      	bne.n	8003530 <_printf_common+0xc8>
 80034fa:	2000      	movs	r0, #0
 80034fc:	e008      	b.n	8003510 <_printf_common+0xa8>
 80034fe:	2301      	movs	r3, #1
 8003500:	4652      	mov	r2, sl
 8003502:	4649      	mov	r1, r9
 8003504:	4638      	mov	r0, r7
 8003506:	47c0      	blx	r8
 8003508:	3001      	adds	r0, #1
 800350a:	d103      	bne.n	8003514 <_printf_common+0xac>
 800350c:	f04f 30ff 	mov.w	r0, #4294967295
 8003510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003514:	3501      	adds	r5, #1
 8003516:	e7c6      	b.n	80034a6 <_printf_common+0x3e>
 8003518:	18e1      	adds	r1, r4, r3
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	2030      	movs	r0, #48	; 0x30
 800351e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003522:	4422      	add	r2, r4
 8003524:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003528:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800352c:	3302      	adds	r3, #2
 800352e:	e7c7      	b.n	80034c0 <_printf_common+0x58>
 8003530:	2301      	movs	r3, #1
 8003532:	4622      	mov	r2, r4
 8003534:	4649      	mov	r1, r9
 8003536:	4638      	mov	r0, r7
 8003538:	47c0      	blx	r8
 800353a:	3001      	adds	r0, #1
 800353c:	d0e6      	beq.n	800350c <_printf_common+0xa4>
 800353e:	3601      	adds	r6, #1
 8003540:	e7d9      	b.n	80034f6 <_printf_common+0x8e>
	...

08003544 <_printf_i>:
 8003544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003548:	460c      	mov	r4, r1
 800354a:	4691      	mov	r9, r2
 800354c:	7e27      	ldrb	r7, [r4, #24]
 800354e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003550:	2f78      	cmp	r7, #120	; 0x78
 8003552:	4680      	mov	r8, r0
 8003554:	469a      	mov	sl, r3
 8003556:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800355a:	d807      	bhi.n	800356c <_printf_i+0x28>
 800355c:	2f62      	cmp	r7, #98	; 0x62
 800355e:	d80a      	bhi.n	8003576 <_printf_i+0x32>
 8003560:	2f00      	cmp	r7, #0
 8003562:	f000 80d8 	beq.w	8003716 <_printf_i+0x1d2>
 8003566:	2f58      	cmp	r7, #88	; 0x58
 8003568:	f000 80a3 	beq.w	80036b2 <_printf_i+0x16e>
 800356c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003570:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003574:	e03a      	b.n	80035ec <_printf_i+0xa8>
 8003576:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800357a:	2b15      	cmp	r3, #21
 800357c:	d8f6      	bhi.n	800356c <_printf_i+0x28>
 800357e:	a001      	add	r0, pc, #4	; (adr r0, 8003584 <_printf_i+0x40>)
 8003580:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003584:	080035dd 	.word	0x080035dd
 8003588:	080035f1 	.word	0x080035f1
 800358c:	0800356d 	.word	0x0800356d
 8003590:	0800356d 	.word	0x0800356d
 8003594:	0800356d 	.word	0x0800356d
 8003598:	0800356d 	.word	0x0800356d
 800359c:	080035f1 	.word	0x080035f1
 80035a0:	0800356d 	.word	0x0800356d
 80035a4:	0800356d 	.word	0x0800356d
 80035a8:	0800356d 	.word	0x0800356d
 80035ac:	0800356d 	.word	0x0800356d
 80035b0:	080036fd 	.word	0x080036fd
 80035b4:	08003621 	.word	0x08003621
 80035b8:	080036df 	.word	0x080036df
 80035bc:	0800356d 	.word	0x0800356d
 80035c0:	0800356d 	.word	0x0800356d
 80035c4:	0800371f 	.word	0x0800371f
 80035c8:	0800356d 	.word	0x0800356d
 80035cc:	08003621 	.word	0x08003621
 80035d0:	0800356d 	.word	0x0800356d
 80035d4:	0800356d 	.word	0x0800356d
 80035d8:	080036e7 	.word	0x080036e7
 80035dc:	680b      	ldr	r3, [r1, #0]
 80035de:	1d1a      	adds	r2, r3, #4
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	600a      	str	r2, [r1, #0]
 80035e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80035e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0a3      	b.n	8003738 <_printf_i+0x1f4>
 80035f0:	6825      	ldr	r5, [r4, #0]
 80035f2:	6808      	ldr	r0, [r1, #0]
 80035f4:	062e      	lsls	r6, r5, #24
 80035f6:	f100 0304 	add.w	r3, r0, #4
 80035fa:	d50a      	bpl.n	8003612 <_printf_i+0xce>
 80035fc:	6805      	ldr	r5, [r0, #0]
 80035fe:	600b      	str	r3, [r1, #0]
 8003600:	2d00      	cmp	r5, #0
 8003602:	da03      	bge.n	800360c <_printf_i+0xc8>
 8003604:	232d      	movs	r3, #45	; 0x2d
 8003606:	426d      	negs	r5, r5
 8003608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800360c:	485e      	ldr	r0, [pc, #376]	; (8003788 <_printf_i+0x244>)
 800360e:	230a      	movs	r3, #10
 8003610:	e019      	b.n	8003646 <_printf_i+0x102>
 8003612:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003616:	6805      	ldr	r5, [r0, #0]
 8003618:	600b      	str	r3, [r1, #0]
 800361a:	bf18      	it	ne
 800361c:	b22d      	sxthne	r5, r5
 800361e:	e7ef      	b.n	8003600 <_printf_i+0xbc>
 8003620:	680b      	ldr	r3, [r1, #0]
 8003622:	6825      	ldr	r5, [r4, #0]
 8003624:	1d18      	adds	r0, r3, #4
 8003626:	6008      	str	r0, [r1, #0]
 8003628:	0628      	lsls	r0, r5, #24
 800362a:	d501      	bpl.n	8003630 <_printf_i+0xec>
 800362c:	681d      	ldr	r5, [r3, #0]
 800362e:	e002      	b.n	8003636 <_printf_i+0xf2>
 8003630:	0669      	lsls	r1, r5, #25
 8003632:	d5fb      	bpl.n	800362c <_printf_i+0xe8>
 8003634:	881d      	ldrh	r5, [r3, #0]
 8003636:	4854      	ldr	r0, [pc, #336]	; (8003788 <_printf_i+0x244>)
 8003638:	2f6f      	cmp	r7, #111	; 0x6f
 800363a:	bf0c      	ite	eq
 800363c:	2308      	moveq	r3, #8
 800363e:	230a      	movne	r3, #10
 8003640:	2100      	movs	r1, #0
 8003642:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003646:	6866      	ldr	r6, [r4, #4]
 8003648:	60a6      	str	r6, [r4, #8]
 800364a:	2e00      	cmp	r6, #0
 800364c:	bfa2      	ittt	ge
 800364e:	6821      	ldrge	r1, [r4, #0]
 8003650:	f021 0104 	bicge.w	r1, r1, #4
 8003654:	6021      	strge	r1, [r4, #0]
 8003656:	b90d      	cbnz	r5, 800365c <_printf_i+0x118>
 8003658:	2e00      	cmp	r6, #0
 800365a:	d04d      	beq.n	80036f8 <_printf_i+0x1b4>
 800365c:	4616      	mov	r6, r2
 800365e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003662:	fb03 5711 	mls	r7, r3, r1, r5
 8003666:	5dc7      	ldrb	r7, [r0, r7]
 8003668:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800366c:	462f      	mov	r7, r5
 800366e:	42bb      	cmp	r3, r7
 8003670:	460d      	mov	r5, r1
 8003672:	d9f4      	bls.n	800365e <_printf_i+0x11a>
 8003674:	2b08      	cmp	r3, #8
 8003676:	d10b      	bne.n	8003690 <_printf_i+0x14c>
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	07df      	lsls	r7, r3, #31
 800367c:	d508      	bpl.n	8003690 <_printf_i+0x14c>
 800367e:	6923      	ldr	r3, [r4, #16]
 8003680:	6861      	ldr	r1, [r4, #4]
 8003682:	4299      	cmp	r1, r3
 8003684:	bfde      	ittt	le
 8003686:	2330      	movle	r3, #48	; 0x30
 8003688:	f806 3c01 	strble.w	r3, [r6, #-1]
 800368c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003690:	1b92      	subs	r2, r2, r6
 8003692:	6122      	str	r2, [r4, #16]
 8003694:	f8cd a000 	str.w	sl, [sp]
 8003698:	464b      	mov	r3, r9
 800369a:	aa03      	add	r2, sp, #12
 800369c:	4621      	mov	r1, r4
 800369e:	4640      	mov	r0, r8
 80036a0:	f7ff fee2 	bl	8003468 <_printf_common>
 80036a4:	3001      	adds	r0, #1
 80036a6:	d14c      	bne.n	8003742 <_printf_i+0x1fe>
 80036a8:	f04f 30ff 	mov.w	r0, #4294967295
 80036ac:	b004      	add	sp, #16
 80036ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036b2:	4835      	ldr	r0, [pc, #212]	; (8003788 <_printf_i+0x244>)
 80036b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80036b8:	6823      	ldr	r3, [r4, #0]
 80036ba:	680e      	ldr	r6, [r1, #0]
 80036bc:	061f      	lsls	r7, r3, #24
 80036be:	f856 5b04 	ldr.w	r5, [r6], #4
 80036c2:	600e      	str	r6, [r1, #0]
 80036c4:	d514      	bpl.n	80036f0 <_printf_i+0x1ac>
 80036c6:	07d9      	lsls	r1, r3, #31
 80036c8:	bf44      	itt	mi
 80036ca:	f043 0320 	orrmi.w	r3, r3, #32
 80036ce:	6023      	strmi	r3, [r4, #0]
 80036d0:	b91d      	cbnz	r5, 80036da <_printf_i+0x196>
 80036d2:	6823      	ldr	r3, [r4, #0]
 80036d4:	f023 0320 	bic.w	r3, r3, #32
 80036d8:	6023      	str	r3, [r4, #0]
 80036da:	2310      	movs	r3, #16
 80036dc:	e7b0      	b.n	8003640 <_printf_i+0xfc>
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	f043 0320 	orr.w	r3, r3, #32
 80036e4:	6023      	str	r3, [r4, #0]
 80036e6:	2378      	movs	r3, #120	; 0x78
 80036e8:	4828      	ldr	r0, [pc, #160]	; (800378c <_printf_i+0x248>)
 80036ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036ee:	e7e3      	b.n	80036b8 <_printf_i+0x174>
 80036f0:	065e      	lsls	r6, r3, #25
 80036f2:	bf48      	it	mi
 80036f4:	b2ad      	uxthmi	r5, r5
 80036f6:	e7e6      	b.n	80036c6 <_printf_i+0x182>
 80036f8:	4616      	mov	r6, r2
 80036fa:	e7bb      	b.n	8003674 <_printf_i+0x130>
 80036fc:	680b      	ldr	r3, [r1, #0]
 80036fe:	6826      	ldr	r6, [r4, #0]
 8003700:	6960      	ldr	r0, [r4, #20]
 8003702:	1d1d      	adds	r5, r3, #4
 8003704:	600d      	str	r5, [r1, #0]
 8003706:	0635      	lsls	r5, r6, #24
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	d501      	bpl.n	8003710 <_printf_i+0x1cc>
 800370c:	6018      	str	r0, [r3, #0]
 800370e:	e002      	b.n	8003716 <_printf_i+0x1d2>
 8003710:	0671      	lsls	r1, r6, #25
 8003712:	d5fb      	bpl.n	800370c <_printf_i+0x1c8>
 8003714:	8018      	strh	r0, [r3, #0]
 8003716:	2300      	movs	r3, #0
 8003718:	6123      	str	r3, [r4, #16]
 800371a:	4616      	mov	r6, r2
 800371c:	e7ba      	b.n	8003694 <_printf_i+0x150>
 800371e:	680b      	ldr	r3, [r1, #0]
 8003720:	1d1a      	adds	r2, r3, #4
 8003722:	600a      	str	r2, [r1, #0]
 8003724:	681e      	ldr	r6, [r3, #0]
 8003726:	6862      	ldr	r2, [r4, #4]
 8003728:	2100      	movs	r1, #0
 800372a:	4630      	mov	r0, r6
 800372c:	f7fc fd58 	bl	80001e0 <memchr>
 8003730:	b108      	cbz	r0, 8003736 <_printf_i+0x1f2>
 8003732:	1b80      	subs	r0, r0, r6
 8003734:	6060      	str	r0, [r4, #4]
 8003736:	6863      	ldr	r3, [r4, #4]
 8003738:	6123      	str	r3, [r4, #16]
 800373a:	2300      	movs	r3, #0
 800373c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003740:	e7a8      	b.n	8003694 <_printf_i+0x150>
 8003742:	6923      	ldr	r3, [r4, #16]
 8003744:	4632      	mov	r2, r6
 8003746:	4649      	mov	r1, r9
 8003748:	4640      	mov	r0, r8
 800374a:	47d0      	blx	sl
 800374c:	3001      	adds	r0, #1
 800374e:	d0ab      	beq.n	80036a8 <_printf_i+0x164>
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	079b      	lsls	r3, r3, #30
 8003754:	d413      	bmi.n	800377e <_printf_i+0x23a>
 8003756:	68e0      	ldr	r0, [r4, #12]
 8003758:	9b03      	ldr	r3, [sp, #12]
 800375a:	4298      	cmp	r0, r3
 800375c:	bfb8      	it	lt
 800375e:	4618      	movlt	r0, r3
 8003760:	e7a4      	b.n	80036ac <_printf_i+0x168>
 8003762:	2301      	movs	r3, #1
 8003764:	4632      	mov	r2, r6
 8003766:	4649      	mov	r1, r9
 8003768:	4640      	mov	r0, r8
 800376a:	47d0      	blx	sl
 800376c:	3001      	adds	r0, #1
 800376e:	d09b      	beq.n	80036a8 <_printf_i+0x164>
 8003770:	3501      	adds	r5, #1
 8003772:	68e3      	ldr	r3, [r4, #12]
 8003774:	9903      	ldr	r1, [sp, #12]
 8003776:	1a5b      	subs	r3, r3, r1
 8003778:	42ab      	cmp	r3, r5
 800377a:	dcf2      	bgt.n	8003762 <_printf_i+0x21e>
 800377c:	e7eb      	b.n	8003756 <_printf_i+0x212>
 800377e:	2500      	movs	r5, #0
 8003780:	f104 0619 	add.w	r6, r4, #25
 8003784:	e7f5      	b.n	8003772 <_printf_i+0x22e>
 8003786:	bf00      	nop
 8003788:	08005c5e 	.word	0x08005c5e
 800378c:	08005c6f 	.word	0x08005c6f

08003790 <siprintf>:
 8003790:	b40e      	push	{r1, r2, r3}
 8003792:	b500      	push	{lr}
 8003794:	b09c      	sub	sp, #112	; 0x70
 8003796:	ab1d      	add	r3, sp, #116	; 0x74
 8003798:	9002      	str	r0, [sp, #8]
 800379a:	9006      	str	r0, [sp, #24]
 800379c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037a0:	4809      	ldr	r0, [pc, #36]	; (80037c8 <siprintf+0x38>)
 80037a2:	9107      	str	r1, [sp, #28]
 80037a4:	9104      	str	r1, [sp, #16]
 80037a6:	4909      	ldr	r1, [pc, #36]	; (80037cc <siprintf+0x3c>)
 80037a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80037ac:	9105      	str	r1, [sp, #20]
 80037ae:	6800      	ldr	r0, [r0, #0]
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	a902      	add	r1, sp, #8
 80037b4:	f001 fb3a 	bl	8004e2c <_svfiprintf_r>
 80037b8:	9b02      	ldr	r3, [sp, #8]
 80037ba:	2200      	movs	r2, #0
 80037bc:	701a      	strb	r2, [r3, #0]
 80037be:	b01c      	add	sp, #112	; 0x70
 80037c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80037c4:	b003      	add	sp, #12
 80037c6:	4770      	bx	lr
 80037c8:	2000000c 	.word	0x2000000c
 80037cc:	ffff0208 	.word	0xffff0208

080037d0 <strcpy>:
 80037d0:	4603      	mov	r3, r0
 80037d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037d6:	f803 2b01 	strb.w	r2, [r3], #1
 80037da:	2a00      	cmp	r2, #0
 80037dc:	d1f9      	bne.n	80037d2 <strcpy+0x2>
 80037de:	4770      	bx	lr

080037e0 <quorem>:
 80037e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037e4:	6903      	ldr	r3, [r0, #16]
 80037e6:	690c      	ldr	r4, [r1, #16]
 80037e8:	42a3      	cmp	r3, r4
 80037ea:	4607      	mov	r7, r0
 80037ec:	f2c0 8081 	blt.w	80038f2 <quorem+0x112>
 80037f0:	3c01      	subs	r4, #1
 80037f2:	f101 0814 	add.w	r8, r1, #20
 80037f6:	f100 0514 	add.w	r5, r0, #20
 80037fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80037fe:	9301      	str	r3, [sp, #4]
 8003800:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003804:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003808:	3301      	adds	r3, #1
 800380a:	429a      	cmp	r2, r3
 800380c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003810:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003814:	fbb2 f6f3 	udiv	r6, r2, r3
 8003818:	d331      	bcc.n	800387e <quorem+0x9e>
 800381a:	f04f 0e00 	mov.w	lr, #0
 800381e:	4640      	mov	r0, r8
 8003820:	46ac      	mov	ip, r5
 8003822:	46f2      	mov	sl, lr
 8003824:	f850 2b04 	ldr.w	r2, [r0], #4
 8003828:	b293      	uxth	r3, r2
 800382a:	fb06 e303 	mla	r3, r6, r3, lr
 800382e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003832:	b29b      	uxth	r3, r3
 8003834:	ebaa 0303 	sub.w	r3, sl, r3
 8003838:	0c12      	lsrs	r2, r2, #16
 800383a:	f8dc a000 	ldr.w	sl, [ip]
 800383e:	fb06 e202 	mla	r2, r6, r2, lr
 8003842:	fa13 f38a 	uxtah	r3, r3, sl
 8003846:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800384a:	fa1f fa82 	uxth.w	sl, r2
 800384e:	f8dc 2000 	ldr.w	r2, [ip]
 8003852:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003856:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800385a:	b29b      	uxth	r3, r3
 800385c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003860:	4581      	cmp	r9, r0
 8003862:	f84c 3b04 	str.w	r3, [ip], #4
 8003866:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800386a:	d2db      	bcs.n	8003824 <quorem+0x44>
 800386c:	f855 300b 	ldr.w	r3, [r5, fp]
 8003870:	b92b      	cbnz	r3, 800387e <quorem+0x9e>
 8003872:	9b01      	ldr	r3, [sp, #4]
 8003874:	3b04      	subs	r3, #4
 8003876:	429d      	cmp	r5, r3
 8003878:	461a      	mov	r2, r3
 800387a:	d32e      	bcc.n	80038da <quorem+0xfa>
 800387c:	613c      	str	r4, [r7, #16]
 800387e:	4638      	mov	r0, r7
 8003880:	f001 f8be 	bl	8004a00 <__mcmp>
 8003884:	2800      	cmp	r0, #0
 8003886:	db24      	blt.n	80038d2 <quorem+0xf2>
 8003888:	3601      	adds	r6, #1
 800388a:	4628      	mov	r0, r5
 800388c:	f04f 0c00 	mov.w	ip, #0
 8003890:	f858 2b04 	ldr.w	r2, [r8], #4
 8003894:	f8d0 e000 	ldr.w	lr, [r0]
 8003898:	b293      	uxth	r3, r2
 800389a:	ebac 0303 	sub.w	r3, ip, r3
 800389e:	0c12      	lsrs	r2, r2, #16
 80038a0:	fa13 f38e 	uxtah	r3, r3, lr
 80038a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80038a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80038b2:	45c1      	cmp	r9, r8
 80038b4:	f840 3b04 	str.w	r3, [r0], #4
 80038b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80038bc:	d2e8      	bcs.n	8003890 <quorem+0xb0>
 80038be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80038c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80038c6:	b922      	cbnz	r2, 80038d2 <quorem+0xf2>
 80038c8:	3b04      	subs	r3, #4
 80038ca:	429d      	cmp	r5, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	d30a      	bcc.n	80038e6 <quorem+0x106>
 80038d0:	613c      	str	r4, [r7, #16]
 80038d2:	4630      	mov	r0, r6
 80038d4:	b003      	add	sp, #12
 80038d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038da:	6812      	ldr	r2, [r2, #0]
 80038dc:	3b04      	subs	r3, #4
 80038de:	2a00      	cmp	r2, #0
 80038e0:	d1cc      	bne.n	800387c <quorem+0x9c>
 80038e2:	3c01      	subs	r4, #1
 80038e4:	e7c7      	b.n	8003876 <quorem+0x96>
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	3b04      	subs	r3, #4
 80038ea:	2a00      	cmp	r2, #0
 80038ec:	d1f0      	bne.n	80038d0 <quorem+0xf0>
 80038ee:	3c01      	subs	r4, #1
 80038f0:	e7eb      	b.n	80038ca <quorem+0xea>
 80038f2:	2000      	movs	r0, #0
 80038f4:	e7ee      	b.n	80038d4 <quorem+0xf4>
	...

080038f8 <_dtoa_r>:
 80038f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038fc:	ed2d 8b02 	vpush	{d8}
 8003900:	ec57 6b10 	vmov	r6, r7, d0
 8003904:	b095      	sub	sp, #84	; 0x54
 8003906:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003908:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800390c:	9105      	str	r1, [sp, #20]
 800390e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003912:	4604      	mov	r4, r0
 8003914:	9209      	str	r2, [sp, #36]	; 0x24
 8003916:	930f      	str	r3, [sp, #60]	; 0x3c
 8003918:	b975      	cbnz	r5, 8003938 <_dtoa_r+0x40>
 800391a:	2010      	movs	r0, #16
 800391c:	f000 fddc 	bl	80044d8 <malloc>
 8003920:	4602      	mov	r2, r0
 8003922:	6260      	str	r0, [r4, #36]	; 0x24
 8003924:	b920      	cbnz	r0, 8003930 <_dtoa_r+0x38>
 8003926:	4bb2      	ldr	r3, [pc, #712]	; (8003bf0 <_dtoa_r+0x2f8>)
 8003928:	21ea      	movs	r1, #234	; 0xea
 800392a:	48b2      	ldr	r0, [pc, #712]	; (8003bf4 <_dtoa_r+0x2fc>)
 800392c:	f001 fb8e 	bl	800504c <__assert_func>
 8003930:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003934:	6005      	str	r5, [r0, #0]
 8003936:	60c5      	str	r5, [r0, #12]
 8003938:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800393a:	6819      	ldr	r1, [r3, #0]
 800393c:	b151      	cbz	r1, 8003954 <_dtoa_r+0x5c>
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	604a      	str	r2, [r1, #4]
 8003942:	2301      	movs	r3, #1
 8003944:	4093      	lsls	r3, r2
 8003946:	608b      	str	r3, [r1, #8]
 8003948:	4620      	mov	r0, r4
 800394a:	f000 fe1b 	bl	8004584 <_Bfree>
 800394e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	1e3b      	subs	r3, r7, #0
 8003956:	bfb9      	ittee	lt
 8003958:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800395c:	9303      	strlt	r3, [sp, #12]
 800395e:	2300      	movge	r3, #0
 8003960:	f8c8 3000 	strge.w	r3, [r8]
 8003964:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003968:	4ba3      	ldr	r3, [pc, #652]	; (8003bf8 <_dtoa_r+0x300>)
 800396a:	bfbc      	itt	lt
 800396c:	2201      	movlt	r2, #1
 800396e:	f8c8 2000 	strlt.w	r2, [r8]
 8003972:	ea33 0309 	bics.w	r3, r3, r9
 8003976:	d11b      	bne.n	80039b0 <_dtoa_r+0xb8>
 8003978:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800397a:	f242 730f 	movw	r3, #9999	; 0x270f
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003984:	4333      	orrs	r3, r6
 8003986:	f000 857a 	beq.w	800447e <_dtoa_r+0xb86>
 800398a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800398c:	b963      	cbnz	r3, 80039a8 <_dtoa_r+0xb0>
 800398e:	4b9b      	ldr	r3, [pc, #620]	; (8003bfc <_dtoa_r+0x304>)
 8003990:	e024      	b.n	80039dc <_dtoa_r+0xe4>
 8003992:	4b9b      	ldr	r3, [pc, #620]	; (8003c00 <_dtoa_r+0x308>)
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	3308      	adds	r3, #8
 8003998:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	9800      	ldr	r0, [sp, #0]
 800399e:	b015      	add	sp, #84	; 0x54
 80039a0:	ecbd 8b02 	vpop	{d8}
 80039a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039a8:	4b94      	ldr	r3, [pc, #592]	; (8003bfc <_dtoa_r+0x304>)
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	3303      	adds	r3, #3
 80039ae:	e7f3      	b.n	8003998 <_dtoa_r+0xa0>
 80039b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80039b4:	2200      	movs	r2, #0
 80039b6:	ec51 0b17 	vmov	r0, r1, d7
 80039ba:	2300      	movs	r3, #0
 80039bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80039c0:	f7fd f882 	bl	8000ac8 <__aeabi_dcmpeq>
 80039c4:	4680      	mov	r8, r0
 80039c6:	b158      	cbz	r0, 80039e0 <_dtoa_r+0xe8>
 80039c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80039ca:	2301      	movs	r3, #1
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 8551 	beq.w	8004478 <_dtoa_r+0xb80>
 80039d6:	488b      	ldr	r0, [pc, #556]	; (8003c04 <_dtoa_r+0x30c>)
 80039d8:	6018      	str	r0, [r3, #0]
 80039da:	1e43      	subs	r3, r0, #1
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	e7dd      	b.n	800399c <_dtoa_r+0xa4>
 80039e0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80039e4:	aa12      	add	r2, sp, #72	; 0x48
 80039e6:	a913      	add	r1, sp, #76	; 0x4c
 80039e8:	4620      	mov	r0, r4
 80039ea:	f001 f8ad 	bl	8004b48 <__d2b>
 80039ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80039f2:	4683      	mov	fp, r0
 80039f4:	2d00      	cmp	r5, #0
 80039f6:	d07c      	beq.n	8003af2 <_dtoa_r+0x1fa>
 80039f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80039fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80039fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a02:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8003a06:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003a0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8003a0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003a12:	4b7d      	ldr	r3, [pc, #500]	; (8003c08 <_dtoa_r+0x310>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	4630      	mov	r0, r6
 8003a18:	4639      	mov	r1, r7
 8003a1a:	f7fc fc35 	bl	8000288 <__aeabi_dsub>
 8003a1e:	a36e      	add	r3, pc, #440	; (adr r3, 8003bd8 <_dtoa_r+0x2e0>)
 8003a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a24:	f7fc fde8 	bl	80005f8 <__aeabi_dmul>
 8003a28:	a36d      	add	r3, pc, #436	; (adr r3, 8003be0 <_dtoa_r+0x2e8>)
 8003a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2e:	f7fc fc2d 	bl	800028c <__adddf3>
 8003a32:	4606      	mov	r6, r0
 8003a34:	4628      	mov	r0, r5
 8003a36:	460f      	mov	r7, r1
 8003a38:	f7fc fd74 	bl	8000524 <__aeabi_i2d>
 8003a3c:	a36a      	add	r3, pc, #424	; (adr r3, 8003be8 <_dtoa_r+0x2f0>)
 8003a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a42:	f7fc fdd9 	bl	80005f8 <__aeabi_dmul>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4630      	mov	r0, r6
 8003a4c:	4639      	mov	r1, r7
 8003a4e:	f7fc fc1d 	bl	800028c <__adddf3>
 8003a52:	4606      	mov	r6, r0
 8003a54:	460f      	mov	r7, r1
 8003a56:	f7fd f87f 	bl	8000b58 <__aeabi_d2iz>
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	4682      	mov	sl, r0
 8003a5e:	2300      	movs	r3, #0
 8003a60:	4630      	mov	r0, r6
 8003a62:	4639      	mov	r1, r7
 8003a64:	f7fd f83a 	bl	8000adc <__aeabi_dcmplt>
 8003a68:	b148      	cbz	r0, 8003a7e <_dtoa_r+0x186>
 8003a6a:	4650      	mov	r0, sl
 8003a6c:	f7fc fd5a 	bl	8000524 <__aeabi_i2d>
 8003a70:	4632      	mov	r2, r6
 8003a72:	463b      	mov	r3, r7
 8003a74:	f7fd f828 	bl	8000ac8 <__aeabi_dcmpeq>
 8003a78:	b908      	cbnz	r0, 8003a7e <_dtoa_r+0x186>
 8003a7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003a7e:	f1ba 0f16 	cmp.w	sl, #22
 8003a82:	d854      	bhi.n	8003b2e <_dtoa_r+0x236>
 8003a84:	4b61      	ldr	r3, [pc, #388]	; (8003c0c <_dtoa_r+0x314>)
 8003a86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003a92:	f7fd f823 	bl	8000adc <__aeabi_dcmplt>
 8003a96:	2800      	cmp	r0, #0
 8003a98:	d04b      	beq.n	8003b32 <_dtoa_r+0x23a>
 8003a9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	930e      	str	r3, [sp, #56]	; 0x38
 8003aa2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003aa4:	1b5d      	subs	r5, r3, r5
 8003aa6:	1e6b      	subs	r3, r5, #1
 8003aa8:	9304      	str	r3, [sp, #16]
 8003aaa:	bf43      	ittte	mi
 8003aac:	2300      	movmi	r3, #0
 8003aae:	f1c5 0801 	rsbmi	r8, r5, #1
 8003ab2:	9304      	strmi	r3, [sp, #16]
 8003ab4:	f04f 0800 	movpl.w	r8, #0
 8003ab8:	f1ba 0f00 	cmp.w	sl, #0
 8003abc:	db3b      	blt.n	8003b36 <_dtoa_r+0x23e>
 8003abe:	9b04      	ldr	r3, [sp, #16]
 8003ac0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8003ac4:	4453      	add	r3, sl
 8003ac6:	9304      	str	r3, [sp, #16]
 8003ac8:	2300      	movs	r3, #0
 8003aca:	9306      	str	r3, [sp, #24]
 8003acc:	9b05      	ldr	r3, [sp, #20]
 8003ace:	2b09      	cmp	r3, #9
 8003ad0:	d869      	bhi.n	8003ba6 <_dtoa_r+0x2ae>
 8003ad2:	2b05      	cmp	r3, #5
 8003ad4:	bfc4      	itt	gt
 8003ad6:	3b04      	subgt	r3, #4
 8003ad8:	9305      	strgt	r3, [sp, #20]
 8003ada:	9b05      	ldr	r3, [sp, #20]
 8003adc:	f1a3 0302 	sub.w	r3, r3, #2
 8003ae0:	bfcc      	ite	gt
 8003ae2:	2500      	movgt	r5, #0
 8003ae4:	2501      	movle	r5, #1
 8003ae6:	2b03      	cmp	r3, #3
 8003ae8:	d869      	bhi.n	8003bbe <_dtoa_r+0x2c6>
 8003aea:	e8df f003 	tbb	[pc, r3]
 8003aee:	4e2c      	.short	0x4e2c
 8003af0:	5a4c      	.short	0x5a4c
 8003af2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003af6:	441d      	add	r5, r3
 8003af8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	bfc1      	itttt	gt
 8003b00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003b04:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8003b08:	fa09 f303 	lslgt.w	r3, r9, r3
 8003b0c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003b10:	bfda      	itte	le
 8003b12:	f1c3 0320 	rsble	r3, r3, #32
 8003b16:	fa06 f003 	lslle.w	r0, r6, r3
 8003b1a:	4318      	orrgt	r0, r3
 8003b1c:	f7fc fcf2 	bl	8000504 <__aeabi_ui2d>
 8003b20:	2301      	movs	r3, #1
 8003b22:	4606      	mov	r6, r0
 8003b24:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8003b28:	3d01      	subs	r5, #1
 8003b2a:	9310      	str	r3, [sp, #64]	; 0x40
 8003b2c:	e771      	b.n	8003a12 <_dtoa_r+0x11a>
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e7b6      	b.n	8003aa0 <_dtoa_r+0x1a8>
 8003b32:	900e      	str	r0, [sp, #56]	; 0x38
 8003b34:	e7b5      	b.n	8003aa2 <_dtoa_r+0x1aa>
 8003b36:	f1ca 0300 	rsb	r3, sl, #0
 8003b3a:	9306      	str	r3, [sp, #24]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	eba8 080a 	sub.w	r8, r8, sl
 8003b42:	930d      	str	r3, [sp, #52]	; 0x34
 8003b44:	e7c2      	b.n	8003acc <_dtoa_r+0x1d4>
 8003b46:	2300      	movs	r3, #0
 8003b48:	9308      	str	r3, [sp, #32]
 8003b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	dc39      	bgt.n	8003bc4 <_dtoa_r+0x2cc>
 8003b50:	f04f 0901 	mov.w	r9, #1
 8003b54:	f8cd 9004 	str.w	r9, [sp, #4]
 8003b58:	464b      	mov	r3, r9
 8003b5a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003b5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003b60:	2200      	movs	r2, #0
 8003b62:	6042      	str	r2, [r0, #4]
 8003b64:	2204      	movs	r2, #4
 8003b66:	f102 0614 	add.w	r6, r2, #20
 8003b6a:	429e      	cmp	r6, r3
 8003b6c:	6841      	ldr	r1, [r0, #4]
 8003b6e:	d92f      	bls.n	8003bd0 <_dtoa_r+0x2d8>
 8003b70:	4620      	mov	r0, r4
 8003b72:	f000 fcc7 	bl	8004504 <_Balloc>
 8003b76:	9000      	str	r0, [sp, #0]
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	d14b      	bne.n	8003c14 <_dtoa_r+0x31c>
 8003b7c:	4b24      	ldr	r3, [pc, #144]	; (8003c10 <_dtoa_r+0x318>)
 8003b7e:	4602      	mov	r2, r0
 8003b80:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003b84:	e6d1      	b.n	800392a <_dtoa_r+0x32>
 8003b86:	2301      	movs	r3, #1
 8003b88:	e7de      	b.n	8003b48 <_dtoa_r+0x250>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	9308      	str	r3, [sp, #32]
 8003b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b90:	eb0a 0903 	add.w	r9, sl, r3
 8003b94:	f109 0301 	add.w	r3, r9, #1
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	9301      	str	r3, [sp, #4]
 8003b9c:	bfb8      	it	lt
 8003b9e:	2301      	movlt	r3, #1
 8003ba0:	e7dd      	b.n	8003b5e <_dtoa_r+0x266>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e7f2      	b.n	8003b8c <_dtoa_r+0x294>
 8003ba6:	2501      	movs	r5, #1
 8003ba8:	2300      	movs	r3, #0
 8003baa:	9305      	str	r3, [sp, #20]
 8003bac:	9508      	str	r5, [sp, #32]
 8003bae:	f04f 39ff 	mov.w	r9, #4294967295
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f8cd 9004 	str.w	r9, [sp, #4]
 8003bb8:	2312      	movs	r3, #18
 8003bba:	9209      	str	r2, [sp, #36]	; 0x24
 8003bbc:	e7cf      	b.n	8003b5e <_dtoa_r+0x266>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	9308      	str	r3, [sp, #32]
 8003bc2:	e7f4      	b.n	8003bae <_dtoa_r+0x2b6>
 8003bc4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003bc8:	f8cd 9004 	str.w	r9, [sp, #4]
 8003bcc:	464b      	mov	r3, r9
 8003bce:	e7c6      	b.n	8003b5e <_dtoa_r+0x266>
 8003bd0:	3101      	adds	r1, #1
 8003bd2:	6041      	str	r1, [r0, #4]
 8003bd4:	0052      	lsls	r2, r2, #1
 8003bd6:	e7c6      	b.n	8003b66 <_dtoa_r+0x26e>
 8003bd8:	636f4361 	.word	0x636f4361
 8003bdc:	3fd287a7 	.word	0x3fd287a7
 8003be0:	8b60c8b3 	.word	0x8b60c8b3
 8003be4:	3fc68a28 	.word	0x3fc68a28
 8003be8:	509f79fb 	.word	0x509f79fb
 8003bec:	3fd34413 	.word	0x3fd34413
 8003bf0:	08005c8d 	.word	0x08005c8d
 8003bf4:	08005ca4 	.word	0x08005ca4
 8003bf8:	7ff00000 	.word	0x7ff00000
 8003bfc:	08005c89 	.word	0x08005c89
 8003c00:	08005c80 	.word	0x08005c80
 8003c04:	08005c5d 	.word	0x08005c5d
 8003c08:	3ff80000 	.word	0x3ff80000
 8003c0c:	08005da0 	.word	0x08005da0
 8003c10:	08005d03 	.word	0x08005d03
 8003c14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c16:	9a00      	ldr	r2, [sp, #0]
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	9b01      	ldr	r3, [sp, #4]
 8003c1c:	2b0e      	cmp	r3, #14
 8003c1e:	f200 80ad 	bhi.w	8003d7c <_dtoa_r+0x484>
 8003c22:	2d00      	cmp	r5, #0
 8003c24:	f000 80aa 	beq.w	8003d7c <_dtoa_r+0x484>
 8003c28:	f1ba 0f00 	cmp.w	sl, #0
 8003c2c:	dd36      	ble.n	8003c9c <_dtoa_r+0x3a4>
 8003c2e:	4ac3      	ldr	r2, [pc, #780]	; (8003f3c <_dtoa_r+0x644>)
 8003c30:	f00a 030f 	and.w	r3, sl, #15
 8003c34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003c38:	ed93 7b00 	vldr	d7, [r3]
 8003c3c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8003c40:	ea4f 172a 	mov.w	r7, sl, asr #4
 8003c44:	eeb0 8a47 	vmov.f32	s16, s14
 8003c48:	eef0 8a67 	vmov.f32	s17, s15
 8003c4c:	d016      	beq.n	8003c7c <_dtoa_r+0x384>
 8003c4e:	4bbc      	ldr	r3, [pc, #752]	; (8003f40 <_dtoa_r+0x648>)
 8003c50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003c54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003c58:	f7fc fdf8 	bl	800084c <__aeabi_ddiv>
 8003c5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c60:	f007 070f 	and.w	r7, r7, #15
 8003c64:	2503      	movs	r5, #3
 8003c66:	4eb6      	ldr	r6, [pc, #728]	; (8003f40 <_dtoa_r+0x648>)
 8003c68:	b957      	cbnz	r7, 8003c80 <_dtoa_r+0x388>
 8003c6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c6e:	ec53 2b18 	vmov	r2, r3, d8
 8003c72:	f7fc fdeb 	bl	800084c <__aeabi_ddiv>
 8003c76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c7a:	e029      	b.n	8003cd0 <_dtoa_r+0x3d8>
 8003c7c:	2502      	movs	r5, #2
 8003c7e:	e7f2      	b.n	8003c66 <_dtoa_r+0x36e>
 8003c80:	07f9      	lsls	r1, r7, #31
 8003c82:	d508      	bpl.n	8003c96 <_dtoa_r+0x39e>
 8003c84:	ec51 0b18 	vmov	r0, r1, d8
 8003c88:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003c8c:	f7fc fcb4 	bl	80005f8 <__aeabi_dmul>
 8003c90:	ec41 0b18 	vmov	d8, r0, r1
 8003c94:	3501      	adds	r5, #1
 8003c96:	107f      	asrs	r7, r7, #1
 8003c98:	3608      	adds	r6, #8
 8003c9a:	e7e5      	b.n	8003c68 <_dtoa_r+0x370>
 8003c9c:	f000 80a6 	beq.w	8003dec <_dtoa_r+0x4f4>
 8003ca0:	f1ca 0600 	rsb	r6, sl, #0
 8003ca4:	4ba5      	ldr	r3, [pc, #660]	; (8003f3c <_dtoa_r+0x644>)
 8003ca6:	4fa6      	ldr	r7, [pc, #664]	; (8003f40 <_dtoa_r+0x648>)
 8003ca8:	f006 020f 	and.w	r2, r6, #15
 8003cac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003cb8:	f7fc fc9e 	bl	80005f8 <__aeabi_dmul>
 8003cbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003cc0:	1136      	asrs	r6, r6, #4
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	2502      	movs	r5, #2
 8003cc6:	2e00      	cmp	r6, #0
 8003cc8:	f040 8085 	bne.w	8003dd6 <_dtoa_r+0x4de>
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1d2      	bne.n	8003c76 <_dtoa_r+0x37e>
 8003cd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 808c 	beq.w	8003df0 <_dtoa_r+0x4f8>
 8003cd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003cdc:	4b99      	ldr	r3, [pc, #612]	; (8003f44 <_dtoa_r+0x64c>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	4639      	mov	r1, r7
 8003ce4:	f7fc fefa 	bl	8000adc <__aeabi_dcmplt>
 8003ce8:	2800      	cmp	r0, #0
 8003cea:	f000 8081 	beq.w	8003df0 <_dtoa_r+0x4f8>
 8003cee:	9b01      	ldr	r3, [sp, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d07d      	beq.n	8003df0 <_dtoa_r+0x4f8>
 8003cf4:	f1b9 0f00 	cmp.w	r9, #0
 8003cf8:	dd3c      	ble.n	8003d74 <_dtoa_r+0x47c>
 8003cfa:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003cfe:	9307      	str	r3, [sp, #28]
 8003d00:	2200      	movs	r2, #0
 8003d02:	4b91      	ldr	r3, [pc, #580]	; (8003f48 <_dtoa_r+0x650>)
 8003d04:	4630      	mov	r0, r6
 8003d06:	4639      	mov	r1, r7
 8003d08:	f7fc fc76 	bl	80005f8 <__aeabi_dmul>
 8003d0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d10:	3501      	adds	r5, #1
 8003d12:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8003d16:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	f7fc fc02 	bl	8000524 <__aeabi_i2d>
 8003d20:	4632      	mov	r2, r6
 8003d22:	463b      	mov	r3, r7
 8003d24:	f7fc fc68 	bl	80005f8 <__aeabi_dmul>
 8003d28:	4b88      	ldr	r3, [pc, #544]	; (8003f4c <_dtoa_r+0x654>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f7fc faae 	bl	800028c <__adddf3>
 8003d30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8003d34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d38:	9303      	str	r3, [sp, #12]
 8003d3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d15c      	bne.n	8003dfa <_dtoa_r+0x502>
 8003d40:	4b83      	ldr	r3, [pc, #524]	; (8003f50 <_dtoa_r+0x658>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	4630      	mov	r0, r6
 8003d46:	4639      	mov	r1, r7
 8003d48:	f7fc fa9e 	bl	8000288 <__aeabi_dsub>
 8003d4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d50:	4606      	mov	r6, r0
 8003d52:	460f      	mov	r7, r1
 8003d54:	f7fc fee0 	bl	8000b18 <__aeabi_dcmpgt>
 8003d58:	2800      	cmp	r0, #0
 8003d5a:	f040 8296 	bne.w	800428a <_dtoa_r+0x992>
 8003d5e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8003d62:	4630      	mov	r0, r6
 8003d64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003d68:	4639      	mov	r1, r7
 8003d6a:	f7fc feb7 	bl	8000adc <__aeabi_dcmplt>
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	f040 8288 	bne.w	8004284 <_dtoa_r+0x98c>
 8003d74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003d78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f2c0 8158 	blt.w	8004034 <_dtoa_r+0x73c>
 8003d84:	f1ba 0f0e 	cmp.w	sl, #14
 8003d88:	f300 8154 	bgt.w	8004034 <_dtoa_r+0x73c>
 8003d8c:	4b6b      	ldr	r3, [pc, #428]	; (8003f3c <_dtoa_r+0x644>)
 8003d8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003d92:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f280 80e3 	bge.w	8003f64 <_dtoa_r+0x66c>
 8003d9e:	9b01      	ldr	r3, [sp, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f300 80df 	bgt.w	8003f64 <_dtoa_r+0x66c>
 8003da6:	f040 826d 	bne.w	8004284 <_dtoa_r+0x98c>
 8003daa:	4b69      	ldr	r3, [pc, #420]	; (8003f50 <_dtoa_r+0x658>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	4640      	mov	r0, r8
 8003db0:	4649      	mov	r1, r9
 8003db2:	f7fc fc21 	bl	80005f8 <__aeabi_dmul>
 8003db6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003dba:	f7fc fea3 	bl	8000b04 <__aeabi_dcmpge>
 8003dbe:	9e01      	ldr	r6, [sp, #4]
 8003dc0:	4637      	mov	r7, r6
 8003dc2:	2800      	cmp	r0, #0
 8003dc4:	f040 8243 	bne.w	800424e <_dtoa_r+0x956>
 8003dc8:	9d00      	ldr	r5, [sp, #0]
 8003dca:	2331      	movs	r3, #49	; 0x31
 8003dcc:	f805 3b01 	strb.w	r3, [r5], #1
 8003dd0:	f10a 0a01 	add.w	sl, sl, #1
 8003dd4:	e23f      	b.n	8004256 <_dtoa_r+0x95e>
 8003dd6:	07f2      	lsls	r2, r6, #31
 8003dd8:	d505      	bpl.n	8003de6 <_dtoa_r+0x4ee>
 8003dda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dde:	f7fc fc0b 	bl	80005f8 <__aeabi_dmul>
 8003de2:	3501      	adds	r5, #1
 8003de4:	2301      	movs	r3, #1
 8003de6:	1076      	asrs	r6, r6, #1
 8003de8:	3708      	adds	r7, #8
 8003dea:	e76c      	b.n	8003cc6 <_dtoa_r+0x3ce>
 8003dec:	2502      	movs	r5, #2
 8003dee:	e76f      	b.n	8003cd0 <_dtoa_r+0x3d8>
 8003df0:	9b01      	ldr	r3, [sp, #4]
 8003df2:	f8cd a01c 	str.w	sl, [sp, #28]
 8003df6:	930c      	str	r3, [sp, #48]	; 0x30
 8003df8:	e78d      	b.n	8003d16 <_dtoa_r+0x41e>
 8003dfa:	9900      	ldr	r1, [sp, #0]
 8003dfc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003dfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003e00:	4b4e      	ldr	r3, [pc, #312]	; (8003f3c <_dtoa_r+0x644>)
 8003e02:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003e06:	4401      	add	r1, r0
 8003e08:	9102      	str	r1, [sp, #8]
 8003e0a:	9908      	ldr	r1, [sp, #32]
 8003e0c:	eeb0 8a47 	vmov.f32	s16, s14
 8003e10:	eef0 8a67 	vmov.f32	s17, s15
 8003e14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003e1c:	2900      	cmp	r1, #0
 8003e1e:	d045      	beq.n	8003eac <_dtoa_r+0x5b4>
 8003e20:	494c      	ldr	r1, [pc, #304]	; (8003f54 <_dtoa_r+0x65c>)
 8003e22:	2000      	movs	r0, #0
 8003e24:	f7fc fd12 	bl	800084c <__aeabi_ddiv>
 8003e28:	ec53 2b18 	vmov	r2, r3, d8
 8003e2c:	f7fc fa2c 	bl	8000288 <__aeabi_dsub>
 8003e30:	9d00      	ldr	r5, [sp, #0]
 8003e32:	ec41 0b18 	vmov	d8, r0, r1
 8003e36:	4639      	mov	r1, r7
 8003e38:	4630      	mov	r0, r6
 8003e3a:	f7fc fe8d 	bl	8000b58 <__aeabi_d2iz>
 8003e3e:	900c      	str	r0, [sp, #48]	; 0x30
 8003e40:	f7fc fb70 	bl	8000524 <__aeabi_i2d>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	4630      	mov	r0, r6
 8003e4a:	4639      	mov	r1, r7
 8003e4c:	f7fc fa1c 	bl	8000288 <__aeabi_dsub>
 8003e50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e52:	3330      	adds	r3, #48	; 0x30
 8003e54:	f805 3b01 	strb.w	r3, [r5], #1
 8003e58:	ec53 2b18 	vmov	r2, r3, d8
 8003e5c:	4606      	mov	r6, r0
 8003e5e:	460f      	mov	r7, r1
 8003e60:	f7fc fe3c 	bl	8000adc <__aeabi_dcmplt>
 8003e64:	2800      	cmp	r0, #0
 8003e66:	d165      	bne.n	8003f34 <_dtoa_r+0x63c>
 8003e68:	4632      	mov	r2, r6
 8003e6a:	463b      	mov	r3, r7
 8003e6c:	4935      	ldr	r1, [pc, #212]	; (8003f44 <_dtoa_r+0x64c>)
 8003e6e:	2000      	movs	r0, #0
 8003e70:	f7fc fa0a 	bl	8000288 <__aeabi_dsub>
 8003e74:	ec53 2b18 	vmov	r2, r3, d8
 8003e78:	f7fc fe30 	bl	8000adc <__aeabi_dcmplt>
 8003e7c:	2800      	cmp	r0, #0
 8003e7e:	f040 80b9 	bne.w	8003ff4 <_dtoa_r+0x6fc>
 8003e82:	9b02      	ldr	r3, [sp, #8]
 8003e84:	429d      	cmp	r5, r3
 8003e86:	f43f af75 	beq.w	8003d74 <_dtoa_r+0x47c>
 8003e8a:	4b2f      	ldr	r3, [pc, #188]	; (8003f48 <_dtoa_r+0x650>)
 8003e8c:	ec51 0b18 	vmov	r0, r1, d8
 8003e90:	2200      	movs	r2, #0
 8003e92:	f7fc fbb1 	bl	80005f8 <__aeabi_dmul>
 8003e96:	4b2c      	ldr	r3, [pc, #176]	; (8003f48 <_dtoa_r+0x650>)
 8003e98:	ec41 0b18 	vmov	d8, r0, r1
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	4630      	mov	r0, r6
 8003ea0:	4639      	mov	r1, r7
 8003ea2:	f7fc fba9 	bl	80005f8 <__aeabi_dmul>
 8003ea6:	4606      	mov	r6, r0
 8003ea8:	460f      	mov	r7, r1
 8003eaa:	e7c4      	b.n	8003e36 <_dtoa_r+0x53e>
 8003eac:	ec51 0b17 	vmov	r0, r1, d7
 8003eb0:	f7fc fba2 	bl	80005f8 <__aeabi_dmul>
 8003eb4:	9b02      	ldr	r3, [sp, #8]
 8003eb6:	9d00      	ldr	r5, [sp, #0]
 8003eb8:	930c      	str	r3, [sp, #48]	; 0x30
 8003eba:	ec41 0b18 	vmov	d8, r0, r1
 8003ebe:	4639      	mov	r1, r7
 8003ec0:	4630      	mov	r0, r6
 8003ec2:	f7fc fe49 	bl	8000b58 <__aeabi_d2iz>
 8003ec6:	9011      	str	r0, [sp, #68]	; 0x44
 8003ec8:	f7fc fb2c 	bl	8000524 <__aeabi_i2d>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4630      	mov	r0, r6
 8003ed2:	4639      	mov	r1, r7
 8003ed4:	f7fc f9d8 	bl	8000288 <__aeabi_dsub>
 8003ed8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003eda:	3330      	adds	r3, #48	; 0x30
 8003edc:	f805 3b01 	strb.w	r3, [r5], #1
 8003ee0:	9b02      	ldr	r3, [sp, #8]
 8003ee2:	429d      	cmp	r5, r3
 8003ee4:	4606      	mov	r6, r0
 8003ee6:	460f      	mov	r7, r1
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	d134      	bne.n	8003f58 <_dtoa_r+0x660>
 8003eee:	4b19      	ldr	r3, [pc, #100]	; (8003f54 <_dtoa_r+0x65c>)
 8003ef0:	ec51 0b18 	vmov	r0, r1, d8
 8003ef4:	f7fc f9ca 	bl	800028c <__adddf3>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4630      	mov	r0, r6
 8003efe:	4639      	mov	r1, r7
 8003f00:	f7fc fe0a 	bl	8000b18 <__aeabi_dcmpgt>
 8003f04:	2800      	cmp	r0, #0
 8003f06:	d175      	bne.n	8003ff4 <_dtoa_r+0x6fc>
 8003f08:	ec53 2b18 	vmov	r2, r3, d8
 8003f0c:	4911      	ldr	r1, [pc, #68]	; (8003f54 <_dtoa_r+0x65c>)
 8003f0e:	2000      	movs	r0, #0
 8003f10:	f7fc f9ba 	bl	8000288 <__aeabi_dsub>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4630      	mov	r0, r6
 8003f1a:	4639      	mov	r1, r7
 8003f1c:	f7fc fdde 	bl	8000adc <__aeabi_dcmplt>
 8003f20:	2800      	cmp	r0, #0
 8003f22:	f43f af27 	beq.w	8003d74 <_dtoa_r+0x47c>
 8003f26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f28:	1e6b      	subs	r3, r5, #1
 8003f2a:	930c      	str	r3, [sp, #48]	; 0x30
 8003f2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003f30:	2b30      	cmp	r3, #48	; 0x30
 8003f32:	d0f8      	beq.n	8003f26 <_dtoa_r+0x62e>
 8003f34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8003f38:	e04a      	b.n	8003fd0 <_dtoa_r+0x6d8>
 8003f3a:	bf00      	nop
 8003f3c:	08005da0 	.word	0x08005da0
 8003f40:	08005d78 	.word	0x08005d78
 8003f44:	3ff00000 	.word	0x3ff00000
 8003f48:	40240000 	.word	0x40240000
 8003f4c:	401c0000 	.word	0x401c0000
 8003f50:	40140000 	.word	0x40140000
 8003f54:	3fe00000 	.word	0x3fe00000
 8003f58:	4baf      	ldr	r3, [pc, #700]	; (8004218 <_dtoa_r+0x920>)
 8003f5a:	f7fc fb4d 	bl	80005f8 <__aeabi_dmul>
 8003f5e:	4606      	mov	r6, r0
 8003f60:	460f      	mov	r7, r1
 8003f62:	e7ac      	b.n	8003ebe <_dtoa_r+0x5c6>
 8003f64:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003f68:	9d00      	ldr	r5, [sp, #0]
 8003f6a:	4642      	mov	r2, r8
 8003f6c:	464b      	mov	r3, r9
 8003f6e:	4630      	mov	r0, r6
 8003f70:	4639      	mov	r1, r7
 8003f72:	f7fc fc6b 	bl	800084c <__aeabi_ddiv>
 8003f76:	f7fc fdef 	bl	8000b58 <__aeabi_d2iz>
 8003f7a:	9002      	str	r0, [sp, #8]
 8003f7c:	f7fc fad2 	bl	8000524 <__aeabi_i2d>
 8003f80:	4642      	mov	r2, r8
 8003f82:	464b      	mov	r3, r9
 8003f84:	f7fc fb38 	bl	80005f8 <__aeabi_dmul>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	4639      	mov	r1, r7
 8003f90:	f7fc f97a 	bl	8000288 <__aeabi_dsub>
 8003f94:	9e02      	ldr	r6, [sp, #8]
 8003f96:	9f01      	ldr	r7, [sp, #4]
 8003f98:	3630      	adds	r6, #48	; 0x30
 8003f9a:	f805 6b01 	strb.w	r6, [r5], #1
 8003f9e:	9e00      	ldr	r6, [sp, #0]
 8003fa0:	1bae      	subs	r6, r5, r6
 8003fa2:	42b7      	cmp	r7, r6
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	d137      	bne.n	800401a <_dtoa_r+0x722>
 8003faa:	f7fc f96f 	bl	800028c <__adddf3>
 8003fae:	4642      	mov	r2, r8
 8003fb0:	464b      	mov	r3, r9
 8003fb2:	4606      	mov	r6, r0
 8003fb4:	460f      	mov	r7, r1
 8003fb6:	f7fc fdaf 	bl	8000b18 <__aeabi_dcmpgt>
 8003fba:	b9c8      	cbnz	r0, 8003ff0 <_dtoa_r+0x6f8>
 8003fbc:	4642      	mov	r2, r8
 8003fbe:	464b      	mov	r3, r9
 8003fc0:	4630      	mov	r0, r6
 8003fc2:	4639      	mov	r1, r7
 8003fc4:	f7fc fd80 	bl	8000ac8 <__aeabi_dcmpeq>
 8003fc8:	b110      	cbz	r0, 8003fd0 <_dtoa_r+0x6d8>
 8003fca:	9b02      	ldr	r3, [sp, #8]
 8003fcc:	07d9      	lsls	r1, r3, #31
 8003fce:	d40f      	bmi.n	8003ff0 <_dtoa_r+0x6f8>
 8003fd0:	4620      	mov	r0, r4
 8003fd2:	4659      	mov	r1, fp
 8003fd4:	f000 fad6 	bl	8004584 <_Bfree>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	702b      	strb	r3, [r5, #0]
 8003fdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003fde:	f10a 0001 	add.w	r0, sl, #1
 8003fe2:	6018      	str	r0, [r3, #0]
 8003fe4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f43f acd8 	beq.w	800399c <_dtoa_r+0xa4>
 8003fec:	601d      	str	r5, [r3, #0]
 8003fee:	e4d5      	b.n	800399c <_dtoa_r+0xa4>
 8003ff0:	f8cd a01c 	str.w	sl, [sp, #28]
 8003ff4:	462b      	mov	r3, r5
 8003ff6:	461d      	mov	r5, r3
 8003ff8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003ffc:	2a39      	cmp	r2, #57	; 0x39
 8003ffe:	d108      	bne.n	8004012 <_dtoa_r+0x71a>
 8004000:	9a00      	ldr	r2, [sp, #0]
 8004002:	429a      	cmp	r2, r3
 8004004:	d1f7      	bne.n	8003ff6 <_dtoa_r+0x6fe>
 8004006:	9a07      	ldr	r2, [sp, #28]
 8004008:	9900      	ldr	r1, [sp, #0]
 800400a:	3201      	adds	r2, #1
 800400c:	9207      	str	r2, [sp, #28]
 800400e:	2230      	movs	r2, #48	; 0x30
 8004010:	700a      	strb	r2, [r1, #0]
 8004012:	781a      	ldrb	r2, [r3, #0]
 8004014:	3201      	adds	r2, #1
 8004016:	701a      	strb	r2, [r3, #0]
 8004018:	e78c      	b.n	8003f34 <_dtoa_r+0x63c>
 800401a:	4b7f      	ldr	r3, [pc, #508]	; (8004218 <_dtoa_r+0x920>)
 800401c:	2200      	movs	r2, #0
 800401e:	f7fc faeb 	bl	80005f8 <__aeabi_dmul>
 8004022:	2200      	movs	r2, #0
 8004024:	2300      	movs	r3, #0
 8004026:	4606      	mov	r6, r0
 8004028:	460f      	mov	r7, r1
 800402a:	f7fc fd4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800402e:	2800      	cmp	r0, #0
 8004030:	d09b      	beq.n	8003f6a <_dtoa_r+0x672>
 8004032:	e7cd      	b.n	8003fd0 <_dtoa_r+0x6d8>
 8004034:	9a08      	ldr	r2, [sp, #32]
 8004036:	2a00      	cmp	r2, #0
 8004038:	f000 80c4 	beq.w	80041c4 <_dtoa_r+0x8cc>
 800403c:	9a05      	ldr	r2, [sp, #20]
 800403e:	2a01      	cmp	r2, #1
 8004040:	f300 80a8 	bgt.w	8004194 <_dtoa_r+0x89c>
 8004044:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004046:	2a00      	cmp	r2, #0
 8004048:	f000 80a0 	beq.w	800418c <_dtoa_r+0x894>
 800404c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004050:	9e06      	ldr	r6, [sp, #24]
 8004052:	4645      	mov	r5, r8
 8004054:	9a04      	ldr	r2, [sp, #16]
 8004056:	2101      	movs	r1, #1
 8004058:	441a      	add	r2, r3
 800405a:	4620      	mov	r0, r4
 800405c:	4498      	add	r8, r3
 800405e:	9204      	str	r2, [sp, #16]
 8004060:	f000 fb4c 	bl	80046fc <__i2b>
 8004064:	4607      	mov	r7, r0
 8004066:	2d00      	cmp	r5, #0
 8004068:	dd0b      	ble.n	8004082 <_dtoa_r+0x78a>
 800406a:	9b04      	ldr	r3, [sp, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	dd08      	ble.n	8004082 <_dtoa_r+0x78a>
 8004070:	42ab      	cmp	r3, r5
 8004072:	9a04      	ldr	r2, [sp, #16]
 8004074:	bfa8      	it	ge
 8004076:	462b      	movge	r3, r5
 8004078:	eba8 0803 	sub.w	r8, r8, r3
 800407c:	1aed      	subs	r5, r5, r3
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	9304      	str	r3, [sp, #16]
 8004082:	9b06      	ldr	r3, [sp, #24]
 8004084:	b1fb      	cbz	r3, 80040c6 <_dtoa_r+0x7ce>
 8004086:	9b08      	ldr	r3, [sp, #32]
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 809f 	beq.w	80041cc <_dtoa_r+0x8d4>
 800408e:	2e00      	cmp	r6, #0
 8004090:	dd11      	ble.n	80040b6 <_dtoa_r+0x7be>
 8004092:	4639      	mov	r1, r7
 8004094:	4632      	mov	r2, r6
 8004096:	4620      	mov	r0, r4
 8004098:	f000 fbec 	bl	8004874 <__pow5mult>
 800409c:	465a      	mov	r2, fp
 800409e:	4601      	mov	r1, r0
 80040a0:	4607      	mov	r7, r0
 80040a2:	4620      	mov	r0, r4
 80040a4:	f000 fb40 	bl	8004728 <__multiply>
 80040a8:	4659      	mov	r1, fp
 80040aa:	9007      	str	r0, [sp, #28]
 80040ac:	4620      	mov	r0, r4
 80040ae:	f000 fa69 	bl	8004584 <_Bfree>
 80040b2:	9b07      	ldr	r3, [sp, #28]
 80040b4:	469b      	mov	fp, r3
 80040b6:	9b06      	ldr	r3, [sp, #24]
 80040b8:	1b9a      	subs	r2, r3, r6
 80040ba:	d004      	beq.n	80040c6 <_dtoa_r+0x7ce>
 80040bc:	4659      	mov	r1, fp
 80040be:	4620      	mov	r0, r4
 80040c0:	f000 fbd8 	bl	8004874 <__pow5mult>
 80040c4:	4683      	mov	fp, r0
 80040c6:	2101      	movs	r1, #1
 80040c8:	4620      	mov	r0, r4
 80040ca:	f000 fb17 	bl	80046fc <__i2b>
 80040ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	4606      	mov	r6, r0
 80040d4:	dd7c      	ble.n	80041d0 <_dtoa_r+0x8d8>
 80040d6:	461a      	mov	r2, r3
 80040d8:	4601      	mov	r1, r0
 80040da:	4620      	mov	r0, r4
 80040dc:	f000 fbca 	bl	8004874 <__pow5mult>
 80040e0:	9b05      	ldr	r3, [sp, #20]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	4606      	mov	r6, r0
 80040e6:	dd76      	ble.n	80041d6 <_dtoa_r+0x8de>
 80040e8:	2300      	movs	r3, #0
 80040ea:	9306      	str	r3, [sp, #24]
 80040ec:	6933      	ldr	r3, [r6, #16]
 80040ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80040f2:	6918      	ldr	r0, [r3, #16]
 80040f4:	f000 fab2 	bl	800465c <__hi0bits>
 80040f8:	f1c0 0020 	rsb	r0, r0, #32
 80040fc:	9b04      	ldr	r3, [sp, #16]
 80040fe:	4418      	add	r0, r3
 8004100:	f010 001f 	ands.w	r0, r0, #31
 8004104:	f000 8086 	beq.w	8004214 <_dtoa_r+0x91c>
 8004108:	f1c0 0320 	rsb	r3, r0, #32
 800410c:	2b04      	cmp	r3, #4
 800410e:	dd7f      	ble.n	8004210 <_dtoa_r+0x918>
 8004110:	f1c0 001c 	rsb	r0, r0, #28
 8004114:	9b04      	ldr	r3, [sp, #16]
 8004116:	4403      	add	r3, r0
 8004118:	4480      	add	r8, r0
 800411a:	4405      	add	r5, r0
 800411c:	9304      	str	r3, [sp, #16]
 800411e:	f1b8 0f00 	cmp.w	r8, #0
 8004122:	dd05      	ble.n	8004130 <_dtoa_r+0x838>
 8004124:	4659      	mov	r1, fp
 8004126:	4642      	mov	r2, r8
 8004128:	4620      	mov	r0, r4
 800412a:	f000 fbfd 	bl	8004928 <__lshift>
 800412e:	4683      	mov	fp, r0
 8004130:	9b04      	ldr	r3, [sp, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	dd05      	ble.n	8004142 <_dtoa_r+0x84a>
 8004136:	4631      	mov	r1, r6
 8004138:	461a      	mov	r2, r3
 800413a:	4620      	mov	r0, r4
 800413c:	f000 fbf4 	bl	8004928 <__lshift>
 8004140:	4606      	mov	r6, r0
 8004142:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004144:	2b00      	cmp	r3, #0
 8004146:	d069      	beq.n	800421c <_dtoa_r+0x924>
 8004148:	4631      	mov	r1, r6
 800414a:	4658      	mov	r0, fp
 800414c:	f000 fc58 	bl	8004a00 <__mcmp>
 8004150:	2800      	cmp	r0, #0
 8004152:	da63      	bge.n	800421c <_dtoa_r+0x924>
 8004154:	2300      	movs	r3, #0
 8004156:	4659      	mov	r1, fp
 8004158:	220a      	movs	r2, #10
 800415a:	4620      	mov	r0, r4
 800415c:	f000 fa34 	bl	80045c8 <__multadd>
 8004160:	9b08      	ldr	r3, [sp, #32]
 8004162:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004166:	4683      	mov	fp, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 818f 	beq.w	800448c <_dtoa_r+0xb94>
 800416e:	4639      	mov	r1, r7
 8004170:	2300      	movs	r3, #0
 8004172:	220a      	movs	r2, #10
 8004174:	4620      	mov	r0, r4
 8004176:	f000 fa27 	bl	80045c8 <__multadd>
 800417a:	f1b9 0f00 	cmp.w	r9, #0
 800417e:	4607      	mov	r7, r0
 8004180:	f300 808e 	bgt.w	80042a0 <_dtoa_r+0x9a8>
 8004184:	9b05      	ldr	r3, [sp, #20]
 8004186:	2b02      	cmp	r3, #2
 8004188:	dc50      	bgt.n	800422c <_dtoa_r+0x934>
 800418a:	e089      	b.n	80042a0 <_dtoa_r+0x9a8>
 800418c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800418e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004192:	e75d      	b.n	8004050 <_dtoa_r+0x758>
 8004194:	9b01      	ldr	r3, [sp, #4]
 8004196:	1e5e      	subs	r6, r3, #1
 8004198:	9b06      	ldr	r3, [sp, #24]
 800419a:	42b3      	cmp	r3, r6
 800419c:	bfbf      	itttt	lt
 800419e:	9b06      	ldrlt	r3, [sp, #24]
 80041a0:	9606      	strlt	r6, [sp, #24]
 80041a2:	1af2      	sublt	r2, r6, r3
 80041a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80041a6:	bfb6      	itet	lt
 80041a8:	189b      	addlt	r3, r3, r2
 80041aa:	1b9e      	subge	r6, r3, r6
 80041ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 80041ae:	9b01      	ldr	r3, [sp, #4]
 80041b0:	bfb8      	it	lt
 80041b2:	2600      	movlt	r6, #0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	bfb5      	itete	lt
 80041b8:	eba8 0503 	sublt.w	r5, r8, r3
 80041bc:	9b01      	ldrge	r3, [sp, #4]
 80041be:	2300      	movlt	r3, #0
 80041c0:	4645      	movge	r5, r8
 80041c2:	e747      	b.n	8004054 <_dtoa_r+0x75c>
 80041c4:	9e06      	ldr	r6, [sp, #24]
 80041c6:	9f08      	ldr	r7, [sp, #32]
 80041c8:	4645      	mov	r5, r8
 80041ca:	e74c      	b.n	8004066 <_dtoa_r+0x76e>
 80041cc:	9a06      	ldr	r2, [sp, #24]
 80041ce:	e775      	b.n	80040bc <_dtoa_r+0x7c4>
 80041d0:	9b05      	ldr	r3, [sp, #20]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	dc18      	bgt.n	8004208 <_dtoa_r+0x910>
 80041d6:	9b02      	ldr	r3, [sp, #8]
 80041d8:	b9b3      	cbnz	r3, 8004208 <_dtoa_r+0x910>
 80041da:	9b03      	ldr	r3, [sp, #12]
 80041dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041e0:	b9a3      	cbnz	r3, 800420c <_dtoa_r+0x914>
 80041e2:	9b03      	ldr	r3, [sp, #12]
 80041e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041e8:	0d1b      	lsrs	r3, r3, #20
 80041ea:	051b      	lsls	r3, r3, #20
 80041ec:	b12b      	cbz	r3, 80041fa <_dtoa_r+0x902>
 80041ee:	9b04      	ldr	r3, [sp, #16]
 80041f0:	3301      	adds	r3, #1
 80041f2:	9304      	str	r3, [sp, #16]
 80041f4:	f108 0801 	add.w	r8, r8, #1
 80041f8:	2301      	movs	r3, #1
 80041fa:	9306      	str	r3, [sp, #24]
 80041fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f47f af74 	bne.w	80040ec <_dtoa_r+0x7f4>
 8004204:	2001      	movs	r0, #1
 8004206:	e779      	b.n	80040fc <_dtoa_r+0x804>
 8004208:	2300      	movs	r3, #0
 800420a:	e7f6      	b.n	80041fa <_dtoa_r+0x902>
 800420c:	9b02      	ldr	r3, [sp, #8]
 800420e:	e7f4      	b.n	80041fa <_dtoa_r+0x902>
 8004210:	d085      	beq.n	800411e <_dtoa_r+0x826>
 8004212:	4618      	mov	r0, r3
 8004214:	301c      	adds	r0, #28
 8004216:	e77d      	b.n	8004114 <_dtoa_r+0x81c>
 8004218:	40240000 	.word	0x40240000
 800421c:	9b01      	ldr	r3, [sp, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	dc38      	bgt.n	8004294 <_dtoa_r+0x99c>
 8004222:	9b05      	ldr	r3, [sp, #20]
 8004224:	2b02      	cmp	r3, #2
 8004226:	dd35      	ble.n	8004294 <_dtoa_r+0x99c>
 8004228:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800422c:	f1b9 0f00 	cmp.w	r9, #0
 8004230:	d10d      	bne.n	800424e <_dtoa_r+0x956>
 8004232:	4631      	mov	r1, r6
 8004234:	464b      	mov	r3, r9
 8004236:	2205      	movs	r2, #5
 8004238:	4620      	mov	r0, r4
 800423a:	f000 f9c5 	bl	80045c8 <__multadd>
 800423e:	4601      	mov	r1, r0
 8004240:	4606      	mov	r6, r0
 8004242:	4658      	mov	r0, fp
 8004244:	f000 fbdc 	bl	8004a00 <__mcmp>
 8004248:	2800      	cmp	r0, #0
 800424a:	f73f adbd 	bgt.w	8003dc8 <_dtoa_r+0x4d0>
 800424e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004250:	9d00      	ldr	r5, [sp, #0]
 8004252:	ea6f 0a03 	mvn.w	sl, r3
 8004256:	f04f 0800 	mov.w	r8, #0
 800425a:	4631      	mov	r1, r6
 800425c:	4620      	mov	r0, r4
 800425e:	f000 f991 	bl	8004584 <_Bfree>
 8004262:	2f00      	cmp	r7, #0
 8004264:	f43f aeb4 	beq.w	8003fd0 <_dtoa_r+0x6d8>
 8004268:	f1b8 0f00 	cmp.w	r8, #0
 800426c:	d005      	beq.n	800427a <_dtoa_r+0x982>
 800426e:	45b8      	cmp	r8, r7
 8004270:	d003      	beq.n	800427a <_dtoa_r+0x982>
 8004272:	4641      	mov	r1, r8
 8004274:	4620      	mov	r0, r4
 8004276:	f000 f985 	bl	8004584 <_Bfree>
 800427a:	4639      	mov	r1, r7
 800427c:	4620      	mov	r0, r4
 800427e:	f000 f981 	bl	8004584 <_Bfree>
 8004282:	e6a5      	b.n	8003fd0 <_dtoa_r+0x6d8>
 8004284:	2600      	movs	r6, #0
 8004286:	4637      	mov	r7, r6
 8004288:	e7e1      	b.n	800424e <_dtoa_r+0x956>
 800428a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800428c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004290:	4637      	mov	r7, r6
 8004292:	e599      	b.n	8003dc8 <_dtoa_r+0x4d0>
 8004294:	9b08      	ldr	r3, [sp, #32]
 8004296:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 80fd 	beq.w	800449a <_dtoa_r+0xba2>
 80042a0:	2d00      	cmp	r5, #0
 80042a2:	dd05      	ble.n	80042b0 <_dtoa_r+0x9b8>
 80042a4:	4639      	mov	r1, r7
 80042a6:	462a      	mov	r2, r5
 80042a8:	4620      	mov	r0, r4
 80042aa:	f000 fb3d 	bl	8004928 <__lshift>
 80042ae:	4607      	mov	r7, r0
 80042b0:	9b06      	ldr	r3, [sp, #24]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d05c      	beq.n	8004370 <_dtoa_r+0xa78>
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	4620      	mov	r0, r4
 80042ba:	f000 f923 	bl	8004504 <_Balloc>
 80042be:	4605      	mov	r5, r0
 80042c0:	b928      	cbnz	r0, 80042ce <_dtoa_r+0x9d6>
 80042c2:	4b80      	ldr	r3, [pc, #512]	; (80044c4 <_dtoa_r+0xbcc>)
 80042c4:	4602      	mov	r2, r0
 80042c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80042ca:	f7ff bb2e 	b.w	800392a <_dtoa_r+0x32>
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	3202      	adds	r2, #2
 80042d2:	0092      	lsls	r2, r2, #2
 80042d4:	f107 010c 	add.w	r1, r7, #12
 80042d8:	300c      	adds	r0, #12
 80042da:	f000 f905 	bl	80044e8 <memcpy>
 80042de:	2201      	movs	r2, #1
 80042e0:	4629      	mov	r1, r5
 80042e2:	4620      	mov	r0, r4
 80042e4:	f000 fb20 	bl	8004928 <__lshift>
 80042e8:	9b00      	ldr	r3, [sp, #0]
 80042ea:	3301      	adds	r3, #1
 80042ec:	9301      	str	r3, [sp, #4]
 80042ee:	9b00      	ldr	r3, [sp, #0]
 80042f0:	444b      	add	r3, r9
 80042f2:	9307      	str	r3, [sp, #28]
 80042f4:	9b02      	ldr	r3, [sp, #8]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	46b8      	mov	r8, r7
 80042fc:	9306      	str	r3, [sp, #24]
 80042fe:	4607      	mov	r7, r0
 8004300:	9b01      	ldr	r3, [sp, #4]
 8004302:	4631      	mov	r1, r6
 8004304:	3b01      	subs	r3, #1
 8004306:	4658      	mov	r0, fp
 8004308:	9302      	str	r3, [sp, #8]
 800430a:	f7ff fa69 	bl	80037e0 <quorem>
 800430e:	4603      	mov	r3, r0
 8004310:	3330      	adds	r3, #48	; 0x30
 8004312:	9004      	str	r0, [sp, #16]
 8004314:	4641      	mov	r1, r8
 8004316:	4658      	mov	r0, fp
 8004318:	9308      	str	r3, [sp, #32]
 800431a:	f000 fb71 	bl	8004a00 <__mcmp>
 800431e:	463a      	mov	r2, r7
 8004320:	4681      	mov	r9, r0
 8004322:	4631      	mov	r1, r6
 8004324:	4620      	mov	r0, r4
 8004326:	f000 fb87 	bl	8004a38 <__mdiff>
 800432a:	68c2      	ldr	r2, [r0, #12]
 800432c:	9b08      	ldr	r3, [sp, #32]
 800432e:	4605      	mov	r5, r0
 8004330:	bb02      	cbnz	r2, 8004374 <_dtoa_r+0xa7c>
 8004332:	4601      	mov	r1, r0
 8004334:	4658      	mov	r0, fp
 8004336:	f000 fb63 	bl	8004a00 <__mcmp>
 800433a:	9b08      	ldr	r3, [sp, #32]
 800433c:	4602      	mov	r2, r0
 800433e:	4629      	mov	r1, r5
 8004340:	4620      	mov	r0, r4
 8004342:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8004346:	f000 f91d 	bl	8004584 <_Bfree>
 800434a:	9b05      	ldr	r3, [sp, #20]
 800434c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800434e:	9d01      	ldr	r5, [sp, #4]
 8004350:	ea43 0102 	orr.w	r1, r3, r2
 8004354:	9b06      	ldr	r3, [sp, #24]
 8004356:	430b      	orrs	r3, r1
 8004358:	9b08      	ldr	r3, [sp, #32]
 800435a:	d10d      	bne.n	8004378 <_dtoa_r+0xa80>
 800435c:	2b39      	cmp	r3, #57	; 0x39
 800435e:	d029      	beq.n	80043b4 <_dtoa_r+0xabc>
 8004360:	f1b9 0f00 	cmp.w	r9, #0
 8004364:	dd01      	ble.n	800436a <_dtoa_r+0xa72>
 8004366:	9b04      	ldr	r3, [sp, #16]
 8004368:	3331      	adds	r3, #49	; 0x31
 800436a:	9a02      	ldr	r2, [sp, #8]
 800436c:	7013      	strb	r3, [r2, #0]
 800436e:	e774      	b.n	800425a <_dtoa_r+0x962>
 8004370:	4638      	mov	r0, r7
 8004372:	e7b9      	b.n	80042e8 <_dtoa_r+0x9f0>
 8004374:	2201      	movs	r2, #1
 8004376:	e7e2      	b.n	800433e <_dtoa_r+0xa46>
 8004378:	f1b9 0f00 	cmp.w	r9, #0
 800437c:	db06      	blt.n	800438c <_dtoa_r+0xa94>
 800437e:	9905      	ldr	r1, [sp, #20]
 8004380:	ea41 0909 	orr.w	r9, r1, r9
 8004384:	9906      	ldr	r1, [sp, #24]
 8004386:	ea59 0101 	orrs.w	r1, r9, r1
 800438a:	d120      	bne.n	80043ce <_dtoa_r+0xad6>
 800438c:	2a00      	cmp	r2, #0
 800438e:	ddec      	ble.n	800436a <_dtoa_r+0xa72>
 8004390:	4659      	mov	r1, fp
 8004392:	2201      	movs	r2, #1
 8004394:	4620      	mov	r0, r4
 8004396:	9301      	str	r3, [sp, #4]
 8004398:	f000 fac6 	bl	8004928 <__lshift>
 800439c:	4631      	mov	r1, r6
 800439e:	4683      	mov	fp, r0
 80043a0:	f000 fb2e 	bl	8004a00 <__mcmp>
 80043a4:	2800      	cmp	r0, #0
 80043a6:	9b01      	ldr	r3, [sp, #4]
 80043a8:	dc02      	bgt.n	80043b0 <_dtoa_r+0xab8>
 80043aa:	d1de      	bne.n	800436a <_dtoa_r+0xa72>
 80043ac:	07da      	lsls	r2, r3, #31
 80043ae:	d5dc      	bpl.n	800436a <_dtoa_r+0xa72>
 80043b0:	2b39      	cmp	r3, #57	; 0x39
 80043b2:	d1d8      	bne.n	8004366 <_dtoa_r+0xa6e>
 80043b4:	9a02      	ldr	r2, [sp, #8]
 80043b6:	2339      	movs	r3, #57	; 0x39
 80043b8:	7013      	strb	r3, [r2, #0]
 80043ba:	462b      	mov	r3, r5
 80043bc:	461d      	mov	r5, r3
 80043be:	3b01      	subs	r3, #1
 80043c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80043c4:	2a39      	cmp	r2, #57	; 0x39
 80043c6:	d050      	beq.n	800446a <_dtoa_r+0xb72>
 80043c8:	3201      	adds	r2, #1
 80043ca:	701a      	strb	r2, [r3, #0]
 80043cc:	e745      	b.n	800425a <_dtoa_r+0x962>
 80043ce:	2a00      	cmp	r2, #0
 80043d0:	dd03      	ble.n	80043da <_dtoa_r+0xae2>
 80043d2:	2b39      	cmp	r3, #57	; 0x39
 80043d4:	d0ee      	beq.n	80043b4 <_dtoa_r+0xabc>
 80043d6:	3301      	adds	r3, #1
 80043d8:	e7c7      	b.n	800436a <_dtoa_r+0xa72>
 80043da:	9a01      	ldr	r2, [sp, #4]
 80043dc:	9907      	ldr	r1, [sp, #28]
 80043de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80043e2:	428a      	cmp	r2, r1
 80043e4:	d02a      	beq.n	800443c <_dtoa_r+0xb44>
 80043e6:	4659      	mov	r1, fp
 80043e8:	2300      	movs	r3, #0
 80043ea:	220a      	movs	r2, #10
 80043ec:	4620      	mov	r0, r4
 80043ee:	f000 f8eb 	bl	80045c8 <__multadd>
 80043f2:	45b8      	cmp	r8, r7
 80043f4:	4683      	mov	fp, r0
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	f04f 020a 	mov.w	r2, #10
 80043fe:	4641      	mov	r1, r8
 8004400:	4620      	mov	r0, r4
 8004402:	d107      	bne.n	8004414 <_dtoa_r+0xb1c>
 8004404:	f000 f8e0 	bl	80045c8 <__multadd>
 8004408:	4680      	mov	r8, r0
 800440a:	4607      	mov	r7, r0
 800440c:	9b01      	ldr	r3, [sp, #4]
 800440e:	3301      	adds	r3, #1
 8004410:	9301      	str	r3, [sp, #4]
 8004412:	e775      	b.n	8004300 <_dtoa_r+0xa08>
 8004414:	f000 f8d8 	bl	80045c8 <__multadd>
 8004418:	4639      	mov	r1, r7
 800441a:	4680      	mov	r8, r0
 800441c:	2300      	movs	r3, #0
 800441e:	220a      	movs	r2, #10
 8004420:	4620      	mov	r0, r4
 8004422:	f000 f8d1 	bl	80045c8 <__multadd>
 8004426:	4607      	mov	r7, r0
 8004428:	e7f0      	b.n	800440c <_dtoa_r+0xb14>
 800442a:	f1b9 0f00 	cmp.w	r9, #0
 800442e:	9a00      	ldr	r2, [sp, #0]
 8004430:	bfcc      	ite	gt
 8004432:	464d      	movgt	r5, r9
 8004434:	2501      	movle	r5, #1
 8004436:	4415      	add	r5, r2
 8004438:	f04f 0800 	mov.w	r8, #0
 800443c:	4659      	mov	r1, fp
 800443e:	2201      	movs	r2, #1
 8004440:	4620      	mov	r0, r4
 8004442:	9301      	str	r3, [sp, #4]
 8004444:	f000 fa70 	bl	8004928 <__lshift>
 8004448:	4631      	mov	r1, r6
 800444a:	4683      	mov	fp, r0
 800444c:	f000 fad8 	bl	8004a00 <__mcmp>
 8004450:	2800      	cmp	r0, #0
 8004452:	dcb2      	bgt.n	80043ba <_dtoa_r+0xac2>
 8004454:	d102      	bne.n	800445c <_dtoa_r+0xb64>
 8004456:	9b01      	ldr	r3, [sp, #4]
 8004458:	07db      	lsls	r3, r3, #31
 800445a:	d4ae      	bmi.n	80043ba <_dtoa_r+0xac2>
 800445c:	462b      	mov	r3, r5
 800445e:	461d      	mov	r5, r3
 8004460:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004464:	2a30      	cmp	r2, #48	; 0x30
 8004466:	d0fa      	beq.n	800445e <_dtoa_r+0xb66>
 8004468:	e6f7      	b.n	800425a <_dtoa_r+0x962>
 800446a:	9a00      	ldr	r2, [sp, #0]
 800446c:	429a      	cmp	r2, r3
 800446e:	d1a5      	bne.n	80043bc <_dtoa_r+0xac4>
 8004470:	f10a 0a01 	add.w	sl, sl, #1
 8004474:	2331      	movs	r3, #49	; 0x31
 8004476:	e779      	b.n	800436c <_dtoa_r+0xa74>
 8004478:	4b13      	ldr	r3, [pc, #76]	; (80044c8 <_dtoa_r+0xbd0>)
 800447a:	f7ff baaf 	b.w	80039dc <_dtoa_r+0xe4>
 800447e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004480:	2b00      	cmp	r3, #0
 8004482:	f47f aa86 	bne.w	8003992 <_dtoa_r+0x9a>
 8004486:	4b11      	ldr	r3, [pc, #68]	; (80044cc <_dtoa_r+0xbd4>)
 8004488:	f7ff baa8 	b.w	80039dc <_dtoa_r+0xe4>
 800448c:	f1b9 0f00 	cmp.w	r9, #0
 8004490:	dc03      	bgt.n	800449a <_dtoa_r+0xba2>
 8004492:	9b05      	ldr	r3, [sp, #20]
 8004494:	2b02      	cmp	r3, #2
 8004496:	f73f aec9 	bgt.w	800422c <_dtoa_r+0x934>
 800449a:	9d00      	ldr	r5, [sp, #0]
 800449c:	4631      	mov	r1, r6
 800449e:	4658      	mov	r0, fp
 80044a0:	f7ff f99e 	bl	80037e0 <quorem>
 80044a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80044a8:	f805 3b01 	strb.w	r3, [r5], #1
 80044ac:	9a00      	ldr	r2, [sp, #0]
 80044ae:	1aaa      	subs	r2, r5, r2
 80044b0:	4591      	cmp	r9, r2
 80044b2:	ddba      	ble.n	800442a <_dtoa_r+0xb32>
 80044b4:	4659      	mov	r1, fp
 80044b6:	2300      	movs	r3, #0
 80044b8:	220a      	movs	r2, #10
 80044ba:	4620      	mov	r0, r4
 80044bc:	f000 f884 	bl	80045c8 <__multadd>
 80044c0:	4683      	mov	fp, r0
 80044c2:	e7eb      	b.n	800449c <_dtoa_r+0xba4>
 80044c4:	08005d03 	.word	0x08005d03
 80044c8:	08005c5c 	.word	0x08005c5c
 80044cc:	08005c80 	.word	0x08005c80

080044d0 <_localeconv_r>:
 80044d0:	4800      	ldr	r0, [pc, #0]	; (80044d4 <_localeconv_r+0x4>)
 80044d2:	4770      	bx	lr
 80044d4:	20000160 	.word	0x20000160

080044d8 <malloc>:
 80044d8:	4b02      	ldr	r3, [pc, #8]	; (80044e4 <malloc+0xc>)
 80044da:	4601      	mov	r1, r0
 80044dc:	6818      	ldr	r0, [r3, #0]
 80044de:	f000 bbef 	b.w	8004cc0 <_malloc_r>
 80044e2:	bf00      	nop
 80044e4:	2000000c 	.word	0x2000000c

080044e8 <memcpy>:
 80044e8:	440a      	add	r2, r1
 80044ea:	4291      	cmp	r1, r2
 80044ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80044f0:	d100      	bne.n	80044f4 <memcpy+0xc>
 80044f2:	4770      	bx	lr
 80044f4:	b510      	push	{r4, lr}
 80044f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044fe:	4291      	cmp	r1, r2
 8004500:	d1f9      	bne.n	80044f6 <memcpy+0xe>
 8004502:	bd10      	pop	{r4, pc}

08004504 <_Balloc>:
 8004504:	b570      	push	{r4, r5, r6, lr}
 8004506:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004508:	4604      	mov	r4, r0
 800450a:	460d      	mov	r5, r1
 800450c:	b976      	cbnz	r6, 800452c <_Balloc+0x28>
 800450e:	2010      	movs	r0, #16
 8004510:	f7ff ffe2 	bl	80044d8 <malloc>
 8004514:	4602      	mov	r2, r0
 8004516:	6260      	str	r0, [r4, #36]	; 0x24
 8004518:	b920      	cbnz	r0, 8004524 <_Balloc+0x20>
 800451a:	4b18      	ldr	r3, [pc, #96]	; (800457c <_Balloc+0x78>)
 800451c:	4818      	ldr	r0, [pc, #96]	; (8004580 <_Balloc+0x7c>)
 800451e:	2166      	movs	r1, #102	; 0x66
 8004520:	f000 fd94 	bl	800504c <__assert_func>
 8004524:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004528:	6006      	str	r6, [r0, #0]
 800452a:	60c6      	str	r6, [r0, #12]
 800452c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800452e:	68f3      	ldr	r3, [r6, #12]
 8004530:	b183      	cbz	r3, 8004554 <_Balloc+0x50>
 8004532:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800453a:	b9b8      	cbnz	r0, 800456c <_Balloc+0x68>
 800453c:	2101      	movs	r1, #1
 800453e:	fa01 f605 	lsl.w	r6, r1, r5
 8004542:	1d72      	adds	r2, r6, #5
 8004544:	0092      	lsls	r2, r2, #2
 8004546:	4620      	mov	r0, r4
 8004548:	f000 fb5a 	bl	8004c00 <_calloc_r>
 800454c:	b160      	cbz	r0, 8004568 <_Balloc+0x64>
 800454e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004552:	e00e      	b.n	8004572 <_Balloc+0x6e>
 8004554:	2221      	movs	r2, #33	; 0x21
 8004556:	2104      	movs	r1, #4
 8004558:	4620      	mov	r0, r4
 800455a:	f000 fb51 	bl	8004c00 <_calloc_r>
 800455e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004560:	60f0      	str	r0, [r6, #12]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1e4      	bne.n	8004532 <_Balloc+0x2e>
 8004568:	2000      	movs	r0, #0
 800456a:	bd70      	pop	{r4, r5, r6, pc}
 800456c:	6802      	ldr	r2, [r0, #0]
 800456e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004572:	2300      	movs	r3, #0
 8004574:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004578:	e7f7      	b.n	800456a <_Balloc+0x66>
 800457a:	bf00      	nop
 800457c:	08005c8d 	.word	0x08005c8d
 8004580:	08005d14 	.word	0x08005d14

08004584 <_Bfree>:
 8004584:	b570      	push	{r4, r5, r6, lr}
 8004586:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004588:	4605      	mov	r5, r0
 800458a:	460c      	mov	r4, r1
 800458c:	b976      	cbnz	r6, 80045ac <_Bfree+0x28>
 800458e:	2010      	movs	r0, #16
 8004590:	f7ff ffa2 	bl	80044d8 <malloc>
 8004594:	4602      	mov	r2, r0
 8004596:	6268      	str	r0, [r5, #36]	; 0x24
 8004598:	b920      	cbnz	r0, 80045a4 <_Bfree+0x20>
 800459a:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <_Bfree+0x3c>)
 800459c:	4809      	ldr	r0, [pc, #36]	; (80045c4 <_Bfree+0x40>)
 800459e:	218a      	movs	r1, #138	; 0x8a
 80045a0:	f000 fd54 	bl	800504c <__assert_func>
 80045a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80045a8:	6006      	str	r6, [r0, #0]
 80045aa:	60c6      	str	r6, [r0, #12]
 80045ac:	b13c      	cbz	r4, 80045be <_Bfree+0x3a>
 80045ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80045b0:	6862      	ldr	r2, [r4, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80045b8:	6021      	str	r1, [r4, #0]
 80045ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80045be:	bd70      	pop	{r4, r5, r6, pc}
 80045c0:	08005c8d 	.word	0x08005c8d
 80045c4:	08005d14 	.word	0x08005d14

080045c8 <__multadd>:
 80045c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045cc:	690e      	ldr	r6, [r1, #16]
 80045ce:	4607      	mov	r7, r0
 80045d0:	4698      	mov	r8, r3
 80045d2:	460c      	mov	r4, r1
 80045d4:	f101 0014 	add.w	r0, r1, #20
 80045d8:	2300      	movs	r3, #0
 80045da:	6805      	ldr	r5, [r0, #0]
 80045dc:	b2a9      	uxth	r1, r5
 80045de:	fb02 8101 	mla	r1, r2, r1, r8
 80045e2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80045e6:	0c2d      	lsrs	r5, r5, #16
 80045e8:	fb02 c505 	mla	r5, r2, r5, ip
 80045ec:	b289      	uxth	r1, r1
 80045ee:	3301      	adds	r3, #1
 80045f0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80045f4:	429e      	cmp	r6, r3
 80045f6:	f840 1b04 	str.w	r1, [r0], #4
 80045fa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80045fe:	dcec      	bgt.n	80045da <__multadd+0x12>
 8004600:	f1b8 0f00 	cmp.w	r8, #0
 8004604:	d022      	beq.n	800464c <__multadd+0x84>
 8004606:	68a3      	ldr	r3, [r4, #8]
 8004608:	42b3      	cmp	r3, r6
 800460a:	dc19      	bgt.n	8004640 <__multadd+0x78>
 800460c:	6861      	ldr	r1, [r4, #4]
 800460e:	4638      	mov	r0, r7
 8004610:	3101      	adds	r1, #1
 8004612:	f7ff ff77 	bl	8004504 <_Balloc>
 8004616:	4605      	mov	r5, r0
 8004618:	b928      	cbnz	r0, 8004626 <__multadd+0x5e>
 800461a:	4602      	mov	r2, r0
 800461c:	4b0d      	ldr	r3, [pc, #52]	; (8004654 <__multadd+0x8c>)
 800461e:	480e      	ldr	r0, [pc, #56]	; (8004658 <__multadd+0x90>)
 8004620:	21b5      	movs	r1, #181	; 0xb5
 8004622:	f000 fd13 	bl	800504c <__assert_func>
 8004626:	6922      	ldr	r2, [r4, #16]
 8004628:	3202      	adds	r2, #2
 800462a:	f104 010c 	add.w	r1, r4, #12
 800462e:	0092      	lsls	r2, r2, #2
 8004630:	300c      	adds	r0, #12
 8004632:	f7ff ff59 	bl	80044e8 <memcpy>
 8004636:	4621      	mov	r1, r4
 8004638:	4638      	mov	r0, r7
 800463a:	f7ff ffa3 	bl	8004584 <_Bfree>
 800463e:	462c      	mov	r4, r5
 8004640:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004644:	3601      	adds	r6, #1
 8004646:	f8c3 8014 	str.w	r8, [r3, #20]
 800464a:	6126      	str	r6, [r4, #16]
 800464c:	4620      	mov	r0, r4
 800464e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004652:	bf00      	nop
 8004654:	08005d03 	.word	0x08005d03
 8004658:	08005d14 	.word	0x08005d14

0800465c <__hi0bits>:
 800465c:	0c03      	lsrs	r3, r0, #16
 800465e:	041b      	lsls	r3, r3, #16
 8004660:	b9d3      	cbnz	r3, 8004698 <__hi0bits+0x3c>
 8004662:	0400      	lsls	r0, r0, #16
 8004664:	2310      	movs	r3, #16
 8004666:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800466a:	bf04      	itt	eq
 800466c:	0200      	lsleq	r0, r0, #8
 800466e:	3308      	addeq	r3, #8
 8004670:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004674:	bf04      	itt	eq
 8004676:	0100      	lsleq	r0, r0, #4
 8004678:	3304      	addeq	r3, #4
 800467a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800467e:	bf04      	itt	eq
 8004680:	0080      	lsleq	r0, r0, #2
 8004682:	3302      	addeq	r3, #2
 8004684:	2800      	cmp	r0, #0
 8004686:	db05      	blt.n	8004694 <__hi0bits+0x38>
 8004688:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800468c:	f103 0301 	add.w	r3, r3, #1
 8004690:	bf08      	it	eq
 8004692:	2320      	moveq	r3, #32
 8004694:	4618      	mov	r0, r3
 8004696:	4770      	bx	lr
 8004698:	2300      	movs	r3, #0
 800469a:	e7e4      	b.n	8004666 <__hi0bits+0xa>

0800469c <__lo0bits>:
 800469c:	6803      	ldr	r3, [r0, #0]
 800469e:	f013 0207 	ands.w	r2, r3, #7
 80046a2:	4601      	mov	r1, r0
 80046a4:	d00b      	beq.n	80046be <__lo0bits+0x22>
 80046a6:	07da      	lsls	r2, r3, #31
 80046a8:	d424      	bmi.n	80046f4 <__lo0bits+0x58>
 80046aa:	0798      	lsls	r0, r3, #30
 80046ac:	bf49      	itett	mi
 80046ae:	085b      	lsrmi	r3, r3, #1
 80046b0:	089b      	lsrpl	r3, r3, #2
 80046b2:	2001      	movmi	r0, #1
 80046b4:	600b      	strmi	r3, [r1, #0]
 80046b6:	bf5c      	itt	pl
 80046b8:	600b      	strpl	r3, [r1, #0]
 80046ba:	2002      	movpl	r0, #2
 80046bc:	4770      	bx	lr
 80046be:	b298      	uxth	r0, r3
 80046c0:	b9b0      	cbnz	r0, 80046f0 <__lo0bits+0x54>
 80046c2:	0c1b      	lsrs	r3, r3, #16
 80046c4:	2010      	movs	r0, #16
 80046c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80046ca:	bf04      	itt	eq
 80046cc:	0a1b      	lsreq	r3, r3, #8
 80046ce:	3008      	addeq	r0, #8
 80046d0:	071a      	lsls	r2, r3, #28
 80046d2:	bf04      	itt	eq
 80046d4:	091b      	lsreq	r3, r3, #4
 80046d6:	3004      	addeq	r0, #4
 80046d8:	079a      	lsls	r2, r3, #30
 80046da:	bf04      	itt	eq
 80046dc:	089b      	lsreq	r3, r3, #2
 80046de:	3002      	addeq	r0, #2
 80046e0:	07da      	lsls	r2, r3, #31
 80046e2:	d403      	bmi.n	80046ec <__lo0bits+0x50>
 80046e4:	085b      	lsrs	r3, r3, #1
 80046e6:	f100 0001 	add.w	r0, r0, #1
 80046ea:	d005      	beq.n	80046f8 <__lo0bits+0x5c>
 80046ec:	600b      	str	r3, [r1, #0]
 80046ee:	4770      	bx	lr
 80046f0:	4610      	mov	r0, r2
 80046f2:	e7e8      	b.n	80046c6 <__lo0bits+0x2a>
 80046f4:	2000      	movs	r0, #0
 80046f6:	4770      	bx	lr
 80046f8:	2020      	movs	r0, #32
 80046fa:	4770      	bx	lr

080046fc <__i2b>:
 80046fc:	b510      	push	{r4, lr}
 80046fe:	460c      	mov	r4, r1
 8004700:	2101      	movs	r1, #1
 8004702:	f7ff feff 	bl	8004504 <_Balloc>
 8004706:	4602      	mov	r2, r0
 8004708:	b928      	cbnz	r0, 8004716 <__i2b+0x1a>
 800470a:	4b05      	ldr	r3, [pc, #20]	; (8004720 <__i2b+0x24>)
 800470c:	4805      	ldr	r0, [pc, #20]	; (8004724 <__i2b+0x28>)
 800470e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004712:	f000 fc9b 	bl	800504c <__assert_func>
 8004716:	2301      	movs	r3, #1
 8004718:	6144      	str	r4, [r0, #20]
 800471a:	6103      	str	r3, [r0, #16]
 800471c:	bd10      	pop	{r4, pc}
 800471e:	bf00      	nop
 8004720:	08005d03 	.word	0x08005d03
 8004724:	08005d14 	.word	0x08005d14

08004728 <__multiply>:
 8004728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800472c:	4614      	mov	r4, r2
 800472e:	690a      	ldr	r2, [r1, #16]
 8004730:	6923      	ldr	r3, [r4, #16]
 8004732:	429a      	cmp	r2, r3
 8004734:	bfb8      	it	lt
 8004736:	460b      	movlt	r3, r1
 8004738:	460d      	mov	r5, r1
 800473a:	bfbc      	itt	lt
 800473c:	4625      	movlt	r5, r4
 800473e:	461c      	movlt	r4, r3
 8004740:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004744:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004748:	68ab      	ldr	r3, [r5, #8]
 800474a:	6869      	ldr	r1, [r5, #4]
 800474c:	eb0a 0709 	add.w	r7, sl, r9
 8004750:	42bb      	cmp	r3, r7
 8004752:	b085      	sub	sp, #20
 8004754:	bfb8      	it	lt
 8004756:	3101      	addlt	r1, #1
 8004758:	f7ff fed4 	bl	8004504 <_Balloc>
 800475c:	b930      	cbnz	r0, 800476c <__multiply+0x44>
 800475e:	4602      	mov	r2, r0
 8004760:	4b42      	ldr	r3, [pc, #264]	; (800486c <__multiply+0x144>)
 8004762:	4843      	ldr	r0, [pc, #268]	; (8004870 <__multiply+0x148>)
 8004764:	f240 115d 	movw	r1, #349	; 0x15d
 8004768:	f000 fc70 	bl	800504c <__assert_func>
 800476c:	f100 0614 	add.w	r6, r0, #20
 8004770:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004774:	4633      	mov	r3, r6
 8004776:	2200      	movs	r2, #0
 8004778:	4543      	cmp	r3, r8
 800477a:	d31e      	bcc.n	80047ba <__multiply+0x92>
 800477c:	f105 0c14 	add.w	ip, r5, #20
 8004780:	f104 0314 	add.w	r3, r4, #20
 8004784:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004788:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800478c:	9202      	str	r2, [sp, #8]
 800478e:	ebac 0205 	sub.w	r2, ip, r5
 8004792:	3a15      	subs	r2, #21
 8004794:	f022 0203 	bic.w	r2, r2, #3
 8004798:	3204      	adds	r2, #4
 800479a:	f105 0115 	add.w	r1, r5, #21
 800479e:	458c      	cmp	ip, r1
 80047a0:	bf38      	it	cc
 80047a2:	2204      	movcc	r2, #4
 80047a4:	9201      	str	r2, [sp, #4]
 80047a6:	9a02      	ldr	r2, [sp, #8]
 80047a8:	9303      	str	r3, [sp, #12]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d808      	bhi.n	80047c0 <__multiply+0x98>
 80047ae:	2f00      	cmp	r7, #0
 80047b0:	dc55      	bgt.n	800485e <__multiply+0x136>
 80047b2:	6107      	str	r7, [r0, #16]
 80047b4:	b005      	add	sp, #20
 80047b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ba:	f843 2b04 	str.w	r2, [r3], #4
 80047be:	e7db      	b.n	8004778 <__multiply+0x50>
 80047c0:	f8b3 a000 	ldrh.w	sl, [r3]
 80047c4:	f1ba 0f00 	cmp.w	sl, #0
 80047c8:	d020      	beq.n	800480c <__multiply+0xe4>
 80047ca:	f105 0e14 	add.w	lr, r5, #20
 80047ce:	46b1      	mov	r9, r6
 80047d0:	2200      	movs	r2, #0
 80047d2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80047d6:	f8d9 b000 	ldr.w	fp, [r9]
 80047da:	b2a1      	uxth	r1, r4
 80047dc:	fa1f fb8b 	uxth.w	fp, fp
 80047e0:	fb0a b101 	mla	r1, sl, r1, fp
 80047e4:	4411      	add	r1, r2
 80047e6:	f8d9 2000 	ldr.w	r2, [r9]
 80047ea:	0c24      	lsrs	r4, r4, #16
 80047ec:	0c12      	lsrs	r2, r2, #16
 80047ee:	fb0a 2404 	mla	r4, sl, r4, r2
 80047f2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80047f6:	b289      	uxth	r1, r1
 80047f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80047fc:	45f4      	cmp	ip, lr
 80047fe:	f849 1b04 	str.w	r1, [r9], #4
 8004802:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004806:	d8e4      	bhi.n	80047d2 <__multiply+0xaa>
 8004808:	9901      	ldr	r1, [sp, #4]
 800480a:	5072      	str	r2, [r6, r1]
 800480c:	9a03      	ldr	r2, [sp, #12]
 800480e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004812:	3304      	adds	r3, #4
 8004814:	f1b9 0f00 	cmp.w	r9, #0
 8004818:	d01f      	beq.n	800485a <__multiply+0x132>
 800481a:	6834      	ldr	r4, [r6, #0]
 800481c:	f105 0114 	add.w	r1, r5, #20
 8004820:	46b6      	mov	lr, r6
 8004822:	f04f 0a00 	mov.w	sl, #0
 8004826:	880a      	ldrh	r2, [r1, #0]
 8004828:	f8be b002 	ldrh.w	fp, [lr, #2]
 800482c:	fb09 b202 	mla	r2, r9, r2, fp
 8004830:	4492      	add	sl, r2
 8004832:	b2a4      	uxth	r4, r4
 8004834:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004838:	f84e 4b04 	str.w	r4, [lr], #4
 800483c:	f851 4b04 	ldr.w	r4, [r1], #4
 8004840:	f8be 2000 	ldrh.w	r2, [lr]
 8004844:	0c24      	lsrs	r4, r4, #16
 8004846:	fb09 2404 	mla	r4, r9, r4, r2
 800484a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800484e:	458c      	cmp	ip, r1
 8004850:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004854:	d8e7      	bhi.n	8004826 <__multiply+0xfe>
 8004856:	9a01      	ldr	r2, [sp, #4]
 8004858:	50b4      	str	r4, [r6, r2]
 800485a:	3604      	adds	r6, #4
 800485c:	e7a3      	b.n	80047a6 <__multiply+0x7e>
 800485e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1a5      	bne.n	80047b2 <__multiply+0x8a>
 8004866:	3f01      	subs	r7, #1
 8004868:	e7a1      	b.n	80047ae <__multiply+0x86>
 800486a:	bf00      	nop
 800486c:	08005d03 	.word	0x08005d03
 8004870:	08005d14 	.word	0x08005d14

08004874 <__pow5mult>:
 8004874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004878:	4615      	mov	r5, r2
 800487a:	f012 0203 	ands.w	r2, r2, #3
 800487e:	4606      	mov	r6, r0
 8004880:	460f      	mov	r7, r1
 8004882:	d007      	beq.n	8004894 <__pow5mult+0x20>
 8004884:	4c25      	ldr	r4, [pc, #148]	; (800491c <__pow5mult+0xa8>)
 8004886:	3a01      	subs	r2, #1
 8004888:	2300      	movs	r3, #0
 800488a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800488e:	f7ff fe9b 	bl	80045c8 <__multadd>
 8004892:	4607      	mov	r7, r0
 8004894:	10ad      	asrs	r5, r5, #2
 8004896:	d03d      	beq.n	8004914 <__pow5mult+0xa0>
 8004898:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800489a:	b97c      	cbnz	r4, 80048bc <__pow5mult+0x48>
 800489c:	2010      	movs	r0, #16
 800489e:	f7ff fe1b 	bl	80044d8 <malloc>
 80048a2:	4602      	mov	r2, r0
 80048a4:	6270      	str	r0, [r6, #36]	; 0x24
 80048a6:	b928      	cbnz	r0, 80048b4 <__pow5mult+0x40>
 80048a8:	4b1d      	ldr	r3, [pc, #116]	; (8004920 <__pow5mult+0xac>)
 80048aa:	481e      	ldr	r0, [pc, #120]	; (8004924 <__pow5mult+0xb0>)
 80048ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80048b0:	f000 fbcc 	bl	800504c <__assert_func>
 80048b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80048b8:	6004      	str	r4, [r0, #0]
 80048ba:	60c4      	str	r4, [r0, #12]
 80048bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80048c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80048c4:	b94c      	cbnz	r4, 80048da <__pow5mult+0x66>
 80048c6:	f240 2171 	movw	r1, #625	; 0x271
 80048ca:	4630      	mov	r0, r6
 80048cc:	f7ff ff16 	bl	80046fc <__i2b>
 80048d0:	2300      	movs	r3, #0
 80048d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80048d6:	4604      	mov	r4, r0
 80048d8:	6003      	str	r3, [r0, #0]
 80048da:	f04f 0900 	mov.w	r9, #0
 80048de:	07eb      	lsls	r3, r5, #31
 80048e0:	d50a      	bpl.n	80048f8 <__pow5mult+0x84>
 80048e2:	4639      	mov	r1, r7
 80048e4:	4622      	mov	r2, r4
 80048e6:	4630      	mov	r0, r6
 80048e8:	f7ff ff1e 	bl	8004728 <__multiply>
 80048ec:	4639      	mov	r1, r7
 80048ee:	4680      	mov	r8, r0
 80048f0:	4630      	mov	r0, r6
 80048f2:	f7ff fe47 	bl	8004584 <_Bfree>
 80048f6:	4647      	mov	r7, r8
 80048f8:	106d      	asrs	r5, r5, #1
 80048fa:	d00b      	beq.n	8004914 <__pow5mult+0xa0>
 80048fc:	6820      	ldr	r0, [r4, #0]
 80048fe:	b938      	cbnz	r0, 8004910 <__pow5mult+0x9c>
 8004900:	4622      	mov	r2, r4
 8004902:	4621      	mov	r1, r4
 8004904:	4630      	mov	r0, r6
 8004906:	f7ff ff0f 	bl	8004728 <__multiply>
 800490a:	6020      	str	r0, [r4, #0]
 800490c:	f8c0 9000 	str.w	r9, [r0]
 8004910:	4604      	mov	r4, r0
 8004912:	e7e4      	b.n	80048de <__pow5mult+0x6a>
 8004914:	4638      	mov	r0, r7
 8004916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800491a:	bf00      	nop
 800491c:	08005e68 	.word	0x08005e68
 8004920:	08005c8d 	.word	0x08005c8d
 8004924:	08005d14 	.word	0x08005d14

08004928 <__lshift>:
 8004928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800492c:	460c      	mov	r4, r1
 800492e:	6849      	ldr	r1, [r1, #4]
 8004930:	6923      	ldr	r3, [r4, #16]
 8004932:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004936:	68a3      	ldr	r3, [r4, #8]
 8004938:	4607      	mov	r7, r0
 800493a:	4691      	mov	r9, r2
 800493c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004940:	f108 0601 	add.w	r6, r8, #1
 8004944:	42b3      	cmp	r3, r6
 8004946:	db0b      	blt.n	8004960 <__lshift+0x38>
 8004948:	4638      	mov	r0, r7
 800494a:	f7ff fddb 	bl	8004504 <_Balloc>
 800494e:	4605      	mov	r5, r0
 8004950:	b948      	cbnz	r0, 8004966 <__lshift+0x3e>
 8004952:	4602      	mov	r2, r0
 8004954:	4b28      	ldr	r3, [pc, #160]	; (80049f8 <__lshift+0xd0>)
 8004956:	4829      	ldr	r0, [pc, #164]	; (80049fc <__lshift+0xd4>)
 8004958:	f240 11d9 	movw	r1, #473	; 0x1d9
 800495c:	f000 fb76 	bl	800504c <__assert_func>
 8004960:	3101      	adds	r1, #1
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	e7ee      	b.n	8004944 <__lshift+0x1c>
 8004966:	2300      	movs	r3, #0
 8004968:	f100 0114 	add.w	r1, r0, #20
 800496c:	f100 0210 	add.w	r2, r0, #16
 8004970:	4618      	mov	r0, r3
 8004972:	4553      	cmp	r3, sl
 8004974:	db33      	blt.n	80049de <__lshift+0xb6>
 8004976:	6920      	ldr	r0, [r4, #16]
 8004978:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800497c:	f104 0314 	add.w	r3, r4, #20
 8004980:	f019 091f 	ands.w	r9, r9, #31
 8004984:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004988:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800498c:	d02b      	beq.n	80049e6 <__lshift+0xbe>
 800498e:	f1c9 0e20 	rsb	lr, r9, #32
 8004992:	468a      	mov	sl, r1
 8004994:	2200      	movs	r2, #0
 8004996:	6818      	ldr	r0, [r3, #0]
 8004998:	fa00 f009 	lsl.w	r0, r0, r9
 800499c:	4302      	orrs	r2, r0
 800499e:	f84a 2b04 	str.w	r2, [sl], #4
 80049a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80049a6:	459c      	cmp	ip, r3
 80049a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80049ac:	d8f3      	bhi.n	8004996 <__lshift+0x6e>
 80049ae:	ebac 0304 	sub.w	r3, ip, r4
 80049b2:	3b15      	subs	r3, #21
 80049b4:	f023 0303 	bic.w	r3, r3, #3
 80049b8:	3304      	adds	r3, #4
 80049ba:	f104 0015 	add.w	r0, r4, #21
 80049be:	4584      	cmp	ip, r0
 80049c0:	bf38      	it	cc
 80049c2:	2304      	movcc	r3, #4
 80049c4:	50ca      	str	r2, [r1, r3]
 80049c6:	b10a      	cbz	r2, 80049cc <__lshift+0xa4>
 80049c8:	f108 0602 	add.w	r6, r8, #2
 80049cc:	3e01      	subs	r6, #1
 80049ce:	4638      	mov	r0, r7
 80049d0:	612e      	str	r6, [r5, #16]
 80049d2:	4621      	mov	r1, r4
 80049d4:	f7ff fdd6 	bl	8004584 <_Bfree>
 80049d8:	4628      	mov	r0, r5
 80049da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049de:	f842 0f04 	str.w	r0, [r2, #4]!
 80049e2:	3301      	adds	r3, #1
 80049e4:	e7c5      	b.n	8004972 <__lshift+0x4a>
 80049e6:	3904      	subs	r1, #4
 80049e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80049ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80049f0:	459c      	cmp	ip, r3
 80049f2:	d8f9      	bhi.n	80049e8 <__lshift+0xc0>
 80049f4:	e7ea      	b.n	80049cc <__lshift+0xa4>
 80049f6:	bf00      	nop
 80049f8:	08005d03 	.word	0x08005d03
 80049fc:	08005d14 	.word	0x08005d14

08004a00 <__mcmp>:
 8004a00:	b530      	push	{r4, r5, lr}
 8004a02:	6902      	ldr	r2, [r0, #16]
 8004a04:	690c      	ldr	r4, [r1, #16]
 8004a06:	1b12      	subs	r2, r2, r4
 8004a08:	d10e      	bne.n	8004a28 <__mcmp+0x28>
 8004a0a:	f100 0314 	add.w	r3, r0, #20
 8004a0e:	3114      	adds	r1, #20
 8004a10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004a14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004a18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004a1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004a20:	42a5      	cmp	r5, r4
 8004a22:	d003      	beq.n	8004a2c <__mcmp+0x2c>
 8004a24:	d305      	bcc.n	8004a32 <__mcmp+0x32>
 8004a26:	2201      	movs	r2, #1
 8004a28:	4610      	mov	r0, r2
 8004a2a:	bd30      	pop	{r4, r5, pc}
 8004a2c:	4283      	cmp	r3, r0
 8004a2e:	d3f3      	bcc.n	8004a18 <__mcmp+0x18>
 8004a30:	e7fa      	b.n	8004a28 <__mcmp+0x28>
 8004a32:	f04f 32ff 	mov.w	r2, #4294967295
 8004a36:	e7f7      	b.n	8004a28 <__mcmp+0x28>

08004a38 <__mdiff>:
 8004a38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a3c:	460c      	mov	r4, r1
 8004a3e:	4606      	mov	r6, r0
 8004a40:	4611      	mov	r1, r2
 8004a42:	4620      	mov	r0, r4
 8004a44:	4617      	mov	r7, r2
 8004a46:	f7ff ffdb 	bl	8004a00 <__mcmp>
 8004a4a:	1e05      	subs	r5, r0, #0
 8004a4c:	d110      	bne.n	8004a70 <__mdiff+0x38>
 8004a4e:	4629      	mov	r1, r5
 8004a50:	4630      	mov	r0, r6
 8004a52:	f7ff fd57 	bl	8004504 <_Balloc>
 8004a56:	b930      	cbnz	r0, 8004a66 <__mdiff+0x2e>
 8004a58:	4b39      	ldr	r3, [pc, #228]	; (8004b40 <__mdiff+0x108>)
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	f240 2132 	movw	r1, #562	; 0x232
 8004a60:	4838      	ldr	r0, [pc, #224]	; (8004b44 <__mdiff+0x10c>)
 8004a62:	f000 faf3 	bl	800504c <__assert_func>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004a6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a70:	bfa4      	itt	ge
 8004a72:	463b      	movge	r3, r7
 8004a74:	4627      	movge	r7, r4
 8004a76:	4630      	mov	r0, r6
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	bfa6      	itte	ge
 8004a7c:	461c      	movge	r4, r3
 8004a7e:	2500      	movge	r5, #0
 8004a80:	2501      	movlt	r5, #1
 8004a82:	f7ff fd3f 	bl	8004504 <_Balloc>
 8004a86:	b920      	cbnz	r0, 8004a92 <__mdiff+0x5a>
 8004a88:	4b2d      	ldr	r3, [pc, #180]	; (8004b40 <__mdiff+0x108>)
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004a90:	e7e6      	b.n	8004a60 <__mdiff+0x28>
 8004a92:	693e      	ldr	r6, [r7, #16]
 8004a94:	60c5      	str	r5, [r0, #12]
 8004a96:	6925      	ldr	r5, [r4, #16]
 8004a98:	f107 0114 	add.w	r1, r7, #20
 8004a9c:	f104 0914 	add.w	r9, r4, #20
 8004aa0:	f100 0e14 	add.w	lr, r0, #20
 8004aa4:	f107 0210 	add.w	r2, r7, #16
 8004aa8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8004aac:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8004ab0:	46f2      	mov	sl, lr
 8004ab2:	2700      	movs	r7, #0
 8004ab4:	f859 3b04 	ldr.w	r3, [r9], #4
 8004ab8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004abc:	fa1f f883 	uxth.w	r8, r3
 8004ac0:	fa17 f78b 	uxtah	r7, r7, fp
 8004ac4:	0c1b      	lsrs	r3, r3, #16
 8004ac6:	eba7 0808 	sub.w	r8, r7, r8
 8004aca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004ace:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004ad2:	fa1f f888 	uxth.w	r8, r8
 8004ad6:	141f      	asrs	r7, r3, #16
 8004ad8:	454d      	cmp	r5, r9
 8004ada:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004ade:	f84a 3b04 	str.w	r3, [sl], #4
 8004ae2:	d8e7      	bhi.n	8004ab4 <__mdiff+0x7c>
 8004ae4:	1b2b      	subs	r3, r5, r4
 8004ae6:	3b15      	subs	r3, #21
 8004ae8:	f023 0303 	bic.w	r3, r3, #3
 8004aec:	3304      	adds	r3, #4
 8004aee:	3415      	adds	r4, #21
 8004af0:	42a5      	cmp	r5, r4
 8004af2:	bf38      	it	cc
 8004af4:	2304      	movcc	r3, #4
 8004af6:	4419      	add	r1, r3
 8004af8:	4473      	add	r3, lr
 8004afa:	469e      	mov	lr, r3
 8004afc:	460d      	mov	r5, r1
 8004afe:	4565      	cmp	r5, ip
 8004b00:	d30e      	bcc.n	8004b20 <__mdiff+0xe8>
 8004b02:	f10c 0203 	add.w	r2, ip, #3
 8004b06:	1a52      	subs	r2, r2, r1
 8004b08:	f022 0203 	bic.w	r2, r2, #3
 8004b0c:	3903      	subs	r1, #3
 8004b0e:	458c      	cmp	ip, r1
 8004b10:	bf38      	it	cc
 8004b12:	2200      	movcc	r2, #0
 8004b14:	441a      	add	r2, r3
 8004b16:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004b1a:	b17b      	cbz	r3, 8004b3c <__mdiff+0x104>
 8004b1c:	6106      	str	r6, [r0, #16]
 8004b1e:	e7a5      	b.n	8004a6c <__mdiff+0x34>
 8004b20:	f855 8b04 	ldr.w	r8, [r5], #4
 8004b24:	fa17 f488 	uxtah	r4, r7, r8
 8004b28:	1422      	asrs	r2, r4, #16
 8004b2a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8004b2e:	b2a4      	uxth	r4, r4
 8004b30:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004b34:	f84e 4b04 	str.w	r4, [lr], #4
 8004b38:	1417      	asrs	r7, r2, #16
 8004b3a:	e7e0      	b.n	8004afe <__mdiff+0xc6>
 8004b3c:	3e01      	subs	r6, #1
 8004b3e:	e7ea      	b.n	8004b16 <__mdiff+0xde>
 8004b40:	08005d03 	.word	0x08005d03
 8004b44:	08005d14 	.word	0x08005d14

08004b48 <__d2b>:
 8004b48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004b4c:	4689      	mov	r9, r1
 8004b4e:	2101      	movs	r1, #1
 8004b50:	ec57 6b10 	vmov	r6, r7, d0
 8004b54:	4690      	mov	r8, r2
 8004b56:	f7ff fcd5 	bl	8004504 <_Balloc>
 8004b5a:	4604      	mov	r4, r0
 8004b5c:	b930      	cbnz	r0, 8004b6c <__d2b+0x24>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	4b25      	ldr	r3, [pc, #148]	; (8004bf8 <__d2b+0xb0>)
 8004b62:	4826      	ldr	r0, [pc, #152]	; (8004bfc <__d2b+0xb4>)
 8004b64:	f240 310a 	movw	r1, #778	; 0x30a
 8004b68:	f000 fa70 	bl	800504c <__assert_func>
 8004b6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004b70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004b74:	bb35      	cbnz	r5, 8004bc4 <__d2b+0x7c>
 8004b76:	2e00      	cmp	r6, #0
 8004b78:	9301      	str	r3, [sp, #4]
 8004b7a:	d028      	beq.n	8004bce <__d2b+0x86>
 8004b7c:	4668      	mov	r0, sp
 8004b7e:	9600      	str	r6, [sp, #0]
 8004b80:	f7ff fd8c 	bl	800469c <__lo0bits>
 8004b84:	9900      	ldr	r1, [sp, #0]
 8004b86:	b300      	cbz	r0, 8004bca <__d2b+0x82>
 8004b88:	9a01      	ldr	r2, [sp, #4]
 8004b8a:	f1c0 0320 	rsb	r3, r0, #32
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	430b      	orrs	r3, r1
 8004b94:	40c2      	lsrs	r2, r0
 8004b96:	6163      	str	r3, [r4, #20]
 8004b98:	9201      	str	r2, [sp, #4]
 8004b9a:	9b01      	ldr	r3, [sp, #4]
 8004b9c:	61a3      	str	r3, [r4, #24]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	bf14      	ite	ne
 8004ba2:	2202      	movne	r2, #2
 8004ba4:	2201      	moveq	r2, #1
 8004ba6:	6122      	str	r2, [r4, #16]
 8004ba8:	b1d5      	cbz	r5, 8004be0 <__d2b+0x98>
 8004baa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004bae:	4405      	add	r5, r0
 8004bb0:	f8c9 5000 	str.w	r5, [r9]
 8004bb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004bb8:	f8c8 0000 	str.w	r0, [r8]
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	b003      	add	sp, #12
 8004bc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004bc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bc8:	e7d5      	b.n	8004b76 <__d2b+0x2e>
 8004bca:	6161      	str	r1, [r4, #20]
 8004bcc:	e7e5      	b.n	8004b9a <__d2b+0x52>
 8004bce:	a801      	add	r0, sp, #4
 8004bd0:	f7ff fd64 	bl	800469c <__lo0bits>
 8004bd4:	9b01      	ldr	r3, [sp, #4]
 8004bd6:	6163      	str	r3, [r4, #20]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	6122      	str	r2, [r4, #16]
 8004bdc:	3020      	adds	r0, #32
 8004bde:	e7e3      	b.n	8004ba8 <__d2b+0x60>
 8004be0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004be4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004be8:	f8c9 0000 	str.w	r0, [r9]
 8004bec:	6918      	ldr	r0, [r3, #16]
 8004bee:	f7ff fd35 	bl	800465c <__hi0bits>
 8004bf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004bf6:	e7df      	b.n	8004bb8 <__d2b+0x70>
 8004bf8:	08005d03 	.word	0x08005d03
 8004bfc:	08005d14 	.word	0x08005d14

08004c00 <_calloc_r>:
 8004c00:	b513      	push	{r0, r1, r4, lr}
 8004c02:	434a      	muls	r2, r1
 8004c04:	4611      	mov	r1, r2
 8004c06:	9201      	str	r2, [sp, #4]
 8004c08:	f000 f85a 	bl	8004cc0 <_malloc_r>
 8004c0c:	4604      	mov	r4, r0
 8004c0e:	b118      	cbz	r0, 8004c18 <_calloc_r+0x18>
 8004c10:	9a01      	ldr	r2, [sp, #4]
 8004c12:	2100      	movs	r1, #0
 8004c14:	f7fe f94a 	bl	8002eac <memset>
 8004c18:	4620      	mov	r0, r4
 8004c1a:	b002      	add	sp, #8
 8004c1c:	bd10      	pop	{r4, pc}
	...

08004c20 <_free_r>:
 8004c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c22:	2900      	cmp	r1, #0
 8004c24:	d048      	beq.n	8004cb8 <_free_r+0x98>
 8004c26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c2a:	9001      	str	r0, [sp, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f1a1 0404 	sub.w	r4, r1, #4
 8004c32:	bfb8      	it	lt
 8004c34:	18e4      	addlt	r4, r4, r3
 8004c36:	f000 fa65 	bl	8005104 <__malloc_lock>
 8004c3a:	4a20      	ldr	r2, [pc, #128]	; (8004cbc <_free_r+0x9c>)
 8004c3c:	9801      	ldr	r0, [sp, #4]
 8004c3e:	6813      	ldr	r3, [r2, #0]
 8004c40:	4615      	mov	r5, r2
 8004c42:	b933      	cbnz	r3, 8004c52 <_free_r+0x32>
 8004c44:	6063      	str	r3, [r4, #4]
 8004c46:	6014      	str	r4, [r2, #0]
 8004c48:	b003      	add	sp, #12
 8004c4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c4e:	f000 ba5f 	b.w	8005110 <__malloc_unlock>
 8004c52:	42a3      	cmp	r3, r4
 8004c54:	d90b      	bls.n	8004c6e <_free_r+0x4e>
 8004c56:	6821      	ldr	r1, [r4, #0]
 8004c58:	1862      	adds	r2, r4, r1
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	bf04      	itt	eq
 8004c5e:	681a      	ldreq	r2, [r3, #0]
 8004c60:	685b      	ldreq	r3, [r3, #4]
 8004c62:	6063      	str	r3, [r4, #4]
 8004c64:	bf04      	itt	eq
 8004c66:	1852      	addeq	r2, r2, r1
 8004c68:	6022      	streq	r2, [r4, #0]
 8004c6a:	602c      	str	r4, [r5, #0]
 8004c6c:	e7ec      	b.n	8004c48 <_free_r+0x28>
 8004c6e:	461a      	mov	r2, r3
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	b10b      	cbz	r3, 8004c78 <_free_r+0x58>
 8004c74:	42a3      	cmp	r3, r4
 8004c76:	d9fa      	bls.n	8004c6e <_free_r+0x4e>
 8004c78:	6811      	ldr	r1, [r2, #0]
 8004c7a:	1855      	adds	r5, r2, r1
 8004c7c:	42a5      	cmp	r5, r4
 8004c7e:	d10b      	bne.n	8004c98 <_free_r+0x78>
 8004c80:	6824      	ldr	r4, [r4, #0]
 8004c82:	4421      	add	r1, r4
 8004c84:	1854      	adds	r4, r2, r1
 8004c86:	42a3      	cmp	r3, r4
 8004c88:	6011      	str	r1, [r2, #0]
 8004c8a:	d1dd      	bne.n	8004c48 <_free_r+0x28>
 8004c8c:	681c      	ldr	r4, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	6053      	str	r3, [r2, #4]
 8004c92:	4421      	add	r1, r4
 8004c94:	6011      	str	r1, [r2, #0]
 8004c96:	e7d7      	b.n	8004c48 <_free_r+0x28>
 8004c98:	d902      	bls.n	8004ca0 <_free_r+0x80>
 8004c9a:	230c      	movs	r3, #12
 8004c9c:	6003      	str	r3, [r0, #0]
 8004c9e:	e7d3      	b.n	8004c48 <_free_r+0x28>
 8004ca0:	6825      	ldr	r5, [r4, #0]
 8004ca2:	1961      	adds	r1, r4, r5
 8004ca4:	428b      	cmp	r3, r1
 8004ca6:	bf04      	itt	eq
 8004ca8:	6819      	ldreq	r1, [r3, #0]
 8004caa:	685b      	ldreq	r3, [r3, #4]
 8004cac:	6063      	str	r3, [r4, #4]
 8004cae:	bf04      	itt	eq
 8004cb0:	1949      	addeq	r1, r1, r5
 8004cb2:	6021      	streq	r1, [r4, #0]
 8004cb4:	6054      	str	r4, [r2, #4]
 8004cb6:	e7c7      	b.n	8004c48 <_free_r+0x28>
 8004cb8:	b003      	add	sp, #12
 8004cba:	bd30      	pop	{r4, r5, pc}
 8004cbc:	20000200 	.word	0x20000200

08004cc0 <_malloc_r>:
 8004cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc2:	1ccd      	adds	r5, r1, #3
 8004cc4:	f025 0503 	bic.w	r5, r5, #3
 8004cc8:	3508      	adds	r5, #8
 8004cca:	2d0c      	cmp	r5, #12
 8004ccc:	bf38      	it	cc
 8004cce:	250c      	movcc	r5, #12
 8004cd0:	2d00      	cmp	r5, #0
 8004cd2:	4606      	mov	r6, r0
 8004cd4:	db01      	blt.n	8004cda <_malloc_r+0x1a>
 8004cd6:	42a9      	cmp	r1, r5
 8004cd8:	d903      	bls.n	8004ce2 <_malloc_r+0x22>
 8004cda:	230c      	movs	r3, #12
 8004cdc:	6033      	str	r3, [r6, #0]
 8004cde:	2000      	movs	r0, #0
 8004ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ce2:	f000 fa0f 	bl	8005104 <__malloc_lock>
 8004ce6:	4921      	ldr	r1, [pc, #132]	; (8004d6c <_malloc_r+0xac>)
 8004ce8:	680a      	ldr	r2, [r1, #0]
 8004cea:	4614      	mov	r4, r2
 8004cec:	b99c      	cbnz	r4, 8004d16 <_malloc_r+0x56>
 8004cee:	4f20      	ldr	r7, [pc, #128]	; (8004d70 <_malloc_r+0xb0>)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	b923      	cbnz	r3, 8004cfe <_malloc_r+0x3e>
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	4630      	mov	r0, r6
 8004cf8:	f000 f998 	bl	800502c <_sbrk_r>
 8004cfc:	6038      	str	r0, [r7, #0]
 8004cfe:	4629      	mov	r1, r5
 8004d00:	4630      	mov	r0, r6
 8004d02:	f000 f993 	bl	800502c <_sbrk_r>
 8004d06:	1c43      	adds	r3, r0, #1
 8004d08:	d123      	bne.n	8004d52 <_malloc_r+0x92>
 8004d0a:	230c      	movs	r3, #12
 8004d0c:	6033      	str	r3, [r6, #0]
 8004d0e:	4630      	mov	r0, r6
 8004d10:	f000 f9fe 	bl	8005110 <__malloc_unlock>
 8004d14:	e7e3      	b.n	8004cde <_malloc_r+0x1e>
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	1b5b      	subs	r3, r3, r5
 8004d1a:	d417      	bmi.n	8004d4c <_malloc_r+0x8c>
 8004d1c:	2b0b      	cmp	r3, #11
 8004d1e:	d903      	bls.n	8004d28 <_malloc_r+0x68>
 8004d20:	6023      	str	r3, [r4, #0]
 8004d22:	441c      	add	r4, r3
 8004d24:	6025      	str	r5, [r4, #0]
 8004d26:	e004      	b.n	8004d32 <_malloc_r+0x72>
 8004d28:	6863      	ldr	r3, [r4, #4]
 8004d2a:	42a2      	cmp	r2, r4
 8004d2c:	bf0c      	ite	eq
 8004d2e:	600b      	streq	r3, [r1, #0]
 8004d30:	6053      	strne	r3, [r2, #4]
 8004d32:	4630      	mov	r0, r6
 8004d34:	f000 f9ec 	bl	8005110 <__malloc_unlock>
 8004d38:	f104 000b 	add.w	r0, r4, #11
 8004d3c:	1d23      	adds	r3, r4, #4
 8004d3e:	f020 0007 	bic.w	r0, r0, #7
 8004d42:	1ac2      	subs	r2, r0, r3
 8004d44:	d0cc      	beq.n	8004ce0 <_malloc_r+0x20>
 8004d46:	1a1b      	subs	r3, r3, r0
 8004d48:	50a3      	str	r3, [r4, r2]
 8004d4a:	e7c9      	b.n	8004ce0 <_malloc_r+0x20>
 8004d4c:	4622      	mov	r2, r4
 8004d4e:	6864      	ldr	r4, [r4, #4]
 8004d50:	e7cc      	b.n	8004cec <_malloc_r+0x2c>
 8004d52:	1cc4      	adds	r4, r0, #3
 8004d54:	f024 0403 	bic.w	r4, r4, #3
 8004d58:	42a0      	cmp	r0, r4
 8004d5a:	d0e3      	beq.n	8004d24 <_malloc_r+0x64>
 8004d5c:	1a21      	subs	r1, r4, r0
 8004d5e:	4630      	mov	r0, r6
 8004d60:	f000 f964 	bl	800502c <_sbrk_r>
 8004d64:	3001      	adds	r0, #1
 8004d66:	d1dd      	bne.n	8004d24 <_malloc_r+0x64>
 8004d68:	e7cf      	b.n	8004d0a <_malloc_r+0x4a>
 8004d6a:	bf00      	nop
 8004d6c:	20000200 	.word	0x20000200
 8004d70:	20000204 	.word	0x20000204

08004d74 <__ssputs_r>:
 8004d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d78:	688e      	ldr	r6, [r1, #8]
 8004d7a:	429e      	cmp	r6, r3
 8004d7c:	4682      	mov	sl, r0
 8004d7e:	460c      	mov	r4, r1
 8004d80:	4690      	mov	r8, r2
 8004d82:	461f      	mov	r7, r3
 8004d84:	d838      	bhi.n	8004df8 <__ssputs_r+0x84>
 8004d86:	898a      	ldrh	r2, [r1, #12]
 8004d88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d8c:	d032      	beq.n	8004df4 <__ssputs_r+0x80>
 8004d8e:	6825      	ldr	r5, [r4, #0]
 8004d90:	6909      	ldr	r1, [r1, #16]
 8004d92:	eba5 0901 	sub.w	r9, r5, r1
 8004d96:	6965      	ldr	r5, [r4, #20]
 8004d98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004da0:	3301      	adds	r3, #1
 8004da2:	444b      	add	r3, r9
 8004da4:	106d      	asrs	r5, r5, #1
 8004da6:	429d      	cmp	r5, r3
 8004da8:	bf38      	it	cc
 8004daa:	461d      	movcc	r5, r3
 8004dac:	0553      	lsls	r3, r2, #21
 8004dae:	d531      	bpl.n	8004e14 <__ssputs_r+0xa0>
 8004db0:	4629      	mov	r1, r5
 8004db2:	f7ff ff85 	bl	8004cc0 <_malloc_r>
 8004db6:	4606      	mov	r6, r0
 8004db8:	b950      	cbnz	r0, 8004dd0 <__ssputs_r+0x5c>
 8004dba:	230c      	movs	r3, #12
 8004dbc:	f8ca 3000 	str.w	r3, [sl]
 8004dc0:	89a3      	ldrh	r3, [r4, #12]
 8004dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dc6:	81a3      	strh	r3, [r4, #12]
 8004dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd0:	6921      	ldr	r1, [r4, #16]
 8004dd2:	464a      	mov	r2, r9
 8004dd4:	f7ff fb88 	bl	80044e8 <memcpy>
 8004dd8:	89a3      	ldrh	r3, [r4, #12]
 8004dda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de2:	81a3      	strh	r3, [r4, #12]
 8004de4:	6126      	str	r6, [r4, #16]
 8004de6:	6165      	str	r5, [r4, #20]
 8004de8:	444e      	add	r6, r9
 8004dea:	eba5 0509 	sub.w	r5, r5, r9
 8004dee:	6026      	str	r6, [r4, #0]
 8004df0:	60a5      	str	r5, [r4, #8]
 8004df2:	463e      	mov	r6, r7
 8004df4:	42be      	cmp	r6, r7
 8004df6:	d900      	bls.n	8004dfa <__ssputs_r+0x86>
 8004df8:	463e      	mov	r6, r7
 8004dfa:	4632      	mov	r2, r6
 8004dfc:	6820      	ldr	r0, [r4, #0]
 8004dfe:	4641      	mov	r1, r8
 8004e00:	f000 f966 	bl	80050d0 <memmove>
 8004e04:	68a3      	ldr	r3, [r4, #8]
 8004e06:	6822      	ldr	r2, [r4, #0]
 8004e08:	1b9b      	subs	r3, r3, r6
 8004e0a:	4432      	add	r2, r6
 8004e0c:	60a3      	str	r3, [r4, #8]
 8004e0e:	6022      	str	r2, [r4, #0]
 8004e10:	2000      	movs	r0, #0
 8004e12:	e7db      	b.n	8004dcc <__ssputs_r+0x58>
 8004e14:	462a      	mov	r2, r5
 8004e16:	f000 f981 	bl	800511c <_realloc_r>
 8004e1a:	4606      	mov	r6, r0
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	d1e1      	bne.n	8004de4 <__ssputs_r+0x70>
 8004e20:	6921      	ldr	r1, [r4, #16]
 8004e22:	4650      	mov	r0, sl
 8004e24:	f7ff fefc 	bl	8004c20 <_free_r>
 8004e28:	e7c7      	b.n	8004dba <__ssputs_r+0x46>
	...

08004e2c <_svfiprintf_r>:
 8004e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e30:	4698      	mov	r8, r3
 8004e32:	898b      	ldrh	r3, [r1, #12]
 8004e34:	061b      	lsls	r3, r3, #24
 8004e36:	b09d      	sub	sp, #116	; 0x74
 8004e38:	4607      	mov	r7, r0
 8004e3a:	460d      	mov	r5, r1
 8004e3c:	4614      	mov	r4, r2
 8004e3e:	d50e      	bpl.n	8004e5e <_svfiprintf_r+0x32>
 8004e40:	690b      	ldr	r3, [r1, #16]
 8004e42:	b963      	cbnz	r3, 8004e5e <_svfiprintf_r+0x32>
 8004e44:	2140      	movs	r1, #64	; 0x40
 8004e46:	f7ff ff3b 	bl	8004cc0 <_malloc_r>
 8004e4a:	6028      	str	r0, [r5, #0]
 8004e4c:	6128      	str	r0, [r5, #16]
 8004e4e:	b920      	cbnz	r0, 8004e5a <_svfiprintf_r+0x2e>
 8004e50:	230c      	movs	r3, #12
 8004e52:	603b      	str	r3, [r7, #0]
 8004e54:	f04f 30ff 	mov.w	r0, #4294967295
 8004e58:	e0d1      	b.n	8004ffe <_svfiprintf_r+0x1d2>
 8004e5a:	2340      	movs	r3, #64	; 0x40
 8004e5c:	616b      	str	r3, [r5, #20]
 8004e5e:	2300      	movs	r3, #0
 8004e60:	9309      	str	r3, [sp, #36]	; 0x24
 8004e62:	2320      	movs	r3, #32
 8004e64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e68:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e6c:	2330      	movs	r3, #48	; 0x30
 8004e6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005018 <_svfiprintf_r+0x1ec>
 8004e72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e76:	f04f 0901 	mov.w	r9, #1
 8004e7a:	4623      	mov	r3, r4
 8004e7c:	469a      	mov	sl, r3
 8004e7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e82:	b10a      	cbz	r2, 8004e88 <_svfiprintf_r+0x5c>
 8004e84:	2a25      	cmp	r2, #37	; 0x25
 8004e86:	d1f9      	bne.n	8004e7c <_svfiprintf_r+0x50>
 8004e88:	ebba 0b04 	subs.w	fp, sl, r4
 8004e8c:	d00b      	beq.n	8004ea6 <_svfiprintf_r+0x7a>
 8004e8e:	465b      	mov	r3, fp
 8004e90:	4622      	mov	r2, r4
 8004e92:	4629      	mov	r1, r5
 8004e94:	4638      	mov	r0, r7
 8004e96:	f7ff ff6d 	bl	8004d74 <__ssputs_r>
 8004e9a:	3001      	adds	r0, #1
 8004e9c:	f000 80aa 	beq.w	8004ff4 <_svfiprintf_r+0x1c8>
 8004ea0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ea2:	445a      	add	r2, fp
 8004ea4:	9209      	str	r2, [sp, #36]	; 0x24
 8004ea6:	f89a 3000 	ldrb.w	r3, [sl]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 80a2 	beq.w	8004ff4 <_svfiprintf_r+0x1c8>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004eba:	f10a 0a01 	add.w	sl, sl, #1
 8004ebe:	9304      	str	r3, [sp, #16]
 8004ec0:	9307      	str	r3, [sp, #28]
 8004ec2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ec6:	931a      	str	r3, [sp, #104]	; 0x68
 8004ec8:	4654      	mov	r4, sl
 8004eca:	2205      	movs	r2, #5
 8004ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ed0:	4851      	ldr	r0, [pc, #324]	; (8005018 <_svfiprintf_r+0x1ec>)
 8004ed2:	f7fb f985 	bl	80001e0 <memchr>
 8004ed6:	9a04      	ldr	r2, [sp, #16]
 8004ed8:	b9d8      	cbnz	r0, 8004f12 <_svfiprintf_r+0xe6>
 8004eda:	06d0      	lsls	r0, r2, #27
 8004edc:	bf44      	itt	mi
 8004ede:	2320      	movmi	r3, #32
 8004ee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ee4:	0711      	lsls	r1, r2, #28
 8004ee6:	bf44      	itt	mi
 8004ee8:	232b      	movmi	r3, #43	; 0x2b
 8004eea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eee:	f89a 3000 	ldrb.w	r3, [sl]
 8004ef2:	2b2a      	cmp	r3, #42	; 0x2a
 8004ef4:	d015      	beq.n	8004f22 <_svfiprintf_r+0xf6>
 8004ef6:	9a07      	ldr	r2, [sp, #28]
 8004ef8:	4654      	mov	r4, sl
 8004efa:	2000      	movs	r0, #0
 8004efc:	f04f 0c0a 	mov.w	ip, #10
 8004f00:	4621      	mov	r1, r4
 8004f02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f06:	3b30      	subs	r3, #48	; 0x30
 8004f08:	2b09      	cmp	r3, #9
 8004f0a:	d94e      	bls.n	8004faa <_svfiprintf_r+0x17e>
 8004f0c:	b1b0      	cbz	r0, 8004f3c <_svfiprintf_r+0x110>
 8004f0e:	9207      	str	r2, [sp, #28]
 8004f10:	e014      	b.n	8004f3c <_svfiprintf_r+0x110>
 8004f12:	eba0 0308 	sub.w	r3, r0, r8
 8004f16:	fa09 f303 	lsl.w	r3, r9, r3
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	9304      	str	r3, [sp, #16]
 8004f1e:	46a2      	mov	sl, r4
 8004f20:	e7d2      	b.n	8004ec8 <_svfiprintf_r+0x9c>
 8004f22:	9b03      	ldr	r3, [sp, #12]
 8004f24:	1d19      	adds	r1, r3, #4
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	9103      	str	r1, [sp, #12]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	bfbb      	ittet	lt
 8004f2e:	425b      	neglt	r3, r3
 8004f30:	f042 0202 	orrlt.w	r2, r2, #2
 8004f34:	9307      	strge	r3, [sp, #28]
 8004f36:	9307      	strlt	r3, [sp, #28]
 8004f38:	bfb8      	it	lt
 8004f3a:	9204      	strlt	r2, [sp, #16]
 8004f3c:	7823      	ldrb	r3, [r4, #0]
 8004f3e:	2b2e      	cmp	r3, #46	; 0x2e
 8004f40:	d10c      	bne.n	8004f5c <_svfiprintf_r+0x130>
 8004f42:	7863      	ldrb	r3, [r4, #1]
 8004f44:	2b2a      	cmp	r3, #42	; 0x2a
 8004f46:	d135      	bne.n	8004fb4 <_svfiprintf_r+0x188>
 8004f48:	9b03      	ldr	r3, [sp, #12]
 8004f4a:	1d1a      	adds	r2, r3, #4
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	9203      	str	r2, [sp, #12]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	bfb8      	it	lt
 8004f54:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f58:	3402      	adds	r4, #2
 8004f5a:	9305      	str	r3, [sp, #20]
 8004f5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005028 <_svfiprintf_r+0x1fc>
 8004f60:	7821      	ldrb	r1, [r4, #0]
 8004f62:	2203      	movs	r2, #3
 8004f64:	4650      	mov	r0, sl
 8004f66:	f7fb f93b 	bl	80001e0 <memchr>
 8004f6a:	b140      	cbz	r0, 8004f7e <_svfiprintf_r+0x152>
 8004f6c:	2340      	movs	r3, #64	; 0x40
 8004f6e:	eba0 000a 	sub.w	r0, r0, sl
 8004f72:	fa03 f000 	lsl.w	r0, r3, r0
 8004f76:	9b04      	ldr	r3, [sp, #16]
 8004f78:	4303      	orrs	r3, r0
 8004f7a:	3401      	adds	r4, #1
 8004f7c:	9304      	str	r3, [sp, #16]
 8004f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f82:	4826      	ldr	r0, [pc, #152]	; (800501c <_svfiprintf_r+0x1f0>)
 8004f84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f88:	2206      	movs	r2, #6
 8004f8a:	f7fb f929 	bl	80001e0 <memchr>
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	d038      	beq.n	8005004 <_svfiprintf_r+0x1d8>
 8004f92:	4b23      	ldr	r3, [pc, #140]	; (8005020 <_svfiprintf_r+0x1f4>)
 8004f94:	bb1b      	cbnz	r3, 8004fde <_svfiprintf_r+0x1b2>
 8004f96:	9b03      	ldr	r3, [sp, #12]
 8004f98:	3307      	adds	r3, #7
 8004f9a:	f023 0307 	bic.w	r3, r3, #7
 8004f9e:	3308      	adds	r3, #8
 8004fa0:	9303      	str	r3, [sp, #12]
 8004fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fa4:	4433      	add	r3, r6
 8004fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8004fa8:	e767      	b.n	8004e7a <_svfiprintf_r+0x4e>
 8004faa:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fae:	460c      	mov	r4, r1
 8004fb0:	2001      	movs	r0, #1
 8004fb2:	e7a5      	b.n	8004f00 <_svfiprintf_r+0xd4>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	3401      	adds	r4, #1
 8004fb8:	9305      	str	r3, [sp, #20]
 8004fba:	4619      	mov	r1, r3
 8004fbc:	f04f 0c0a 	mov.w	ip, #10
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fc6:	3a30      	subs	r2, #48	; 0x30
 8004fc8:	2a09      	cmp	r2, #9
 8004fca:	d903      	bls.n	8004fd4 <_svfiprintf_r+0x1a8>
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d0c5      	beq.n	8004f5c <_svfiprintf_r+0x130>
 8004fd0:	9105      	str	r1, [sp, #20]
 8004fd2:	e7c3      	b.n	8004f5c <_svfiprintf_r+0x130>
 8004fd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fd8:	4604      	mov	r4, r0
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e7f0      	b.n	8004fc0 <_svfiprintf_r+0x194>
 8004fde:	ab03      	add	r3, sp, #12
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	462a      	mov	r2, r5
 8004fe4:	4b0f      	ldr	r3, [pc, #60]	; (8005024 <_svfiprintf_r+0x1f8>)
 8004fe6:	a904      	add	r1, sp, #16
 8004fe8:	4638      	mov	r0, r7
 8004fea:	f7fe f807 	bl	8002ffc <_printf_float>
 8004fee:	1c42      	adds	r2, r0, #1
 8004ff0:	4606      	mov	r6, r0
 8004ff2:	d1d6      	bne.n	8004fa2 <_svfiprintf_r+0x176>
 8004ff4:	89ab      	ldrh	r3, [r5, #12]
 8004ff6:	065b      	lsls	r3, r3, #25
 8004ff8:	f53f af2c 	bmi.w	8004e54 <_svfiprintf_r+0x28>
 8004ffc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ffe:	b01d      	add	sp, #116	; 0x74
 8005000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005004:	ab03      	add	r3, sp, #12
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	462a      	mov	r2, r5
 800500a:	4b06      	ldr	r3, [pc, #24]	; (8005024 <_svfiprintf_r+0x1f8>)
 800500c:	a904      	add	r1, sp, #16
 800500e:	4638      	mov	r0, r7
 8005010:	f7fe fa98 	bl	8003544 <_printf_i>
 8005014:	e7eb      	b.n	8004fee <_svfiprintf_r+0x1c2>
 8005016:	bf00      	nop
 8005018:	08005e74 	.word	0x08005e74
 800501c:	08005e7e 	.word	0x08005e7e
 8005020:	08002ffd 	.word	0x08002ffd
 8005024:	08004d75 	.word	0x08004d75
 8005028:	08005e7a 	.word	0x08005e7a

0800502c <_sbrk_r>:
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	4d06      	ldr	r5, [pc, #24]	; (8005048 <_sbrk_r+0x1c>)
 8005030:	2300      	movs	r3, #0
 8005032:	4604      	mov	r4, r0
 8005034:	4608      	mov	r0, r1
 8005036:	602b      	str	r3, [r5, #0]
 8005038:	f7fc ff1e 	bl	8001e78 <_sbrk>
 800503c:	1c43      	adds	r3, r0, #1
 800503e:	d102      	bne.n	8005046 <_sbrk_r+0x1a>
 8005040:	682b      	ldr	r3, [r5, #0]
 8005042:	b103      	cbz	r3, 8005046 <_sbrk_r+0x1a>
 8005044:	6023      	str	r3, [r4, #0]
 8005046:	bd38      	pop	{r3, r4, r5, pc}
 8005048:	20000254 	.word	0x20000254

0800504c <__assert_func>:
 800504c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800504e:	4614      	mov	r4, r2
 8005050:	461a      	mov	r2, r3
 8005052:	4b09      	ldr	r3, [pc, #36]	; (8005078 <__assert_func+0x2c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4605      	mov	r5, r0
 8005058:	68d8      	ldr	r0, [r3, #12]
 800505a:	b14c      	cbz	r4, 8005070 <__assert_func+0x24>
 800505c:	4b07      	ldr	r3, [pc, #28]	; (800507c <__assert_func+0x30>)
 800505e:	9100      	str	r1, [sp, #0]
 8005060:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005064:	4906      	ldr	r1, [pc, #24]	; (8005080 <__assert_func+0x34>)
 8005066:	462b      	mov	r3, r5
 8005068:	f000 f80e 	bl	8005088 <fiprintf>
 800506c:	f000 faa4 	bl	80055b8 <abort>
 8005070:	4b04      	ldr	r3, [pc, #16]	; (8005084 <__assert_func+0x38>)
 8005072:	461c      	mov	r4, r3
 8005074:	e7f3      	b.n	800505e <__assert_func+0x12>
 8005076:	bf00      	nop
 8005078:	2000000c 	.word	0x2000000c
 800507c:	08005e85 	.word	0x08005e85
 8005080:	08005e92 	.word	0x08005e92
 8005084:	08005ec0 	.word	0x08005ec0

08005088 <fiprintf>:
 8005088:	b40e      	push	{r1, r2, r3}
 800508a:	b503      	push	{r0, r1, lr}
 800508c:	4601      	mov	r1, r0
 800508e:	ab03      	add	r3, sp, #12
 8005090:	4805      	ldr	r0, [pc, #20]	; (80050a8 <fiprintf+0x20>)
 8005092:	f853 2b04 	ldr.w	r2, [r3], #4
 8005096:	6800      	ldr	r0, [r0, #0]
 8005098:	9301      	str	r3, [sp, #4]
 800509a:	f000 f88f 	bl	80051bc <_vfiprintf_r>
 800509e:	b002      	add	sp, #8
 80050a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80050a4:	b003      	add	sp, #12
 80050a6:	4770      	bx	lr
 80050a8:	2000000c 	.word	0x2000000c

080050ac <__ascii_mbtowc>:
 80050ac:	b082      	sub	sp, #8
 80050ae:	b901      	cbnz	r1, 80050b2 <__ascii_mbtowc+0x6>
 80050b0:	a901      	add	r1, sp, #4
 80050b2:	b142      	cbz	r2, 80050c6 <__ascii_mbtowc+0x1a>
 80050b4:	b14b      	cbz	r3, 80050ca <__ascii_mbtowc+0x1e>
 80050b6:	7813      	ldrb	r3, [r2, #0]
 80050b8:	600b      	str	r3, [r1, #0]
 80050ba:	7812      	ldrb	r2, [r2, #0]
 80050bc:	1e10      	subs	r0, r2, #0
 80050be:	bf18      	it	ne
 80050c0:	2001      	movne	r0, #1
 80050c2:	b002      	add	sp, #8
 80050c4:	4770      	bx	lr
 80050c6:	4610      	mov	r0, r2
 80050c8:	e7fb      	b.n	80050c2 <__ascii_mbtowc+0x16>
 80050ca:	f06f 0001 	mvn.w	r0, #1
 80050ce:	e7f8      	b.n	80050c2 <__ascii_mbtowc+0x16>

080050d0 <memmove>:
 80050d0:	4288      	cmp	r0, r1
 80050d2:	b510      	push	{r4, lr}
 80050d4:	eb01 0402 	add.w	r4, r1, r2
 80050d8:	d902      	bls.n	80050e0 <memmove+0x10>
 80050da:	4284      	cmp	r4, r0
 80050dc:	4623      	mov	r3, r4
 80050de:	d807      	bhi.n	80050f0 <memmove+0x20>
 80050e0:	1e43      	subs	r3, r0, #1
 80050e2:	42a1      	cmp	r1, r4
 80050e4:	d008      	beq.n	80050f8 <memmove+0x28>
 80050e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050ee:	e7f8      	b.n	80050e2 <memmove+0x12>
 80050f0:	4402      	add	r2, r0
 80050f2:	4601      	mov	r1, r0
 80050f4:	428a      	cmp	r2, r1
 80050f6:	d100      	bne.n	80050fa <memmove+0x2a>
 80050f8:	bd10      	pop	{r4, pc}
 80050fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005102:	e7f7      	b.n	80050f4 <memmove+0x24>

08005104 <__malloc_lock>:
 8005104:	4801      	ldr	r0, [pc, #4]	; (800510c <__malloc_lock+0x8>)
 8005106:	f000 bc17 	b.w	8005938 <__retarget_lock_acquire_recursive>
 800510a:	bf00      	nop
 800510c:	2000025c 	.word	0x2000025c

08005110 <__malloc_unlock>:
 8005110:	4801      	ldr	r0, [pc, #4]	; (8005118 <__malloc_unlock+0x8>)
 8005112:	f000 bc12 	b.w	800593a <__retarget_lock_release_recursive>
 8005116:	bf00      	nop
 8005118:	2000025c 	.word	0x2000025c

0800511c <_realloc_r>:
 800511c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511e:	4607      	mov	r7, r0
 8005120:	4614      	mov	r4, r2
 8005122:	460e      	mov	r6, r1
 8005124:	b921      	cbnz	r1, 8005130 <_realloc_r+0x14>
 8005126:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800512a:	4611      	mov	r1, r2
 800512c:	f7ff bdc8 	b.w	8004cc0 <_malloc_r>
 8005130:	b922      	cbnz	r2, 800513c <_realloc_r+0x20>
 8005132:	f7ff fd75 	bl	8004c20 <_free_r>
 8005136:	4625      	mov	r5, r4
 8005138:	4628      	mov	r0, r5
 800513a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800513c:	f000 fc62 	bl	8005a04 <_malloc_usable_size_r>
 8005140:	42a0      	cmp	r0, r4
 8005142:	d20f      	bcs.n	8005164 <_realloc_r+0x48>
 8005144:	4621      	mov	r1, r4
 8005146:	4638      	mov	r0, r7
 8005148:	f7ff fdba 	bl	8004cc0 <_malloc_r>
 800514c:	4605      	mov	r5, r0
 800514e:	2800      	cmp	r0, #0
 8005150:	d0f2      	beq.n	8005138 <_realloc_r+0x1c>
 8005152:	4631      	mov	r1, r6
 8005154:	4622      	mov	r2, r4
 8005156:	f7ff f9c7 	bl	80044e8 <memcpy>
 800515a:	4631      	mov	r1, r6
 800515c:	4638      	mov	r0, r7
 800515e:	f7ff fd5f 	bl	8004c20 <_free_r>
 8005162:	e7e9      	b.n	8005138 <_realloc_r+0x1c>
 8005164:	4635      	mov	r5, r6
 8005166:	e7e7      	b.n	8005138 <_realloc_r+0x1c>

08005168 <__sfputc_r>:
 8005168:	6893      	ldr	r3, [r2, #8]
 800516a:	3b01      	subs	r3, #1
 800516c:	2b00      	cmp	r3, #0
 800516e:	b410      	push	{r4}
 8005170:	6093      	str	r3, [r2, #8]
 8005172:	da08      	bge.n	8005186 <__sfputc_r+0x1e>
 8005174:	6994      	ldr	r4, [r2, #24]
 8005176:	42a3      	cmp	r3, r4
 8005178:	db01      	blt.n	800517e <__sfputc_r+0x16>
 800517a:	290a      	cmp	r1, #10
 800517c:	d103      	bne.n	8005186 <__sfputc_r+0x1e>
 800517e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005182:	f000 b94b 	b.w	800541c <__swbuf_r>
 8005186:	6813      	ldr	r3, [r2, #0]
 8005188:	1c58      	adds	r0, r3, #1
 800518a:	6010      	str	r0, [r2, #0]
 800518c:	7019      	strb	r1, [r3, #0]
 800518e:	4608      	mov	r0, r1
 8005190:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005194:	4770      	bx	lr

08005196 <__sfputs_r>:
 8005196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005198:	4606      	mov	r6, r0
 800519a:	460f      	mov	r7, r1
 800519c:	4614      	mov	r4, r2
 800519e:	18d5      	adds	r5, r2, r3
 80051a0:	42ac      	cmp	r4, r5
 80051a2:	d101      	bne.n	80051a8 <__sfputs_r+0x12>
 80051a4:	2000      	movs	r0, #0
 80051a6:	e007      	b.n	80051b8 <__sfputs_r+0x22>
 80051a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051ac:	463a      	mov	r2, r7
 80051ae:	4630      	mov	r0, r6
 80051b0:	f7ff ffda 	bl	8005168 <__sfputc_r>
 80051b4:	1c43      	adds	r3, r0, #1
 80051b6:	d1f3      	bne.n	80051a0 <__sfputs_r+0xa>
 80051b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051bc <_vfiprintf_r>:
 80051bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c0:	460d      	mov	r5, r1
 80051c2:	b09d      	sub	sp, #116	; 0x74
 80051c4:	4614      	mov	r4, r2
 80051c6:	4698      	mov	r8, r3
 80051c8:	4606      	mov	r6, r0
 80051ca:	b118      	cbz	r0, 80051d4 <_vfiprintf_r+0x18>
 80051cc:	6983      	ldr	r3, [r0, #24]
 80051ce:	b90b      	cbnz	r3, 80051d4 <_vfiprintf_r+0x18>
 80051d0:	f000 fb14 	bl	80057fc <__sinit>
 80051d4:	4b89      	ldr	r3, [pc, #548]	; (80053fc <_vfiprintf_r+0x240>)
 80051d6:	429d      	cmp	r5, r3
 80051d8:	d11b      	bne.n	8005212 <_vfiprintf_r+0x56>
 80051da:	6875      	ldr	r5, [r6, #4]
 80051dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051de:	07d9      	lsls	r1, r3, #31
 80051e0:	d405      	bmi.n	80051ee <_vfiprintf_r+0x32>
 80051e2:	89ab      	ldrh	r3, [r5, #12]
 80051e4:	059a      	lsls	r2, r3, #22
 80051e6:	d402      	bmi.n	80051ee <_vfiprintf_r+0x32>
 80051e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051ea:	f000 fba5 	bl	8005938 <__retarget_lock_acquire_recursive>
 80051ee:	89ab      	ldrh	r3, [r5, #12]
 80051f0:	071b      	lsls	r3, r3, #28
 80051f2:	d501      	bpl.n	80051f8 <_vfiprintf_r+0x3c>
 80051f4:	692b      	ldr	r3, [r5, #16]
 80051f6:	b9eb      	cbnz	r3, 8005234 <_vfiprintf_r+0x78>
 80051f8:	4629      	mov	r1, r5
 80051fa:	4630      	mov	r0, r6
 80051fc:	f000 f96e 	bl	80054dc <__swsetup_r>
 8005200:	b1c0      	cbz	r0, 8005234 <_vfiprintf_r+0x78>
 8005202:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005204:	07dc      	lsls	r4, r3, #31
 8005206:	d50e      	bpl.n	8005226 <_vfiprintf_r+0x6a>
 8005208:	f04f 30ff 	mov.w	r0, #4294967295
 800520c:	b01d      	add	sp, #116	; 0x74
 800520e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005212:	4b7b      	ldr	r3, [pc, #492]	; (8005400 <_vfiprintf_r+0x244>)
 8005214:	429d      	cmp	r5, r3
 8005216:	d101      	bne.n	800521c <_vfiprintf_r+0x60>
 8005218:	68b5      	ldr	r5, [r6, #8]
 800521a:	e7df      	b.n	80051dc <_vfiprintf_r+0x20>
 800521c:	4b79      	ldr	r3, [pc, #484]	; (8005404 <_vfiprintf_r+0x248>)
 800521e:	429d      	cmp	r5, r3
 8005220:	bf08      	it	eq
 8005222:	68f5      	ldreq	r5, [r6, #12]
 8005224:	e7da      	b.n	80051dc <_vfiprintf_r+0x20>
 8005226:	89ab      	ldrh	r3, [r5, #12]
 8005228:	0598      	lsls	r0, r3, #22
 800522a:	d4ed      	bmi.n	8005208 <_vfiprintf_r+0x4c>
 800522c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800522e:	f000 fb84 	bl	800593a <__retarget_lock_release_recursive>
 8005232:	e7e9      	b.n	8005208 <_vfiprintf_r+0x4c>
 8005234:	2300      	movs	r3, #0
 8005236:	9309      	str	r3, [sp, #36]	; 0x24
 8005238:	2320      	movs	r3, #32
 800523a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800523e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005242:	2330      	movs	r3, #48	; 0x30
 8005244:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005408 <_vfiprintf_r+0x24c>
 8005248:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800524c:	f04f 0901 	mov.w	r9, #1
 8005250:	4623      	mov	r3, r4
 8005252:	469a      	mov	sl, r3
 8005254:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005258:	b10a      	cbz	r2, 800525e <_vfiprintf_r+0xa2>
 800525a:	2a25      	cmp	r2, #37	; 0x25
 800525c:	d1f9      	bne.n	8005252 <_vfiprintf_r+0x96>
 800525e:	ebba 0b04 	subs.w	fp, sl, r4
 8005262:	d00b      	beq.n	800527c <_vfiprintf_r+0xc0>
 8005264:	465b      	mov	r3, fp
 8005266:	4622      	mov	r2, r4
 8005268:	4629      	mov	r1, r5
 800526a:	4630      	mov	r0, r6
 800526c:	f7ff ff93 	bl	8005196 <__sfputs_r>
 8005270:	3001      	adds	r0, #1
 8005272:	f000 80aa 	beq.w	80053ca <_vfiprintf_r+0x20e>
 8005276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005278:	445a      	add	r2, fp
 800527a:	9209      	str	r2, [sp, #36]	; 0x24
 800527c:	f89a 3000 	ldrb.w	r3, [sl]
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 80a2 	beq.w	80053ca <_vfiprintf_r+0x20e>
 8005286:	2300      	movs	r3, #0
 8005288:	f04f 32ff 	mov.w	r2, #4294967295
 800528c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005290:	f10a 0a01 	add.w	sl, sl, #1
 8005294:	9304      	str	r3, [sp, #16]
 8005296:	9307      	str	r3, [sp, #28]
 8005298:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800529c:	931a      	str	r3, [sp, #104]	; 0x68
 800529e:	4654      	mov	r4, sl
 80052a0:	2205      	movs	r2, #5
 80052a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052a6:	4858      	ldr	r0, [pc, #352]	; (8005408 <_vfiprintf_r+0x24c>)
 80052a8:	f7fa ff9a 	bl	80001e0 <memchr>
 80052ac:	9a04      	ldr	r2, [sp, #16]
 80052ae:	b9d8      	cbnz	r0, 80052e8 <_vfiprintf_r+0x12c>
 80052b0:	06d1      	lsls	r1, r2, #27
 80052b2:	bf44      	itt	mi
 80052b4:	2320      	movmi	r3, #32
 80052b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052ba:	0713      	lsls	r3, r2, #28
 80052bc:	bf44      	itt	mi
 80052be:	232b      	movmi	r3, #43	; 0x2b
 80052c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052c4:	f89a 3000 	ldrb.w	r3, [sl]
 80052c8:	2b2a      	cmp	r3, #42	; 0x2a
 80052ca:	d015      	beq.n	80052f8 <_vfiprintf_r+0x13c>
 80052cc:	9a07      	ldr	r2, [sp, #28]
 80052ce:	4654      	mov	r4, sl
 80052d0:	2000      	movs	r0, #0
 80052d2:	f04f 0c0a 	mov.w	ip, #10
 80052d6:	4621      	mov	r1, r4
 80052d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052dc:	3b30      	subs	r3, #48	; 0x30
 80052de:	2b09      	cmp	r3, #9
 80052e0:	d94e      	bls.n	8005380 <_vfiprintf_r+0x1c4>
 80052e2:	b1b0      	cbz	r0, 8005312 <_vfiprintf_r+0x156>
 80052e4:	9207      	str	r2, [sp, #28]
 80052e6:	e014      	b.n	8005312 <_vfiprintf_r+0x156>
 80052e8:	eba0 0308 	sub.w	r3, r0, r8
 80052ec:	fa09 f303 	lsl.w	r3, r9, r3
 80052f0:	4313      	orrs	r3, r2
 80052f2:	9304      	str	r3, [sp, #16]
 80052f4:	46a2      	mov	sl, r4
 80052f6:	e7d2      	b.n	800529e <_vfiprintf_r+0xe2>
 80052f8:	9b03      	ldr	r3, [sp, #12]
 80052fa:	1d19      	adds	r1, r3, #4
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	9103      	str	r1, [sp, #12]
 8005300:	2b00      	cmp	r3, #0
 8005302:	bfbb      	ittet	lt
 8005304:	425b      	neglt	r3, r3
 8005306:	f042 0202 	orrlt.w	r2, r2, #2
 800530a:	9307      	strge	r3, [sp, #28]
 800530c:	9307      	strlt	r3, [sp, #28]
 800530e:	bfb8      	it	lt
 8005310:	9204      	strlt	r2, [sp, #16]
 8005312:	7823      	ldrb	r3, [r4, #0]
 8005314:	2b2e      	cmp	r3, #46	; 0x2e
 8005316:	d10c      	bne.n	8005332 <_vfiprintf_r+0x176>
 8005318:	7863      	ldrb	r3, [r4, #1]
 800531a:	2b2a      	cmp	r3, #42	; 0x2a
 800531c:	d135      	bne.n	800538a <_vfiprintf_r+0x1ce>
 800531e:	9b03      	ldr	r3, [sp, #12]
 8005320:	1d1a      	adds	r2, r3, #4
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	9203      	str	r2, [sp, #12]
 8005326:	2b00      	cmp	r3, #0
 8005328:	bfb8      	it	lt
 800532a:	f04f 33ff 	movlt.w	r3, #4294967295
 800532e:	3402      	adds	r4, #2
 8005330:	9305      	str	r3, [sp, #20]
 8005332:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005418 <_vfiprintf_r+0x25c>
 8005336:	7821      	ldrb	r1, [r4, #0]
 8005338:	2203      	movs	r2, #3
 800533a:	4650      	mov	r0, sl
 800533c:	f7fa ff50 	bl	80001e0 <memchr>
 8005340:	b140      	cbz	r0, 8005354 <_vfiprintf_r+0x198>
 8005342:	2340      	movs	r3, #64	; 0x40
 8005344:	eba0 000a 	sub.w	r0, r0, sl
 8005348:	fa03 f000 	lsl.w	r0, r3, r0
 800534c:	9b04      	ldr	r3, [sp, #16]
 800534e:	4303      	orrs	r3, r0
 8005350:	3401      	adds	r4, #1
 8005352:	9304      	str	r3, [sp, #16]
 8005354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005358:	482c      	ldr	r0, [pc, #176]	; (800540c <_vfiprintf_r+0x250>)
 800535a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800535e:	2206      	movs	r2, #6
 8005360:	f7fa ff3e 	bl	80001e0 <memchr>
 8005364:	2800      	cmp	r0, #0
 8005366:	d03f      	beq.n	80053e8 <_vfiprintf_r+0x22c>
 8005368:	4b29      	ldr	r3, [pc, #164]	; (8005410 <_vfiprintf_r+0x254>)
 800536a:	bb1b      	cbnz	r3, 80053b4 <_vfiprintf_r+0x1f8>
 800536c:	9b03      	ldr	r3, [sp, #12]
 800536e:	3307      	adds	r3, #7
 8005370:	f023 0307 	bic.w	r3, r3, #7
 8005374:	3308      	adds	r3, #8
 8005376:	9303      	str	r3, [sp, #12]
 8005378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800537a:	443b      	add	r3, r7
 800537c:	9309      	str	r3, [sp, #36]	; 0x24
 800537e:	e767      	b.n	8005250 <_vfiprintf_r+0x94>
 8005380:	fb0c 3202 	mla	r2, ip, r2, r3
 8005384:	460c      	mov	r4, r1
 8005386:	2001      	movs	r0, #1
 8005388:	e7a5      	b.n	80052d6 <_vfiprintf_r+0x11a>
 800538a:	2300      	movs	r3, #0
 800538c:	3401      	adds	r4, #1
 800538e:	9305      	str	r3, [sp, #20]
 8005390:	4619      	mov	r1, r3
 8005392:	f04f 0c0a 	mov.w	ip, #10
 8005396:	4620      	mov	r0, r4
 8005398:	f810 2b01 	ldrb.w	r2, [r0], #1
 800539c:	3a30      	subs	r2, #48	; 0x30
 800539e:	2a09      	cmp	r2, #9
 80053a0:	d903      	bls.n	80053aa <_vfiprintf_r+0x1ee>
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0c5      	beq.n	8005332 <_vfiprintf_r+0x176>
 80053a6:	9105      	str	r1, [sp, #20]
 80053a8:	e7c3      	b.n	8005332 <_vfiprintf_r+0x176>
 80053aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80053ae:	4604      	mov	r4, r0
 80053b0:	2301      	movs	r3, #1
 80053b2:	e7f0      	b.n	8005396 <_vfiprintf_r+0x1da>
 80053b4:	ab03      	add	r3, sp, #12
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	462a      	mov	r2, r5
 80053ba:	4b16      	ldr	r3, [pc, #88]	; (8005414 <_vfiprintf_r+0x258>)
 80053bc:	a904      	add	r1, sp, #16
 80053be:	4630      	mov	r0, r6
 80053c0:	f7fd fe1c 	bl	8002ffc <_printf_float>
 80053c4:	4607      	mov	r7, r0
 80053c6:	1c78      	adds	r0, r7, #1
 80053c8:	d1d6      	bne.n	8005378 <_vfiprintf_r+0x1bc>
 80053ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053cc:	07d9      	lsls	r1, r3, #31
 80053ce:	d405      	bmi.n	80053dc <_vfiprintf_r+0x220>
 80053d0:	89ab      	ldrh	r3, [r5, #12]
 80053d2:	059a      	lsls	r2, r3, #22
 80053d4:	d402      	bmi.n	80053dc <_vfiprintf_r+0x220>
 80053d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053d8:	f000 faaf 	bl	800593a <__retarget_lock_release_recursive>
 80053dc:	89ab      	ldrh	r3, [r5, #12]
 80053de:	065b      	lsls	r3, r3, #25
 80053e0:	f53f af12 	bmi.w	8005208 <_vfiprintf_r+0x4c>
 80053e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053e6:	e711      	b.n	800520c <_vfiprintf_r+0x50>
 80053e8:	ab03      	add	r3, sp, #12
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	462a      	mov	r2, r5
 80053ee:	4b09      	ldr	r3, [pc, #36]	; (8005414 <_vfiprintf_r+0x258>)
 80053f0:	a904      	add	r1, sp, #16
 80053f2:	4630      	mov	r0, r6
 80053f4:	f7fe f8a6 	bl	8003544 <_printf_i>
 80053f8:	e7e4      	b.n	80053c4 <_vfiprintf_r+0x208>
 80053fa:	bf00      	nop
 80053fc:	08005fec 	.word	0x08005fec
 8005400:	0800600c 	.word	0x0800600c
 8005404:	08005fcc 	.word	0x08005fcc
 8005408:	08005e74 	.word	0x08005e74
 800540c:	08005e7e 	.word	0x08005e7e
 8005410:	08002ffd 	.word	0x08002ffd
 8005414:	08005197 	.word	0x08005197
 8005418:	08005e7a 	.word	0x08005e7a

0800541c <__swbuf_r>:
 800541c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541e:	460e      	mov	r6, r1
 8005420:	4614      	mov	r4, r2
 8005422:	4605      	mov	r5, r0
 8005424:	b118      	cbz	r0, 800542e <__swbuf_r+0x12>
 8005426:	6983      	ldr	r3, [r0, #24]
 8005428:	b90b      	cbnz	r3, 800542e <__swbuf_r+0x12>
 800542a:	f000 f9e7 	bl	80057fc <__sinit>
 800542e:	4b21      	ldr	r3, [pc, #132]	; (80054b4 <__swbuf_r+0x98>)
 8005430:	429c      	cmp	r4, r3
 8005432:	d12b      	bne.n	800548c <__swbuf_r+0x70>
 8005434:	686c      	ldr	r4, [r5, #4]
 8005436:	69a3      	ldr	r3, [r4, #24]
 8005438:	60a3      	str	r3, [r4, #8]
 800543a:	89a3      	ldrh	r3, [r4, #12]
 800543c:	071a      	lsls	r2, r3, #28
 800543e:	d52f      	bpl.n	80054a0 <__swbuf_r+0x84>
 8005440:	6923      	ldr	r3, [r4, #16]
 8005442:	b36b      	cbz	r3, 80054a0 <__swbuf_r+0x84>
 8005444:	6923      	ldr	r3, [r4, #16]
 8005446:	6820      	ldr	r0, [r4, #0]
 8005448:	1ac0      	subs	r0, r0, r3
 800544a:	6963      	ldr	r3, [r4, #20]
 800544c:	b2f6      	uxtb	r6, r6
 800544e:	4283      	cmp	r3, r0
 8005450:	4637      	mov	r7, r6
 8005452:	dc04      	bgt.n	800545e <__swbuf_r+0x42>
 8005454:	4621      	mov	r1, r4
 8005456:	4628      	mov	r0, r5
 8005458:	f000 f93c 	bl	80056d4 <_fflush_r>
 800545c:	bb30      	cbnz	r0, 80054ac <__swbuf_r+0x90>
 800545e:	68a3      	ldr	r3, [r4, #8]
 8005460:	3b01      	subs	r3, #1
 8005462:	60a3      	str	r3, [r4, #8]
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	6022      	str	r2, [r4, #0]
 800546a:	701e      	strb	r6, [r3, #0]
 800546c:	6963      	ldr	r3, [r4, #20]
 800546e:	3001      	adds	r0, #1
 8005470:	4283      	cmp	r3, r0
 8005472:	d004      	beq.n	800547e <__swbuf_r+0x62>
 8005474:	89a3      	ldrh	r3, [r4, #12]
 8005476:	07db      	lsls	r3, r3, #31
 8005478:	d506      	bpl.n	8005488 <__swbuf_r+0x6c>
 800547a:	2e0a      	cmp	r6, #10
 800547c:	d104      	bne.n	8005488 <__swbuf_r+0x6c>
 800547e:	4621      	mov	r1, r4
 8005480:	4628      	mov	r0, r5
 8005482:	f000 f927 	bl	80056d4 <_fflush_r>
 8005486:	b988      	cbnz	r0, 80054ac <__swbuf_r+0x90>
 8005488:	4638      	mov	r0, r7
 800548a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800548c:	4b0a      	ldr	r3, [pc, #40]	; (80054b8 <__swbuf_r+0x9c>)
 800548e:	429c      	cmp	r4, r3
 8005490:	d101      	bne.n	8005496 <__swbuf_r+0x7a>
 8005492:	68ac      	ldr	r4, [r5, #8]
 8005494:	e7cf      	b.n	8005436 <__swbuf_r+0x1a>
 8005496:	4b09      	ldr	r3, [pc, #36]	; (80054bc <__swbuf_r+0xa0>)
 8005498:	429c      	cmp	r4, r3
 800549a:	bf08      	it	eq
 800549c:	68ec      	ldreq	r4, [r5, #12]
 800549e:	e7ca      	b.n	8005436 <__swbuf_r+0x1a>
 80054a0:	4621      	mov	r1, r4
 80054a2:	4628      	mov	r0, r5
 80054a4:	f000 f81a 	bl	80054dc <__swsetup_r>
 80054a8:	2800      	cmp	r0, #0
 80054aa:	d0cb      	beq.n	8005444 <__swbuf_r+0x28>
 80054ac:	f04f 37ff 	mov.w	r7, #4294967295
 80054b0:	e7ea      	b.n	8005488 <__swbuf_r+0x6c>
 80054b2:	bf00      	nop
 80054b4:	08005fec 	.word	0x08005fec
 80054b8:	0800600c 	.word	0x0800600c
 80054bc:	08005fcc 	.word	0x08005fcc

080054c0 <__ascii_wctomb>:
 80054c0:	b149      	cbz	r1, 80054d6 <__ascii_wctomb+0x16>
 80054c2:	2aff      	cmp	r2, #255	; 0xff
 80054c4:	bf85      	ittet	hi
 80054c6:	238a      	movhi	r3, #138	; 0x8a
 80054c8:	6003      	strhi	r3, [r0, #0]
 80054ca:	700a      	strbls	r2, [r1, #0]
 80054cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80054d0:	bf98      	it	ls
 80054d2:	2001      	movls	r0, #1
 80054d4:	4770      	bx	lr
 80054d6:	4608      	mov	r0, r1
 80054d8:	4770      	bx	lr
	...

080054dc <__swsetup_r>:
 80054dc:	4b32      	ldr	r3, [pc, #200]	; (80055a8 <__swsetup_r+0xcc>)
 80054de:	b570      	push	{r4, r5, r6, lr}
 80054e0:	681d      	ldr	r5, [r3, #0]
 80054e2:	4606      	mov	r6, r0
 80054e4:	460c      	mov	r4, r1
 80054e6:	b125      	cbz	r5, 80054f2 <__swsetup_r+0x16>
 80054e8:	69ab      	ldr	r3, [r5, #24]
 80054ea:	b913      	cbnz	r3, 80054f2 <__swsetup_r+0x16>
 80054ec:	4628      	mov	r0, r5
 80054ee:	f000 f985 	bl	80057fc <__sinit>
 80054f2:	4b2e      	ldr	r3, [pc, #184]	; (80055ac <__swsetup_r+0xd0>)
 80054f4:	429c      	cmp	r4, r3
 80054f6:	d10f      	bne.n	8005518 <__swsetup_r+0x3c>
 80054f8:	686c      	ldr	r4, [r5, #4]
 80054fa:	89a3      	ldrh	r3, [r4, #12]
 80054fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005500:	0719      	lsls	r1, r3, #28
 8005502:	d42c      	bmi.n	800555e <__swsetup_r+0x82>
 8005504:	06dd      	lsls	r5, r3, #27
 8005506:	d411      	bmi.n	800552c <__swsetup_r+0x50>
 8005508:	2309      	movs	r3, #9
 800550a:	6033      	str	r3, [r6, #0]
 800550c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005510:	81a3      	strh	r3, [r4, #12]
 8005512:	f04f 30ff 	mov.w	r0, #4294967295
 8005516:	e03e      	b.n	8005596 <__swsetup_r+0xba>
 8005518:	4b25      	ldr	r3, [pc, #148]	; (80055b0 <__swsetup_r+0xd4>)
 800551a:	429c      	cmp	r4, r3
 800551c:	d101      	bne.n	8005522 <__swsetup_r+0x46>
 800551e:	68ac      	ldr	r4, [r5, #8]
 8005520:	e7eb      	b.n	80054fa <__swsetup_r+0x1e>
 8005522:	4b24      	ldr	r3, [pc, #144]	; (80055b4 <__swsetup_r+0xd8>)
 8005524:	429c      	cmp	r4, r3
 8005526:	bf08      	it	eq
 8005528:	68ec      	ldreq	r4, [r5, #12]
 800552a:	e7e6      	b.n	80054fa <__swsetup_r+0x1e>
 800552c:	0758      	lsls	r0, r3, #29
 800552e:	d512      	bpl.n	8005556 <__swsetup_r+0x7a>
 8005530:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005532:	b141      	cbz	r1, 8005546 <__swsetup_r+0x6a>
 8005534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005538:	4299      	cmp	r1, r3
 800553a:	d002      	beq.n	8005542 <__swsetup_r+0x66>
 800553c:	4630      	mov	r0, r6
 800553e:	f7ff fb6f 	bl	8004c20 <_free_r>
 8005542:	2300      	movs	r3, #0
 8005544:	6363      	str	r3, [r4, #52]	; 0x34
 8005546:	89a3      	ldrh	r3, [r4, #12]
 8005548:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800554c:	81a3      	strh	r3, [r4, #12]
 800554e:	2300      	movs	r3, #0
 8005550:	6063      	str	r3, [r4, #4]
 8005552:	6923      	ldr	r3, [r4, #16]
 8005554:	6023      	str	r3, [r4, #0]
 8005556:	89a3      	ldrh	r3, [r4, #12]
 8005558:	f043 0308 	orr.w	r3, r3, #8
 800555c:	81a3      	strh	r3, [r4, #12]
 800555e:	6923      	ldr	r3, [r4, #16]
 8005560:	b94b      	cbnz	r3, 8005576 <__swsetup_r+0x9a>
 8005562:	89a3      	ldrh	r3, [r4, #12]
 8005564:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800556c:	d003      	beq.n	8005576 <__swsetup_r+0x9a>
 800556e:	4621      	mov	r1, r4
 8005570:	4630      	mov	r0, r6
 8005572:	f000 fa07 	bl	8005984 <__smakebuf_r>
 8005576:	89a0      	ldrh	r0, [r4, #12]
 8005578:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800557c:	f010 0301 	ands.w	r3, r0, #1
 8005580:	d00a      	beq.n	8005598 <__swsetup_r+0xbc>
 8005582:	2300      	movs	r3, #0
 8005584:	60a3      	str	r3, [r4, #8]
 8005586:	6963      	ldr	r3, [r4, #20]
 8005588:	425b      	negs	r3, r3
 800558a:	61a3      	str	r3, [r4, #24]
 800558c:	6923      	ldr	r3, [r4, #16]
 800558e:	b943      	cbnz	r3, 80055a2 <__swsetup_r+0xc6>
 8005590:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005594:	d1ba      	bne.n	800550c <__swsetup_r+0x30>
 8005596:	bd70      	pop	{r4, r5, r6, pc}
 8005598:	0781      	lsls	r1, r0, #30
 800559a:	bf58      	it	pl
 800559c:	6963      	ldrpl	r3, [r4, #20]
 800559e:	60a3      	str	r3, [r4, #8]
 80055a0:	e7f4      	b.n	800558c <__swsetup_r+0xb0>
 80055a2:	2000      	movs	r0, #0
 80055a4:	e7f7      	b.n	8005596 <__swsetup_r+0xba>
 80055a6:	bf00      	nop
 80055a8:	2000000c 	.word	0x2000000c
 80055ac:	08005fec 	.word	0x08005fec
 80055b0:	0800600c 	.word	0x0800600c
 80055b4:	08005fcc 	.word	0x08005fcc

080055b8 <abort>:
 80055b8:	b508      	push	{r3, lr}
 80055ba:	2006      	movs	r0, #6
 80055bc:	f000 fa52 	bl	8005a64 <raise>
 80055c0:	2001      	movs	r0, #1
 80055c2:	f7fc fbe1 	bl	8001d88 <_exit>
	...

080055c8 <__sflush_r>:
 80055c8:	898a      	ldrh	r2, [r1, #12]
 80055ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ce:	4605      	mov	r5, r0
 80055d0:	0710      	lsls	r0, r2, #28
 80055d2:	460c      	mov	r4, r1
 80055d4:	d458      	bmi.n	8005688 <__sflush_r+0xc0>
 80055d6:	684b      	ldr	r3, [r1, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	dc05      	bgt.n	80055e8 <__sflush_r+0x20>
 80055dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055de:	2b00      	cmp	r3, #0
 80055e0:	dc02      	bgt.n	80055e8 <__sflush_r+0x20>
 80055e2:	2000      	movs	r0, #0
 80055e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055ea:	2e00      	cmp	r6, #0
 80055ec:	d0f9      	beq.n	80055e2 <__sflush_r+0x1a>
 80055ee:	2300      	movs	r3, #0
 80055f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80055f4:	682f      	ldr	r7, [r5, #0]
 80055f6:	602b      	str	r3, [r5, #0]
 80055f8:	d032      	beq.n	8005660 <__sflush_r+0x98>
 80055fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055fc:	89a3      	ldrh	r3, [r4, #12]
 80055fe:	075a      	lsls	r2, r3, #29
 8005600:	d505      	bpl.n	800560e <__sflush_r+0x46>
 8005602:	6863      	ldr	r3, [r4, #4]
 8005604:	1ac0      	subs	r0, r0, r3
 8005606:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005608:	b10b      	cbz	r3, 800560e <__sflush_r+0x46>
 800560a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800560c:	1ac0      	subs	r0, r0, r3
 800560e:	2300      	movs	r3, #0
 8005610:	4602      	mov	r2, r0
 8005612:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005614:	6a21      	ldr	r1, [r4, #32]
 8005616:	4628      	mov	r0, r5
 8005618:	47b0      	blx	r6
 800561a:	1c43      	adds	r3, r0, #1
 800561c:	89a3      	ldrh	r3, [r4, #12]
 800561e:	d106      	bne.n	800562e <__sflush_r+0x66>
 8005620:	6829      	ldr	r1, [r5, #0]
 8005622:	291d      	cmp	r1, #29
 8005624:	d82c      	bhi.n	8005680 <__sflush_r+0xb8>
 8005626:	4a2a      	ldr	r2, [pc, #168]	; (80056d0 <__sflush_r+0x108>)
 8005628:	40ca      	lsrs	r2, r1
 800562a:	07d6      	lsls	r6, r2, #31
 800562c:	d528      	bpl.n	8005680 <__sflush_r+0xb8>
 800562e:	2200      	movs	r2, #0
 8005630:	6062      	str	r2, [r4, #4]
 8005632:	04d9      	lsls	r1, r3, #19
 8005634:	6922      	ldr	r2, [r4, #16]
 8005636:	6022      	str	r2, [r4, #0]
 8005638:	d504      	bpl.n	8005644 <__sflush_r+0x7c>
 800563a:	1c42      	adds	r2, r0, #1
 800563c:	d101      	bne.n	8005642 <__sflush_r+0x7a>
 800563e:	682b      	ldr	r3, [r5, #0]
 8005640:	b903      	cbnz	r3, 8005644 <__sflush_r+0x7c>
 8005642:	6560      	str	r0, [r4, #84]	; 0x54
 8005644:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005646:	602f      	str	r7, [r5, #0]
 8005648:	2900      	cmp	r1, #0
 800564a:	d0ca      	beq.n	80055e2 <__sflush_r+0x1a>
 800564c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005650:	4299      	cmp	r1, r3
 8005652:	d002      	beq.n	800565a <__sflush_r+0x92>
 8005654:	4628      	mov	r0, r5
 8005656:	f7ff fae3 	bl	8004c20 <_free_r>
 800565a:	2000      	movs	r0, #0
 800565c:	6360      	str	r0, [r4, #52]	; 0x34
 800565e:	e7c1      	b.n	80055e4 <__sflush_r+0x1c>
 8005660:	6a21      	ldr	r1, [r4, #32]
 8005662:	2301      	movs	r3, #1
 8005664:	4628      	mov	r0, r5
 8005666:	47b0      	blx	r6
 8005668:	1c41      	adds	r1, r0, #1
 800566a:	d1c7      	bne.n	80055fc <__sflush_r+0x34>
 800566c:	682b      	ldr	r3, [r5, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d0c4      	beq.n	80055fc <__sflush_r+0x34>
 8005672:	2b1d      	cmp	r3, #29
 8005674:	d001      	beq.n	800567a <__sflush_r+0xb2>
 8005676:	2b16      	cmp	r3, #22
 8005678:	d101      	bne.n	800567e <__sflush_r+0xb6>
 800567a:	602f      	str	r7, [r5, #0]
 800567c:	e7b1      	b.n	80055e2 <__sflush_r+0x1a>
 800567e:	89a3      	ldrh	r3, [r4, #12]
 8005680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005684:	81a3      	strh	r3, [r4, #12]
 8005686:	e7ad      	b.n	80055e4 <__sflush_r+0x1c>
 8005688:	690f      	ldr	r7, [r1, #16]
 800568a:	2f00      	cmp	r7, #0
 800568c:	d0a9      	beq.n	80055e2 <__sflush_r+0x1a>
 800568e:	0793      	lsls	r3, r2, #30
 8005690:	680e      	ldr	r6, [r1, #0]
 8005692:	bf08      	it	eq
 8005694:	694b      	ldreq	r3, [r1, #20]
 8005696:	600f      	str	r7, [r1, #0]
 8005698:	bf18      	it	ne
 800569a:	2300      	movne	r3, #0
 800569c:	eba6 0807 	sub.w	r8, r6, r7
 80056a0:	608b      	str	r3, [r1, #8]
 80056a2:	f1b8 0f00 	cmp.w	r8, #0
 80056a6:	dd9c      	ble.n	80055e2 <__sflush_r+0x1a>
 80056a8:	6a21      	ldr	r1, [r4, #32]
 80056aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80056ac:	4643      	mov	r3, r8
 80056ae:	463a      	mov	r2, r7
 80056b0:	4628      	mov	r0, r5
 80056b2:	47b0      	blx	r6
 80056b4:	2800      	cmp	r0, #0
 80056b6:	dc06      	bgt.n	80056c6 <__sflush_r+0xfe>
 80056b8:	89a3      	ldrh	r3, [r4, #12]
 80056ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056be:	81a3      	strh	r3, [r4, #12]
 80056c0:	f04f 30ff 	mov.w	r0, #4294967295
 80056c4:	e78e      	b.n	80055e4 <__sflush_r+0x1c>
 80056c6:	4407      	add	r7, r0
 80056c8:	eba8 0800 	sub.w	r8, r8, r0
 80056cc:	e7e9      	b.n	80056a2 <__sflush_r+0xda>
 80056ce:	bf00      	nop
 80056d0:	20400001 	.word	0x20400001

080056d4 <_fflush_r>:
 80056d4:	b538      	push	{r3, r4, r5, lr}
 80056d6:	690b      	ldr	r3, [r1, #16]
 80056d8:	4605      	mov	r5, r0
 80056da:	460c      	mov	r4, r1
 80056dc:	b913      	cbnz	r3, 80056e4 <_fflush_r+0x10>
 80056de:	2500      	movs	r5, #0
 80056e0:	4628      	mov	r0, r5
 80056e2:	bd38      	pop	{r3, r4, r5, pc}
 80056e4:	b118      	cbz	r0, 80056ee <_fflush_r+0x1a>
 80056e6:	6983      	ldr	r3, [r0, #24]
 80056e8:	b90b      	cbnz	r3, 80056ee <_fflush_r+0x1a>
 80056ea:	f000 f887 	bl	80057fc <__sinit>
 80056ee:	4b14      	ldr	r3, [pc, #80]	; (8005740 <_fflush_r+0x6c>)
 80056f0:	429c      	cmp	r4, r3
 80056f2:	d11b      	bne.n	800572c <_fflush_r+0x58>
 80056f4:	686c      	ldr	r4, [r5, #4]
 80056f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0ef      	beq.n	80056de <_fflush_r+0xa>
 80056fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005700:	07d0      	lsls	r0, r2, #31
 8005702:	d404      	bmi.n	800570e <_fflush_r+0x3a>
 8005704:	0599      	lsls	r1, r3, #22
 8005706:	d402      	bmi.n	800570e <_fflush_r+0x3a>
 8005708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800570a:	f000 f915 	bl	8005938 <__retarget_lock_acquire_recursive>
 800570e:	4628      	mov	r0, r5
 8005710:	4621      	mov	r1, r4
 8005712:	f7ff ff59 	bl	80055c8 <__sflush_r>
 8005716:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005718:	07da      	lsls	r2, r3, #31
 800571a:	4605      	mov	r5, r0
 800571c:	d4e0      	bmi.n	80056e0 <_fflush_r+0xc>
 800571e:	89a3      	ldrh	r3, [r4, #12]
 8005720:	059b      	lsls	r3, r3, #22
 8005722:	d4dd      	bmi.n	80056e0 <_fflush_r+0xc>
 8005724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005726:	f000 f908 	bl	800593a <__retarget_lock_release_recursive>
 800572a:	e7d9      	b.n	80056e0 <_fflush_r+0xc>
 800572c:	4b05      	ldr	r3, [pc, #20]	; (8005744 <_fflush_r+0x70>)
 800572e:	429c      	cmp	r4, r3
 8005730:	d101      	bne.n	8005736 <_fflush_r+0x62>
 8005732:	68ac      	ldr	r4, [r5, #8]
 8005734:	e7df      	b.n	80056f6 <_fflush_r+0x22>
 8005736:	4b04      	ldr	r3, [pc, #16]	; (8005748 <_fflush_r+0x74>)
 8005738:	429c      	cmp	r4, r3
 800573a:	bf08      	it	eq
 800573c:	68ec      	ldreq	r4, [r5, #12]
 800573e:	e7da      	b.n	80056f6 <_fflush_r+0x22>
 8005740:	08005fec 	.word	0x08005fec
 8005744:	0800600c 	.word	0x0800600c
 8005748:	08005fcc 	.word	0x08005fcc

0800574c <std>:
 800574c:	2300      	movs	r3, #0
 800574e:	b510      	push	{r4, lr}
 8005750:	4604      	mov	r4, r0
 8005752:	e9c0 3300 	strd	r3, r3, [r0]
 8005756:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800575a:	6083      	str	r3, [r0, #8]
 800575c:	8181      	strh	r1, [r0, #12]
 800575e:	6643      	str	r3, [r0, #100]	; 0x64
 8005760:	81c2      	strh	r2, [r0, #14]
 8005762:	6183      	str	r3, [r0, #24]
 8005764:	4619      	mov	r1, r3
 8005766:	2208      	movs	r2, #8
 8005768:	305c      	adds	r0, #92	; 0x5c
 800576a:	f7fd fb9f 	bl	8002eac <memset>
 800576e:	4b05      	ldr	r3, [pc, #20]	; (8005784 <std+0x38>)
 8005770:	6263      	str	r3, [r4, #36]	; 0x24
 8005772:	4b05      	ldr	r3, [pc, #20]	; (8005788 <std+0x3c>)
 8005774:	62a3      	str	r3, [r4, #40]	; 0x28
 8005776:	4b05      	ldr	r3, [pc, #20]	; (800578c <std+0x40>)
 8005778:	62e3      	str	r3, [r4, #44]	; 0x2c
 800577a:	4b05      	ldr	r3, [pc, #20]	; (8005790 <std+0x44>)
 800577c:	6224      	str	r4, [r4, #32]
 800577e:	6323      	str	r3, [r4, #48]	; 0x30
 8005780:	bd10      	pop	{r4, pc}
 8005782:	bf00      	nop
 8005784:	08005a9d 	.word	0x08005a9d
 8005788:	08005abf 	.word	0x08005abf
 800578c:	08005af7 	.word	0x08005af7
 8005790:	08005b1b 	.word	0x08005b1b

08005794 <_cleanup_r>:
 8005794:	4901      	ldr	r1, [pc, #4]	; (800579c <_cleanup_r+0x8>)
 8005796:	f000 b8af 	b.w	80058f8 <_fwalk_reent>
 800579a:	bf00      	nop
 800579c:	080056d5 	.word	0x080056d5

080057a0 <__sfmoreglue>:
 80057a0:	b570      	push	{r4, r5, r6, lr}
 80057a2:	1e4a      	subs	r2, r1, #1
 80057a4:	2568      	movs	r5, #104	; 0x68
 80057a6:	4355      	muls	r5, r2
 80057a8:	460e      	mov	r6, r1
 80057aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80057ae:	f7ff fa87 	bl	8004cc0 <_malloc_r>
 80057b2:	4604      	mov	r4, r0
 80057b4:	b140      	cbz	r0, 80057c8 <__sfmoreglue+0x28>
 80057b6:	2100      	movs	r1, #0
 80057b8:	e9c0 1600 	strd	r1, r6, [r0]
 80057bc:	300c      	adds	r0, #12
 80057be:	60a0      	str	r0, [r4, #8]
 80057c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80057c4:	f7fd fb72 	bl	8002eac <memset>
 80057c8:	4620      	mov	r0, r4
 80057ca:	bd70      	pop	{r4, r5, r6, pc}

080057cc <__sfp_lock_acquire>:
 80057cc:	4801      	ldr	r0, [pc, #4]	; (80057d4 <__sfp_lock_acquire+0x8>)
 80057ce:	f000 b8b3 	b.w	8005938 <__retarget_lock_acquire_recursive>
 80057d2:	bf00      	nop
 80057d4:	20000260 	.word	0x20000260

080057d8 <__sfp_lock_release>:
 80057d8:	4801      	ldr	r0, [pc, #4]	; (80057e0 <__sfp_lock_release+0x8>)
 80057da:	f000 b8ae 	b.w	800593a <__retarget_lock_release_recursive>
 80057de:	bf00      	nop
 80057e0:	20000260 	.word	0x20000260

080057e4 <__sinit_lock_acquire>:
 80057e4:	4801      	ldr	r0, [pc, #4]	; (80057ec <__sinit_lock_acquire+0x8>)
 80057e6:	f000 b8a7 	b.w	8005938 <__retarget_lock_acquire_recursive>
 80057ea:	bf00      	nop
 80057ec:	2000025b 	.word	0x2000025b

080057f0 <__sinit_lock_release>:
 80057f0:	4801      	ldr	r0, [pc, #4]	; (80057f8 <__sinit_lock_release+0x8>)
 80057f2:	f000 b8a2 	b.w	800593a <__retarget_lock_release_recursive>
 80057f6:	bf00      	nop
 80057f8:	2000025b 	.word	0x2000025b

080057fc <__sinit>:
 80057fc:	b510      	push	{r4, lr}
 80057fe:	4604      	mov	r4, r0
 8005800:	f7ff fff0 	bl	80057e4 <__sinit_lock_acquire>
 8005804:	69a3      	ldr	r3, [r4, #24]
 8005806:	b11b      	cbz	r3, 8005810 <__sinit+0x14>
 8005808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800580c:	f7ff bff0 	b.w	80057f0 <__sinit_lock_release>
 8005810:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005814:	6523      	str	r3, [r4, #80]	; 0x50
 8005816:	4b13      	ldr	r3, [pc, #76]	; (8005864 <__sinit+0x68>)
 8005818:	4a13      	ldr	r2, [pc, #76]	; (8005868 <__sinit+0x6c>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	62a2      	str	r2, [r4, #40]	; 0x28
 800581e:	42a3      	cmp	r3, r4
 8005820:	bf04      	itt	eq
 8005822:	2301      	moveq	r3, #1
 8005824:	61a3      	streq	r3, [r4, #24]
 8005826:	4620      	mov	r0, r4
 8005828:	f000 f820 	bl	800586c <__sfp>
 800582c:	6060      	str	r0, [r4, #4]
 800582e:	4620      	mov	r0, r4
 8005830:	f000 f81c 	bl	800586c <__sfp>
 8005834:	60a0      	str	r0, [r4, #8]
 8005836:	4620      	mov	r0, r4
 8005838:	f000 f818 	bl	800586c <__sfp>
 800583c:	2200      	movs	r2, #0
 800583e:	60e0      	str	r0, [r4, #12]
 8005840:	2104      	movs	r1, #4
 8005842:	6860      	ldr	r0, [r4, #4]
 8005844:	f7ff ff82 	bl	800574c <std>
 8005848:	68a0      	ldr	r0, [r4, #8]
 800584a:	2201      	movs	r2, #1
 800584c:	2109      	movs	r1, #9
 800584e:	f7ff ff7d 	bl	800574c <std>
 8005852:	68e0      	ldr	r0, [r4, #12]
 8005854:	2202      	movs	r2, #2
 8005856:	2112      	movs	r1, #18
 8005858:	f7ff ff78 	bl	800574c <std>
 800585c:	2301      	movs	r3, #1
 800585e:	61a3      	str	r3, [r4, #24]
 8005860:	e7d2      	b.n	8005808 <__sinit+0xc>
 8005862:	bf00      	nop
 8005864:	08005c48 	.word	0x08005c48
 8005868:	08005795 	.word	0x08005795

0800586c <__sfp>:
 800586c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800586e:	4607      	mov	r7, r0
 8005870:	f7ff ffac 	bl	80057cc <__sfp_lock_acquire>
 8005874:	4b1e      	ldr	r3, [pc, #120]	; (80058f0 <__sfp+0x84>)
 8005876:	681e      	ldr	r6, [r3, #0]
 8005878:	69b3      	ldr	r3, [r6, #24]
 800587a:	b913      	cbnz	r3, 8005882 <__sfp+0x16>
 800587c:	4630      	mov	r0, r6
 800587e:	f7ff ffbd 	bl	80057fc <__sinit>
 8005882:	3648      	adds	r6, #72	; 0x48
 8005884:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005888:	3b01      	subs	r3, #1
 800588a:	d503      	bpl.n	8005894 <__sfp+0x28>
 800588c:	6833      	ldr	r3, [r6, #0]
 800588e:	b30b      	cbz	r3, 80058d4 <__sfp+0x68>
 8005890:	6836      	ldr	r6, [r6, #0]
 8005892:	e7f7      	b.n	8005884 <__sfp+0x18>
 8005894:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005898:	b9d5      	cbnz	r5, 80058d0 <__sfp+0x64>
 800589a:	4b16      	ldr	r3, [pc, #88]	; (80058f4 <__sfp+0x88>)
 800589c:	60e3      	str	r3, [r4, #12]
 800589e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80058a2:	6665      	str	r5, [r4, #100]	; 0x64
 80058a4:	f000 f847 	bl	8005936 <__retarget_lock_init_recursive>
 80058a8:	f7ff ff96 	bl	80057d8 <__sfp_lock_release>
 80058ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80058b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80058b4:	6025      	str	r5, [r4, #0]
 80058b6:	61a5      	str	r5, [r4, #24]
 80058b8:	2208      	movs	r2, #8
 80058ba:	4629      	mov	r1, r5
 80058bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80058c0:	f7fd faf4 	bl	8002eac <memset>
 80058c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80058c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80058cc:	4620      	mov	r0, r4
 80058ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058d0:	3468      	adds	r4, #104	; 0x68
 80058d2:	e7d9      	b.n	8005888 <__sfp+0x1c>
 80058d4:	2104      	movs	r1, #4
 80058d6:	4638      	mov	r0, r7
 80058d8:	f7ff ff62 	bl	80057a0 <__sfmoreglue>
 80058dc:	4604      	mov	r4, r0
 80058de:	6030      	str	r0, [r6, #0]
 80058e0:	2800      	cmp	r0, #0
 80058e2:	d1d5      	bne.n	8005890 <__sfp+0x24>
 80058e4:	f7ff ff78 	bl	80057d8 <__sfp_lock_release>
 80058e8:	230c      	movs	r3, #12
 80058ea:	603b      	str	r3, [r7, #0]
 80058ec:	e7ee      	b.n	80058cc <__sfp+0x60>
 80058ee:	bf00      	nop
 80058f0:	08005c48 	.word	0x08005c48
 80058f4:	ffff0001 	.word	0xffff0001

080058f8 <_fwalk_reent>:
 80058f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058fc:	4606      	mov	r6, r0
 80058fe:	4688      	mov	r8, r1
 8005900:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005904:	2700      	movs	r7, #0
 8005906:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800590a:	f1b9 0901 	subs.w	r9, r9, #1
 800590e:	d505      	bpl.n	800591c <_fwalk_reent+0x24>
 8005910:	6824      	ldr	r4, [r4, #0]
 8005912:	2c00      	cmp	r4, #0
 8005914:	d1f7      	bne.n	8005906 <_fwalk_reent+0xe>
 8005916:	4638      	mov	r0, r7
 8005918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800591c:	89ab      	ldrh	r3, [r5, #12]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d907      	bls.n	8005932 <_fwalk_reent+0x3a>
 8005922:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005926:	3301      	adds	r3, #1
 8005928:	d003      	beq.n	8005932 <_fwalk_reent+0x3a>
 800592a:	4629      	mov	r1, r5
 800592c:	4630      	mov	r0, r6
 800592e:	47c0      	blx	r8
 8005930:	4307      	orrs	r7, r0
 8005932:	3568      	adds	r5, #104	; 0x68
 8005934:	e7e9      	b.n	800590a <_fwalk_reent+0x12>

08005936 <__retarget_lock_init_recursive>:
 8005936:	4770      	bx	lr

08005938 <__retarget_lock_acquire_recursive>:
 8005938:	4770      	bx	lr

0800593a <__retarget_lock_release_recursive>:
 800593a:	4770      	bx	lr

0800593c <__swhatbuf_r>:
 800593c:	b570      	push	{r4, r5, r6, lr}
 800593e:	460e      	mov	r6, r1
 8005940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005944:	2900      	cmp	r1, #0
 8005946:	b096      	sub	sp, #88	; 0x58
 8005948:	4614      	mov	r4, r2
 800594a:	461d      	mov	r5, r3
 800594c:	da07      	bge.n	800595e <__swhatbuf_r+0x22>
 800594e:	2300      	movs	r3, #0
 8005950:	602b      	str	r3, [r5, #0]
 8005952:	89b3      	ldrh	r3, [r6, #12]
 8005954:	061a      	lsls	r2, r3, #24
 8005956:	d410      	bmi.n	800597a <__swhatbuf_r+0x3e>
 8005958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800595c:	e00e      	b.n	800597c <__swhatbuf_r+0x40>
 800595e:	466a      	mov	r2, sp
 8005960:	f000 f902 	bl	8005b68 <_fstat_r>
 8005964:	2800      	cmp	r0, #0
 8005966:	dbf2      	blt.n	800594e <__swhatbuf_r+0x12>
 8005968:	9a01      	ldr	r2, [sp, #4]
 800596a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800596e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005972:	425a      	negs	r2, r3
 8005974:	415a      	adcs	r2, r3
 8005976:	602a      	str	r2, [r5, #0]
 8005978:	e7ee      	b.n	8005958 <__swhatbuf_r+0x1c>
 800597a:	2340      	movs	r3, #64	; 0x40
 800597c:	2000      	movs	r0, #0
 800597e:	6023      	str	r3, [r4, #0]
 8005980:	b016      	add	sp, #88	; 0x58
 8005982:	bd70      	pop	{r4, r5, r6, pc}

08005984 <__smakebuf_r>:
 8005984:	898b      	ldrh	r3, [r1, #12]
 8005986:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005988:	079d      	lsls	r5, r3, #30
 800598a:	4606      	mov	r6, r0
 800598c:	460c      	mov	r4, r1
 800598e:	d507      	bpl.n	80059a0 <__smakebuf_r+0x1c>
 8005990:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	6123      	str	r3, [r4, #16]
 8005998:	2301      	movs	r3, #1
 800599a:	6163      	str	r3, [r4, #20]
 800599c:	b002      	add	sp, #8
 800599e:	bd70      	pop	{r4, r5, r6, pc}
 80059a0:	ab01      	add	r3, sp, #4
 80059a2:	466a      	mov	r2, sp
 80059a4:	f7ff ffca 	bl	800593c <__swhatbuf_r>
 80059a8:	9900      	ldr	r1, [sp, #0]
 80059aa:	4605      	mov	r5, r0
 80059ac:	4630      	mov	r0, r6
 80059ae:	f7ff f987 	bl	8004cc0 <_malloc_r>
 80059b2:	b948      	cbnz	r0, 80059c8 <__smakebuf_r+0x44>
 80059b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059b8:	059a      	lsls	r2, r3, #22
 80059ba:	d4ef      	bmi.n	800599c <__smakebuf_r+0x18>
 80059bc:	f023 0303 	bic.w	r3, r3, #3
 80059c0:	f043 0302 	orr.w	r3, r3, #2
 80059c4:	81a3      	strh	r3, [r4, #12]
 80059c6:	e7e3      	b.n	8005990 <__smakebuf_r+0xc>
 80059c8:	4b0d      	ldr	r3, [pc, #52]	; (8005a00 <__smakebuf_r+0x7c>)
 80059ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80059cc:	89a3      	ldrh	r3, [r4, #12]
 80059ce:	6020      	str	r0, [r4, #0]
 80059d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059d4:	81a3      	strh	r3, [r4, #12]
 80059d6:	9b00      	ldr	r3, [sp, #0]
 80059d8:	6163      	str	r3, [r4, #20]
 80059da:	9b01      	ldr	r3, [sp, #4]
 80059dc:	6120      	str	r0, [r4, #16]
 80059de:	b15b      	cbz	r3, 80059f8 <__smakebuf_r+0x74>
 80059e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059e4:	4630      	mov	r0, r6
 80059e6:	f000 f8d1 	bl	8005b8c <_isatty_r>
 80059ea:	b128      	cbz	r0, 80059f8 <__smakebuf_r+0x74>
 80059ec:	89a3      	ldrh	r3, [r4, #12]
 80059ee:	f023 0303 	bic.w	r3, r3, #3
 80059f2:	f043 0301 	orr.w	r3, r3, #1
 80059f6:	81a3      	strh	r3, [r4, #12]
 80059f8:	89a0      	ldrh	r0, [r4, #12]
 80059fa:	4305      	orrs	r5, r0
 80059fc:	81a5      	strh	r5, [r4, #12]
 80059fe:	e7cd      	b.n	800599c <__smakebuf_r+0x18>
 8005a00:	08005795 	.word	0x08005795

08005a04 <_malloc_usable_size_r>:
 8005a04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a08:	1f18      	subs	r0, r3, #4
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	bfbc      	itt	lt
 8005a0e:	580b      	ldrlt	r3, [r1, r0]
 8005a10:	18c0      	addlt	r0, r0, r3
 8005a12:	4770      	bx	lr

08005a14 <_raise_r>:
 8005a14:	291f      	cmp	r1, #31
 8005a16:	b538      	push	{r3, r4, r5, lr}
 8005a18:	4604      	mov	r4, r0
 8005a1a:	460d      	mov	r5, r1
 8005a1c:	d904      	bls.n	8005a28 <_raise_r+0x14>
 8005a1e:	2316      	movs	r3, #22
 8005a20:	6003      	str	r3, [r0, #0]
 8005a22:	f04f 30ff 	mov.w	r0, #4294967295
 8005a26:	bd38      	pop	{r3, r4, r5, pc}
 8005a28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005a2a:	b112      	cbz	r2, 8005a32 <_raise_r+0x1e>
 8005a2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005a30:	b94b      	cbnz	r3, 8005a46 <_raise_r+0x32>
 8005a32:	4620      	mov	r0, r4
 8005a34:	f000 f830 	bl	8005a98 <_getpid_r>
 8005a38:	462a      	mov	r2, r5
 8005a3a:	4601      	mov	r1, r0
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a42:	f000 b817 	b.w	8005a74 <_kill_r>
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d00a      	beq.n	8005a60 <_raise_r+0x4c>
 8005a4a:	1c59      	adds	r1, r3, #1
 8005a4c:	d103      	bne.n	8005a56 <_raise_r+0x42>
 8005a4e:	2316      	movs	r3, #22
 8005a50:	6003      	str	r3, [r0, #0]
 8005a52:	2001      	movs	r0, #1
 8005a54:	e7e7      	b.n	8005a26 <_raise_r+0x12>
 8005a56:	2400      	movs	r4, #0
 8005a58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	4798      	blx	r3
 8005a60:	2000      	movs	r0, #0
 8005a62:	e7e0      	b.n	8005a26 <_raise_r+0x12>

08005a64 <raise>:
 8005a64:	4b02      	ldr	r3, [pc, #8]	; (8005a70 <raise+0xc>)
 8005a66:	4601      	mov	r1, r0
 8005a68:	6818      	ldr	r0, [r3, #0]
 8005a6a:	f7ff bfd3 	b.w	8005a14 <_raise_r>
 8005a6e:	bf00      	nop
 8005a70:	2000000c 	.word	0x2000000c

08005a74 <_kill_r>:
 8005a74:	b538      	push	{r3, r4, r5, lr}
 8005a76:	4d07      	ldr	r5, [pc, #28]	; (8005a94 <_kill_r+0x20>)
 8005a78:	2300      	movs	r3, #0
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	4608      	mov	r0, r1
 8005a7e:	4611      	mov	r1, r2
 8005a80:	602b      	str	r3, [r5, #0]
 8005a82:	f7fc f971 	bl	8001d68 <_kill>
 8005a86:	1c43      	adds	r3, r0, #1
 8005a88:	d102      	bne.n	8005a90 <_kill_r+0x1c>
 8005a8a:	682b      	ldr	r3, [r5, #0]
 8005a8c:	b103      	cbz	r3, 8005a90 <_kill_r+0x1c>
 8005a8e:	6023      	str	r3, [r4, #0]
 8005a90:	bd38      	pop	{r3, r4, r5, pc}
 8005a92:	bf00      	nop
 8005a94:	20000254 	.word	0x20000254

08005a98 <_getpid_r>:
 8005a98:	f7fc b95e 	b.w	8001d58 <_getpid>

08005a9c <__sread>:
 8005a9c:	b510      	push	{r4, lr}
 8005a9e:	460c      	mov	r4, r1
 8005aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aa4:	f000 f894 	bl	8005bd0 <_read_r>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	bfab      	itete	ge
 8005aac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005aae:	89a3      	ldrhlt	r3, [r4, #12]
 8005ab0:	181b      	addge	r3, r3, r0
 8005ab2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ab6:	bfac      	ite	ge
 8005ab8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005aba:	81a3      	strhlt	r3, [r4, #12]
 8005abc:	bd10      	pop	{r4, pc}

08005abe <__swrite>:
 8005abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ac2:	461f      	mov	r7, r3
 8005ac4:	898b      	ldrh	r3, [r1, #12]
 8005ac6:	05db      	lsls	r3, r3, #23
 8005ac8:	4605      	mov	r5, r0
 8005aca:	460c      	mov	r4, r1
 8005acc:	4616      	mov	r6, r2
 8005ace:	d505      	bpl.n	8005adc <__swrite+0x1e>
 8005ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f000 f868 	bl	8005bac <_lseek_r>
 8005adc:	89a3      	ldrh	r3, [r4, #12]
 8005ade:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ae2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ae6:	81a3      	strh	r3, [r4, #12]
 8005ae8:	4632      	mov	r2, r6
 8005aea:	463b      	mov	r3, r7
 8005aec:	4628      	mov	r0, r5
 8005aee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005af2:	f000 b817 	b.w	8005b24 <_write_r>

08005af6 <__sseek>:
 8005af6:	b510      	push	{r4, lr}
 8005af8:	460c      	mov	r4, r1
 8005afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005afe:	f000 f855 	bl	8005bac <_lseek_r>
 8005b02:	1c43      	adds	r3, r0, #1
 8005b04:	89a3      	ldrh	r3, [r4, #12]
 8005b06:	bf15      	itete	ne
 8005b08:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b12:	81a3      	strheq	r3, [r4, #12]
 8005b14:	bf18      	it	ne
 8005b16:	81a3      	strhne	r3, [r4, #12]
 8005b18:	bd10      	pop	{r4, pc}

08005b1a <__sclose>:
 8005b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b1e:	f000 b813 	b.w	8005b48 <_close_r>
	...

08005b24 <_write_r>:
 8005b24:	b538      	push	{r3, r4, r5, lr}
 8005b26:	4d07      	ldr	r5, [pc, #28]	; (8005b44 <_write_r+0x20>)
 8005b28:	4604      	mov	r4, r0
 8005b2a:	4608      	mov	r0, r1
 8005b2c:	4611      	mov	r1, r2
 8005b2e:	2200      	movs	r2, #0
 8005b30:	602a      	str	r2, [r5, #0]
 8005b32:	461a      	mov	r2, r3
 8005b34:	f7fc f94f 	bl	8001dd6 <_write>
 8005b38:	1c43      	adds	r3, r0, #1
 8005b3a:	d102      	bne.n	8005b42 <_write_r+0x1e>
 8005b3c:	682b      	ldr	r3, [r5, #0]
 8005b3e:	b103      	cbz	r3, 8005b42 <_write_r+0x1e>
 8005b40:	6023      	str	r3, [r4, #0]
 8005b42:	bd38      	pop	{r3, r4, r5, pc}
 8005b44:	20000254 	.word	0x20000254

08005b48 <_close_r>:
 8005b48:	b538      	push	{r3, r4, r5, lr}
 8005b4a:	4d06      	ldr	r5, [pc, #24]	; (8005b64 <_close_r+0x1c>)
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	4604      	mov	r4, r0
 8005b50:	4608      	mov	r0, r1
 8005b52:	602b      	str	r3, [r5, #0]
 8005b54:	f7fc f95b 	bl	8001e0e <_close>
 8005b58:	1c43      	adds	r3, r0, #1
 8005b5a:	d102      	bne.n	8005b62 <_close_r+0x1a>
 8005b5c:	682b      	ldr	r3, [r5, #0]
 8005b5e:	b103      	cbz	r3, 8005b62 <_close_r+0x1a>
 8005b60:	6023      	str	r3, [r4, #0]
 8005b62:	bd38      	pop	{r3, r4, r5, pc}
 8005b64:	20000254 	.word	0x20000254

08005b68 <_fstat_r>:
 8005b68:	b538      	push	{r3, r4, r5, lr}
 8005b6a:	4d07      	ldr	r5, [pc, #28]	; (8005b88 <_fstat_r+0x20>)
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	4604      	mov	r4, r0
 8005b70:	4608      	mov	r0, r1
 8005b72:	4611      	mov	r1, r2
 8005b74:	602b      	str	r3, [r5, #0]
 8005b76:	f7fc f956 	bl	8001e26 <_fstat>
 8005b7a:	1c43      	adds	r3, r0, #1
 8005b7c:	d102      	bne.n	8005b84 <_fstat_r+0x1c>
 8005b7e:	682b      	ldr	r3, [r5, #0]
 8005b80:	b103      	cbz	r3, 8005b84 <_fstat_r+0x1c>
 8005b82:	6023      	str	r3, [r4, #0]
 8005b84:	bd38      	pop	{r3, r4, r5, pc}
 8005b86:	bf00      	nop
 8005b88:	20000254 	.word	0x20000254

08005b8c <_isatty_r>:
 8005b8c:	b538      	push	{r3, r4, r5, lr}
 8005b8e:	4d06      	ldr	r5, [pc, #24]	; (8005ba8 <_isatty_r+0x1c>)
 8005b90:	2300      	movs	r3, #0
 8005b92:	4604      	mov	r4, r0
 8005b94:	4608      	mov	r0, r1
 8005b96:	602b      	str	r3, [r5, #0]
 8005b98:	f7fc f955 	bl	8001e46 <_isatty>
 8005b9c:	1c43      	adds	r3, r0, #1
 8005b9e:	d102      	bne.n	8005ba6 <_isatty_r+0x1a>
 8005ba0:	682b      	ldr	r3, [r5, #0]
 8005ba2:	b103      	cbz	r3, 8005ba6 <_isatty_r+0x1a>
 8005ba4:	6023      	str	r3, [r4, #0]
 8005ba6:	bd38      	pop	{r3, r4, r5, pc}
 8005ba8:	20000254 	.word	0x20000254

08005bac <_lseek_r>:
 8005bac:	b538      	push	{r3, r4, r5, lr}
 8005bae:	4d07      	ldr	r5, [pc, #28]	; (8005bcc <_lseek_r+0x20>)
 8005bb0:	4604      	mov	r4, r0
 8005bb2:	4608      	mov	r0, r1
 8005bb4:	4611      	mov	r1, r2
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	602a      	str	r2, [r5, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	f7fc f94e 	bl	8001e5c <_lseek>
 8005bc0:	1c43      	adds	r3, r0, #1
 8005bc2:	d102      	bne.n	8005bca <_lseek_r+0x1e>
 8005bc4:	682b      	ldr	r3, [r5, #0]
 8005bc6:	b103      	cbz	r3, 8005bca <_lseek_r+0x1e>
 8005bc8:	6023      	str	r3, [r4, #0]
 8005bca:	bd38      	pop	{r3, r4, r5, pc}
 8005bcc:	20000254 	.word	0x20000254

08005bd0 <_read_r>:
 8005bd0:	b538      	push	{r3, r4, r5, lr}
 8005bd2:	4d07      	ldr	r5, [pc, #28]	; (8005bf0 <_read_r+0x20>)
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	4608      	mov	r0, r1
 8005bd8:	4611      	mov	r1, r2
 8005bda:	2200      	movs	r2, #0
 8005bdc:	602a      	str	r2, [r5, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	f7fc f8dc 	bl	8001d9c <_read>
 8005be4:	1c43      	adds	r3, r0, #1
 8005be6:	d102      	bne.n	8005bee <_read_r+0x1e>
 8005be8:	682b      	ldr	r3, [r5, #0]
 8005bea:	b103      	cbz	r3, 8005bee <_read_r+0x1e>
 8005bec:	6023      	str	r3, [r4, #0]
 8005bee:	bd38      	pop	{r3, r4, r5, pc}
 8005bf0:	20000254 	.word	0x20000254

08005bf4 <_init>:
 8005bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf6:	bf00      	nop
 8005bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bfa:	bc08      	pop	{r3}
 8005bfc:	469e      	mov	lr, r3
 8005bfe:	4770      	bx	lr

08005c00 <_fini>:
 8005c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c02:	bf00      	nop
 8005c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c06:	bc08      	pop	{r3}
 8005c08:	469e      	mov	lr, r3
 8005c0a:	4770      	bx	lr

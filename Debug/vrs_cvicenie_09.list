
vrs_cvicenie_09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08007780  08007780  00017780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c10  08007c10  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007c10  08007c10  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c10  08007c10  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c10  08007c10  00017c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c14  08007c14  00017c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007c18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000080  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000025c  2000025c  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f6fb  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a14  00000000  00000000  0002f907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000978  00000000  00000000  00032320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000850  00000000  00000000  00032c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019a22  00000000  00000000  000334e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009d9a  00000000  00000000  0004cf0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007df01  00000000  00000000  00056ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000d4ba5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000038c0  00000000  00000000  000d4bf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007764 	.word	0x08007764

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007764 	.word	0x08007764

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	683a      	ldr	r2, [r7, #0]
 8000c56:	619a      	str	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	683a      	ldr	r2, [r7, #0]
 8000c72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <resetSegments>:
extern DisplayDigitData_ DisplayDigit_0;
extern DisplayDigitData_ DisplayDigit_1;
extern DisplayDigitData_ DisplayDigit_2;
extern DisplayDigitData_ DisplayDigit_3;
static uint8_t indexer = 0;
void resetSegments(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	SEGMENT_A_OFF;
 8000c84:	2102      	movs	r1, #2
 8000c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8a:	f7ff ffdd 	bl	8000c48 <LL_GPIO_SetOutputPin>
	SEGMENT_B_OFF;
 8000c8e:	2101      	movs	r1, #1
 8000c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c94:	f7ff ffd8 	bl	8000c48 <LL_GPIO_SetOutputPin>
	SEGMENT_C_OFF;
 8000c98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca0:	f7ff ffd2 	bl	8000c48 <LL_GPIO_SetOutputPin>
	SEGMENT_D_OFF;
 8000ca4:	2120      	movs	r1, #32
 8000ca6:	480c      	ldr	r0, [pc, #48]	; (8000cd8 <resetSegments+0x58>)
 8000ca8:	f7ff ffce 	bl	8000c48 <LL_GPIO_SetOutputPin>
	SEGMENT_E_OFF;
 8000cac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb4:	f7ff ffc8 	bl	8000c48 <LL_GPIO_SetOutputPin>
	SEGMENT_F_OFF;
 8000cb8:	2108      	movs	r1, #8
 8000cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cbe:	f7ff ffc3 	bl	8000c48 <LL_GPIO_SetOutputPin>
	SEGMENT_G_OFF;
 8000cc2:	2110      	movs	r1, #16
 8000cc4:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <resetSegments+0x58>)
 8000cc6:	f7ff ffbf 	bl	8000c48 <LL_GPIO_SetOutputPin>
	SEGMENT_DP_OFF;
 8000cca:	2102      	movs	r1, #2
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <resetSegments+0x58>)
 8000cce:	f7ff ffbb 	bl	8000c48 <LL_GPIO_SetOutputPin>
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	48000400 	.word	0x48000400

08000cdc <resetDigits>:
	SEGMENT_F_ON;
	SEGMENT_G_ON;
	SEGMENT_DP_ON;
}

void resetDigits(void) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	DIGIT_0_OFF;
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	480d      	ldr	r0, [pc, #52]	; (8000d18 <resetDigits+0x3c>)
 8000ce4:	f7ff ffbe 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	DIGIT_1_OFF;
 8000ce8:	2110      	movs	r1, #16
 8000cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cee:	f7ff ffb9 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	DIGIT_2_OFF;
 8000cf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfa:	f7ff ffb3 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	DIGIT_3_OFF;
 8000cfe:	2104      	movs	r1, #4
 8000d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d04:	f7ff ffae 	bl	8000c64 <LL_GPIO_ResetOutputPin>
	DIGIT_TIME_OFF;
 8000d08:	2180      	movs	r1, #128	; 0x80
 8000d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0e:	f7ff ffa9 	bl	8000c64 <LL_GPIO_ResetOutputPin>
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	48000400 	.word	0x48000400

08000d1c <segmentsOn>:
	DIGIT_2_ON;
	DIGIT_3_ON;
	DIGIT_TIME_ON;
}

void segmentsOn(uint8_t index, SegmentDigitStruct digitStruct) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	e883 0006 	stmia.w	r3, {r1, r2}
 8000d28:	4603      	mov	r3, r0
 8000d2a:	73fb      	strb	r3, [r7, #15]
//	resetSegments();
	if (digitStruct.sA)
 8000d2c:	793b      	ldrb	r3, [r7, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d005      	beq.n	8000d3e <segmentsOn+0x22>
		SEGMENT_A_ON;
 8000d32:	2102      	movs	r1, #2
 8000d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d38:	f7ff ff94 	bl	8000c64 <LL_GPIO_ResetOutputPin>
 8000d3c:	e004      	b.n	8000d48 <segmentsOn+0x2c>
	else SEGMENT_A_OFF;
 8000d3e:	2102      	movs	r1, #2
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d44:	f7ff ff80 	bl	8000c48 <LL_GPIO_SetOutputPin>
	if (digitStruct.sB)
 8000d48:	797b      	ldrb	r3, [r7, #5]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d005      	beq.n	8000d5a <segmentsOn+0x3e>
		SEGMENT_B_ON;
 8000d4e:	2101      	movs	r1, #1
 8000d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d54:	f7ff ff86 	bl	8000c64 <LL_GPIO_ResetOutputPin>
 8000d58:	e004      	b.n	8000d64 <segmentsOn+0x48>
	else SEGMENT_B_OFF;
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d60:	f7ff ff72 	bl	8000c48 <LL_GPIO_SetOutputPin>
	if (digitStruct.sC)
 8000d64:	79bb      	ldrb	r3, [r7, #6]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d006      	beq.n	8000d78 <segmentsOn+0x5c>
		SEGMENT_C_ON;
 8000d6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d72:	f7ff ff77 	bl	8000c64 <LL_GPIO_ResetOutputPin>
 8000d76:	e005      	b.n	8000d84 <segmentsOn+0x68>
	else SEGMENT_C_OFF;
 8000d78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d80:	f7ff ff62 	bl	8000c48 <LL_GPIO_SetOutputPin>
	if (digitStruct.sD)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d004      	beq.n	8000d94 <segmentsOn+0x78>
		SEGMENT_D_ON;
 8000d8a:	2120      	movs	r1, #32
 8000d8c:	4833      	ldr	r0, [pc, #204]	; (8000e5c <segmentsOn+0x140>)
 8000d8e:	f7ff ff69 	bl	8000c64 <LL_GPIO_ResetOutputPin>
 8000d92:	e003      	b.n	8000d9c <segmentsOn+0x80>
	else SEGMENT_D_OFF;
 8000d94:	2120      	movs	r1, #32
 8000d96:	4831      	ldr	r0, [pc, #196]	; (8000e5c <segmentsOn+0x140>)
 8000d98:	f7ff ff56 	bl	8000c48 <LL_GPIO_SetOutputPin>
	if (digitStruct.sE)
 8000d9c:	7a3b      	ldrb	r3, [r7, #8]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d006      	beq.n	8000db0 <segmentsOn+0x94>
		SEGMENT_E_ON;
 8000da2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000daa:	f7ff ff5b 	bl	8000c64 <LL_GPIO_ResetOutputPin>
 8000dae:	e005      	b.n	8000dbc <segmentsOn+0xa0>
	else SEGMENT_E_OFF;
 8000db0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db8:	f7ff ff46 	bl	8000c48 <LL_GPIO_SetOutputPin>
	if (digitStruct.sF)
 8000dbc:	7a7b      	ldrb	r3, [r7, #9]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d005      	beq.n	8000dce <segmentsOn+0xb2>
		SEGMENT_F_ON;
 8000dc2:	2108      	movs	r1, #8
 8000dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc8:	f7ff ff4c 	bl	8000c64 <LL_GPIO_ResetOutputPin>
 8000dcc:	e004      	b.n	8000dd8 <segmentsOn+0xbc>
	else SEGMENT_F_OFF;
 8000dce:	2108      	movs	r1, #8
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd4:	f7ff ff38 	bl	8000c48 <LL_GPIO_SetOutputPin>
	if (digitStruct.sG)
 8000dd8:	7abb      	ldrb	r3, [r7, #10]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d004      	beq.n	8000de8 <segmentsOn+0xcc>
		SEGMENT_G_ON;
 8000dde:	2110      	movs	r1, #16
 8000de0:	481e      	ldr	r0, [pc, #120]	; (8000e5c <segmentsOn+0x140>)
 8000de2:	f7ff ff3f 	bl	8000c64 <LL_GPIO_ResetOutputPin>
 8000de6:	e003      	b.n	8000df0 <segmentsOn+0xd4>
	else SEGMENT_G_OFF;
 8000de8:	2110      	movs	r1, #16
 8000dea:	481c      	ldr	r0, [pc, #112]	; (8000e5c <segmentsOn+0x140>)
 8000dec:	f7ff ff2c 	bl	8000c48 <LL_GPIO_SetOutputPin>
	if (digitStruct.sDot)
 8000df0:	7afb      	ldrb	r3, [r7, #11]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d004      	beq.n	8000e00 <segmentsOn+0xe4>
		SEGMENT_DP_ON;
 8000df6:	2102      	movs	r1, #2
 8000df8:	4818      	ldr	r0, [pc, #96]	; (8000e5c <segmentsOn+0x140>)
 8000dfa:	f7ff ff33 	bl	8000c64 <LL_GPIO_ResetOutputPin>
 8000dfe:	e003      	b.n	8000e08 <segmentsOn+0xec>
	else SEGMENT_DP_OFF;
 8000e00:	2102      	movs	r1, #2
 8000e02:	4816      	ldr	r0, [pc, #88]	; (8000e5c <segmentsOn+0x140>)
 8000e04:	f7ff ff20 	bl	8000c48 <LL_GPIO_SetOutputPin>

	resetDigits();
 8000e08:	f7ff ff68 	bl	8000cdc <resetDigits>
	if (index == 0)
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d104      	bne.n	8000e1c <segmentsOn+0x100>
		DIGIT_0_ON;
 8000e12:	2101      	movs	r1, #1
 8000e14:	4811      	ldr	r0, [pc, #68]	; (8000e5c <segmentsOn+0x140>)
 8000e16:	f7ff ff17 	bl	8000c48 <LL_GPIO_SetOutputPin>
		DIGIT_1_ON;
	else if (index == 2)
		DIGIT_2_ON;
	else if (index == 3)
		DIGIT_3_ON;
}
 8000e1a:	e01a      	b.n	8000e52 <segmentsOn+0x136>
	else if (index == 1)
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d105      	bne.n	8000e2e <segmentsOn+0x112>
		DIGIT_1_ON;
 8000e22:	2110      	movs	r1, #16
 8000e24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e28:	f7ff ff0e 	bl	8000c48 <LL_GPIO_SetOutputPin>
}
 8000e2c:	e011      	b.n	8000e52 <segmentsOn+0x136>
	else if (index == 2)
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d106      	bne.n	8000e42 <segmentsOn+0x126>
		DIGIT_2_ON;
 8000e34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3c:	f7ff ff04 	bl	8000c48 <LL_GPIO_SetOutputPin>
}
 8000e40:	e007      	b.n	8000e52 <segmentsOn+0x136>
	else if (index == 3)
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d104      	bne.n	8000e52 <segmentsOn+0x136>
		DIGIT_3_ON;
 8000e48:	2104      	movs	r1, #4
 8000e4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4e:	f7ff fefb 	bl	8000c48 <LL_GPIO_SetOutputPin>
}
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	48000400 	.word	0x48000400

08000e60 <displayCharOnDigit>:

void displayCharOnDigit(DisplayDigitData_ digitData) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	80b8      	strh	r0, [r7, #4]
	SegmentDigitStruct digitStruct = GetSegmentDigit(digitData.chr);
 8000e68:	797a      	ldrb	r2, [r7, #5]
 8000e6a:	f107 0308 	add.w	r3, r7, #8
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 f879 	bl	8000f68 <GetSegmentDigit>
	segmentsOn(digitData.index, digitStruct);
 8000e76:	7938      	ldrb	r0, [r7, #4]
 8000e78:	f107 0308 	add.w	r3, r7, #8
 8000e7c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000e80:	f7ff ff4c 	bl	8000d1c <segmentsOn>
}
 8000e84:	bf00      	nop
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <updateDisplay>:
void updateDisplay(void) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0

	switch (indexer) {
 8000e90:	4b30      	ldr	r3, [pc, #192]	; (8000f54 <updateDisplay+0xc8>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b03      	cmp	r3, #3
 8000e96:	d80b      	bhi.n	8000eb0 <updateDisplay+0x24>
 8000e98:	a201      	add	r2, pc, #4	; (adr r2, 8000ea0 <updateDisplay+0x14>)
 8000e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e9e:	bf00      	nop
 8000ea0:	08000ec1 	.word	0x08000ec1
 8000ea4:	08000ee5 	.word	0x08000ee5
 8000ea8:	08000f09 	.word	0x08000f09
 8000eac:	08000f2d 	.word	0x08000f2d
	default:
		resetDigits();
 8000eb0:	f7ff ff14 	bl	8000cdc <resetDigits>
		resetSegments();
 8000eb4:	f7ff fee4 	bl	8000c80 <resetSegments>
		indexer = 0;
 8000eb8:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <updateDisplay+0xc8>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
		break;
 8000ebe:	e047      	b.n	8000f50 <updateDisplay+0xc4>
	case 0:
		displayCharOnDigit(DisplayDigit_0);
 8000ec0:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <updateDisplay+0xcc>)
 8000ec2:	781a      	ldrb	r2, [r3, #0]
 8000ec4:	785b      	ldrb	r3, [r3, #1]
 8000ec6:	021b      	lsls	r3, r3, #8
 8000ec8:	431a      	orrs	r2, r3
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f362 030f 	bfi	r3, r2, #0, #16
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ffc5 	bl	8000e60 <displayCharOnDigit>
		indexer++;
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <updateDisplay+0xc8>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	3301      	adds	r3, #1
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <updateDisplay+0xc8>)
 8000ee0:	701a      	strb	r2, [r3, #0]
		break;
 8000ee2:	e035      	b.n	8000f50 <updateDisplay+0xc4>
	case 1:
		displayCharOnDigit(DisplayDigit_1);
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <updateDisplay+0xd0>)
 8000ee6:	781a      	ldrb	r2, [r3, #0]
 8000ee8:	785b      	ldrb	r3, [r3, #1]
 8000eea:	021b      	lsls	r3, r3, #8
 8000eec:	431a      	orrs	r2, r3
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f362 030f 	bfi	r3, r2, #0, #16
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ffb3 	bl	8000e60 <displayCharOnDigit>
		indexer++;
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <updateDisplay+0xc8>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	3301      	adds	r3, #1
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <updateDisplay+0xc8>)
 8000f04:	701a      	strb	r2, [r3, #0]
		break;
 8000f06:	e023      	b.n	8000f50 <updateDisplay+0xc4>
	case 2:
		displayCharOnDigit(DisplayDigit_2);
 8000f08:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <updateDisplay+0xd4>)
 8000f0a:	781a      	ldrb	r2, [r3, #0]
 8000f0c:	785b      	ldrb	r3, [r3, #1]
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	431a      	orrs	r2, r3
 8000f12:	2300      	movs	r3, #0
 8000f14:	f362 030f 	bfi	r3, r2, #0, #16
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ffa1 	bl	8000e60 <displayCharOnDigit>
		indexer++;
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <updateDisplay+0xc8>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	3301      	adds	r3, #1
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <updateDisplay+0xc8>)
 8000f28:	701a      	strb	r2, [r3, #0]
		break;
 8000f2a:	e011      	b.n	8000f50 <updateDisplay+0xc4>
	case 3:
		displayCharOnDigit(DisplayDigit_3);
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <updateDisplay+0xd8>)
 8000f2e:	781a      	ldrb	r2, [r3, #0]
 8000f30:	785b      	ldrb	r3, [r3, #1]
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	431a      	orrs	r2, r3
 8000f36:	2300      	movs	r3, #0
 8000f38:	f362 030f 	bfi	r3, r2, #0, #16
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff8f 	bl	8000e60 <displayCharOnDigit>
		indexer++;
 8000f42:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <updateDisplay+0xc8>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	3301      	adds	r3, #1
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4b02      	ldr	r3, [pc, #8]	; (8000f54 <updateDisplay+0xc8>)
 8000f4c:	701a      	strb	r2, [r3, #0]
		break;
 8000f4e:	bf00      	nop

	}
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200001f8 	.word	0x200001f8
 8000f58:	20000218 	.word	0x20000218
 8000f5c:	20000210 	.word	0x20000210
 8000f60:	2000020c 	.word	0x2000020c
 8000f64:	20000214 	.word	0x20000214

08000f68 <GetSegmentDigit>:
		0x08, // _
		0x01, // -
		0x80, // .,
		};

SegmentDigitStruct GetSegmentDigit(uint8_t chr) {
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	70fb      	strb	r3, [r7, #3]
	SegmentDigitStruct result;
	if ((chr >= '0' && chr <= '9') || (chr >= 'A' && chr <= 'Z')
 8000f74:	78fb      	ldrb	r3, [r7, #3]
 8000f76:	2b2f      	cmp	r3, #47	; 0x2f
 8000f78:	d902      	bls.n	8000f80 <GetSegmentDigit+0x18>
 8000f7a:	78fb      	ldrb	r3, [r7, #3]
 8000f7c:	2b39      	cmp	r3, #57	; 0x39
 8000f7e:	d912      	bls.n	8000fa6 <GetSegmentDigit+0x3e>
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	2b40      	cmp	r3, #64	; 0x40
 8000f84:	d902      	bls.n	8000f8c <GetSegmentDigit+0x24>
 8000f86:	78fb      	ldrb	r3, [r7, #3]
 8000f88:	2b5a      	cmp	r3, #90	; 0x5a
 8000f8a:	d90c      	bls.n	8000fa6 <GetSegmentDigit+0x3e>
			|| chr == '_' || chr == '.' || chr == ',' || chr == '-') {
 8000f8c:	78fb      	ldrb	r3, [r7, #3]
 8000f8e:	2b5f      	cmp	r3, #95	; 0x5f
 8000f90:	d009      	beq.n	8000fa6 <GetSegmentDigit+0x3e>
 8000f92:	78fb      	ldrb	r3, [r7, #3]
 8000f94:	2b2e      	cmp	r3, #46	; 0x2e
 8000f96:	d006      	beq.n	8000fa6 <GetSegmentDigit+0x3e>
 8000f98:	78fb      	ldrb	r3, [r7, #3]
 8000f9a:	2b2c      	cmp	r3, #44	; 0x2c
 8000f9c:	d003      	beq.n	8000fa6 <GetSegmentDigit+0x3e>
 8000f9e:	78fb      	ldrb	r3, [r7, #3]
 8000fa0:	2b2d      	cmp	r3, #45	; 0x2d
 8000fa2:	f040 8086 	bne.w	80010b2 <GetSegmentDigit+0x14a>
		uint8_t fontChar = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	75fb      	strb	r3, [r7, #23]
		uint8_t index = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	75bb      	strb	r3, [r7, #22]
		if (chr >= '0' && chr <= '9') {
 8000fae:	78fb      	ldrb	r3, [r7, #3]
 8000fb0:	2b2f      	cmp	r3, #47	; 0x2f
 8000fb2:	d90a      	bls.n	8000fca <GetSegmentDigit+0x62>
 8000fb4:	78fb      	ldrb	r3, [r7, #3]
 8000fb6:	2b39      	cmp	r3, #57	; 0x39
 8000fb8:	d807      	bhi.n	8000fca <GetSegmentDigit+0x62>
			index = chr - '0';
 8000fba:	78fb      	ldrb	r3, [r7, #3]
 8000fbc:	3b30      	subs	r3, #48	; 0x30
 8000fbe:	75bb      	strb	r3, [r7, #22]
			fontChar = Font_Table[FONTS_DIGITS_START + index];
 8000fc0:	7dbb      	ldrb	r3, [r7, #22]
 8000fc2:	4a4a      	ldr	r2, [pc, #296]	; (80010ec <GetSegmentDigit+0x184>)
 8000fc4:	5cd3      	ldrb	r3, [r2, r3]
 8000fc6:	75fb      	strb	r3, [r7, #23]
 8000fc8:	e022      	b.n	8001010 <GetSegmentDigit+0xa8>
		} else if (chr >= 'A' && chr <= 'Z') {
 8000fca:	78fb      	ldrb	r3, [r7, #3]
 8000fcc:	2b40      	cmp	r3, #64	; 0x40
 8000fce:	d90b      	bls.n	8000fe8 <GetSegmentDigit+0x80>
 8000fd0:	78fb      	ldrb	r3, [r7, #3]
 8000fd2:	2b5a      	cmp	r3, #90	; 0x5a
 8000fd4:	d808      	bhi.n	8000fe8 <GetSegmentDigit+0x80>
			index = chr - 'A';
 8000fd6:	78fb      	ldrb	r3, [r7, #3]
 8000fd8:	3b41      	subs	r3, #65	; 0x41
 8000fda:	75bb      	strb	r3, [r7, #22]
			fontChar = Font_Table[FONTS_CHARS_START + index];
 8000fdc:	7dbb      	ldrb	r3, [r7, #22]
 8000fde:	330a      	adds	r3, #10
 8000fe0:	4a42      	ldr	r2, [pc, #264]	; (80010ec <GetSegmentDigit+0x184>)
 8000fe2:	5cd3      	ldrb	r3, [r2, r3]
 8000fe4:	75fb      	strb	r3, [r7, #23]
 8000fe6:	e013      	b.n	8001010 <GetSegmentDigit+0xa8>
		} else if (chr == '_') {
 8000fe8:	78fb      	ldrb	r3, [r7, #3]
 8000fea:	2b5f      	cmp	r3, #95	; 0x5f
 8000fec:	d102      	bne.n	8000ff4 <GetSegmentDigit+0x8c>
			fontChar = Font_Table[FONTS_UNDERSCORE];
 8000fee:	2308      	movs	r3, #8
 8000ff0:	75fb      	strb	r3, [r7, #23]
 8000ff2:	e00d      	b.n	8001010 <GetSegmentDigit+0xa8>
		}else if(chr == '-'){
 8000ff4:	78fb      	ldrb	r3, [r7, #3]
 8000ff6:	2b2d      	cmp	r3, #45	; 0x2d
 8000ff8:	d102      	bne.n	8001000 <GetSegmentDigit+0x98>
			fontChar = Font_Table[FONTS_MINUS];
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	75fb      	strb	r3, [r7, #23]
 8000ffe:	e007      	b.n	8001010 <GetSegmentDigit+0xa8>
		}else if(chr == '.' || chr == ','){
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	2b2e      	cmp	r3, #46	; 0x2e
 8001004:	d002      	beq.n	800100c <GetSegmentDigit+0xa4>
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	2b2c      	cmp	r3, #44	; 0x2c
 800100a:	d101      	bne.n	8001010 <GetSegmentDigit+0xa8>
			fontChar = Font_Table[FONTS_DOT];
 800100c:	2380      	movs	r3, #128	; 0x80
 800100e:	75fb      	strb	r3, [r7, #23]
		}
		result.sA = fontChar & ConverterValue_SegmentA ? true : false;
 8001010:	2240      	movs	r2, #64	; 0x40
 8001012:	7dfb      	ldrb	r3, [r7, #23]
 8001014:	4013      	ands	r3, r2
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	bf14      	ite	ne
 800101c:	2301      	movne	r3, #1
 800101e:	2300      	moveq	r3, #0
 8001020:	b2db      	uxtb	r3, r3
 8001022:	733b      	strb	r3, [r7, #12]
		result.sB = fontChar & ConverterValue_SegmentB ? true : false;
 8001024:	2220      	movs	r2, #32
 8001026:	7dfb      	ldrb	r3, [r7, #23]
 8001028:	4013      	ands	r3, r2
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	bf14      	ite	ne
 8001030:	2301      	movne	r3, #1
 8001032:	2300      	moveq	r3, #0
 8001034:	b2db      	uxtb	r3, r3
 8001036:	737b      	strb	r3, [r7, #13]
		result.sC = fontChar & ConverterValue_SegmentC ? true : false;
 8001038:	2210      	movs	r2, #16
 800103a:	7dfb      	ldrb	r3, [r7, #23]
 800103c:	4013      	ands	r3, r2
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	bf14      	ite	ne
 8001044:	2301      	movne	r3, #1
 8001046:	2300      	moveq	r3, #0
 8001048:	b2db      	uxtb	r3, r3
 800104a:	73bb      	strb	r3, [r7, #14]
		result.sD = fontChar & ConverterValue_SegmentD ? true : false;
 800104c:	2208      	movs	r2, #8
 800104e:	7dfb      	ldrb	r3, [r7, #23]
 8001050:	4013      	ands	r3, r2
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	bf14      	ite	ne
 8001058:	2301      	movne	r3, #1
 800105a:	2300      	moveq	r3, #0
 800105c:	b2db      	uxtb	r3, r3
 800105e:	73fb      	strb	r3, [r7, #15]
		result.sE = fontChar & ConverterValue_SegmentE ? true : false;
 8001060:	2204      	movs	r2, #4
 8001062:	7dfb      	ldrb	r3, [r7, #23]
 8001064:	4013      	ands	r3, r2
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	bf14      	ite	ne
 800106c:	2301      	movne	r3, #1
 800106e:	2300      	moveq	r3, #0
 8001070:	b2db      	uxtb	r3, r3
 8001072:	743b      	strb	r3, [r7, #16]
		result.sF = fontChar & ConverterValue_SegmentF ? true : false;
 8001074:	2202      	movs	r2, #2
 8001076:	7dfb      	ldrb	r3, [r7, #23]
 8001078:	4013      	ands	r3, r2
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	bf14      	ite	ne
 8001080:	2301      	movne	r3, #1
 8001082:	2300      	moveq	r3, #0
 8001084:	b2db      	uxtb	r3, r3
 8001086:	747b      	strb	r3, [r7, #17]
		result.sG = fontChar & ConverterValue_SegmentG ? true : false;
 8001088:	2201      	movs	r2, #1
 800108a:	7dfb      	ldrb	r3, [r7, #23]
 800108c:	4013      	ands	r3, r2
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	bf14      	ite	ne
 8001094:	2301      	movne	r3, #1
 8001096:	2300      	moveq	r3, #0
 8001098:	b2db      	uxtb	r3, r3
 800109a:	74bb      	strb	r3, [r7, #18]
		result.sDot = fontChar & ConverterValue_SegmentDot ? true : false;
 800109c:	2280      	movs	r2, #128	; 0x80
 800109e:	7dfb      	ldrb	r3, [r7, #23]
 80010a0:	4013      	ands	r3, r2
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bf14      	ite	ne
 80010a8:	2301      	movne	r3, #1
 80010aa:	2300      	moveq	r3, #0
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	74fb      	strb	r3, [r7, #19]
			|| chr == '_' || chr == '.' || chr == ',' || chr == '-') {
 80010b0:	e00f      	b.n	80010d2 <GetSegmentDigit+0x16a>
	}
	else{
		result.sA = true;
 80010b2:	2301      	movs	r3, #1
 80010b4:	733b      	strb	r3, [r7, #12]
		result.sB = true;
 80010b6:	2301      	movs	r3, #1
 80010b8:	737b      	strb	r3, [r7, #13]
		result.sC = true;
 80010ba:	2301      	movs	r3, #1
 80010bc:	73bb      	strb	r3, [r7, #14]
		result.sD = true;
 80010be:	2301      	movs	r3, #1
 80010c0:	73fb      	strb	r3, [r7, #15]
		result.sE = true;
 80010c2:	2301      	movs	r3, #1
 80010c4:	743b      	strb	r3, [r7, #16]
		result.sF = true;
 80010c6:	2301      	movs	r3, #1
 80010c8:	747b      	strb	r3, [r7, #17]
		result.sG = true;
 80010ca:	2301      	movs	r3, #1
 80010cc:	74bb      	strb	r3, [r7, #18]
		result.sDot = true;
 80010ce:	2301      	movs	r3, #1
 80010d0:	74fb      	strb	r3, [r7, #19]
	}
	return result;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	461a      	mov	r2, r3
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	cb03      	ldmia	r3!, {r0, r1}
 80010dc:	6010      	str	r0, [r2, #0]
 80010de:	6051      	str	r1, [r2, #4]
}
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	371c      	adds	r7, #28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	08007780 	.word	0x08007780

080010f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <__NVIC_GetPriorityGrouping+0x18>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	f003 0307 	and.w	r3, r3, #7
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	2b00      	cmp	r3, #0
 800111c:	db0b      	blt.n	8001136 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	f003 021f 	and.w	r2, r3, #31
 8001124:	4907      	ldr	r1, [pc, #28]	; (8001144 <__NVIC_EnableIRQ+0x38>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	095b      	lsrs	r3, r3, #5
 800112c:	2001      	movs	r0, #1
 800112e:	fa00 f202 	lsl.w	r2, r0, r2
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000e100 	.word	0xe000e100

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800120e:	695a      	ldr	r2, [r3, #20]
 8001210:	4907      	ldr	r1, [pc, #28]	; (8001230 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4313      	orrs	r3, r2
 8001216:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800121a:	695a      	ldr	r2, [r3, #20]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4013      	ands	r3, r2
 8001220:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001222:	68fb      	ldr	r3, [r7, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	40021000 	.word	0x40021000

08001234 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800123e:	4a13      	ldr	r2, [pc, #76]	; (800128c <LL_SYSCFG_SetEXTISource+0x58>)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	3302      	adds	r3, #2
 8001246:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	0c1b      	lsrs	r3, r3, #16
 800124e:	43db      	mvns	r3, r3
 8001250:	ea02 0103 	and.w	r1, r2, r3
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	0c1b      	lsrs	r3, r3, #16
 8001258:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	fa93 f3a3 	rbit	r3, r3
 8001260:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	fab3 f383 	clz	r3, r3
 8001268:	b2db      	uxtb	r3, r3
 800126a:	461a      	mov	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	fa03 f202 	lsl.w	r2, r3, r2
 8001272:	4806      	ldr	r0, [pc, #24]	; (800128c <LL_SYSCFG_SetEXTISource+0x58>)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	430a      	orrs	r2, r1
 800127a:	3302      	adds	r3, #2
 800127c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001280:	bf00      	nop
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	40010000 	.word	0x40010000

08001290 <LL_GPIO_SetPinMode>:
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa93 f3a3 	rbit	r3, r3
 80012aa:	613b      	str	r3, [r7, #16]
  return result;
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	fab3 f383 	clz	r3, r3
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2103      	movs	r1, #3
 80012b8:	fa01 f303 	lsl.w	r3, r1, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	401a      	ands	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	fa93 f3a3 	rbit	r3, r3
 80012ca:	61bb      	str	r3, [r7, #24]
  return result;
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	fab3 f383 	clz	r3, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	fa01 f303 	lsl.w	r3, r1, r3
 80012dc:	431a      	orrs	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	601a      	str	r2, [r3, #0]
}
 80012e2:	bf00      	nop
 80012e4:	3724      	adds	r7, #36	; 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <LL_GPIO_SetPinPull>:
{
 80012ee:	b480      	push	{r7}
 80012f0:	b089      	sub	sp, #36	; 0x24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	fa93 f3a3 	rbit	r3, r3
 8001308:	613b      	str	r3, [r7, #16]
  return result;
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	fab3 f383 	clz	r3, r3
 8001310:	b2db      	uxtb	r3, r3
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	2103      	movs	r1, #3
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	401a      	ands	r2, r3
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa93 f3a3 	rbit	r3, r3
 8001328:	61bb      	str	r3, [r7, #24]
  return result;
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	fab3 f383 	clz	r3, r3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	fa01 f303 	lsl.w	r3, r1, r3
 800133a:	431a      	orrs	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	60da      	str	r2, [r3, #12]
}
 8001340:	bf00      	nop
 8001342:	3724      	adds	r7, #36	; 0x24
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_GPIO_ResetOutputPin>:
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	; 0x28
 800136c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800136e:	f107 031c 	add.w	r3, r7, #28
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
 8001388:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 800138a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800138e:	f7ff ff39 	bl	8001204 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001392:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001396:	f7ff ff35 	bl	8001204 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800139a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800139e:	f7ff ff31 	bl	8001204 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, S_B_Pin|S_A_Pin|D_3_Pin|S_F_Pin
 80013a2:	f641 119f 	movw	r1, #6559	; 0x199f
 80013a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013aa:	f7ff ffcf 	bl	800134c <LL_GPIO_ResetOutputPin>
                          |D_1_Pin|D_T_Pin|S_C_Pin|S_E_Pin
                          |D_2_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, D_0_Pin|S_DP_Pin|S_G_Pin|S_D_Pin);
 80013ae:	2133      	movs	r1, #51	; 0x33
 80013b0:	4835      	ldr	r0, [pc, #212]	; (8001488 <MX_GPIO_Init+0x120>)
 80013b2:	f7ff ffcb 	bl	800134c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = S_B_Pin|S_A_Pin|D_3_Pin|S_F_Pin
 80013b6:	f641 139f 	movw	r3, #6559	; 0x199f
 80013ba:	607b      	str	r3, [r7, #4]
                          |D_1_Pin|D_T_Pin|S_C_Pin|S_E_Pin
                          |D_2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013bc:	2301      	movs	r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	4619      	mov	r1, r3
 80013d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d4:	f001 fd8a 	bl	8002eec <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = D_0_Pin|S_DP_Pin|S_G_Pin|S_D_Pin;
 80013d8:	2333      	movs	r3, #51	; 0x33
 80013da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013dc:	2301      	movs	r3, #1
 80013de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	4619      	mov	r1, r3
 80013f0:	4825      	ldr	r0, [pc, #148]	; (8001488 <MX_GPIO_Init+0x120>)
 80013f2:	f001 fd7b 	bl	8002eec <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80013f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013fc:	2302      	movs	r3, #2
 80013fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001400:	2303      	movs	r3, #3
 8001402:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800140c:	2307      	movs	r3, #7
 800140e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	4619      	mov	r1, r3
 8001414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001418:	f001 fd68 	bl	8002eec <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 800141c:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8001420:	2001      	movs	r0, #1
 8001422:	f7ff ff07 	bl	8001234 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(TLACIDLO_GPIO_Port, TLACIDLO_Pin, LL_GPIO_PULL_UP);
 8001426:	2201      	movs	r2, #1
 8001428:	2108      	movs	r1, #8
 800142a:	4817      	ldr	r0, [pc, #92]	; (8001488 <MX_GPIO_Init+0x120>)
 800142c:	f7ff ff5f 	bl	80012ee <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(TLACIDLO_GPIO_Port, TLACIDLO_Pin, LL_GPIO_MODE_INPUT);
 8001430:	2200      	movs	r2, #0
 8001432:	2108      	movs	r1, #8
 8001434:	4814      	ldr	r0, [pc, #80]	; (8001488 <MX_GPIO_Init+0x120>)
 8001436:	f7ff ff2b 	bl	8001290 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 800143a:	2308      	movs	r3, #8
 800143c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001442:	2301      	movs	r3, #1
 8001444:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001448:	2300      	movs	r3, #0
 800144a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800144e:	2301      	movs	r3, #1
 8001450:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4618      	mov	r0, r3
 800145a:	f001 fb4f 	bl	8002afc <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800145e:	f7ff fe47 	bl	80010f0 <__NVIC_GetPriorityGrouping>
 8001462:	4603      	mov	r3, r0
 8001464:	2200      	movs	r2, #0
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fe97 	bl	800119c <NVIC_EncodePriority>
 800146e:	4603      	mov	r3, r0
 8001470:	4619      	mov	r1, r3
 8001472:	2009      	movs	r0, #9
 8001474:	f7ff fe68 	bl	8001148 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 8001478:	2009      	movs	r0, #9
 800147a:	f7ff fe47 	bl	800110c <__NVIC_EnableIRQ>

}
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	; 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	48000400 	.word	0x48000400

0800148c <__NVIC_GetPriorityGrouping>:
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001490:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	0a1b      	lsrs	r3, r3, #8
 8001496:	f003 0307 	and.w	r3, r3, #7
}
 800149a:	4618      	mov	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_EnableIRQ>:
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	db0b      	blt.n	80014d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	f003 021f 	and.w	r2, r3, #31
 80014c0:	4907      	ldr	r1, [pc, #28]	; (80014e0 <__NVIC_EnableIRQ+0x38>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	095b      	lsrs	r3, r3, #5
 80014c8:	2001      	movs	r0, #1
 80014ca:	fa00 f202 	lsl.w	r2, r0, r2
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000e100 	.word	0xe000e100

080014e4 <__NVIC_SetPriority>:
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	6039      	str	r1, [r7, #0]
 80014ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	db0a      	blt.n	800150e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	490c      	ldr	r1, [pc, #48]	; (8001530 <__NVIC_SetPriority+0x4c>)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	0112      	lsls	r2, r2, #4
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	440b      	add	r3, r1
 8001508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800150c:	e00a      	b.n	8001524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4908      	ldr	r1, [pc, #32]	; (8001534 <__NVIC_SetPriority+0x50>)
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	3b04      	subs	r3, #4
 800151c:	0112      	lsls	r2, r2, #4
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	440b      	add	r3, r1
 8001522:	761a      	strb	r2, [r3, #24]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000e100 	.word	0xe000e100
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <NVIC_EncodePriority>:
{
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f1c3 0307 	rsb	r3, r3, #7
 8001552:	2b04      	cmp	r3, #4
 8001554:	bf28      	it	cs
 8001556:	2304      	movcs	r3, #4
 8001558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3304      	adds	r3, #4
 800155e:	2b06      	cmp	r3, #6
 8001560:	d902      	bls.n	8001568 <NVIC_EncodePriority+0x30>
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3b03      	subs	r3, #3
 8001566:	e000      	b.n	800156a <NVIC_EncodePriority+0x32>
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	f04f 32ff 	mov.w	r2, #4294967295
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43da      	mvns	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	401a      	ands	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001580:	f04f 31ff 	mov.w	r1, #4294967295
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	43d9      	mvns	r1, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	4313      	orrs	r3, r2
}
 8001592:	4618      	mov	r0, r3
 8001594:	3724      	adds	r7, #36	; 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f043 0201 	orr.w	r2, r3, #1
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	601a      	str	r2, [r3, #0]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	601a      	str	r2, [r3, #0]
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	601a      	str	r2, [r3, #0]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80015fe:	b480      	push	{r7}
 8001600:	b085      	sub	sp, #20
 8001602:	af00      	add	r7, sp, #0
 8001604:	60f8      	str	r0, [r7, #12]
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001612:	f023 0306 	bic.w	r3, r3, #6
 8001616:	68b9      	ldr	r1, [r7, #8]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	430a      	orrs	r2, r1
 800161c:	431a      	orrs	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	60da      	str	r2, [r3, #12]
}
 8001622:	bf00      	nop
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	60da      	str	r2, [r3, #12]
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f043 0204 	orr.w	r2, r3, #4
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	601a      	str	r2, [r3, #0]
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f023 0204 	bic.w	r2, r3, #4
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	601a      	str	r2, [r3, #0]
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d101      	bne.n	80016a6 <LL_I2C_IsActiveFlag_TXIS+0x18>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0320 	and.w	r3, r3, #32
 80016c4:	2b20      	cmp	r3, #32
 80016c6:	d101      	bne.n	80016cc <LL_I2C_IsActiveFlag_STOP+0x18>
 80016c8:	2301      	movs	r3, #1
 80016ca:	e000      	b.n	80016ce <LL_I2C_IsActiveFlag_STOP+0x1a>
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f043 0220 	orr.w	r2, r3, #32
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	61da      	str	r2, [r3, #28]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	605a      	str	r2, [r3, #4]
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
 8001728:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	0d5b      	lsrs	r3, r3, #21
 8001732:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <LL_I2C_HandleTransfer+0x48>)
 8001738:	430b      	orrs	r3, r1
 800173a:	43db      	mvns	r3, r3
 800173c:	401a      	ands	r2, r3
 800173e:	68b9      	ldr	r1, [r7, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4319      	orrs	r1, r3
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	041b      	lsls	r3, r3, #16
 8001748:	4319      	orrs	r1, r3
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	4319      	orrs	r1, r3
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	430b      	orrs	r3, r1
 8001752:	431a      	orrs	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	03ff7bff 	.word	0x03ff7bff

08001768 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001774:	78fa      	ldrb	r2, [r7, #3]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	629a      	str	r2, [r3, #40]	; 0x28
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <LL_AHB1_GRP1_EnableClock>:
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001792:	695a      	ldr	r2, [r3, #20]
 8001794:	4907      	ldr	r1, [pc, #28]	; (80017b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4313      	orrs	r3, r2
 800179a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800179e:	695a      	ldr	r2, [r3, #20]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4013      	ands	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	40021000 	.word	0x40021000

080017b8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017c2:	69da      	ldr	r2, [r3, #28]
 80017c4:	4907      	ldr	r1, [pc, #28]	; (80017e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017ce:	69da      	ldr	r2, [r3, #28]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4013      	ands	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017d6:	68fb      	ldr	r3, [r7, #12]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	40021000 	.word	0x40021000

080017e8 <MX_I2C1_Init>:
extern volatile uint8_t ubReceiveIndex;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08e      	sub	sp, #56	; 0x38
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80017ee:	f107 031c 	add.w	r3, r7, #28
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	611a      	str	r2, [r3, #16]
 80017fe:	615a      	str	r2, [r3, #20]
 8001800:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
 8001810:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001812:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001816:	f7ff ffb7 	bl	8001788 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800181a:	23c0      	movs	r3, #192	; 0xc0
 800181c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800181e:	2302      	movs	r3, #2
 8001820:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001822:	2303      	movs	r3, #3
 8001824:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001826:	2301      	movs	r3, #1
 8001828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800182a:	2301      	movs	r3, #1
 800182c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800182e:	2304      	movs	r3, #4
 8001830:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	4619      	mov	r1, r3
 8001836:	4821      	ldr	r0, [pc, #132]	; (80018bc <MX_I2C1_Init+0xd4>)
 8001838:	f001 fb58 	bl	8002eec <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800183c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001840:	f7ff ffba 	bl	80017b8 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001844:	f7ff fe22 	bl	800148c <__NVIC_GetPriorityGrouping>
 8001848:	4603      	mov	r3, r0
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fe72 	bl	8001538 <NVIC_EncodePriority>
 8001854:	4603      	mov	r3, r0
 8001856:	4619      	mov	r1, r3
 8001858:	201f      	movs	r0, #31
 800185a:	f7ff fe43 	bl	80014e4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800185e:	201f      	movs	r0, #31
 8001860:	f7ff fe22 	bl	80014a8 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001864:	4816      	ldr	r0, [pc, #88]	; (80018c0 <MX_I2C1_Init+0xd8>)
 8001866:	f7ff ff48 	bl	80016fa <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 800186a:	4815      	ldr	r0, [pc, #84]	; (80018c0 <MX_I2C1_Init+0xd8>)
 800186c:	f7ff fedf 	bl	800162e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001870:	4813      	ldr	r0, [pc, #76]	; (80018c0 <MX_I2C1_Init+0xd8>)
 8001872:	f7ff feb4 	bl	80015de <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001876:	4812      	ldr	r0, [pc, #72]	; (80018c0 <MX_I2C1_Init+0xd8>)
 8001878:	f7ff fea1 	bl	80015be <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8001880:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <MX_I2C1_Init+0xdc>)
 8001882:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 800188c:	2302      	movs	r3, #2
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001890:	2300      	movs	r3, #0
 8001892:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001894:	2300      	movs	r3, #0
 8001896:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001898:	f107 031c 	add.w	r3, r7, #28
 800189c:	4619      	mov	r1, r3
 800189e:	4808      	ldr	r0, [pc, #32]	; (80018c0 <MX_I2C1_Init+0xd8>)
 80018a0:	f001 fc37 	bl	8003112 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2100      	movs	r1, #0
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_I2C1_Init+0xd8>)
 80018aa:	f7ff fea8 	bl	80015fe <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 80018ae:	4804      	ldr	r0, [pc, #16]	; (80018c0 <MX_I2C1_Init+0xd8>)
 80018b0:	f7ff fe75 	bl	800159e <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 80018b4:	bf00      	nop
 80018b6:	3738      	adds	r7, #56	; 0x38
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	48000400 	.word	0x48000400
 80018c0:	40005400 	.word	0x40005400
 80018c4:	2000090e 	.word	0x2000090e

080018c8 <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af02      	add	r7, sp, #8
 80018ce:	4604      	mov	r4, r0
 80018d0:	4608      	mov	r0, r1
 80018d2:	4611      	mov	r1, r2
 80018d4:	461a      	mov	r2, r3
 80018d6:	4623      	mov	r3, r4
 80018d8:	71fb      	strb	r3, [r7, #7]
 80018da:	4603      	mov	r3, r0
 80018dc:	71bb      	strb	r3, [r7, #6]
 80018de:	460b      	mov	r3, r1
 80018e0:	717b      	strb	r3, [r7, #5]
 80018e2:	4613      	mov	r3, r2
 80018e4:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 80018e6:	793b      	ldrb	r3, [r7, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 80018ec:	79bb      	ldrb	r3, [r7, #6]
 80018ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018f2:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80018f4:	7979      	ldrb	r1, [r7, #5]
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <i2c_master_write+0x80>)
 80018f8:	9301      	str	r3, [sp, #4]
 80018fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2302      	movs	r3, #2
 8001902:	2200      	movs	r2, #0
 8001904:	4811      	ldr	r0, [pc, #68]	; (800194c <i2c_master_write+0x84>)
 8001906:	f7ff ff09 	bl	800171c <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 800190a:	79bb      	ldrb	r3, [r7, #6]
 800190c:	4619      	mov	r1, r3
 800190e:	480f      	ldr	r0, [pc, #60]	; (800194c <i2c_master_write+0x84>)
 8001910:	f7ff ff2a 	bl	8001768 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001914:	e00a      	b.n	800192c <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001916:	480d      	ldr	r0, [pc, #52]	; (800194c <i2c_master_write+0x84>)
 8001918:	f7ff feb9 	bl	800168e <LL_I2C_IsActiveFlag_TXIS>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d004      	beq.n	800192c <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	4619      	mov	r1, r3
 8001926:	4809      	ldr	r0, [pc, #36]	; (800194c <i2c_master_write+0x84>)
 8001928:	f7ff ff1e 	bl	8001768 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800192c:	4807      	ldr	r0, [pc, #28]	; (800194c <i2c_master_write+0x84>)
 800192e:	f7ff fec1 	bl	80016b4 <LL_I2C_IsActiveFlag_STOP>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0ee      	beq.n	8001916 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001938:	4804      	ldr	r0, [pc, #16]	; (800194c <i2c_master_write+0x84>)
 800193a:	f7ff fece 	bl	80016da <LL_I2C_ClearFlag_STOP>
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	bd90      	pop	{r4, r7, pc}
 8001946:	bf00      	nop
 8001948:	80002000 	.word	0x80002000
 800194c:	40005400 	.word	0x40005400

08001950 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af02      	add	r7, sp, #8
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	4608      	mov	r0, r1
 800195a:	4611      	mov	r1, r2
 800195c:	461a      	mov	r2, r3
 800195e:	4603      	mov	r3, r0
 8001960:	70fb      	strb	r3, [r7, #3]
 8001962:	460b      	mov	r3, r1
 8001964:	70bb      	strb	r3, [r7, #2]
 8001966:	4613      	mov	r3, r2
 8001968:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 800196a:	4a30      	ldr	r2, [pc, #192]	; (8001a2c <i2c_master_read+0xdc>)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8001970:	7c3b      	ldrb	r3, [r7, #16]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8001976:	78bb      	ldrb	r3, [r7, #2]
 8001978:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800197c:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 800197e:	4b2c      	ldr	r3, [pc, #176]	; (8001a30 <i2c_master_read+0xe0>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8001984:	482b      	ldr	r0, [pc, #172]	; (8001a34 <i2c_master_read+0xe4>)
 8001986:	f7ff fe62 	bl	800164e <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 800198a:	7879      	ldrb	r1, [r7, #1]
 800198c:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <i2c_master_read+0xe8>)
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2301      	movs	r3, #1
 8001998:	2200      	movs	r2, #0
 800199a:	4826      	ldr	r0, [pc, #152]	; (8001a34 <i2c_master_read+0xe4>)
 800199c:	f7ff febe 	bl	800171c <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80019a0:	e00a      	b.n	80019b8 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 80019a2:	4824      	ldr	r0, [pc, #144]	; (8001a34 <i2c_master_read+0xe4>)
 80019a4:	f7ff fe73 	bl	800168e <LL_I2C_IsActiveFlag_TXIS>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d004      	beq.n	80019b8 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 80019ae:	78bb      	ldrb	r3, [r7, #2]
 80019b0:	4619      	mov	r1, r3
 80019b2:	4820      	ldr	r0, [pc, #128]	; (8001a34 <i2c_master_read+0xe4>)
 80019b4:	f7ff fed8 	bl	8001768 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80019b8:	481e      	ldr	r0, [pc, #120]	; (8001a34 <i2c_master_read+0xe4>)
 80019ba:	f7ff fe7b 	bl	80016b4 <LL_I2C_IsActiveFlag_STOP>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0ee      	beq.n	80019a2 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80019c4:	481b      	ldr	r0, [pc, #108]	; (8001a34 <i2c_master_read+0xe4>)
 80019c6:	f7ff fe88 	bl	80016da <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 80019ca:	bf00      	nop
 80019cc:	4819      	ldr	r0, [pc, #100]	; (8001a34 <i2c_master_read+0xe4>)
 80019ce:	f7ff fe71 	bl	80016b4 <LL_I2C_IsActiveFlag_STOP>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1f9      	bne.n	80019cc <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 80019d8:	7879      	ldrb	r1, [r7, #1]
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	4a17      	ldr	r2, [pc, #92]	; (8001a3c <i2c_master_read+0xec>)
 80019de:	9201      	str	r2, [sp, #4]
 80019e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019e4:	9200      	str	r2, [sp, #0]
 80019e6:	2200      	movs	r2, #0
 80019e8:	4812      	ldr	r0, [pc, #72]	; (8001a34 <i2c_master_read+0xe4>)
 80019ea:	f7ff fe97 	bl	800171c <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 80019ee:	bf00      	nop
 80019f0:	4810      	ldr	r0, [pc, #64]	; (8001a34 <i2c_master_read+0xe4>)
 80019f2:	f7ff fe5f 	bl	80016b4 <LL_I2C_IsActiveFlag_STOP>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f9      	beq.n	80019f0 <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 80019fc:	480d      	ldr	r0, [pc, #52]	; (8001a34 <i2c_master_read+0xe4>)
 80019fe:	f7ff fe6c 	bl	80016da <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8001a02:	480c      	ldr	r0, [pc, #48]	; (8001a34 <i2c_master_read+0xe4>)
 8001a04:	f7ff fe33 	bl	800166e <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <i2c_master_read+0xe4>)
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <i2c_master_read+0xe4>)
 8001a0e:	f043 0310 	orr.w	r3, r3, #16
 8001a12:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8001a14:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <i2c_master_read+0xf0>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <i2c_master_read+0xe0>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8001a20:	4b02      	ldr	r3, [pc, #8]	; (8001a2c <i2c_master_read+0xdc>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000220 	.word	0x20000220
 8001a30:	20000224 	.word	0x20000224
 8001a34:	40005400 	.word	0x40005400
 8001a38:	80002000 	.word	0x80002000
 8001a3c:	80002400 	.word	0x80002400
 8001a40:	2000021c 	.word	0x2000021c

08001a44 <__NVIC_SetPriorityGrouping>:
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a60:	4013      	ands	r3, r2
 8001a62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a76:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	60d3      	str	r3, [r2, #12]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <LL_RCC_HSI_Enable+0x1c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <LL_RCC_HSI_Enable+0x1c>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40021000 	.word	0x40021000

08001aac <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <LL_RCC_HSI_IsReady+0x20>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	bf0c      	ite	eq
 8001abc:	2301      	moveq	r3, #1
 8001abe:	2300      	movne	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	40021000 	.word	0x40021000

08001ad0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001ad8:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	4904      	ldr	r1, [pc, #16]	; (8001af8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	600b      	str	r3, [r1, #0]
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000

08001afc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <LL_RCC_SetSysClkSource+0x24>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f023 0203 	bic.w	r2, r3, #3
 8001b0c:	4904      	ldr	r1, [pc, #16]	; (8001b20 <LL_RCC_SetSysClkSource+0x24>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	40021000 	.word	0x40021000

08001b24 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b28:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <LL_RCC_GetSysClkSource+0x18>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 030c 	and.w	r3, r3, #12
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40021000 	.word	0x40021000

08001b40 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <LL_RCC_SetAHBPrescaler+0x24>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b50:	4904      	ldr	r1, [pc, #16]	; (8001b64 <LL_RCC_SetAHBPrescaler+0x24>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	40021000 	.word	0x40021000

08001b68 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b78:	4904      	ldr	r1, [pc, #16]	; (8001b8c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	604b      	str	r3, [r1, #4]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	40021000 	.word	0x40021000

08001b90 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ba0:	4904      	ldr	r1, [pc, #16]	; (8001bb4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <LL_RCC_SetI2CClockSource+0x2c>)
 8001bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	0e1b      	lsrs	r3, r3, #24
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	401a      	ands	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001bd2:	4904      	ldr	r1, [pc, #16]	; (8001be4 <LL_RCC_SetI2CClockSource+0x2c>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	40021000 	.word	0x40021000

08001be8 <LL_APB1_GRP1_EnableClock>:
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001bf2:	69da      	ldr	r2, [r3, #28]
 8001bf4:	4907      	ldr	r1, [pc, #28]	; (8001c14 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001bfe:	69da      	ldr	r2, [r3, #28]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4013      	ands	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c06:	68fb      	ldr	r3, [r7, #12]
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	40021000 	.word	0x40021000

08001c18 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c22:	699a      	ldr	r2, [r3, #24]
 8001c24:	4907      	ldr	r1, [pc, #28]	; (8001c44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c2e:	699a      	ldr	r2, [r3, #24]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4013      	ands	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c36:	68fb      	ldr	r3, [r7, #12]
}
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	40021000 	.word	0x40021000

08001c48 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <LL_FLASH_SetLatency+0x24>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f023 0207 	bic.w	r2, r3, #7
 8001c58:	4904      	ldr	r1, [pc, #16]	; (8001c6c <LL_FLASH_SetLatency+0x24>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	600b      	str	r3, [r1, #0]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	40022000 	.word	0x40022000

08001c70 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <LL_FLASH_GetLatency+0x18>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0307 	and.w	r3, r3, #7
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40022000 	.word	0x40022000

08001c8c <LL_GPIO_ReadInputPort>:
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	DisplayDigit_0.index = 0;
 8001caa:	4b77      	ldr	r3, [pc, #476]	; (8001e88 <main+0x1e4>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
	DisplayDigit_0.chr = 0;
 8001cb0:	4b75      	ldr	r3, [pc, #468]	; (8001e88 <main+0x1e4>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	705a      	strb	r2, [r3, #1]
	DisplayDigit_1.index = 1;
 8001cb6:	4b75      	ldr	r3, [pc, #468]	; (8001e8c <main+0x1e8>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]
	DisplayDigit_1.chr = 0;
 8001cbc:	4b73      	ldr	r3, [pc, #460]	; (8001e8c <main+0x1e8>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	705a      	strb	r2, [r3, #1]
	DisplayDigit_2.index = 2;
 8001cc2:	4b73      	ldr	r3, [pc, #460]	; (8001e90 <main+0x1ec>)
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	701a      	strb	r2, [r3, #0]
	DisplayDigit_2.chr = 0;
 8001cc8:	4b71      	ldr	r3, [pc, #452]	; (8001e90 <main+0x1ec>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	705a      	strb	r2, [r3, #1]
	DisplayDigit_3.index = 3;
 8001cce:	4b71      	ldr	r3, [pc, #452]	; (8001e94 <main+0x1f0>)
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	701a      	strb	r2, [r3, #0]
	DisplayDigit_3.chr = 0;
 8001cd4:	4b6f      	ldr	r3, [pc, #444]	; (8001e94 <main+0x1f0>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	705a      	strb	r2, [r3, #1]
	nextStringSequence = false;
 8001cda:	4b6f      	ldr	r3, [pc, #444]	; (8001e98 <main+0x1f4>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
	Direction_ direction = Direction_DownUp;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	75fb      	strb	r3, [r7, #23]
	end_of_read_flag = 0;
 8001ce4:	4b6d      	ldr	r3, [pc, #436]	; (8001e9c <main+0x1f8>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	701a      	strb	r2, [r3, #0]
	ubReceiveIndex = 0;
 8001cea:	4b6d      	ldr	r3, [pc, #436]	; (8001ea0 <main+0x1fc>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]
	metOpt = MetricsOption_Altitude;
 8001cf0:	4b6c      	ldr	r3, [pc, #432]	; (8001ea4 <main+0x200>)
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	701a      	strb	r2, [r3, #0]
	metrics.temperature = -1;
 8001cf6:	4b6c      	ldr	r3, [pc, #432]	; (8001ea8 <main+0x204>)
 8001cf8:	4a6c      	ldr	r2, [pc, #432]	; (8001eac <main+0x208>)
 8001cfa:	601a      	str	r2, [r3, #0]
	metrics.humidity = -1;
 8001cfc:	4b6a      	ldr	r3, [pc, #424]	; (8001ea8 <main+0x204>)
 8001cfe:	4a6b      	ldr	r2, [pc, #428]	; (8001eac <main+0x208>)
 8001d00:	605a      	str	r2, [r3, #4]
	metrics.pressure = -1;
 8001d02:	4b69      	ldr	r3, [pc, #420]	; (8001ea8 <main+0x204>)
 8001d04:	4a69      	ldr	r2, [pc, #420]	; (8001eac <main+0x208>)
 8001d06:	609a      	str	r2, [r3, #8]
	metrics.altitude = -1;
 8001d08:	4b67      	ldr	r3, [pc, #412]	; (8001ea8 <main+0x204>)
 8001d0a:	4a68      	ldr	r2, [pc, #416]	; (8001eac <main+0x208>)
 8001d0c:	60da      	str	r2, [r3, #12]
	switch_state = 1;
 8001d0e:	4b68      	ldr	r3, [pc, #416]	; (8001eb0 <main+0x20c>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	701a      	strb	r2, [r3, #0]

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001d14:	2001      	movs	r0, #1
 8001d16:	f7ff ff7f 	bl	8001c18 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001d1a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001d1e:	f7ff ff63 	bl	8001be8 <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d22:	2003      	movs	r0, #3
 8001d24:	f7ff fe8e 	bl	8001a44 <__NVIC_SetPriorityGrouping>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001d28:	f000 f8ca 	bl	8001ec0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001d2c:	f7ff fb1c 	bl	8001368 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001d30:	f7ff fd5a 	bl	80017e8 <MX_I2C1_Init>
	MX_TIM6_Init();
 8001d34:	f000 fd08 	bl	8002748 <MX_TIM6_Init>
	MX_TIM7_Init();
 8001d38:	f000 fd46 	bl	80027c8 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */
	lsm6ds0_init();
 8001d3c:	f001 fb60 	bl	8003400 <lsm6ds0_init>
	hts221_init();
 8001d40:	f001 fbd8 	bl	80034f4 <hts221_init>
	lps25hb_init();
 8001d44:	f001 fe24 	bl	8003990 <lps25hb_init>
	uint8_t index = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	75bb      	strb	r3, [r7, #22]
	uint8_t string[STR_LEN] = { 0 };
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
	uint8_t lenString = STR_LEN;
 8001d5c:	2314      	movs	r3, #20
 8001d5e:	757b      	strb	r3, [r7, #21]
	setMetricsOption(string, metOpt, metrics);
 8001d60:	4b50      	ldr	r3, [pc, #320]	; (8001ea4 <main+0x200>)
 8001d62:	781a      	ldrb	r2, [r3, #0]
 8001d64:	4b50      	ldr	r3, [pc, #320]	; (8001ea8 <main+0x204>)
 8001d66:	ed93 6a00 	vldr	s12, [r3]
 8001d6a:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d6e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d72:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d76:	463b      	mov	r3, r7
 8001d78:	eeb0 0a46 	vmov.f32	s0, s12
 8001d7c:	eef0 0a66 	vmov.f32	s1, s13
 8001d80:	eeb0 1a47 	vmov.f32	s2, s14
 8001d84:	eef0 1a67 	vmov.f32	s3, s15
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 f900 	bl	8001f90 <setMetricsOption>
	lenString = strlen((const char*) string);
 8001d90:	463b      	mov	r3, r7
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fa1c 	bl	80001d0 <strlen>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	757b      	strb	r3, [r7, #21]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */
		if (switch_state) {
 8001d9c:	4b44      	ldr	r3, [pc, #272]	; (8001eb0 <main+0x20c>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d011      	beq.n	8001dc8 <main+0x124>
			index = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	75bb      	strb	r3, [r7, #22]
			metOpt++;
 8001da8:	4b3e      	ldr	r3, [pc, #248]	; (8001ea4 <main+0x200>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	3301      	adds	r3, #1
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	4b3c      	ldr	r3, [pc, #240]	; (8001ea4 <main+0x200>)
 8001db2:	701a      	strb	r2, [r3, #0]
			if (metOpt < MetricsOption_Temperature
					|| metOpt > MetricsOption_Altitude) {
 8001db4:	4b3b      	ldr	r3, [pc, #236]	; (8001ea4 <main+0x200>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
			if (metOpt < MetricsOption_Temperature
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d902      	bls.n	8001dc2 <main+0x11e>
				metOpt = MetricsOption_Temperature;
 8001dbc:	4b39      	ldr	r3, [pc, #228]	; (8001ea4 <main+0x200>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
			}

			switch_state = 0;
 8001dc2:	4b3b      	ldr	r3, [pc, #236]	; (8001eb0 <main+0x20c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
		}
		if (nextStringSequence) {
 8001dc8:	4b33      	ldr	r3, [pc, #204]	; (8001e98 <main+0x1f4>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0e5      	beq.n	8001d9c <main+0xf8>
			nextStringSequence = false;
 8001dd0:	4b31      	ldr	r3, [pc, #196]	; (8001e98 <main+0x1f4>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
			hts221_get_temperature(&metrics.temperature);
 8001dd6:	4834      	ldr	r0, [pc, #208]	; (8001ea8 <main+0x204>)
 8001dd8:	f001 fc2a 	bl	8003630 <hts221_get_temperature>
			hts221_get_humidity(&metrics.humidity);
 8001ddc:	4835      	ldr	r0, [pc, #212]	; (8001eb4 <main+0x210>)
 8001dde:	f001 fbd7 	bl	8003590 <hts221_get_humidity>
			lps25hb_get_pressure(&metrics.pressure);
 8001de2:	4835      	ldr	r0, [pc, #212]	; (8001eb8 <main+0x214>)
 8001de4:	f001 fd54 	bl	8003890 <lps25hb_get_pressure>
			lps25hb_get_altitude(&metrics.altitude);
 8001de8:	4834      	ldr	r0, [pc, #208]	; (8001ebc <main+0x218>)
 8001dea:	f001 fd91 	bl	8003910 <lps25hb_get_altitude>
			setMetricsOption(string, metOpt, metrics);
 8001dee:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <main+0x200>)
 8001df0:	781a      	ldrb	r2, [r3, #0]
 8001df2:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <main+0x204>)
 8001df4:	ed93 6a00 	vldr	s12, [r3]
 8001df8:	edd3 6a01 	vldr	s13, [r3, #4]
 8001dfc:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e00:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e04:	463b      	mov	r3, r7
 8001e06:	eeb0 0a46 	vmov.f32	s0, s12
 8001e0a:	eef0 0a66 	vmov.f32	s1, s13
 8001e0e:	eeb0 1a47 	vmov.f32	s2, s14
 8001e12:	eef0 1a67 	vmov.f32	s3, s15
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 f8b9 	bl	8001f90 <setMetricsOption>
			lenString = strlen((const char*) string);
 8001e1e:	463b      	mov	r3, r7
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe f9d5 	bl	80001d0 <strlen>
 8001e26:	4603      	mov	r3, r0
 8001e28:	757b      	strb	r3, [r7, #21]
			displayString(index, string, lenString);
 8001e2a:	7d7a      	ldrb	r2, [r7, #21]
 8001e2c:	4639      	mov	r1, r7
 8001e2e:	7dbb      	ldrb	r3, [r7, #22]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f000 f979 	bl	8002128 <displayString>
			if (index + STR_DISP_LEN < lenString
 8001e36:	7dbb      	ldrb	r3, [r7, #22]
 8001e38:	1d1a      	adds	r2, r3, #4
 8001e3a:	7d7b      	ldrb	r3, [r7, #21]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	da06      	bge.n	8001e4e <main+0x1aa>
					&& direction == Direction_DownUp) {
 8001e40:	7dfb      	ldrb	r3, [r7, #23]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d103      	bne.n	8001e4e <main+0x1aa>
				index++;
 8001e46:	7dbb      	ldrb	r3, [r7, #22]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	75bb      	strb	r3, [r7, #22]
 8001e4c:	e009      	b.n	8001e62 <main+0x1be>
			} else if (index + STR_DISP_LEN >= lenString
 8001e4e:	7dbb      	ldrb	r3, [r7, #22]
 8001e50:	1d1a      	adds	r2, r3, #4
 8001e52:	7d7b      	ldrb	r3, [r7, #21]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	db04      	blt.n	8001e62 <main+0x1be>
					&& direction == Direction_DownUp) {
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <main+0x1be>
				direction = Direction_UpDown;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	75fb      	strb	r3, [r7, #23]
			}
			if (index > 0 && direction == Direction_UpDown) {
 8001e62:	7dbb      	ldrb	r3, [r7, #22]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d006      	beq.n	8001e76 <main+0x1d2>
 8001e68:	7dfb      	ldrb	r3, [r7, #23]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d103      	bne.n	8001e76 <main+0x1d2>
				index--;
 8001e6e:	7dbb      	ldrb	r3, [r7, #22]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	75bb      	strb	r3, [r7, #22]
 8001e74:	e007      	b.n	8001e86 <main+0x1e2>
			} else if (index == 0 && direction == Direction_UpDown) {
 8001e76:	7dbb      	ldrb	r3, [r7, #22]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d18f      	bne.n	8001d9c <main+0xf8>
 8001e7c:	7dfb      	ldrb	r3, [r7, #23]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d18c      	bne.n	8001d9c <main+0xf8>
				direction = Direction_DownUp;
 8001e82:	2300      	movs	r3, #0
 8001e84:	75fb      	strb	r3, [r7, #23]
		if (switch_state) {
 8001e86:	e789      	b.n	8001d9c <main+0xf8>
 8001e88:	20000218 	.word	0x20000218
 8001e8c:	20000210 	.word	0x20000210
 8001e90:	2000020c 	.word	0x2000020c
 8001e94:	20000214 	.word	0x20000214
 8001e98:	20000228 	.word	0x20000228
 8001e9c:	20000224 	.word	0x20000224
 8001ea0:	2000021c 	.word	0x2000021c
 8001ea4:	20000208 	.word	0x20000208
 8001ea8:	2000022c 	.word	0x2000022c
 8001eac:	bf800000 	.word	0xbf800000
 8001eb0:	2000020e 	.word	0x2000020e
 8001eb4:	20000230 	.word	0x20000230
 8001eb8:	20000234 	.word	0x20000234
 8001ebc:	20000238 	.word	0x20000238

08001ec0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f7ff febf 	bl	8001c48 <LL_FLASH_SetLatency>
	while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0) {
 8001eca:	bf00      	nop
 8001ecc:	f7ff fed0 	bl	8001c70 <LL_FLASH_GetLatency>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1fa      	bne.n	8001ecc <SystemClock_Config+0xc>
	}
	LL_RCC_HSI_Enable();
 8001ed6:	f7ff fdd9 	bl	8001a8c <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while (LL_RCC_HSI_IsReady() != 1) {
 8001eda:	bf00      	nop
 8001edc:	f7ff fde6 	bl	8001aac <LL_RCC_HSI_IsReady>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d1fa      	bne.n	8001edc <SystemClock_Config+0x1c>

	}
	LL_RCC_HSI_SetCalibTrimming(16);
 8001ee6:	2010      	movs	r0, #16
 8001ee8:	f7ff fdf2 	bl	8001ad0 <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001eec:	2000      	movs	r0, #0
 8001eee:	f7ff fe27 	bl	8001b40 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f7ff fe38 	bl	8001b68 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f7ff fe49 	bl	8001b90 <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001efe:	2000      	movs	r0, #0
 8001f00:	f7ff fdfc 	bl	8001afc <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8001f04:	bf00      	nop
 8001f06:	f7ff fe0d 	bl	8001b24 <LL_RCC_GetSysClkSource>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1fa      	bne.n	8001f06 <SystemClock_Config+0x46>

	}
	LL_Init1msTick(8000000);
 8001f10:	4805      	ldr	r0, [pc, #20]	; (8001f28 <SystemClock_Config+0x68>)
 8001f12:	f001 fa01 	bl	8003318 <LL_Init1msTick>
	LL_SetSystemCoreClock(8000000);
 8001f16:	4804      	ldr	r0, [pc, #16]	; (8001f28 <SystemClock_Config+0x68>)
 8001f18:	f001 fa32 	bl	8003380 <LL_SetSystemCoreClock>
	LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001f1c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001f20:	f7ff fe4a 	bl	8001bb8 <LL_RCC_SetI2CClockSource>
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	007a1200 	.word	0x007a1200

08001f2c <checkButtonState>:

/* USER CODE BEGIN 4 */
uint8_t checkButtonState(GPIO_TypeDef *PORT, uint8_t PIN, uint8_t edge,
		uint8_t samples_window, uint8_t samples_required) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	4608      	mov	r0, r1
 8001f36:	4611      	mov	r1, r2
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	70fb      	strb	r3, [r7, #3]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	70bb      	strb	r3, [r7, #2]
 8001f42:	4613      	mov	r3, r2
 8001f44:	707b      	strb	r3, [r7, #1]
	//type your code for "checkButtonState" implementation here:
	uint8_t button_state = 0, timeout = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	73fb      	strb	r3, [r7, #15]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	73bb      	strb	r3, [r7, #14]
	while (timeout < samples_window) {
 8001f4e:	e010      	b.n	8001f72 <checkButtonState+0x46>
		if ((LL_GPIO_ReadInputPort(PORT) & (1 << PIN))) {
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff fe9b 	bl	8001c8c <LL_GPIO_ReadInputPort>
 8001f56:	4602      	mov	r2, r0
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <checkButtonState+0x40>
			button_state += 1;
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
		} else {
			//button_state = 0;
		}
		timeout += 1;
 8001f6c:	7bbb      	ldrb	r3, [r7, #14]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	73bb      	strb	r3, [r7, #14]
	while (timeout < samples_window) {
 8001f72:	7bba      	ldrb	r2, [r7, #14]
 8001f74:	787b      	ldrb	r3, [r7, #1]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d3ea      	bcc.n	8001f50 <checkButtonState+0x24>
	}
	if (button_state >= samples_required)
 8001f7a:	7bfa      	ldrb	r2, [r7, #15]
 8001f7c:	7e3b      	ldrb	r3, [r7, #24]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d301      	bcc.n	8001f86 <checkButtonState+0x5a>
		return 1;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <checkButtonState+0x5c>
	else
		return 0;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <setMetricsOption>:
void setMetricsOption(uint8_t *str, MetricsOption_ metricsOption,
		MetricsStruct metricsStruct) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6178      	str	r0, [r7, #20]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	eeb0 6a40 	vmov.f32	s12, s0
 8001f9e:	eef0 6a60 	vmov.f32	s13, s1
 8001fa2:	eeb0 7a41 	vmov.f32	s14, s2
 8001fa6:	eef0 7a61 	vmov.f32	s15, s3
 8001faa:	74fb      	strb	r3, [r7, #19]
 8001fac:	ed87 6a00 	vstr	s12, [r7]
 8001fb0:	edc7 6a01 	vstr	s13, [r7, #4]
 8001fb4:	ed87 7a02 	vstr	s14, [r7, #8]
 8001fb8:	edc7 7a03 	vstr	s15, [r7, #12]
	switch (metricsOption) {
 8001fbc:	7cfb      	ldrb	r3, [r7, #19]
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	d852      	bhi.n	8002068 <setMetricsOption+0xd8>
 8001fc2:	a201      	add	r2, pc, #4	; (adr r2, 8001fc8 <setMetricsOption+0x38>)
 8001fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc8:	08001fd9 	.word	0x08001fd9
 8001fcc:	08001ffd 	.word	0x08001ffd
 8001fd0:	08002021 	.word	0x08002021
 8001fd4:	08002045 	.word	0x08002045
	default: //Unknown
		break;
	case MetricsOption_Temperature:
		setString(str, TEMPERATURE_STR_TEXT, TEMPERATURE_STR_PROT,
 8001fd8:	edd7 7a00 	vldr	s15, [r7]
 8001fdc:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002074 <setMetricsOption+0xe4>
 8001fe0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002078 <setMetricsOption+0xe8>
 8001fe4:	eeb0 1a66 	vmov.f32	s2, s13
 8001fe8:	eef0 0a47 	vmov.f32	s1, s14
 8001fec:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff0:	4a22      	ldr	r2, [pc, #136]	; (800207c <setMetricsOption+0xec>)
 8001ff2:	4923      	ldr	r1, [pc, #140]	; (8002080 <setMetricsOption+0xf0>)
 8001ff4:	6978      	ldr	r0, [r7, #20]
 8001ff6:	f000 f85b 	bl	80020b0 <setString>
				metricsStruct.temperature, TEMPERATURE_MIN, TEMPERATURE_MAX);
		break;
 8001ffa:	e036      	b.n	800206a <setMetricsOption+0xda>
	case MetricsOption_Humidity:
		setString(str, HUMIDITY_STR_TEXT, HUMIDITY_STR_PROT,
 8001ffc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002000:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002084 <setMetricsOption+0xf4>
 8002004:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8002078 <setMetricsOption+0xe8>
 8002008:	eeb0 1a66 	vmov.f32	s2, s13
 800200c:	eef0 0a47 	vmov.f32	s1, s14
 8002010:	eeb0 0a67 	vmov.f32	s0, s15
 8002014:	4a1c      	ldr	r2, [pc, #112]	; (8002088 <setMetricsOption+0xf8>)
 8002016:	491d      	ldr	r1, [pc, #116]	; (800208c <setMetricsOption+0xfc>)
 8002018:	6978      	ldr	r0, [r7, #20]
 800201a:	f000 f849 	bl	80020b0 <setString>
				metricsStruct.humidity, HUMIDITY_MIN, HUMIDITY_MAX);
		break;
 800201e:	e024      	b.n	800206a <setMetricsOption+0xda>
	case MetricsOption_Pressure:
		setString(str, PRESSURE_STR_TEXT, PRESSURE_STR_PROT,
 8002020:	edd7 7a02 	vldr	s15, [r7, #8]
 8002024:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002090 <setMetricsOption+0x100>
 8002028:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002094 <setMetricsOption+0x104>
 800202c:	eeb0 1a66 	vmov.f32	s2, s13
 8002030:	eef0 0a47 	vmov.f32	s1, s14
 8002034:	eeb0 0a67 	vmov.f32	s0, s15
 8002038:	4a17      	ldr	r2, [pc, #92]	; (8002098 <setMetricsOption+0x108>)
 800203a:	4918      	ldr	r1, [pc, #96]	; (800209c <setMetricsOption+0x10c>)
 800203c:	6978      	ldr	r0, [r7, #20]
 800203e:	f000 f837 	bl	80020b0 <setString>
				metricsStruct.pressure, PRESSURE_MIN, PRESSURE_MAX);
		break;
 8002042:	e012      	b.n	800206a <setMetricsOption+0xda>
	case MetricsOption_Altitude:
		setString(str, ALTITUDE_STR_TEXT, ALTITUDE_STR_PROT,
 8002044:	edd7 7a03 	vldr	s15, [r7, #12]
 8002048:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80020a0 <setMetricsOption+0x110>
 800204c:	eddf 6a15 	vldr	s13, [pc, #84]	; 80020a4 <setMetricsOption+0x114>
 8002050:	eeb0 1a66 	vmov.f32	s2, s13
 8002054:	eef0 0a47 	vmov.f32	s1, s14
 8002058:	eeb0 0a67 	vmov.f32	s0, s15
 800205c:	4a12      	ldr	r2, [pc, #72]	; (80020a8 <setMetricsOption+0x118>)
 800205e:	4913      	ldr	r1, [pc, #76]	; (80020ac <setMetricsOption+0x11c>)
 8002060:	6978      	ldr	r0, [r7, #20]
 8002062:	f000 f825 	bl	80020b0 <setString>
				metricsStruct.altitude, ALTITUDE_MIN, ALTITUDE_MAX);
		break;
 8002066:	e000      	b.n	800206a <setMetricsOption+0xda>
		break;
 8002068:	bf00      	nop
	}
}
 800206a:	bf00      	nop
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	c2c7cccd 	.word	0xc2c7cccd
 8002078:	42c7cccd 	.word	0x42c7cccd
 800207c:	080077b0 	.word	0x080077b0
 8002080:	080077a8 	.word	0x080077a8
 8002084:	00000000 	.word	0x00000000
 8002088:	080077c0 	.word	0x080077c0
 800208c:	080077b8 	.word	0x080077b8
 8002090:	43820000 	.word	0x43820000
 8002094:	449d7ccd 	.word	0x449d7ccd
 8002098:	080077d0 	.word	0x080077d0
 800209c:	080077c8 	.word	0x080077c8
 80020a0:	c4ea9000 	.word	0xc4ea9000
 80020a4:	461c3f9a 	.word	0x461c3f9a
 80020a8:	080077e0 	.word	0x080077e0
 80020ac:	080077d8 	.word	0x080077d8

080020b0 <setString>:
void setString(uint8_t *str, const uint8_t *strText, const uint8_t *strProt,
		float value, float minValue, float maxValue) {
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b089      	sub	sp, #36	; 0x24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6178      	str	r0, [r7, #20]
 80020b8:	6139      	str	r1, [r7, #16]
 80020ba:	60fa      	str	r2, [r7, #12]
 80020bc:	ed87 0a02 	vstr	s0, [r7, #8]
 80020c0:	edc7 0a01 	vstr	s1, [r7, #4]
 80020c4:	ed87 1a00 	vstr	s2, [r7]
	strcpy((char*) str, (const char*) strText);
 80020c8:	6939      	ldr	r1, [r7, #16]
 80020ca:	6978      	ldr	r0, [r7, #20]
 80020cc:	f002 f984 	bl	80043d8 <strcpy>
	uint16_t len = strlen((const char*) str);
 80020d0:	6978      	ldr	r0, [r7, #20]
 80020d2:	f7fe f87d 	bl	80001d0 <strlen>
 80020d6:	4603      	mov	r3, r0
 80020d8:	83fb      	strh	r3, [r7, #30]
	if (value < minValue)
 80020da:	ed97 7a02 	vldr	s14, [r7, #8]
 80020de:	edd7 7a01 	vldr	s15, [r7, #4]
 80020e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ea:	d502      	bpl.n	80020f2 <setString+0x42>
		value = minValue;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	e00a      	b.n	8002108 <setString+0x58>
	else if (value > maxValue)
 80020f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80020f6:	edd7 7a00 	vldr	s15, [r7]
 80020fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002102:	dd01      	ble.n	8002108 <setString+0x58>
		value = maxValue;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	60bb      	str	r3, [r7, #8]
	sprintf((char*) (str + len), (const char*) strProt, value);
 8002108:	8bfb      	ldrh	r3, [r7, #30]
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	18d4      	adds	r4, r2, r3
 800210e:	68b8      	ldr	r0, [r7, #8]
 8002110:	f7fe fa1a 	bl	8000548 <__aeabi_f2d>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	68f9      	ldr	r1, [r7, #12]
 800211a:	4620      	mov	r0, r4
 800211c:	f002 f93c 	bl	8004398 <siprintf>
}
 8002120:	bf00      	nop
 8002122:	3724      	adds	r7, #36	; 0x24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd90      	pop	{r4, r7, pc}

08002128 <displayString>:
uint8_t displayString(uint8_t index, uint8_t *str, uint8_t length) {
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	6039      	str	r1, [r7, #0]
 8002132:	71fb      	strb	r3, [r7, #7]
 8002134:	4613      	mov	r3, r2
 8002136:	71bb      	strb	r3, [r7, #6]
	uint8_t result = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	73fb      	strb	r3, [r7, #15]
	if (index + STR_DISP_LEN <= length) {
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	1cda      	adds	r2, r3, #3
 8002140:	79bb      	ldrb	r3, [r7, #6]
 8002142:	429a      	cmp	r2, r3
 8002144:	da15      	bge.n	8002172 <displayString+0x4a>
		uint8_t dispStr[STR_DISP_LEN] = { 0 };
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
		memcpy(dispStr, str + index, STR_DISP_LEN);
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	4413      	add	r3, r2
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	60bb      	str	r3, [r7, #8]
		result = index + STR_DISP_LEN;
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	3304      	adds	r3, #4
 8002158:	73fb      	strb	r3, [r7, #15]
		DisplayDigit_0.chr = dispStr[0];
 800215a:	7a3a      	ldrb	r2, [r7, #8]
 800215c:	4b08      	ldr	r3, [pc, #32]	; (8002180 <displayString+0x58>)
 800215e:	705a      	strb	r2, [r3, #1]
		DisplayDigit_1.chr = dispStr[1];
 8002160:	7a7a      	ldrb	r2, [r7, #9]
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <displayString+0x5c>)
 8002164:	705a      	strb	r2, [r3, #1]
		DisplayDigit_2.chr = dispStr[2];
 8002166:	7aba      	ldrb	r2, [r7, #10]
 8002168:	4b07      	ldr	r3, [pc, #28]	; (8002188 <displayString+0x60>)
 800216a:	705a      	strb	r2, [r3, #1]
		DisplayDigit_3.chr = dispStr[3];
 800216c:	7afa      	ldrb	r2, [r7, #11]
 800216e:	4b07      	ldr	r3, [pc, #28]	; (800218c <displayString+0x64>)
 8002170:	705a      	strb	r2, [r3, #1]

	}
	return result;
 8002172:	7bfb      	ldrb	r3, [r7, #15]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	20000218 	.word	0x20000218
 8002184:	20000210 	.word	0x20000210
 8002188:	2000020c 	.word	0x2000020c
 800218c:	20000214 	.word	0x20000214

08002190 <LL_I2C_IsActiveFlag_RXNE>:
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d101      	bne.n	80021a8 <LL_I2C_IsActiveFlag_RXNE+0x18>
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <LL_I2C_IsActiveFlag_RXNE+0x1a>
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <LL_I2C_ReceiveData8>:
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	b2db      	uxtb	r3, r3
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80021d8:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80021da:	695a      	ldr	r2, [r3, #20]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4013      	ands	r3, r2
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	bf0c      	ite	eq
 80021e6:	2301      	moveq	r3, #1
 80021e8:	2300      	movne	r3, #0
 80021ea:	b2db      	uxtb	r3, r3
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	40010400 	.word	0x40010400

080021fc <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6153      	str	r3, [r2, #20]
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40010400 	.word	0x40010400

0800221c <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f06f 0201 	mvn.w	r2, #1
 800222a:	611a      	str	r2, [r3, #16]
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002262:	e7fe      	b.n	8002262 <NMI_Handler+0x4>

08002264 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8002268:	e7fe      	b.n	8002268 <HardFault_Handler+0x4>

0800226a <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 800226e:	e7fe      	b.n	800226e <MemManage_Handler+0x4>

08002270 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8002274:	e7fe      	b.n	8002274 <BusFault_Handler+0x4>

08002276 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 800227a:	e7fe      	b.n	800227a <UsageFault_Handler+0x4>

0800227c <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
	/* USER CODE END SysTick_IRQn 0 */

	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <EXTI3_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line 3 interrupt.
 */
void EXTI3_IRQHandler(void) {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN EXTI3_IRQn 0 */

	/* USER CODE END EXTI3_IRQn 0 */
	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET) {
 80022ba:	2008      	movs	r0, #8
 80022bc:	f7ff ff88 	bl	80021d0 <LL_EXTI_IsActiveFlag_0_31>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d014      	beq.n	80022f0 <EXTI3_IRQHandler+0x3c>
		LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 80022c6:	2008      	movs	r0, #8
 80022c8:	f7ff ff98 	bl	80021fc <LL_EXTI_ClearFlag_0_31>
		/* USER CODE BEGIN LL_EXTI_LINE_3 */
		if (checkButtonState(TLACIDLO_GPIO_Port, TLACIDLO_Pin, BUTTON_EXTI_TRIGGER,
 80022cc:	2314      	movs	r3, #20
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	231e      	movs	r3, #30
 80022d2:	2201      	movs	r2, #1
 80022d4:	2108      	movs	r1, #8
 80022d6:	4808      	ldr	r0, [pc, #32]	; (80022f8 <EXTI3_IRQHandler+0x44>)
 80022d8:	f7ff fe28 	bl	8001f2c <checkButtonState>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d006      	beq.n	80022f0 <EXTI3_IRQHandler+0x3c>
			BUTTON_EXTI_SAMPLES_WINDOW, BUTTON_EXTI_SAMPLES_REQUIRED) && switch_state == 0) {
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <EXTI3_IRQHandler+0x48>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d102      	bne.n	80022f0 <EXTI3_IRQHandler+0x3c>
				switch_state = 1;
 80022ea:	4b04      	ldr	r3, [pc, #16]	; (80022fc <EXTI3_IRQHandler+0x48>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]
		/* USER CODE END LL_EXTI_LINE_3 */
	}
	/* USER CODE BEGIN EXTI3_IRQn 1 */

	/* USER CODE END EXTI3_IRQn 1 */
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	48000400 	.word	0x48000400
 80022fc:	2000020e 	.word	0x2000020e

08002300 <I2C1_EV_IRQHandler>:

/**
 * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
 */
void I2C1_EV_IRQHandler(void) {
 8002300:	b598      	push	{r3, r4, r7, lr}
 8002302:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C1_EV_IRQn 0 */
	if (LL_I2C_IsActiveFlag_RXNE(I2C1)) {
 8002304:	4812      	ldr	r0, [pc, #72]	; (8002350 <I2C1_EV_IRQHandler+0x50>)
 8002306:	f7ff ff43 	bl	8002190 <LL_I2C_IsActiveFlag_RXNE>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d01c      	beq.n	800234a <I2C1_EV_IRQHandler+0x4a>
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8002310:	4b10      	ldr	r3, [pc, #64]	; (8002354 <I2C1_EV_IRQHandler+0x54>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4b10      	ldr	r3, [pc, #64]	; (8002358 <I2C1_EV_IRQHandler+0x58>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	1c59      	adds	r1, r3, #1
 800231c:	b2c8      	uxtb	r0, r1
 800231e:	490e      	ldr	r1, [pc, #56]	; (8002358 <I2C1_EV_IRQHandler+0x58>)
 8002320:	7008      	strb	r0, [r1, #0]
 8002322:	18d4      	adds	r4, r2, r3
 8002324:	480a      	ldr	r0, [pc, #40]	; (8002350 <I2C1_EV_IRQHandler+0x50>)
 8002326:	f7ff ff46 	bl	80021b6 <LL_I2C_ReceiveData8>
 800232a:	4603      	mov	r3, r0
 800232c:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 800232e:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <I2C1_EV_IRQHandler+0x58>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b13      	cmp	r3, #19
 8002336:	d903      	bls.n	8002340 <I2C1_EV_IRQHandler+0x40>
 8002338:	4b07      	ldr	r3, [pc, #28]	; (8002358 <I2C1_EV_IRQHandler+0x58>)
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]
 800233e:	e001      	b.n	8002344 <I2C1_EV_IRQHandler+0x44>
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <I2C1_EV_IRQHandler+0x58>)
 8002342:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <I2C1_EV_IRQHandler+0x5c>)
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
	/* USER CODE END I2C1_EV_IRQn 0 */

	/* USER CODE BEGIN I2C1_EV_IRQn 1 */

	/* USER CODE END I2C1_EV_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd98      	pop	{r3, r4, r7, pc}
 800234e:	bf00      	nop
 8002350:	40005400 	.word	0x40005400
 8002354:	20000220 	.word	0x20000220
 8002358:	2000021c 	.word	0x2000021c
 800235c:	20000224 	.word	0x20000224

08002360 <TIM6_DAC1_IRQHandler>:

/**
 * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
 */
void TIM6_DAC1_IRQHandler(void) {
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC1_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM6)) {
 8002364:	4806      	ldr	r0, [pc, #24]	; (8002380 <TIM6_DAC1_IRQHandler+0x20>)
 8002366:	f7ff ff67 	bl	8002238 <LL_TIM_IsActiveFlag_UPDATE>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <TIM6_DAC1_IRQHandler+0x14>
		updateDisplay();
 8002370:	f7fe fd8c 	bl	8000e8c <updateDisplay>
	}
	/* USER CODE END TIM6_DAC1_IRQn 0 */

	/* USER CODE BEGIN TIM6_DAC1_IRQn 1 */
	LL_TIM_ClearFlag_UPDATE(TIM6);
 8002374:	4802      	ldr	r0, [pc, #8]	; (8002380 <TIM6_DAC1_IRQHandler+0x20>)
 8002376:	f7ff ff51 	bl	800221c <LL_TIM_ClearFlag_UPDATE>
	/* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40001000 	.word	0x40001000

08002384 <TIM7_DAC2_IRQHandler>:

/**
 * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
 */
void TIM7_DAC2_IRQHandler(void) {
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM7_DAC2_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM7)) {
 8002388:	4806      	ldr	r0, [pc, #24]	; (80023a4 <TIM7_DAC2_IRQHandler+0x20>)
 800238a:	f7ff ff55 	bl	8002238 <LL_TIM_IsActiveFlag_UPDATE>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <TIM7_DAC2_IRQHandler+0x16>
		nextStringSequence = true;
 8002394:	4b04      	ldr	r3, [pc, #16]	; (80023a8 <TIM7_DAC2_IRQHandler+0x24>)
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END TIM7_DAC2_IRQn 0 */

	/* USER CODE BEGIN TIM7_DAC2_IRQn 1 */
	LL_TIM_ClearFlag_UPDATE(TIM7);
 800239a:	4802      	ldr	r0, [pc, #8]	; (80023a4 <TIM7_DAC2_IRQHandler+0x20>)
 800239c:	f7ff ff3e 	bl	800221c <LL_TIM_ClearFlag_UPDATE>
	/* USER CODE END TIM7_DAC2_IRQn 1 */
}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40001400 	.word	0x40001400
 80023a8:	20000228 	.word	0x20000228

080023ac <_getpid>:
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	2301      	movs	r3, #1
 80023b2:	4618      	mov	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <_kill>:
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
 80023c6:	f001 fb4b 	bl	8003a60 <__errno>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2216      	movs	r2, #22
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	f04f 33ff 	mov.w	r3, #4294967295
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <_exit>:
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	f04f 31ff 	mov.w	r1, #4294967295
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff ffe7 	bl	80023bc <_kill>
 80023ee:	e7fe      	b.n	80023ee <_exit+0x12>

080023f0 <_read>:
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	e00a      	b.n	8002418 <_read+0x28>
 8002402:	f3af 8000 	nop.w
 8002406:	4601      	mov	r1, r0
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	60ba      	str	r2, [r7, #8]
 800240e:	b2ca      	uxtb	r2, r1
 8002410:	701a      	strb	r2, [r3, #0]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	3301      	adds	r3, #1
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	429a      	cmp	r2, r3
 800241e:	dbf0      	blt.n	8002402 <_read+0x12>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <_write>:
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	e009      	b.n	8002450 <_write+0x26>
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	60ba      	str	r2, [r7, #8]
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f3af 8000 	nop.w
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	3301      	adds	r3, #1
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	429a      	cmp	r2, r3
 8002456:	dbf1      	blt.n	800243c <_write+0x12>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <_close>:
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	f04f 33ff 	mov.w	r3, #4294967295
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <_fstat>:
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	6039      	str	r1, [r7, #0]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800248a:	605a      	str	r2, [r3, #4]
 800248c:	2300      	movs	r3, #0
 800248e:	4618      	mov	r0, r3
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <_isatty>:
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	2301      	movs	r3, #1
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <_lseek>:
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	2300      	movs	r3, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
	...

080024cc <_sbrk>:
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	4a14      	ldr	r2, [pc, #80]	; (8002528 <_sbrk+0x5c>)
 80024d6:	4b15      	ldr	r3, [pc, #84]	; (800252c <_sbrk+0x60>)
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	4b13      	ldr	r3, [pc, #76]	; (8002530 <_sbrk+0x64>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d102      	bne.n	80024ee <_sbrk+0x22>
 80024e8:	4b11      	ldr	r3, [pc, #68]	; (8002530 <_sbrk+0x64>)
 80024ea:	4a12      	ldr	r2, [pc, #72]	; (8002534 <_sbrk+0x68>)
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <_sbrk+0x64>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d207      	bcs.n	800250c <_sbrk+0x40>
 80024fc:	f001 fab0 	bl	8003a60 <__errno>
 8002500:	4603      	mov	r3, r0
 8002502:	220c      	movs	r2, #12
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	f04f 33ff 	mov.w	r3, #4294967295
 800250a:	e009      	b.n	8002520 <_sbrk+0x54>
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <_sbrk+0x64>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	4b07      	ldr	r3, [pc, #28]	; (8002530 <_sbrk+0x64>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4413      	add	r3, r2
 800251a:	4a05      	ldr	r2, [pc, #20]	; (8002530 <_sbrk+0x64>)
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20003000 	.word	0x20003000
 800252c:	00000400 	.word	0x00000400
 8002530:	200001fc 	.word	0x200001fc
 8002534:	20000260 	.word	0x20000260

08002538 <SystemInit>:
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <SystemInit+0x20>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002542:	4a05      	ldr	r2, [pc, #20]	; (8002558 <SystemInit+0x20>)
 8002544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <__NVIC_GetPriorityGrouping>:
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002560:	4b04      	ldr	r3, [pc, #16]	; (8002574 <__NVIC_GetPriorityGrouping+0x18>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	f003 0307 	and.w	r3, r3, #7
}
 800256a:	4618      	mov	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <__NVIC_EnableIRQ>:
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	2b00      	cmp	r3, #0
 8002588:	db0b      	blt.n	80025a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	f003 021f 	and.w	r2, r3, #31
 8002590:	4907      	ldr	r1, [pc, #28]	; (80025b0 <__NVIC_EnableIRQ+0x38>)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	2001      	movs	r0, #1
 800259a:	fa00 f202 	lsl.w	r2, r0, r2
 800259e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	e000e100 	.word	0xe000e100

080025b4 <__NVIC_SetPriority>:
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	6039      	str	r1, [r7, #0]
 80025be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	db0a      	blt.n	80025de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	490c      	ldr	r1, [pc, #48]	; (8002600 <__NVIC_SetPriority+0x4c>)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	0112      	lsls	r2, r2, #4
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	440b      	add	r3, r1
 80025d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80025dc:	e00a      	b.n	80025f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	4908      	ldr	r1, [pc, #32]	; (8002604 <__NVIC_SetPriority+0x50>)
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	3b04      	subs	r3, #4
 80025ec:	0112      	lsls	r2, r2, #4
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	440b      	add	r3, r1
 80025f2:	761a      	strb	r2, [r3, #24]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	e000e100 	.word	0xe000e100
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <NVIC_EncodePriority>:
{
 8002608:	b480      	push	{r7}
 800260a:	b089      	sub	sp, #36	; 0x24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f1c3 0307 	rsb	r3, r3, #7
 8002622:	2b04      	cmp	r3, #4
 8002624:	bf28      	it	cs
 8002626:	2304      	movcs	r3, #4
 8002628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3304      	adds	r3, #4
 800262e:	2b06      	cmp	r3, #6
 8002630:	d902      	bls.n	8002638 <NVIC_EncodePriority+0x30>
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3b03      	subs	r3, #3
 8002636:	e000      	b.n	800263a <NVIC_EncodePriority+0x32>
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800263c:	f04f 32ff 	mov.w	r2, #4294967295
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43da      	mvns	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	401a      	ands	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002650:	f04f 31ff 	mov.w	r1, #4294967295
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
 800265a:	43d9      	mvns	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	4313      	orrs	r3, r2
}
 8002662:	4618      	mov	r0, r3
 8002664:	3724      	adds	r7, #36	; 0x24
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <LL_APB1_GRP1_EnableClock>:
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <LL_APB1_GRP1_EnableClock+0x2c>)
 800267a:	69da      	ldr	r2, [r3, #28]
 800267c:	4907      	ldr	r1, [pc, #28]	; (800269c <LL_APB1_GRP1_EnableClock+0x2c>)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4313      	orrs	r3, r2
 8002682:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002686:	69da      	ldr	r2, [r3, #28]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4013      	ands	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800268e:	68fb      	ldr	r3, [r7, #12]
}
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	40021000 	.word	0x40021000

080026a0 <LL_TIM_EnableCounter>:
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f043 0201 	orr.w	r2, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	601a      	str	r2, [r3, #0]
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <LL_TIM_DisableARRPreload>:
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	601a      	str	r2, [r3, #0]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <LL_TIM_SetTriggerOutput>:
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	605a      	str	r2, [r3, #4]
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <LL_TIM_DisableMasterSlaveMode>:
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	609a      	str	r2, [r3, #8]
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f043 0201 	orr.w	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	60da      	str	r2, [r3, #12]
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <MX_TIM6_Init>:

/* USER CODE END 0 */

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800274e:	1d3b      	adds	r3, r7, #4
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
 800275a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 800275c:	2010      	movs	r0, #16
 800275e:	f7ff ff87 	bl	8002670 <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_DAC1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002762:	f7ff fefb 	bl	800255c <__NVIC_GetPriorityGrouping>
 8002766:	4603      	mov	r3, r0
 8002768:	2200      	movs	r2, #0
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ff4b 	bl	8002608 <NVIC_EncodePriority>
 8002772:	4603      	mov	r3, r0
 8002774:	4619      	mov	r1, r3
 8002776:	2036      	movs	r0, #54	; 0x36
 8002778:	f7ff ff1c 	bl	80025b4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 800277c:	2036      	movs	r0, #54	; 0x36
 800277e:	f7ff fefb 	bl	8002578 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 8002782:	f240 331f 	movw	r3, #799	; 0x31f
 8002786:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002788:	2300      	movs	r3, #0
 800278a:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 49;
 800278c:	2331      	movs	r3, #49	; 0x31
 800278e:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8002790:	1d3b      	adds	r3, r7, #4
 8002792:	4619      	mov	r1, r3
 8002794:	480b      	ldr	r0, [pc, #44]	; (80027c4 <MX_TIM6_Init+0x7c>)
 8002796:	f000 fd33 	bl	8003200 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 800279a:	480a      	ldr	r0, [pc, #40]	; (80027c4 <MX_TIM6_Init+0x7c>)
 800279c:	f7ff ff90 	bl	80026c0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 80027a0:	2100      	movs	r1, #0
 80027a2:	4808      	ldr	r0, [pc, #32]	; (80027c4 <MX_TIM6_Init+0x7c>)
 80027a4:	f7ff ff9c 	bl	80026e0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 80027a8:	4806      	ldr	r0, [pc, #24]	; (80027c4 <MX_TIM6_Init+0x7c>)
 80027aa:	f7ff ffac 	bl	8002706 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */
	LL_TIM_EnableIT_UPDATE(TIM6);
 80027ae:	4805      	ldr	r0, [pc, #20]	; (80027c4 <MX_TIM6_Init+0x7c>)
 80027b0:	f7ff ffb9 	bl	8002726 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM6);
 80027b4:	4803      	ldr	r0, [pc, #12]	; (80027c4 <MX_TIM6_Init+0x7c>)
 80027b6:	f7ff ff73 	bl	80026a0 <LL_TIM_EnableCounter>
  /* USER CODE END TIM6_Init 2 */

}
 80027ba:	bf00      	nop
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40001000 	.word	0x40001000

080027c8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80027ce:	1d3b      	adds	r3, r7, #4
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 80027dc:	2020      	movs	r0, #32
 80027de:	f7ff ff47 	bl	8002670 <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_DAC2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80027e2:	f7ff febb 	bl	800255c <__NVIC_GetPriorityGrouping>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2200      	movs	r2, #0
 80027ea:	2100      	movs	r1, #0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff0b 	bl	8002608 <NVIC_EncodePriority>
 80027f2:	4603      	mov	r3, r0
 80027f4:	4619      	mov	r1, r3
 80027f6:	2037      	movs	r0, #55	; 0x37
 80027f8:	f7ff fedc 	bl	80025b4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 80027fc:	2037      	movs	r0, #55	; 0x37
 80027fe:	f7ff febb 	bl	8002578 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 7999;
 8002802:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8002806:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002808:	2300      	movs	r3, #0
 800280a:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 999;
 800280c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002810:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 8002812:	1d3b      	adds	r3, r7, #4
 8002814:	4619      	mov	r1, r3
 8002816:	480b      	ldr	r0, [pc, #44]	; (8002844 <MX_TIM7_Init+0x7c>)
 8002818:	f000 fcf2 	bl	8003200 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM7);
 800281c:	4809      	ldr	r0, [pc, #36]	; (8002844 <MX_TIM7_Init+0x7c>)
 800281e:	f7ff ff4f 	bl	80026c0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 8002822:	2100      	movs	r1, #0
 8002824:	4807      	ldr	r0, [pc, #28]	; (8002844 <MX_TIM7_Init+0x7c>)
 8002826:	f7ff ff5b 	bl	80026e0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 800282a:	4806      	ldr	r0, [pc, #24]	; (8002844 <MX_TIM7_Init+0x7c>)
 800282c:	f7ff ff6b 	bl	8002706 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */
	LL_TIM_EnableIT_UPDATE(TIM7);
 8002830:	4804      	ldr	r0, [pc, #16]	; (8002844 <MX_TIM7_Init+0x7c>)
 8002832:	f7ff ff78 	bl	8002726 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM7);
 8002836:	4803      	ldr	r0, [pc, #12]	; (8002844 <MX_TIM7_Init+0x7c>)
 8002838:	f7ff ff32 	bl	80026a0 <LL_TIM_EnableCounter>
  /* USER CODE END TIM7_Init 2 */

}
 800283c:	bf00      	nop
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40001400 	.word	0x40001400

08002848 <Reset_Handler>:
 8002848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002880 <LoopForever+0x2>
 800284c:	480d      	ldr	r0, [pc, #52]	; (8002884 <LoopForever+0x6>)
 800284e:	490e      	ldr	r1, [pc, #56]	; (8002888 <LoopForever+0xa>)
 8002850:	4a0e      	ldr	r2, [pc, #56]	; (800288c <LoopForever+0xe>)
 8002852:	2300      	movs	r3, #0
 8002854:	e002      	b.n	800285c <LoopCopyDataInit>

08002856 <CopyDataInit>:
 8002856:	58d4      	ldr	r4, [r2, r3]
 8002858:	50c4      	str	r4, [r0, r3]
 800285a:	3304      	adds	r3, #4

0800285c <LoopCopyDataInit>:
 800285c:	18c4      	adds	r4, r0, r3
 800285e:	428c      	cmp	r4, r1
 8002860:	d3f9      	bcc.n	8002856 <CopyDataInit>
 8002862:	4a0b      	ldr	r2, [pc, #44]	; (8002890 <LoopForever+0x12>)
 8002864:	4c0b      	ldr	r4, [pc, #44]	; (8002894 <LoopForever+0x16>)
 8002866:	2300      	movs	r3, #0
 8002868:	e001      	b.n	800286e <LoopFillZerobss>

0800286a <FillZerobss>:
 800286a:	6013      	str	r3, [r2, #0]
 800286c:	3204      	adds	r2, #4

0800286e <LoopFillZerobss>:
 800286e:	42a2      	cmp	r2, r4
 8002870:	d3fb      	bcc.n	800286a <FillZerobss>
 8002872:	f7ff fe61 	bl	8002538 <SystemInit>
 8002876:	f001 f8f9 	bl	8003a6c <__libc_init_array>
 800287a:	f7ff fa13 	bl	8001ca4 <main>

0800287e <LoopForever>:
 800287e:	e7fe      	b.n	800287e <LoopForever>
 8002880:	20003000 	.word	0x20003000
 8002884:	20000000 	.word	0x20000000
 8002888:	200001dc 	.word	0x200001dc
 800288c:	08007c18 	.word	0x08007c18
 8002890:	200001dc 	.word	0x200001dc
 8002894:	2000025c 	.word	0x2000025c

08002898 <ADC1_2_IRQHandler>:
 8002898:	e7fe      	b.n	8002898 <ADC1_2_IRQHandler>
	...

0800289c <LL_EXTI_EnableIT_0_31>:
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <LL_EXTI_EnableIT_0_31+0x20>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4904      	ldr	r1, [pc, #16]	; (80028bc <LL_EXTI_EnableIT_0_31+0x20>)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	600b      	str	r3, [r1, #0]
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	40010400 	.word	0x40010400

080028c0 <LL_EXTI_EnableIT_32_63>:
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <LL_EXTI_EnableIT_32_63+0x20>)
 80028ca:	6a1a      	ldr	r2, [r3, #32]
 80028cc:	4904      	ldr	r1, [pc, #16]	; (80028e0 <LL_EXTI_EnableIT_32_63+0x20>)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	620b      	str	r3, [r1, #32]
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	40010400 	.word	0x40010400

080028e4 <LL_EXTI_DisableIT_0_31>:
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	4b06      	ldr	r3, [pc, #24]	; (8002908 <LL_EXTI_DisableIT_0_31+0x24>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	4904      	ldr	r1, [pc, #16]	; (8002908 <LL_EXTI_DisableIT_0_31+0x24>)
 80028f6:	4013      	ands	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40010400 	.word	0x40010400

0800290c <LL_EXTI_DisableIT_32_63>:
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	4b06      	ldr	r3, [pc, #24]	; (8002930 <LL_EXTI_DisableIT_32_63+0x24>)
 8002916:	6a1a      	ldr	r2, [r3, #32]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	43db      	mvns	r3, r3
 800291c:	4904      	ldr	r1, [pc, #16]	; (8002930 <LL_EXTI_DisableIT_32_63+0x24>)
 800291e:	4013      	ands	r3, r2
 8002920:	620b      	str	r3, [r1, #32]
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40010400 	.word	0x40010400

08002934 <LL_EXTI_EnableEvent_0_31>:
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <LL_EXTI_EnableEvent_0_31+0x20>)
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	4904      	ldr	r1, [pc, #16]	; (8002954 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	40010400 	.word	0x40010400

08002958 <LL_EXTI_EnableEvent_32_63>:
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002962:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002964:	4904      	ldr	r1, [pc, #16]	; (8002978 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4313      	orrs	r3, r2
 800296a:	624b      	str	r3, [r1, #36]	; 0x24
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	40010400 	.word	0x40010400

0800297c <LL_EXTI_DisableEvent_0_31>:
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	43db      	mvns	r3, r3
 800298c:	4904      	ldr	r1, [pc, #16]	; (80029a0 <LL_EXTI_DisableEvent_0_31+0x24>)
 800298e:	4013      	ands	r3, r2
 8002990:	604b      	str	r3, [r1, #4]
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40010400 	.word	0x40010400

080029a4 <LL_EXTI_DisableEvent_32_63>:
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80029ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	43db      	mvns	r3, r3
 80029b4:	4904      	ldr	r1, [pc, #16]	; (80029c8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	624b      	str	r3, [r1, #36]	; 0x24
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40010400 	.word	0x40010400

080029cc <LL_EXTI_EnableRisingTrig_0_31>:
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	4b05      	ldr	r3, [pc, #20]	; (80029ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	4904      	ldr	r1, [pc, #16]	; (80029ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4313      	orrs	r3, r2
 80029de:	608b      	str	r3, [r1, #8]
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	40010400 	.word	0x40010400

080029f0 <LL_EXTI_EnableRisingTrig_32_63>:
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80029fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029fc:	4904      	ldr	r1, [pc, #16]	; (8002a10 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	628b      	str	r3, [r1, #40]	; 0x28
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	40010400 	.word	0x40010400

08002a14 <LL_EXTI_DisableRisingTrig_0_31>:
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	43db      	mvns	r3, r3
 8002a24:	4904      	ldr	r1, [pc, #16]	; (8002a38 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002a26:	4013      	ands	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40010400 	.word	0x40010400

08002a3c <LL_EXTI_DisableRisingTrig_32_63>:
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002a46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	4904      	ldr	r1, [pc, #16]	; (8002a60 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	628b      	str	r3, [r1, #40]	; 0x28
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40010400 	.word	0x40010400

08002a64 <LL_EXTI_EnableFallingTrig_0_31>:
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	4904      	ldr	r1, [pc, #16]	; (8002a84 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60cb      	str	r3, [r1, #12]
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	40010400 	.word	0x40010400

08002a88 <LL_EXTI_EnableFallingTrig_32_63>:
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a94:	4904      	ldr	r1, [pc, #16]	; (8002aa8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	40010400 	.word	0x40010400

08002aac <LL_EXTI_DisableFallingTrig_0_31>:
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	43db      	mvns	r3, r3
 8002abc:	4904      	ldr	r1, [pc, #16]	; (8002ad0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	60cb      	str	r3, [r1, #12]
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40010400 	.word	0x40010400

08002ad4 <LL_EXTI_DisableFallingTrig_32_63>:
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	4904      	ldr	r1, [pc, #16]	; (8002af8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40010400 	.word	0x40010400

08002afc <LL_EXTI_Init>:
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	2300      	movs	r3, #0
 8002b06:	73fb      	strb	r3, [r7, #15]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	7a1b      	ldrb	r3, [r3, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 80cd 	beq.w	8002cac <LL_EXTI_Init+0x1b0>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d061      	beq.n	8002bde <LL_EXTI_Init+0xe2>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	7a5b      	ldrb	r3, [r3, #9]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d01c      	beq.n	8002b5c <LL_EXTI_Init+0x60>
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	dc25      	bgt.n	8002b72 <LL_EXTI_Init+0x76>
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <LL_EXTI_Init+0x34>
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d00b      	beq.n	8002b46 <LL_EXTI_Init+0x4a>
 8002b2e:	e020      	b.n	8002b72 <LL_EXTI_Init+0x76>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff ff21 	bl	800297c <LL_EXTI_DisableEvent_0_31>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff feac 	bl	800289c <LL_EXTI_EnableIT_0_31>
 8002b44:	e018      	b.n	8002b78 <LL_EXTI_Init+0x7c>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff feca 	bl	80028e4 <LL_EXTI_DisableIT_0_31>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff feed 	bl	8002934 <LL_EXTI_EnableEvent_0_31>
 8002b5a:	e00d      	b.n	8002b78 <LL_EXTI_Init+0x7c>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff fe9b 	bl	800289c <LL_EXTI_EnableIT_0_31>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fee2 	bl	8002934 <LL_EXTI_EnableEvent_0_31>
 8002b70:	e002      	b.n	8002b78 <LL_EXTI_Init+0x7c>
 8002b72:	2301      	movs	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
 8002b76:	bf00      	nop
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	7a9b      	ldrb	r3, [r3, #10]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d02e      	beq.n	8002bde <LL_EXTI_Init+0xe2>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	7a9b      	ldrb	r3, [r3, #10]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d01c      	beq.n	8002bc2 <LL_EXTI_Init+0xc6>
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	dc25      	bgt.n	8002bd8 <LL_EXTI_Init+0xdc>
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d002      	beq.n	8002b96 <LL_EXTI_Init+0x9a>
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d00b      	beq.n	8002bac <LL_EXTI_Init+0xb0>
 8002b94:	e020      	b.n	8002bd8 <LL_EXTI_Init+0xdc>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff ff86 	bl	8002aac <LL_EXTI_DisableFallingTrig_0_31>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff ff11 	bl	80029cc <LL_EXTI_EnableRisingTrig_0_31>
 8002baa:	e019      	b.n	8002be0 <LL_EXTI_Init+0xe4>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff ff2f 	bl	8002a14 <LL_EXTI_DisableRisingTrig_0_31>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff ff52 	bl	8002a64 <LL_EXTI_EnableFallingTrig_0_31>
 8002bc0:	e00e      	b.n	8002be0 <LL_EXTI_Init+0xe4>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff ff00 	bl	80029cc <LL_EXTI_EnableRisingTrig_0_31>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff ff47 	bl	8002a64 <LL_EXTI_EnableFallingTrig_0_31>
 8002bd6:	e003      	b.n	8002be0 <LL_EXTI_Init+0xe4>
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
 8002bdc:	e000      	b.n	8002be0 <LL_EXTI_Init+0xe4>
 8002bde:	bf00      	nop
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d076      	beq.n	8002cd6 <LL_EXTI_Init+0x1da>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	7a5b      	ldrb	r3, [r3, #9]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d01c      	beq.n	8002c2a <LL_EXTI_Init+0x12e>
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	dc25      	bgt.n	8002c40 <LL_EXTI_Init+0x144>
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <LL_EXTI_Init+0x102>
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d00b      	beq.n	8002c14 <LL_EXTI_Init+0x118>
 8002bfc:	e020      	b.n	8002c40 <LL_EXTI_Init+0x144>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fece 	bl	80029a4 <LL_EXTI_DisableEvent_32_63>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff fe57 	bl	80028c0 <LL_EXTI_EnableIT_32_63>
 8002c12:	e018      	b.n	8002c46 <LL_EXTI_Init+0x14a>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff fe77 	bl	800290c <LL_EXTI_DisableIT_32_63>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fe98 	bl	8002958 <LL_EXTI_EnableEvent_32_63>
 8002c28:	e00d      	b.n	8002c46 <LL_EXTI_Init+0x14a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fe46 	bl	80028c0 <LL_EXTI_EnableIT_32_63>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fe8d 	bl	8002958 <LL_EXTI_EnableEvent_32_63>
 8002c3e:	e002      	b.n	8002c46 <LL_EXTI_Init+0x14a>
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
 8002c44:	bf00      	nop
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	7a9b      	ldrb	r3, [r3, #10]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d043      	beq.n	8002cd6 <LL_EXTI_Init+0x1da>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	7a9b      	ldrb	r3, [r3, #10]
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d01c      	beq.n	8002c90 <LL_EXTI_Init+0x194>
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	dc25      	bgt.n	8002ca6 <LL_EXTI_Init+0x1aa>
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d002      	beq.n	8002c64 <LL_EXTI_Init+0x168>
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d00b      	beq.n	8002c7a <LL_EXTI_Init+0x17e>
 8002c62:	e020      	b.n	8002ca6 <LL_EXTI_Init+0x1aa>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff ff33 	bl	8002ad4 <LL_EXTI_DisableFallingTrig_32_63>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff febc 	bl	80029f0 <LL_EXTI_EnableRisingTrig_32_63>
 8002c78:	e02e      	b.n	8002cd8 <LL_EXTI_Init+0x1dc>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff fedc 	bl	8002a3c <LL_EXTI_DisableRisingTrig_32_63>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fefd 	bl	8002a88 <LL_EXTI_EnableFallingTrig_32_63>
 8002c8e:	e023      	b.n	8002cd8 <LL_EXTI_Init+0x1dc>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff feab 	bl	80029f0 <LL_EXTI_EnableRisingTrig_32_63>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff fef2 	bl	8002a88 <LL_EXTI_EnableFallingTrig_32_63>
 8002ca4:	e018      	b.n	8002cd8 <LL_EXTI_Init+0x1dc>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	73fb      	strb	r3, [r7, #15]
 8002caa:	e015      	b.n	8002cd8 <LL_EXTI_Init+0x1dc>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fe17 	bl	80028e4 <LL_EXTI_DisableIT_0_31>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff fe5e 	bl	800297c <LL_EXTI_DisableEvent_0_31>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fe21 	bl	800290c <LL_EXTI_DisableIT_32_63>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff fe68 	bl	80029a4 <LL_EXTI_DisableEvent_32_63>
 8002cd4:	e000      	b.n	8002cd8 <LL_EXTI_Init+0x1dc>
 8002cd6:	bf00      	nop
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <LL_GPIO_SetPinMode>:
 8002ce2:	b480      	push	{r7}
 8002ce4:	b089      	sub	sp, #36	; 0x24
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	fa93 f3a3 	rbit	r3, r3
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	fab3 f383 	clz	r3, r3
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	2103      	movs	r1, #3
 8002d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	401a      	ands	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	61fb      	str	r3, [r7, #28]
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	fa93 f3a3 	rbit	r3, r3
 8002d1c:	61bb      	str	r3, [r7, #24]
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	fab3 f383 	clz	r3, r3
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	bf00      	nop
 8002d36:	3724      	adds	r7, #36	; 0x24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <LL_GPIO_SetPinOutputType>:
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	43db      	mvns	r3, r3
 8002d54:	401a      	ands	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	605a      	str	r2, [r3, #4]
 8002d64:	bf00      	nop
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <LL_GPIO_SetPinSpeed>:
 8002d70:	b480      	push	{r7}
 8002d72:	b089      	sub	sp, #36	; 0x24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	fab3 f383 	clz	r3, r3
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	2103      	movs	r1, #3
 8002d98:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	401a      	ands	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	61fb      	str	r3, [r7, #28]
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	61bb      	str	r3, [r7, #24]
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	609a      	str	r2, [r3, #8]
 8002dc2:	bf00      	nop
 8002dc4:	3724      	adds	r7, #36	; 0x24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <LL_GPIO_SetPinPull>:
 8002dce:	b480      	push	{r7}
 8002dd0:	b089      	sub	sp, #36	; 0x24
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	fa93 f3a3 	rbit	r3, r3
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	fab3 f383 	clz	r3, r3
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	2103      	movs	r1, #3
 8002df6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	401a      	ands	r2, r3
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	61fb      	str	r3, [r7, #28]
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	fa93 f3a3 	rbit	r3, r3
 8002e08:	61bb      	str	r3, [r7, #24]
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	fab3 f383 	clz	r3, r3
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	60da      	str	r2, [r3, #12]
 8002e20:	bf00      	nop
 8002e22:	3724      	adds	r7, #36	; 0x24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <LL_GPIO_SetAFPin_0_7>:
 8002e2c:	b480      	push	{r7}
 8002e2e:	b089      	sub	sp, #36	; 0x24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a1a      	ldr	r2, [r3, #32]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	fa93 f3a3 	rbit	r3, r3
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	fab3 f383 	clz	r3, r3
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	210f      	movs	r1, #15
 8002e54:	fa01 f303 	lsl.w	r3, r1, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	401a      	ands	r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	61fb      	str	r3, [r7, #28]
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	61bb      	str	r3, [r7, #24]
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	fab3 f383 	clz	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	fa01 f303 	lsl.w	r3, r1, r3
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	621a      	str	r2, [r3, #32]
 8002e7e:	bf00      	nop
 8002e80:	3724      	adds	r7, #36	; 0x24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <LL_GPIO_SetAFPin_8_15>:
 8002e8a:	b480      	push	{r7}
 8002e8c:	b089      	sub	sp, #36	; 0x24
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	60f8      	str	r0, [r7, #12]
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	607a      	str	r2, [r7, #4]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	0a1b      	lsrs	r3, r3, #8
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	fab3 f383 	clz	r3, r3
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	210f      	movs	r1, #15
 8002eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	401a      	ands	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	0a1b      	lsrs	r3, r3, #8
 8002ec0:	61fb      	str	r3, [r7, #28]
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	fa93 f3a3 	rbit	r3, r3
 8002ec8:	61bb      	str	r3, [r7, #24]
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	fab3 f383 	clz	r3, r3
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eda:	431a      	orrs	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	625a      	str	r2, [r3, #36]	; 0x24
 8002ee0:	bf00      	nop
 8002ee2:	3724      	adds	r7, #36	; 0x24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <LL_GPIO_Init>:
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	fab3 f383 	clz	r3, r3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	e051      	b.n	8002fb4 <LL_GPIO_Init+0xc8>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	2101      	movs	r1, #1
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d043      	beq.n	8002fae <LL_GPIO_Init+0xc2>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d003      	beq.n	8002f36 <LL_GPIO_Init+0x4a>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d10e      	bne.n	8002f54 <LL_GPIO_Init+0x68>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	69b9      	ldr	r1, [r7, #24]
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff ff16 	bl	8002d70 <LL_GPIO_SetPinSpeed>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	6819      	ldr	r1, [r3, #0]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7ff fef6 	bl	8002d40 <LL_GPIO_SetPinOutputType>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	69b9      	ldr	r1, [r7, #24]
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7ff ff36 	bl	8002dce <LL_GPIO_SetPinPull>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d11a      	bne.n	8002fa0 <LL_GPIO_Init+0xb4>
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	fa93 f3a3 	rbit	r3, r3
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	fab3 f383 	clz	r3, r3
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b07      	cmp	r3, #7
 8002f80:	d807      	bhi.n	8002f92 <LL_GPIO_Init+0xa6>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	461a      	mov	r2, r3
 8002f88:	69b9      	ldr	r1, [r7, #24]
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7ff ff4e 	bl	8002e2c <LL_GPIO_SetAFPin_0_7>
 8002f90:	e006      	b.n	8002fa0 <LL_GPIO_Init+0xb4>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	461a      	mov	r2, r3
 8002f98:	69b9      	ldr	r1, [r7, #24]
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff ff75 	bl	8002e8a <LL_GPIO_SetAFPin_8_15>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	69b9      	ldr	r1, [r7, #24]
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff fe9a 	bl	8002ce2 <LL_GPIO_SetPinMode>
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	61fb      	str	r3, [r7, #28]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	fa22 f303 	lsr.w	r3, r2, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1a6      	bne.n	8002f10 <LL_GPIO_Init+0x24>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3720      	adds	r7, #32
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <LL_I2C_Enable>:
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f043 0201 	orr.w	r2, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_I2C_Disable>:
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f023 0201 	bic.w	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <LL_I2C_ConfigFilters>:
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	0219      	lsls	r1, r3, #8
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	430b      	orrs	r3, r1
 8003028:	431a      	orrs	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	bf00      	nop
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <LL_I2C_SetOwnAddress1>:
 800303a:	b480      	push	{r7}
 800303c:	b085      	sub	sp, #20
 800303e:	af00      	add	r7, sp, #0
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	607a      	str	r2, [r7, #4]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800304e:	f023 0307 	bic.w	r3, r3, #7
 8003052:	68b9      	ldr	r1, [r7, #8]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	430a      	orrs	r2, r1
 8003058:	431a      	orrs	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	609a      	str	r2, [r3, #8]
 800305e:	bf00      	nop
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <LL_I2C_EnableOwnAddress1>:
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	609a      	str	r2, [r3, #8]
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <LL_I2C_DisableOwnAddress1>:
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	609a      	str	r2, [r3, #8]
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <LL_I2C_SetTiming>:
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
 80030b2:	6039      	str	r1, [r7, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	611a      	str	r2, [r3, #16]
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <LL_I2C_SetMode>:
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	6039      	str	r1, [r7, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <LL_I2C_AcknowledgeNextData>:
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	605a      	str	r2, [r3, #4]
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <LL_I2C_Init>:
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	6039      	str	r1, [r7, #0]
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff ff65 	bl	8002fec <LL_I2C_Disable>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6899      	ldr	r1, [r3, #8]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	461a      	mov	r2, r3
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff ff6d 	bl	800300c <LL_I2C_ConfigFilters>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	4619      	mov	r1, r3
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff ffb6 	bl	80030aa <LL_I2C_SetTiming>
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7ff ff44 	bl	8002fcc <LL_I2C_Enable>
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff ffa0 	bl	800308a <LL_I2C_DisableOwnAddress1>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6919      	ldr	r1, [r3, #16]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	461a      	mov	r2, r3
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff ff70 	bl	800303a <LL_I2C_SetOwnAddress1>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <LL_I2C_Init+0x56>
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff ff81 	bl	800306a <LL_I2C_EnableOwnAddress1>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4619      	mov	r1, r3
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff ffa9 	bl	80030c6 <LL_I2C_SetMode>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	4619      	mov	r1, r3
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff ffb6 	bl	80030ec <LL_I2C_AcknowledgeNextData>
 8003180:	2300      	movs	r3, #0
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <LL_TIM_SetPrescaler>:
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	6039      	str	r1, [r7, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	629a      	str	r2, [r3, #40]	; 0x28
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <LL_TIM_SetAutoReload>:
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
 80031ae:	6039      	str	r1, [r7, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <LL_TIM_SetRepetitionCounter>:
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	6039      	str	r1, [r7, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	631a      	str	r2, [r3, #48]	; 0x30
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <LL_TIM_GenerateEvent_UPDATE>:
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f043 0201 	orr.w	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	615a      	str	r2, [r3, #20]
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
	...

08003200 <LL_TIM_Init>:
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a2f      	ldr	r2, [pc, #188]	; (80032d0 <LL_TIM_Init+0xd0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d007      	beq.n	8003228 <LL_TIM_Init+0x28>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321e:	d003      	beq.n	8003228 <LL_TIM_Init+0x28>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a2c      	ldr	r2, [pc, #176]	; (80032d4 <LL_TIM_Init+0xd4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d106      	bne.n	8003236 <LL_TIM_Init+0x36>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	4313      	orrs	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a25      	ldr	r2, [pc, #148]	; (80032d0 <LL_TIM_Init+0xd0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d013      	beq.n	8003266 <LL_TIM_Init+0x66>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003244:	d00f      	beq.n	8003266 <LL_TIM_Init+0x66>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a22      	ldr	r2, [pc, #136]	; (80032d4 <LL_TIM_Init+0xd4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d00b      	beq.n	8003266 <LL_TIM_Init+0x66>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a21      	ldr	r2, [pc, #132]	; (80032d8 <LL_TIM_Init+0xd8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d007      	beq.n	8003266 <LL_TIM_Init+0x66>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a20      	ldr	r2, [pc, #128]	; (80032dc <LL_TIM_Init+0xdc>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d003      	beq.n	8003266 <LL_TIM_Init+0x66>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a1f      	ldr	r2, [pc, #124]	; (80032e0 <LL_TIM_Init+0xe0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d106      	bne.n	8003274 <LL_TIM_Init+0x74>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	4313      	orrs	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	4619      	mov	r1, r3
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7ff ff90 	bl	80031a6 <LL_TIM_SetAutoReload>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	4619      	mov	r1, r3
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7ff ff7c 	bl	800318a <LL_TIM_SetPrescaler>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a0e      	ldr	r2, [pc, #56]	; (80032d0 <LL_TIM_Init+0xd0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00b      	beq.n	80032b2 <LL_TIM_Init+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a0e      	ldr	r2, [pc, #56]	; (80032d8 <LL_TIM_Init+0xd8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d007      	beq.n	80032b2 <LL_TIM_Init+0xb2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a0d      	ldr	r2, [pc, #52]	; (80032dc <LL_TIM_Init+0xdc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d003      	beq.n	80032b2 <LL_TIM_Init+0xb2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a0c      	ldr	r2, [pc, #48]	; (80032e0 <LL_TIM_Init+0xe0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d105      	bne.n	80032be <LL_TIM_Init+0xbe>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	4619      	mov	r1, r3
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ff82 	bl	80031c2 <LL_TIM_SetRepetitionCounter>
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff ff8d 	bl	80031de <LL_TIM_GenerateEvent_UPDATE>
 80032c4:	2300      	movs	r3, #0
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40012c00 	.word	0x40012c00
 80032d4:	40000400 	.word	0x40000400
 80032d8:	40014000 	.word	0x40014000
 80032dc:	40014400 	.word	0x40014400
 80032e0:	40014800 	.word	0x40014800

080032e4 <LL_InitTick>:
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f6:	4a07      	ldr	r2, [pc, #28]	; (8003314 <LL_InitTick+0x30>)
 80032f8:	3b01      	subs	r3, #1
 80032fa:	6053      	str	r3, [r2, #4]
 80032fc:	4b05      	ldr	r3, [pc, #20]	; (8003314 <LL_InitTick+0x30>)
 80032fe:	2200      	movs	r2, #0
 8003300:	609a      	str	r2, [r3, #8]
 8003302:	4b04      	ldr	r3, [pc, #16]	; (8003314 <LL_InitTick+0x30>)
 8003304:	2205      	movs	r2, #5
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	e000e010 	.word	0xe000e010

08003318 <LL_Init1msTick>:
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff ffdd 	bl	80032e4 <LL_InitTick>
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <LL_mDelay>:
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	4b0f      	ldr	r3, [pc, #60]	; (800337c <LL_mDelay+0x48>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334a:	d00c      	beq.n	8003366 <LL_mDelay+0x32>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3301      	adds	r3, #1
 8003350:	607b      	str	r3, [r7, #4]
 8003352:	e008      	b.n	8003366 <LL_mDelay+0x32>
 8003354:	4b09      	ldr	r3, [pc, #36]	; (800337c <LL_mDelay+0x48>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <LL_mDelay+0x32>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3b01      	subs	r3, #1
 8003364:	607b      	str	r3, [r7, #4]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1f3      	bne.n	8003354 <LL_mDelay+0x20>
 800336c:	bf00      	nop
 800336e:	bf00      	nop
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	e000e010 	.word	0xe000e010

08003380 <LL_SetSystemCoreClock>:
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	4a04      	ldr	r2, [pc, #16]	; (800339c <LL_SetSystemCoreClock+0x1c>)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	20000000 	.word	0x20000000

080033a0 <lsm6ds0_read_byte>:
#include "lsm6ds0.h"

uint8_t addres = LSM6DS0_DEVICE_ADDRESS_0;

uint8_t lsm6ds0_read_byte(uint8_t reg_addr)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af02      	add	r7, sp, #8
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres, 0));
 80033ae:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <lsm6ds0_read_byte+0x30>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	79fa      	ldrb	r2, [r7, #7]
 80033b4:	f107 000f 	add.w	r0, r7, #15
 80033b8:	2100      	movs	r1, #0
 80033ba:	9100      	str	r1, [sp, #0]
 80033bc:	2101      	movs	r1, #1
 80033be:	f7fe fac7 	bl	8001950 <i2c_master_read>
 80033c2:	4603      	mov	r3, r0
 80033c4:	781b      	ldrb	r3, [r3, #0]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000004 	.word	0x20000004

080033d4 <lsm6ds0_write_byte>:


void lsm6ds0_write_byte(uint8_t reg_addr, uint8_t value)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	460a      	mov	r2, r1
 80033de:	71fb      	strb	r3, [r7, #7]
 80033e0:	4613      	mov	r3, r2
 80033e2:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres, 0);
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <lsm6ds0_write_byte+0x28>)
 80033e6:	781a      	ldrb	r2, [r3, #0]
 80033e8:	79f9      	ldrb	r1, [r7, #7]
 80033ea:	79b8      	ldrb	r0, [r7, #6]
 80033ec:	2300      	movs	r3, #0
 80033ee:	f7fe fa6b 	bl	80018c8 <i2c_master_write>
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20000004 	.word	0x20000004

08003400 <lsm6ds0_init>:
	*z = (zz >> 4) / 1000.0f;
}


uint8_t lsm6ds0_init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8003406:	2301      	movs	r3, #1
 8003408:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 800340a:	2064      	movs	r0, #100	; 0x64
 800340c:	f7ff ff92 	bl	8003334 <LL_mDelay>

	uint8_t val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8003410:	200f      	movs	r0, #15
 8003412:	f7ff ffc5 	bl	80033a0 <lsm6ds0_read_byte>
 8003416:	4603      	mov	r3, r0
 8003418:	71bb      	strb	r3, [r7, #6]

	if(val == LSM6DS0_WHO_AM_I_VALUE)
 800341a:	79bb      	ldrb	r3, [r7, #6]
 800341c:	2b68      	cmp	r3, #104	; 0x68
 800341e:	d102      	bne.n	8003426 <lsm6ds0_init+0x26>
	{
		status = 1;
 8003420:	2301      	movs	r3, #1
 8003422:	71fb      	strb	r3, [r7, #7]
 8003424:	e00f      	b.n	8003446 <lsm6ds0_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres = LSM6DS0_DEVICE_ADDRESS_1;
 8003426:	4b0e      	ldr	r3, [pc, #56]	; (8003460 <lsm6ds0_init+0x60>)
 8003428:	22d6      	movs	r2, #214	; 0xd6
 800342a:	701a      	strb	r2, [r3, #0]
		val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 800342c:	200f      	movs	r0, #15
 800342e:	f7ff ffb7 	bl	80033a0 <lsm6ds0_read_byte>
 8003432:	4603      	mov	r3, r0
 8003434:	71bb      	strb	r3, [r7, #6]
		if(val == LSM6DS0_WHO_AM_I_VALUE)
 8003436:	79bb      	ldrb	r3, [r7, #6]
 8003438:	2b68      	cmp	r3, #104	; 0x68
 800343a:	d102      	bne.n	8003442 <lsm6ds0_init+0x42>
		{
			status = 1;
 800343c:	2301      	movs	r3, #1
 800343e:	71fb      	strb	r3, [r7, #7]
 8003440:	e001      	b.n	8003446 <lsm6ds0_init+0x46>
		}
		else
		{
			status = 0;
 8003442:	2300      	movs	r3, #0
 8003444:	71fb      	strb	r3, [r7, #7]
		}
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 8003446:	2380      	movs	r3, #128	; 0x80
 8003448:	717b      	strb	r3, [r7, #5]
	lsm6ds0_write_byte(LSM6DS0_ADDRESS_CTRL1, ctrl1);
 800344a:	797b      	ldrb	r3, [r7, #5]
 800344c:	4619      	mov	r1, r3
 800344e:	2010      	movs	r0, #16
 8003450:	f7ff ffc0 	bl	80033d4 <lsm6ds0_write_byte>

	return status;
 8003454:	79fb      	ldrb	r3, [r7, #7]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000004 	.word	0x20000004

08003464 <hts221_read_byte>:

uint8_t addresHTS221 = HTS221_DEVICE_ADDRESS;
Hts221HumidityStruct HumidityFactoryCoef;
Hts221TemperatureStruct TemperatureFactoryCoef;

uint8_t hts221_read_byte(uint8_t reg_addr) {
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af02      	add	r7, sp, #8
 800346a:	4603      	mov	r3, r0
 800346c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800346e:	2300      	movs	r3, #0
 8003470:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addresHTS221, 0));
 8003472:	4b08      	ldr	r3, [pc, #32]	; (8003494 <hts221_read_byte+0x30>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	79fa      	ldrb	r2, [r7, #7]
 8003478:	f107 000f 	add.w	r0, r7, #15
 800347c:	2100      	movs	r1, #0
 800347e:	9100      	str	r1, [sp, #0]
 8003480:	2101      	movs	r1, #1
 8003482:	f7fe fa65 	bl	8001950 <i2c_master_read>
 8003486:	4603      	mov	r3, r0
 8003488:	781b      	ldrb	r3, [r3, #0]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20000005 	.word	0x20000005

08003498 <hts221_write_byte>:

void hts221_write_byte(uint8_t reg_addr, uint8_t value) {
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	460a      	mov	r2, r1
 80034a2:	71fb      	strb	r3, [r7, #7]
 80034a4:	4613      	mov	r3, r2
 80034a6:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addresHTS221, 0);
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <hts221_write_byte+0x28>)
 80034aa:	781a      	ldrb	r2, [r3, #0]
 80034ac:	79f9      	ldrb	r1, [r7, #7]
 80034ae:	79b8      	ldrb	r0, [r7, #6]
 80034b0:	2300      	movs	r3, #0
 80034b2:	f7fe fa09 	bl	80018c8 <i2c_master_write>
}
 80034b6:	bf00      	nop
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000005 	.word	0x20000005

080034c4 <hts221_readArray>:

void hts221_readArray(uint8_t *data, uint8_t reg, uint8_t length) {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af02      	add	r7, sp, #8
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	70fb      	strb	r3, [r7, #3]
 80034d0:	4613      	mov	r3, r2
 80034d2:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addresHTS221, 1);
 80034d4:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <hts221_readArray+0x2c>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	78fa      	ldrb	r2, [r7, #3]
 80034da:	78b9      	ldrb	r1, [r7, #2]
 80034dc:	2001      	movs	r0, #1
 80034de:	9000      	str	r0, [sp, #0]
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7fe fa35 	bl	8001950 <i2c_master_read>
}
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20000005 	.word	0x20000005

080034f4 <hts221_init>:

uint8_t hts221_init(void) {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
	uint8_t result = 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	71fb      	strb	r3, [r7, #7]
	LL_mDelay(100);
 80034fe:	2064      	movs	r0, #100	; 0x64
 8003500:	f7ff ff18 	bl	8003334 <LL_mDelay>
	uint8_t val = hts221_read_byte(HTS221_WHO_AM_I_ADDRES);
 8003504:	200f      	movs	r0, #15
 8003506:	f7ff ffad 	bl	8003464 <hts221_read_byte>
 800350a:	4603      	mov	r3, r0
 800350c:	71bb      	strb	r3, [r7, #6]
	if (val == HTS221_WHO_AM_I_VALUE) {
 800350e:	79bb      	ldrb	r3, [r7, #6]
 8003510:	2bbc      	cmp	r3, #188	; 0xbc
 8003512:	d134      	bne.n	800357e <hts221_init+0x8a>
		result = 1;
 8003514:	2301      	movs	r3, #1
 8003516:	71fb      	strb	r3, [r7, #7]
		//load reserved bits from device
		uint8_t control1 = hts221_read_byte(HTS221_ADDRESS_CTRL1);
 8003518:	2020      	movs	r0, #32
 800351a:	f7ff ffa3 	bl	8003464 <hts221_read_byte>
 800351e:	4603      	mov	r3, r0
 8003520:	717b      	strb	r3, [r7, #5]
		//active mode
		control1 &= ~HTS221_PD_MASK;
 8003522:	797b      	ldrb	r3, [r7, #5]
 8003524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003528:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 1) << HTS221_PD_BIT;
 800352a:	797b      	ldrb	r3, [r7, #5]
 800352c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003530:	717b      	strb	r3, [r7, #5]
		//output registers not updated until MSB and LSB reading
		control1 &= ~HTS221_BDU_MASK;
 8003532:	797b      	ldrb	r3, [r7, #5]
 8003534:	f023 0304 	bic.w	r3, r3, #4
 8003538:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 1) << HTS221_BDU_BIT;
 800353a:	797b      	ldrb	r3, [r7, #5]
 800353c:	f043 0304 	orr.w	r3, r3, #4
 8003540:	717b      	strb	r3, [r7, #5]
		//ODR register sampling
		control1 &= ~HTS221_ODR_MASK;
 8003542:	797b      	ldrb	r3, [r7, #5]
 8003544:	f023 0303 	bic.w	r3, r3, #3
 8003548:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 2) << HTS221_ODR_BIT;
 800354a:	797b      	ldrb	r3, [r7, #5]
 800354c:	f043 0302 	orr.w	r3, r3, #2
 8003550:	717b      	strb	r3, [r7, #5]
		//Write config. to device
		hts221_write_byte(HTS221_ADDRESS_CTRL1, control1);
 8003552:	797b      	ldrb	r3, [r7, #5]
 8003554:	4619      	mov	r1, r3
 8003556:	2020      	movs	r0, #32
 8003558:	f7ff ff9e 	bl	8003498 <hts221_write_byte>
		val = hts221_read_byte(HTS221_ADDRESS_CTRL1);
 800355c:	2020      	movs	r0, #32
 800355e:	f7ff ff81 	bl	8003464 <hts221_read_byte>
 8003562:	4603      	mov	r3, r0
 8003564:	71bb      	strb	r3, [r7, #6]
		result = val == control1 ? 1 : 0;
 8003566:	79ba      	ldrb	r2, [r7, #6]
 8003568:	797b      	ldrb	r3, [r7, #5]
 800356a:	429a      	cmp	r2, r3
 800356c:	bf0c      	ite	eq
 800356e:	2301      	moveq	r3, #1
 8003570:	2300      	movne	r3, #0
 8003572:	b2db      	uxtb	r3, r3
 8003574:	71fb      	strb	r3, [r7, #7]
		hts221_get_factory_coef(&HumidityFactoryCoef, &TemperatureFactoryCoef);
 8003576:	4904      	ldr	r1, [pc, #16]	; (8003588 <hts221_init+0x94>)
 8003578:	4804      	ldr	r0, [pc, #16]	; (800358c <hts221_init+0x98>)
 800357a:	f000 f8ad 	bl	80036d8 <hts221_get_factory_coef>
	}
	return result;
 800357e:	79fb      	ldrb	r3, [r7, #7]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	2000023c 	.word	0x2000023c
 800358c:	20000244 	.word	0x20000244

08003590 <hts221_get_humidity>:

void hts221_get_humidity(float *humidity) {
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2] = { 0 };
 8003598:	2300      	movs	r3, #0
 800359a:	81bb      	strh	r3, [r7, #12]
	hts221_readArray(buffer, HTS221_ADDRESS_H_OUT_L, 2);
 800359c:	f107 030c 	add.w	r3, r7, #12
 80035a0:	2202      	movs	r2, #2
 80035a2:	2128      	movs	r1, #40	; 0x28
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff ff8d 	bl	80034c4 <hts221_readArray>
	int16_t hOut = ((int16_t) buffer[1]) << 8 | buffer[0];
 80035aa:	7b7b      	ldrb	r3, [r7, #13]
 80035ac:	021b      	lsls	r3, r3, #8
 80035ae:	b21a      	sxth	r2, r3
 80035b0:	7b3b      	ldrb	r3, [r7, #12]
 80035b2:	b21b      	sxth	r3, r3
 80035b4:	4313      	orrs	r3, r2
 80035b6:	82fb      	strh	r3, [r7, #22]
	int16_t h0Rh = HumidityFactoryCoef.h0Rh;
 80035b8:	4b1c      	ldr	r3, [pc, #112]	; (800362c <hts221_get_humidity+0x9c>)
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	82bb      	strh	r3, [r7, #20]
	int16_t h1Rh = HumidityFactoryCoef.h1Rh;
 80035be:	4b1b      	ldr	r3, [pc, #108]	; (800362c <hts221_get_humidity+0x9c>)
 80035c0:	885b      	ldrh	r3, [r3, #2]
 80035c2:	827b      	strh	r3, [r7, #18]
	int16_t h0T0 = HumidityFactoryCoef.h0Out;
 80035c4:	4b19      	ldr	r3, [pc, #100]	; (800362c <hts221_get_humidity+0x9c>)
 80035c6:	889b      	ldrh	r3, [r3, #4]
 80035c8:	823b      	strh	r3, [r7, #16]
	int16_t h1T0 = HumidityFactoryCoef.h1Out;
 80035ca:	4b18      	ldr	r3, [pc, #96]	; (800362c <hts221_get_humidity+0x9c>)
 80035cc:	88db      	ldrh	r3, [r3, #6]
 80035ce:	81fb      	strh	r3, [r7, #14]
	*humidity = ((float)(h1Rh - h0Rh) * (float)(hOut - h0T0)) / (float)(h1T0 - h0T0) + h0Rh;
 80035d0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80035d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	ee07 3a90 	vmov	s15, r3
 80035de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80035e6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	ee07 3a90 	vmov	s15, r3
 80035f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035f4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80035f8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80035fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	ee07 3a90 	vmov	s15, r3
 8003606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800360a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800360e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003612:	ee07 3a90 	vmov	s15, r3
 8003616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800361a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	edc3 7a00 	vstr	s15, [r3]
}
 8003624:	bf00      	nop
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	20000244 	.word	0x20000244

08003630 <hts221_get_temperature>:

void hts221_get_temperature(float *temperature) {
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2] = { 0 };
 8003638:	2300      	movs	r3, #0
 800363a:	81bb      	strh	r3, [r7, #12]
	//hts221_readArray(buffer, HTS221_ADDRESS_T_OUT_L, 2);
	buffer[0] = hts221_read_byte(HTS221_ADDRESS_T_OUT_L);
 800363c:	202a      	movs	r0, #42	; 0x2a
 800363e:	f7ff ff11 	bl	8003464 <hts221_read_byte>
 8003642:	4603      	mov	r3, r0
 8003644:	733b      	strb	r3, [r7, #12]
	buffer[1] = hts221_read_byte(HTS221_ADDRESS_T_OUT_H);
 8003646:	202b      	movs	r0, #43	; 0x2b
 8003648:	f7ff ff0c 	bl	8003464 <hts221_read_byte>
 800364c:	4603      	mov	r3, r0
 800364e:	737b      	strb	r3, [r7, #13]
	int16_t tOut = ((int16_t) buffer[1]) << 8 | buffer[0];
 8003650:	7b7b      	ldrb	r3, [r7, #13]
 8003652:	021b      	lsls	r3, r3, #8
 8003654:	b21a      	sxth	r2, r3
 8003656:	7b3b      	ldrb	r3, [r7, #12]
 8003658:	b21b      	sxth	r3, r3
 800365a:	4313      	orrs	r3, r2
 800365c:	82fb      	strh	r3, [r7, #22]
	int16_t t0Deg = TemperatureFactoryCoef.t0DegC;
 800365e:	4b1d      	ldr	r3, [pc, #116]	; (80036d4 <hts221_get_temperature+0xa4>)
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	82bb      	strh	r3, [r7, #20]
	int16_t t1Deg = TemperatureFactoryCoef.t1DegC;
 8003664:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <hts221_get_temperature+0xa4>)
 8003666:	885b      	ldrh	r3, [r3, #2]
 8003668:	827b      	strh	r3, [r7, #18]
	int16_t t0Out = TemperatureFactoryCoef.t0Out;
 800366a:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <hts221_get_temperature+0xa4>)
 800366c:	889b      	ldrh	r3, [r3, #4]
 800366e:	823b      	strh	r3, [r7, #16]
	int16_t t1Out = TemperatureFactoryCoef.t1Out;
 8003670:	4b18      	ldr	r3, [pc, #96]	; (80036d4 <hts221_get_temperature+0xa4>)
 8003672:	88db      	ldrh	r3, [r3, #6]
 8003674:	81fb      	strh	r3, [r7, #14]
	*temperature = ((float)(t1Deg - t0Deg) * (float)(tOut - t0Out)) / (float)(t1Out - t0Out) + t0Deg;
 8003676:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800367a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	ee07 3a90 	vmov	s15, r3
 8003684:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003688:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800368c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	ee07 3a90 	vmov	s15, r3
 8003696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800369a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800369e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80036a2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	ee07 3a90 	vmov	s15, r3
 80036ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80036b8:	ee07 3a90 	vmov	s15, r3
 80036bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	edc3 7a00 	vstr	s15, [r3]
}
 80036ca:	bf00      	nop
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	2000023c 	.word	0x2000023c

080036d8 <hts221_get_factory_coef>:

void hts221_get_factory_coef(Hts221HumidityStruct *humidityStruct,
		Hts221TemperatureStruct *temperatureStruct) {
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
	//Get humidity factory coef.
	int16_t h0RhX2 = (int16_t)hts221_read_byte(HTS221_ADDRESS_H0_rH_x2);
 80036e2:	2030      	movs	r0, #48	; 0x30
 80036e4:	f7ff febe 	bl	8003464 <hts221_read_byte>
 80036e8:	4603      	mov	r3, r0
 80036ea:	83fb      	strh	r3, [r7, #30]
	int16_t h1RhX2 = (int16_t)hts221_read_byte(HTS221_ADDRESS_H1_rH_x2);
 80036ec:	2031      	movs	r0, #49	; 0x31
 80036ee:	f7ff feb9 	bl	8003464 <hts221_read_byte>
 80036f2:	4603      	mov	r3, r0
 80036f4:	83bb      	strh	r3, [r7, #28]
	uint8_t buffer[4] = { 0 };
 80036f6:	2300      	movs	r3, #0
 80036f8:	60bb      	str	r3, [r7, #8]
	hts221_readArray(buffer, HTS221_ADDRESS_H0_OUT_L, 2);
 80036fa:	f107 0308 	add.w	r3, r7, #8
 80036fe:	2202      	movs	r2, #2
 8003700:	2136      	movs	r1, #54	; 0x36
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff fede 	bl	80034c4 <hts221_readArray>
	hts221_readArray(buffer + 2, HTS221_ADDRESS_H1_OUT_L, 2);
 8003708:	f107 0308 	add.w	r3, r7, #8
 800370c:	3302      	adds	r3, #2
 800370e:	2202      	movs	r2, #2
 8003710:	213a      	movs	r1, #58	; 0x3a
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff fed6 	bl	80034c4 <hts221_readArray>
	int16_t h0Out = ((int16_t) buffer[1]) << 8 | (int16_t)buffer[0];
 8003718:	7a7b      	ldrb	r3, [r7, #9]
 800371a:	021b      	lsls	r3, r3, #8
 800371c:	b21a      	sxth	r2, r3
 800371e:	7a3b      	ldrb	r3, [r7, #8]
 8003720:	b21b      	sxth	r3, r3
 8003722:	4313      	orrs	r3, r2
 8003724:	837b      	strh	r3, [r7, #26]
	int16_t h1Out = ((int16_t) buffer[3]) << 8 | (int16_t)buffer[2];
 8003726:	7afb      	ldrb	r3, [r7, #11]
 8003728:	021b      	lsls	r3, r3, #8
 800372a:	b21a      	sxth	r2, r3
 800372c:	7abb      	ldrb	r3, [r7, #10]
 800372e:	b21b      	sxth	r3, r3
 8003730:	4313      	orrs	r3, r2
 8003732:	833b      	strh	r3, [r7, #24]

	humidityStruct->h0Rh = h0RhX2 >> 1;
 8003734:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003738:	105b      	asrs	r3, r3, #1
 800373a:	b21a      	sxth	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	801a      	strh	r2, [r3, #0]
	humidityStruct->h1Rh = h1RhX2 >> 1;
 8003740:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003744:	105b      	asrs	r3, r3, #1
 8003746:	b21a      	sxth	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	805a      	strh	r2, [r3, #2]
	humidityStruct->h0Out = h0Out;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	8b7a      	ldrh	r2, [r7, #26]
 8003750:	809a      	strh	r2, [r3, #4]
	humidityStruct->h1Out = h1Out;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	8b3a      	ldrh	r2, [r7, #24]
 8003756:	80da      	strh	r2, [r3, #6]
	//Get temperature factory coef.
	buffer[0] = hts221_read_byte(HTS221_ADDRESS_T0_degC_x8);
 8003758:	2032      	movs	r0, #50	; 0x32
 800375a:	f7ff fe83 	bl	8003464 <hts221_read_byte>
 800375e:	4603      	mov	r3, r0
 8003760:	723b      	strb	r3, [r7, #8]
	buffer[2] = hts221_read_byte(HTS221_ADDRESS_T1_degC_x8);
 8003762:	2033      	movs	r0, #51	; 0x33
 8003764:	f7ff fe7e 	bl	8003464 <hts221_read_byte>
 8003768:	4603      	mov	r3, r0
 800376a:	72bb      	strb	r3, [r7, #10]
	int16_t t0t1Msb = (int16_t)hts221_read_byte(HTS221_ADDRESS_T1_T0_MSB);
 800376c:	2035      	movs	r0, #53	; 0x35
 800376e:	f7ff fe79 	bl	8003464 <hts221_read_byte>
 8003772:	4603      	mov	r3, r0
 8003774:	82fb      	strh	r3, [r7, #22]
	buffer[1] = t0t1Msb & 0x03;
 8003776:	8afb      	ldrh	r3, [r7, #22]
 8003778:	b2db      	uxtb	r3, r3
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	b2db      	uxtb	r3, r3
 8003780:	727b      	strb	r3, [r7, #9]
	buffer[3] = t0t1Msb & 0x0C;
 8003782:	8afb      	ldrh	r3, [r7, #22]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	b2db      	uxtb	r3, r3
 800378c:	72fb      	strb	r3, [r7, #11]
	int16_t t0DegX8 = ((int16_t) buffer[1]) << 8 | (int16_t)buffer[0];
 800378e:	7a7b      	ldrb	r3, [r7, #9]
 8003790:	021b      	lsls	r3, r3, #8
 8003792:	b21a      	sxth	r2, r3
 8003794:	7a3b      	ldrb	r3, [r7, #8]
 8003796:	b21b      	sxth	r3, r3
 8003798:	4313      	orrs	r3, r2
 800379a:	82bb      	strh	r3, [r7, #20]
	int16_t t1DegX8 = ((int16_t) buffer[3]) << 6 | (int16_t)buffer[2];
 800379c:	7afb      	ldrb	r3, [r7, #11]
 800379e:	019b      	lsls	r3, r3, #6
 80037a0:	b21a      	sxth	r2, r3
 80037a2:	7abb      	ldrb	r3, [r7, #10]
 80037a4:	b21b      	sxth	r3, r3
 80037a6:	4313      	orrs	r3, r2
 80037a8:	827b      	strh	r3, [r7, #18]
	hts221_readArray(buffer, HTS221_ADDRESS_T0_OUT_L, 4);
 80037aa:	f107 0308 	add.w	r3, r7, #8
 80037ae:	2204      	movs	r2, #4
 80037b0:	213c      	movs	r1, #60	; 0x3c
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff fe86 	bl	80034c4 <hts221_readArray>
	//hts221_readArray(buffer + 2, HTS221_ADDRESS_T1_OUT_L, 2);
	int16_t t0Out = ((int16_t) buffer[1]) << 8 | (int16_t)buffer[0];
 80037b8:	7a7b      	ldrb	r3, [r7, #9]
 80037ba:	021b      	lsls	r3, r3, #8
 80037bc:	b21a      	sxth	r2, r3
 80037be:	7a3b      	ldrb	r3, [r7, #8]
 80037c0:	b21b      	sxth	r3, r3
 80037c2:	4313      	orrs	r3, r2
 80037c4:	823b      	strh	r3, [r7, #16]
	int16_t t1Out = ((int16_t) buffer[3]) << 8 | (int16_t)buffer[2];
 80037c6:	7afb      	ldrb	r3, [r7, #11]
 80037c8:	021b      	lsls	r3, r3, #8
 80037ca:	b21a      	sxth	r2, r3
 80037cc:	7abb      	ldrb	r3, [r7, #10]
 80037ce:	b21b      	sxth	r3, r3
 80037d0:	4313      	orrs	r3, r2
 80037d2:	81fb      	strh	r3, [r7, #14]

	temperatureStruct->t0DegC = t0DegX8 >> 3;
 80037d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80037d8:	10db      	asrs	r3, r3, #3
 80037da:	b21a      	sxth	r2, r3
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	801a      	strh	r2, [r3, #0]
	temperatureStruct->t1DegC = t1DegX8 >> 3;
 80037e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80037e4:	10db      	asrs	r3, r3, #3
 80037e6:	b21a      	sxth	r2, r3
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	805a      	strh	r2, [r3, #2]
	temperatureStruct->t0Out = t0Out;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	8a3a      	ldrh	r2, [r7, #16]
 80037f0:	809a      	strh	r2, [r3, #4]
	temperatureStruct->t1Out = t1Out;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	89fa      	ldrh	r2, [r7, #14]
 80037f6:	80da      	strh	r2, [r3, #6]
}
 80037f8:	bf00      	nop
 80037fa:	3720      	adds	r7, #32
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <lps25hb_read_byte>:

#include "lps25hb.h"

uint8_t addresLPS25HB = LPS25HB_DEVICE_ADDRESS_0;

uint8_t lps25hb_read_byte(uint8_t reg_addr) {
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af02      	add	r7, sp, #8
 8003806:	4603      	mov	r3, r0
 8003808:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800380a:	2300      	movs	r3, #0
 800380c:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addresLPS25HB, 0));
 800380e:	4b08      	ldr	r3, [pc, #32]	; (8003830 <lps25hb_read_byte+0x30>)
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	79fa      	ldrb	r2, [r7, #7]
 8003814:	f107 000f 	add.w	r0, r7, #15
 8003818:	2100      	movs	r1, #0
 800381a:	9100      	str	r1, [sp, #0]
 800381c:	2101      	movs	r1, #1
 800381e:	f7fe f897 	bl	8001950 <i2c_master_read>
 8003822:	4603      	mov	r3, r0
 8003824:	781b      	ldrb	r3, [r3, #0]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000006 	.word	0x20000006

08003834 <lps25hb_write_byte>:

void lps25hb_write_byte(uint8_t reg_addr, uint8_t value) {
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	460a      	mov	r2, r1
 800383e:	71fb      	strb	r3, [r7, #7]
 8003840:	4613      	mov	r3, r2
 8003842:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addresLPS25HB, 0);
 8003844:	4b05      	ldr	r3, [pc, #20]	; (800385c <lps25hb_write_byte+0x28>)
 8003846:	781a      	ldrb	r2, [r3, #0]
 8003848:	79f9      	ldrb	r1, [r7, #7]
 800384a:	79b8      	ldrb	r0, [r7, #6]
 800384c:	2300      	movs	r3, #0
 800384e:	f7fe f83b 	bl	80018c8 <i2c_master_write>
}
 8003852:	bf00      	nop
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000006 	.word	0x20000006

08003860 <lps25hb_readArray>:

void lps25hb_readArray(uint8_t *data, uint8_t reg, uint8_t length) {
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af02      	add	r7, sp, #8
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	70fb      	strb	r3, [r7, #3]
 800386c:	4613      	mov	r3, r2
 800386e:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addresLPS25HB, 1);
 8003870:	4b06      	ldr	r3, [pc, #24]	; (800388c <lps25hb_readArray+0x2c>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	78fa      	ldrb	r2, [r7, #3]
 8003876:	78b9      	ldrb	r1, [r7, #2]
 8003878:	2001      	movs	r0, #1
 800387a:	9000      	str	r0, [sp, #0]
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7fe f867 	bl	8001950 <i2c_master_read>
}
 8003882:	bf00      	nop
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	20000006 	.word	0x20000006

08003890 <lps25hb_get_pressure>:
void lps25hb_get_pressure(float *pressure) {
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
	uint8_t buffer[3];
	uint32_t raw_press = 0;
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]
	uint8_t i;
	lps25hb_readArray(buffer, LPS25HB_ADDRESS_PressOut_XL, 3);
 800389c:	f107 0308 	add.w	r3, r7, #8
 80038a0:	2203      	movs	r2, #3
 80038a2:	2128      	movs	r1, #40	; 0x28
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff ffdb 	bl	8003860 <lps25hb_readArray>
	for (i = 0; i < 3; i++)
 80038aa:	2300      	movs	r3, #0
 80038ac:	72fb      	strb	r3, [r7, #11]
 80038ae:	e010      	b.n	80038d2 <lps25hb_get_pressure+0x42>
		raw_press |= (((uint32_t) buffer[i]) << (8 * i));
 80038b0:	7afb      	ldrb	r3, [r7, #11]
 80038b2:	f107 0210 	add.w	r2, r7, #16
 80038b6:	4413      	add	r3, r2
 80038b8:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80038bc:	461a      	mov	r2, r3
 80038be:	7afb      	ldrb	r3, [r7, #11]
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < 3; i++)
 80038cc:	7afb      	ldrb	r3, [r7, #11]
 80038ce:	3301      	adds	r3, #1
 80038d0:	72fb      	strb	r3, [r7, #11]
 80038d2:	7afb      	ldrb	r3, [r7, #11]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d9eb      	bls.n	80038b0 <lps25hb_get_pressure+0x20>
	if (raw_press & 0x00800000)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <lps25hb_get_pressure+0x5a>
		raw_press |= 0xFF000000;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038e8:	60fb      	str	r3, [r7, #12]
	*pressure = ((float)raw_press) / 4096;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	ee07 3a90 	vmov	s15, r3
 80038f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038f4:	eddf 6a05 	vldr	s13, [pc, #20]	; 800390c <lps25hb_get_pressure+0x7c>
 80038f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	edc3 7a00 	vstr	s15, [r3]
}
 8003902:	bf00      	nop
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	45800000 	.word	0x45800000

08003910 <lps25hb_get_altitude>:
void lps25hb_get_altitude(float *altitude){
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
	float pressure = 0;
 8003918:	f04f 0300 	mov.w	r3, #0
 800391c:	60bb      	str	r3, [r7, #8]
	lps25hb_get_pressure(&pressure);
 800391e:	f107 0308 	add.w	r3, r7, #8
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff ffb4 	bl	8003890 <lps25hb_get_pressure>
	float pressurePW = pow(pressure/LPS25HB_ALTITUDE_P0,LPS25HB_ALTITUDE_PW);
 8003928:	edd7 7a02 	vldr	s15, [r7, #8]
 800392c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003988 <lps25hb_get_altitude+0x78>
 8003930:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003934:	ee16 0a90 	vmov	r0, s13
 8003938:	f7fc fe06 	bl	8000548 <__aeabi_f2d>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8003980 <lps25hb_get_altitude+0x70>
 8003944:	ec43 2b10 	vmov	d0, r2, r3
 8003948:	f002 ff58 	bl	80067fc <pow>
 800394c:	ec53 2b10 	vmov	r2, r3, d0
 8003950:	4610      	mov	r0, r2
 8003952:	4619      	mov	r1, r3
 8003954:	f7fd f928 	bl	8000ba8 <__aeabi_d2f>
 8003958:	4603      	mov	r3, r0
 800395a:	60fb      	str	r3, [r7, #12]
	*altitude = LPS25HB_ALTITUDE_CONST*(1-pressurePW);
 800395c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003960:	edd7 7a03 	vldr	s15, [r7, #12]
 8003964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003968:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800398c <lps25hb_get_altitude+0x7c>
 800396c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	edc3 7a00 	vstr	s15, [r3]
}
 8003976:	bf00      	nop
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	c0000000 	.word	0xc0000000
 8003984:	3fc85b95 	.word	0x3fc85b95
 8003988:	447d5000 	.word	0x447d5000
 800398c:	472d2a00 	.word	0x472d2a00

08003990 <lps25hb_init>:
uint8_t lps25hb_init(void) {
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
	uint8_t result = 0;
 8003996:	2300      	movs	r3, #0
 8003998:	71fb      	strb	r3, [r7, #7]
	LL_mDelay(100);
 800399a:	2064      	movs	r0, #100	; 0x64
 800399c:	f7ff fcca 	bl	8003334 <LL_mDelay>
	uint8_t val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRES);
 80039a0:	200f      	movs	r0, #15
 80039a2:	f7ff ff2d 	bl	8003800 <lps25hb_read_byte>
 80039a6:	4603      	mov	r3, r0
 80039a8:	71bb      	strb	r3, [r7, #6]
	if (val == LPS25HB_WHO_AM_I_VALUE) {
 80039aa:	79bb      	ldrb	r3, [r7, #6]
 80039ac:	2bbd      	cmp	r3, #189	; 0xbd
 80039ae:	d102      	bne.n	80039b6 <lps25hb_init+0x26>
		result = 1;
 80039b0:	2301      	movs	r3, #1
 80039b2:	71fb      	strb	r3, [r7, #7]
 80039b4:	e00f      	b.n	80039d6 <lps25hb_init+0x46>
	} else
	//if the device is not found on one address, try another one
	{
		addresLPS25HB = LPS25HB_DEVICE_ADDRESS_1;
 80039b6:	4b29      	ldr	r3, [pc, #164]	; (8003a5c <lps25hb_init+0xcc>)
 80039b8:	22ba      	movs	r2, #186	; 0xba
 80039ba:	701a      	strb	r2, [r3, #0]
		val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRES);
 80039bc:	200f      	movs	r0, #15
 80039be:	f7ff ff1f 	bl	8003800 <lps25hb_read_byte>
 80039c2:	4603      	mov	r3, r0
 80039c4:	71bb      	strb	r3, [r7, #6]
		if (val == LPS25HB_WHO_AM_I_VALUE)
 80039c6:	79bb      	ldrb	r3, [r7, #6]
 80039c8:	2bbd      	cmp	r3, #189	; 0xbd
 80039ca:	d102      	bne.n	80039d2 <lps25hb_init+0x42>
			result = 1;
 80039cc:	2301      	movs	r3, #1
 80039ce:	71fb      	strb	r3, [r7, #7]
 80039d0:	e001      	b.n	80039d6 <lps25hb_init+0x46>
		else
			result = 0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	71fb      	strb	r3, [r7, #7]
	}
	if (result == 1) {
 80039d6:	79fb      	ldrb	r3, [r7, #7]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d13a      	bne.n	8003a52 <lps25hb_init+0xc2>
		//load reserved bits from device
		uint8_t control1 = lps25hb_read_byte(LPS25HB_ADDRESS_CTRL1);
 80039dc:	2020      	movs	r0, #32
 80039de:	f7ff ff0f 	bl	8003800 <lps25hb_read_byte>
 80039e2:	4603      	mov	r3, r0
 80039e4:	717b      	strb	r3, [r7, #5]
		//active mode
		control1 &= ~LPS25HB_PD_MASK;
 80039e6:	797b      	ldrb	r3, [r7, #5]
 80039e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039ec:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 1) << LPS25HB_PD_BIT;
 80039ee:	797b      	ldrb	r3, [r7, #5]
 80039f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039f4:	717b      	strb	r3, [r7, #5]
		//output registers not updated until MSB and LSB reading
		control1 &= ~LPS25HB_BDU_MASK;
 80039f6:	797b      	ldrb	r3, [r7, #5]
 80039f8:	f023 0304 	bic.w	r3, r3, #4
 80039fc:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 1) << LPS25HB_BDU_BIT;
 80039fe:	797b      	ldrb	r3, [r7, #5]
 8003a00:	f043 0304 	orr.w	r3, r3, #4
 8003a04:	717b      	strb	r3, [r7, #5]
		//ODR register sampling
		control1 &= ~LPS25HB_ODR_MASK;
 8003a06:	797b      	ldrb	r3, [r7, #5]
 8003a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a0c:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 2) << LPS25HB_ODR_BIT;
 8003a0e:	797b      	ldrb	r3, [r7, #5]
 8003a10:	f043 0320 	orr.w	r3, r3, #32
 8003a14:	717b      	strb	r3, [r7, #5]
		// Reset AZ (Self clear)
		val = control1;
 8003a16:	797b      	ldrb	r3, [r7, #5]
 8003a18:	71bb      	strb	r3, [r7, #6]
		control1 &= ~LPS25HB_RESET_AZ_MASK;
 8003a1a:	797b      	ldrb	r3, [r7, #5]
 8003a1c:	f023 0302 	bic.w	r3, r3, #2
 8003a20:	717b      	strb	r3, [r7, #5]
		control1 |= ((uint8_t) 1) << LPS25HB_RESET_AZ_BIT;
 8003a22:	797b      	ldrb	r3, [r7, #5]
 8003a24:	f043 0302 	orr.w	r3, r3, #2
 8003a28:	717b      	strb	r3, [r7, #5]
		//Write config. to device
		lps25hb_write_byte(LPS25HB_ADDRESS_CTRL1, control1);
 8003a2a:	797b      	ldrb	r3, [r7, #5]
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	2020      	movs	r0, #32
 8003a30:	f7ff ff00 	bl	8003834 <lps25hb_write_byte>
		control1 = val;
 8003a34:	79bb      	ldrb	r3, [r7, #6]
 8003a36:	717b      	strb	r3, [r7, #5]
		val = lps25hb_read_byte(LPS25HB_ADDRESS_CTRL1);
 8003a38:	2020      	movs	r0, #32
 8003a3a:	f7ff fee1 	bl	8003800 <lps25hb_read_byte>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	71bb      	strb	r3, [r7, #6]
		result = val == control1 ? 1 : 0;
 8003a42:	79ba      	ldrb	r2, [r7, #6]
 8003a44:	797b      	ldrb	r3, [r7, #5]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	bf0c      	ite	eq
 8003a4a:	2301      	moveq	r3, #1
 8003a4c:	2300      	movne	r3, #0
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	71fb      	strb	r3, [r7, #7]
	}
	return result;
 8003a52:	79fb      	ldrb	r3, [r7, #7]

}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	20000006 	.word	0x20000006

08003a60 <__errno>:
 8003a60:	4b01      	ldr	r3, [pc, #4]	; (8003a68 <__errno+0x8>)
 8003a62:	6818      	ldr	r0, [r3, #0]
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	20000008 	.word	0x20000008

08003a6c <__libc_init_array>:
 8003a6c:	b570      	push	{r4, r5, r6, lr}
 8003a6e:	4d0d      	ldr	r5, [pc, #52]	; (8003aa4 <__libc_init_array+0x38>)
 8003a70:	4c0d      	ldr	r4, [pc, #52]	; (8003aa8 <__libc_init_array+0x3c>)
 8003a72:	1b64      	subs	r4, r4, r5
 8003a74:	10a4      	asrs	r4, r4, #2
 8003a76:	2600      	movs	r6, #0
 8003a78:	42a6      	cmp	r6, r4
 8003a7a:	d109      	bne.n	8003a90 <__libc_init_array+0x24>
 8003a7c:	4d0b      	ldr	r5, [pc, #44]	; (8003aac <__libc_init_array+0x40>)
 8003a7e:	4c0c      	ldr	r4, [pc, #48]	; (8003ab0 <__libc_init_array+0x44>)
 8003a80:	f003 fe70 	bl	8007764 <_init>
 8003a84:	1b64      	subs	r4, r4, r5
 8003a86:	10a4      	asrs	r4, r4, #2
 8003a88:	2600      	movs	r6, #0
 8003a8a:	42a6      	cmp	r6, r4
 8003a8c:	d105      	bne.n	8003a9a <__libc_init_array+0x2e>
 8003a8e:	bd70      	pop	{r4, r5, r6, pc}
 8003a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a94:	4798      	blx	r3
 8003a96:	3601      	adds	r6, #1
 8003a98:	e7ee      	b.n	8003a78 <__libc_init_array+0xc>
 8003a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a9e:	4798      	blx	r3
 8003aa0:	3601      	adds	r6, #1
 8003aa2:	e7f2      	b.n	8003a8a <__libc_init_array+0x1e>
 8003aa4:	08007c10 	.word	0x08007c10
 8003aa8:	08007c10 	.word	0x08007c10
 8003aac:	08007c10 	.word	0x08007c10
 8003ab0:	08007c14 	.word	0x08007c14

08003ab4 <memset>:
 8003ab4:	4402      	add	r2, r0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d100      	bne.n	8003abe <memset+0xa>
 8003abc:	4770      	bx	lr
 8003abe:	f803 1b01 	strb.w	r1, [r3], #1
 8003ac2:	e7f9      	b.n	8003ab8 <memset+0x4>

08003ac4 <__cvt>:
 8003ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ac8:	ec55 4b10 	vmov	r4, r5, d0
 8003acc:	2d00      	cmp	r5, #0
 8003ace:	460e      	mov	r6, r1
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	462b      	mov	r3, r5
 8003ad4:	bfbb      	ittet	lt
 8003ad6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003ada:	461d      	movlt	r5, r3
 8003adc:	2300      	movge	r3, #0
 8003ade:	232d      	movlt	r3, #45	; 0x2d
 8003ae0:	700b      	strb	r3, [r1, #0]
 8003ae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ae4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003ae8:	4691      	mov	r9, r2
 8003aea:	f023 0820 	bic.w	r8, r3, #32
 8003aee:	bfbc      	itt	lt
 8003af0:	4622      	movlt	r2, r4
 8003af2:	4614      	movlt	r4, r2
 8003af4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003af8:	d005      	beq.n	8003b06 <__cvt+0x42>
 8003afa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003afe:	d100      	bne.n	8003b02 <__cvt+0x3e>
 8003b00:	3601      	adds	r6, #1
 8003b02:	2102      	movs	r1, #2
 8003b04:	e000      	b.n	8003b08 <__cvt+0x44>
 8003b06:	2103      	movs	r1, #3
 8003b08:	ab03      	add	r3, sp, #12
 8003b0a:	9301      	str	r3, [sp, #4]
 8003b0c:	ab02      	add	r3, sp, #8
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	ec45 4b10 	vmov	d0, r4, r5
 8003b14:	4653      	mov	r3, sl
 8003b16:	4632      	mov	r2, r6
 8003b18:	f000 fcf2 	bl	8004500 <_dtoa_r>
 8003b1c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003b20:	4607      	mov	r7, r0
 8003b22:	d102      	bne.n	8003b2a <__cvt+0x66>
 8003b24:	f019 0f01 	tst.w	r9, #1
 8003b28:	d022      	beq.n	8003b70 <__cvt+0xac>
 8003b2a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b2e:	eb07 0906 	add.w	r9, r7, r6
 8003b32:	d110      	bne.n	8003b56 <__cvt+0x92>
 8003b34:	783b      	ldrb	r3, [r7, #0]
 8003b36:	2b30      	cmp	r3, #48	; 0x30
 8003b38:	d10a      	bne.n	8003b50 <__cvt+0x8c>
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	4620      	mov	r0, r4
 8003b40:	4629      	mov	r1, r5
 8003b42:	f7fc ffc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b46:	b918      	cbnz	r0, 8003b50 <__cvt+0x8c>
 8003b48:	f1c6 0601 	rsb	r6, r6, #1
 8003b4c:	f8ca 6000 	str.w	r6, [sl]
 8003b50:	f8da 3000 	ldr.w	r3, [sl]
 8003b54:	4499      	add	r9, r3
 8003b56:	2200      	movs	r2, #0
 8003b58:	2300      	movs	r3, #0
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	4629      	mov	r1, r5
 8003b5e:	f7fc ffb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b62:	b108      	cbz	r0, 8003b68 <__cvt+0xa4>
 8003b64:	f8cd 900c 	str.w	r9, [sp, #12]
 8003b68:	2230      	movs	r2, #48	; 0x30
 8003b6a:	9b03      	ldr	r3, [sp, #12]
 8003b6c:	454b      	cmp	r3, r9
 8003b6e:	d307      	bcc.n	8003b80 <__cvt+0xbc>
 8003b70:	9b03      	ldr	r3, [sp, #12]
 8003b72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b74:	1bdb      	subs	r3, r3, r7
 8003b76:	4638      	mov	r0, r7
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	b004      	add	sp, #16
 8003b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b80:	1c59      	adds	r1, r3, #1
 8003b82:	9103      	str	r1, [sp, #12]
 8003b84:	701a      	strb	r2, [r3, #0]
 8003b86:	e7f0      	b.n	8003b6a <__cvt+0xa6>

08003b88 <__exponent>:
 8003b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2900      	cmp	r1, #0
 8003b8e:	bfb8      	it	lt
 8003b90:	4249      	neglt	r1, r1
 8003b92:	f803 2b02 	strb.w	r2, [r3], #2
 8003b96:	bfb4      	ite	lt
 8003b98:	222d      	movlt	r2, #45	; 0x2d
 8003b9a:	222b      	movge	r2, #43	; 0x2b
 8003b9c:	2909      	cmp	r1, #9
 8003b9e:	7042      	strb	r2, [r0, #1]
 8003ba0:	dd2a      	ble.n	8003bf8 <__exponent+0x70>
 8003ba2:	f10d 0407 	add.w	r4, sp, #7
 8003ba6:	46a4      	mov	ip, r4
 8003ba8:	270a      	movs	r7, #10
 8003baa:	46a6      	mov	lr, r4
 8003bac:	460a      	mov	r2, r1
 8003bae:	fb91 f6f7 	sdiv	r6, r1, r7
 8003bb2:	fb07 1516 	mls	r5, r7, r6, r1
 8003bb6:	3530      	adds	r5, #48	; 0x30
 8003bb8:	2a63      	cmp	r2, #99	; 0x63
 8003bba:	f104 34ff 	add.w	r4, r4, #4294967295
 8003bbe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003bc2:	4631      	mov	r1, r6
 8003bc4:	dcf1      	bgt.n	8003baa <__exponent+0x22>
 8003bc6:	3130      	adds	r1, #48	; 0x30
 8003bc8:	f1ae 0502 	sub.w	r5, lr, #2
 8003bcc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003bd0:	1c44      	adds	r4, r0, #1
 8003bd2:	4629      	mov	r1, r5
 8003bd4:	4561      	cmp	r1, ip
 8003bd6:	d30a      	bcc.n	8003bee <__exponent+0x66>
 8003bd8:	f10d 0209 	add.w	r2, sp, #9
 8003bdc:	eba2 020e 	sub.w	r2, r2, lr
 8003be0:	4565      	cmp	r5, ip
 8003be2:	bf88      	it	hi
 8003be4:	2200      	movhi	r2, #0
 8003be6:	4413      	add	r3, r2
 8003be8:	1a18      	subs	r0, r3, r0
 8003bea:	b003      	add	sp, #12
 8003bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bf2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003bf6:	e7ed      	b.n	8003bd4 <__exponent+0x4c>
 8003bf8:	2330      	movs	r3, #48	; 0x30
 8003bfa:	3130      	adds	r1, #48	; 0x30
 8003bfc:	7083      	strb	r3, [r0, #2]
 8003bfe:	70c1      	strb	r1, [r0, #3]
 8003c00:	1d03      	adds	r3, r0, #4
 8003c02:	e7f1      	b.n	8003be8 <__exponent+0x60>

08003c04 <_printf_float>:
 8003c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c08:	ed2d 8b02 	vpush	{d8}
 8003c0c:	b08d      	sub	sp, #52	; 0x34
 8003c0e:	460c      	mov	r4, r1
 8003c10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003c14:	4616      	mov	r6, r2
 8003c16:	461f      	mov	r7, r3
 8003c18:	4605      	mov	r5, r0
 8003c1a:	f001 fa5d 	bl	80050d8 <_localeconv_r>
 8003c1e:	f8d0 a000 	ldr.w	sl, [r0]
 8003c22:	4650      	mov	r0, sl
 8003c24:	f7fc fad4 	bl	80001d0 <strlen>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	930a      	str	r3, [sp, #40]	; 0x28
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	9305      	str	r3, [sp, #20]
 8003c30:	f8d8 3000 	ldr.w	r3, [r8]
 8003c34:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003c38:	3307      	adds	r3, #7
 8003c3a:	f023 0307 	bic.w	r3, r3, #7
 8003c3e:	f103 0208 	add.w	r2, r3, #8
 8003c42:	f8c8 2000 	str.w	r2, [r8]
 8003c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003c4e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003c52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003c56:	9307      	str	r3, [sp, #28]
 8003c58:	f8cd 8018 	str.w	r8, [sp, #24]
 8003c5c:	ee08 0a10 	vmov	s16, r0
 8003c60:	4b9f      	ldr	r3, [pc, #636]	; (8003ee0 <_printf_float+0x2dc>)
 8003c62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c66:	f04f 32ff 	mov.w	r2, #4294967295
 8003c6a:	f7fc ff5f 	bl	8000b2c <__aeabi_dcmpun>
 8003c6e:	bb88      	cbnz	r0, 8003cd4 <_printf_float+0xd0>
 8003c70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c74:	4b9a      	ldr	r3, [pc, #616]	; (8003ee0 <_printf_float+0x2dc>)
 8003c76:	f04f 32ff 	mov.w	r2, #4294967295
 8003c7a:	f7fc ff39 	bl	8000af0 <__aeabi_dcmple>
 8003c7e:	bb48      	cbnz	r0, 8003cd4 <_printf_float+0xd0>
 8003c80:	2200      	movs	r2, #0
 8003c82:	2300      	movs	r3, #0
 8003c84:	4640      	mov	r0, r8
 8003c86:	4649      	mov	r1, r9
 8003c88:	f7fc ff28 	bl	8000adc <__aeabi_dcmplt>
 8003c8c:	b110      	cbz	r0, 8003c94 <_printf_float+0x90>
 8003c8e:	232d      	movs	r3, #45	; 0x2d
 8003c90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c94:	4b93      	ldr	r3, [pc, #588]	; (8003ee4 <_printf_float+0x2e0>)
 8003c96:	4894      	ldr	r0, [pc, #592]	; (8003ee8 <_printf_float+0x2e4>)
 8003c98:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003c9c:	bf94      	ite	ls
 8003c9e:	4698      	movls	r8, r3
 8003ca0:	4680      	movhi	r8, r0
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	6123      	str	r3, [r4, #16]
 8003ca6:	9b05      	ldr	r3, [sp, #20]
 8003ca8:	f023 0204 	bic.w	r2, r3, #4
 8003cac:	6022      	str	r2, [r4, #0]
 8003cae:	f04f 0900 	mov.w	r9, #0
 8003cb2:	9700      	str	r7, [sp, #0]
 8003cb4:	4633      	mov	r3, r6
 8003cb6:	aa0b      	add	r2, sp, #44	; 0x2c
 8003cb8:	4621      	mov	r1, r4
 8003cba:	4628      	mov	r0, r5
 8003cbc:	f000 f9d8 	bl	8004070 <_printf_common>
 8003cc0:	3001      	adds	r0, #1
 8003cc2:	f040 8090 	bne.w	8003de6 <_printf_float+0x1e2>
 8003cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cca:	b00d      	add	sp, #52	; 0x34
 8003ccc:	ecbd 8b02 	vpop	{d8}
 8003cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cd4:	4642      	mov	r2, r8
 8003cd6:	464b      	mov	r3, r9
 8003cd8:	4640      	mov	r0, r8
 8003cda:	4649      	mov	r1, r9
 8003cdc:	f7fc ff26 	bl	8000b2c <__aeabi_dcmpun>
 8003ce0:	b140      	cbz	r0, 8003cf4 <_printf_float+0xf0>
 8003ce2:	464b      	mov	r3, r9
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	bfbc      	itt	lt
 8003ce8:	232d      	movlt	r3, #45	; 0x2d
 8003cea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003cee:	487f      	ldr	r0, [pc, #508]	; (8003eec <_printf_float+0x2e8>)
 8003cf0:	4b7f      	ldr	r3, [pc, #508]	; (8003ef0 <_printf_float+0x2ec>)
 8003cf2:	e7d1      	b.n	8003c98 <_printf_float+0x94>
 8003cf4:	6863      	ldr	r3, [r4, #4]
 8003cf6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003cfa:	9206      	str	r2, [sp, #24]
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	d13f      	bne.n	8003d80 <_printf_float+0x17c>
 8003d00:	2306      	movs	r3, #6
 8003d02:	6063      	str	r3, [r4, #4]
 8003d04:	9b05      	ldr	r3, [sp, #20]
 8003d06:	6861      	ldr	r1, [r4, #4]
 8003d08:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	9303      	str	r3, [sp, #12]
 8003d10:	ab0a      	add	r3, sp, #40	; 0x28
 8003d12:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003d16:	ab09      	add	r3, sp, #36	; 0x24
 8003d18:	ec49 8b10 	vmov	d0, r8, r9
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	6022      	str	r2, [r4, #0]
 8003d20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003d24:	4628      	mov	r0, r5
 8003d26:	f7ff fecd 	bl	8003ac4 <__cvt>
 8003d2a:	9b06      	ldr	r3, [sp, #24]
 8003d2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d2e:	2b47      	cmp	r3, #71	; 0x47
 8003d30:	4680      	mov	r8, r0
 8003d32:	d108      	bne.n	8003d46 <_printf_float+0x142>
 8003d34:	1cc8      	adds	r0, r1, #3
 8003d36:	db02      	blt.n	8003d3e <_printf_float+0x13a>
 8003d38:	6863      	ldr	r3, [r4, #4]
 8003d3a:	4299      	cmp	r1, r3
 8003d3c:	dd41      	ble.n	8003dc2 <_printf_float+0x1be>
 8003d3e:	f1ab 0b02 	sub.w	fp, fp, #2
 8003d42:	fa5f fb8b 	uxtb.w	fp, fp
 8003d46:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003d4a:	d820      	bhi.n	8003d8e <_printf_float+0x18a>
 8003d4c:	3901      	subs	r1, #1
 8003d4e:	465a      	mov	r2, fp
 8003d50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003d54:	9109      	str	r1, [sp, #36]	; 0x24
 8003d56:	f7ff ff17 	bl	8003b88 <__exponent>
 8003d5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d5c:	1813      	adds	r3, r2, r0
 8003d5e:	2a01      	cmp	r2, #1
 8003d60:	4681      	mov	r9, r0
 8003d62:	6123      	str	r3, [r4, #16]
 8003d64:	dc02      	bgt.n	8003d6c <_printf_float+0x168>
 8003d66:	6822      	ldr	r2, [r4, #0]
 8003d68:	07d2      	lsls	r2, r2, #31
 8003d6a:	d501      	bpl.n	8003d70 <_printf_float+0x16c>
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	6123      	str	r3, [r4, #16]
 8003d70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d09c      	beq.n	8003cb2 <_printf_float+0xae>
 8003d78:	232d      	movs	r3, #45	; 0x2d
 8003d7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d7e:	e798      	b.n	8003cb2 <_printf_float+0xae>
 8003d80:	9a06      	ldr	r2, [sp, #24]
 8003d82:	2a47      	cmp	r2, #71	; 0x47
 8003d84:	d1be      	bne.n	8003d04 <_printf_float+0x100>
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1bc      	bne.n	8003d04 <_printf_float+0x100>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e7b9      	b.n	8003d02 <_printf_float+0xfe>
 8003d8e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003d92:	d118      	bne.n	8003dc6 <_printf_float+0x1c2>
 8003d94:	2900      	cmp	r1, #0
 8003d96:	6863      	ldr	r3, [r4, #4]
 8003d98:	dd0b      	ble.n	8003db2 <_printf_float+0x1ae>
 8003d9a:	6121      	str	r1, [r4, #16]
 8003d9c:	b913      	cbnz	r3, 8003da4 <_printf_float+0x1a0>
 8003d9e:	6822      	ldr	r2, [r4, #0]
 8003da0:	07d0      	lsls	r0, r2, #31
 8003da2:	d502      	bpl.n	8003daa <_printf_float+0x1a6>
 8003da4:	3301      	adds	r3, #1
 8003da6:	440b      	add	r3, r1
 8003da8:	6123      	str	r3, [r4, #16]
 8003daa:	65a1      	str	r1, [r4, #88]	; 0x58
 8003dac:	f04f 0900 	mov.w	r9, #0
 8003db0:	e7de      	b.n	8003d70 <_printf_float+0x16c>
 8003db2:	b913      	cbnz	r3, 8003dba <_printf_float+0x1b6>
 8003db4:	6822      	ldr	r2, [r4, #0]
 8003db6:	07d2      	lsls	r2, r2, #31
 8003db8:	d501      	bpl.n	8003dbe <_printf_float+0x1ba>
 8003dba:	3302      	adds	r3, #2
 8003dbc:	e7f4      	b.n	8003da8 <_printf_float+0x1a4>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e7f2      	b.n	8003da8 <_printf_float+0x1a4>
 8003dc2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003dc8:	4299      	cmp	r1, r3
 8003dca:	db05      	blt.n	8003dd8 <_printf_float+0x1d4>
 8003dcc:	6823      	ldr	r3, [r4, #0]
 8003dce:	6121      	str	r1, [r4, #16]
 8003dd0:	07d8      	lsls	r0, r3, #31
 8003dd2:	d5ea      	bpl.n	8003daa <_printf_float+0x1a6>
 8003dd4:	1c4b      	adds	r3, r1, #1
 8003dd6:	e7e7      	b.n	8003da8 <_printf_float+0x1a4>
 8003dd8:	2900      	cmp	r1, #0
 8003dda:	bfd4      	ite	le
 8003ddc:	f1c1 0202 	rsble	r2, r1, #2
 8003de0:	2201      	movgt	r2, #1
 8003de2:	4413      	add	r3, r2
 8003de4:	e7e0      	b.n	8003da8 <_printf_float+0x1a4>
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	055a      	lsls	r2, r3, #21
 8003dea:	d407      	bmi.n	8003dfc <_printf_float+0x1f8>
 8003dec:	6923      	ldr	r3, [r4, #16]
 8003dee:	4642      	mov	r2, r8
 8003df0:	4631      	mov	r1, r6
 8003df2:	4628      	mov	r0, r5
 8003df4:	47b8      	blx	r7
 8003df6:	3001      	adds	r0, #1
 8003df8:	d12c      	bne.n	8003e54 <_printf_float+0x250>
 8003dfa:	e764      	b.n	8003cc6 <_printf_float+0xc2>
 8003dfc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003e00:	f240 80e0 	bls.w	8003fc4 <_printf_float+0x3c0>
 8003e04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e08:	2200      	movs	r2, #0
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f7fc fe5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e10:	2800      	cmp	r0, #0
 8003e12:	d034      	beq.n	8003e7e <_printf_float+0x27a>
 8003e14:	4a37      	ldr	r2, [pc, #220]	; (8003ef4 <_printf_float+0x2f0>)
 8003e16:	2301      	movs	r3, #1
 8003e18:	4631      	mov	r1, r6
 8003e1a:	4628      	mov	r0, r5
 8003e1c:	47b8      	blx	r7
 8003e1e:	3001      	adds	r0, #1
 8003e20:	f43f af51 	beq.w	8003cc6 <_printf_float+0xc2>
 8003e24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	db02      	blt.n	8003e32 <_printf_float+0x22e>
 8003e2c:	6823      	ldr	r3, [r4, #0]
 8003e2e:	07d8      	lsls	r0, r3, #31
 8003e30:	d510      	bpl.n	8003e54 <_printf_float+0x250>
 8003e32:	ee18 3a10 	vmov	r3, s16
 8003e36:	4652      	mov	r2, sl
 8003e38:	4631      	mov	r1, r6
 8003e3a:	4628      	mov	r0, r5
 8003e3c:	47b8      	blx	r7
 8003e3e:	3001      	adds	r0, #1
 8003e40:	f43f af41 	beq.w	8003cc6 <_printf_float+0xc2>
 8003e44:	f04f 0800 	mov.w	r8, #0
 8003e48:	f104 091a 	add.w	r9, r4, #26
 8003e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	4543      	cmp	r3, r8
 8003e52:	dc09      	bgt.n	8003e68 <_printf_float+0x264>
 8003e54:	6823      	ldr	r3, [r4, #0]
 8003e56:	079b      	lsls	r3, r3, #30
 8003e58:	f100 8105 	bmi.w	8004066 <_printf_float+0x462>
 8003e5c:	68e0      	ldr	r0, [r4, #12]
 8003e5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e60:	4298      	cmp	r0, r3
 8003e62:	bfb8      	it	lt
 8003e64:	4618      	movlt	r0, r3
 8003e66:	e730      	b.n	8003cca <_printf_float+0xc6>
 8003e68:	2301      	movs	r3, #1
 8003e6a:	464a      	mov	r2, r9
 8003e6c:	4631      	mov	r1, r6
 8003e6e:	4628      	mov	r0, r5
 8003e70:	47b8      	blx	r7
 8003e72:	3001      	adds	r0, #1
 8003e74:	f43f af27 	beq.w	8003cc6 <_printf_float+0xc2>
 8003e78:	f108 0801 	add.w	r8, r8, #1
 8003e7c:	e7e6      	b.n	8003e4c <_printf_float+0x248>
 8003e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	dc39      	bgt.n	8003ef8 <_printf_float+0x2f4>
 8003e84:	4a1b      	ldr	r2, [pc, #108]	; (8003ef4 <_printf_float+0x2f0>)
 8003e86:	2301      	movs	r3, #1
 8003e88:	4631      	mov	r1, r6
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	47b8      	blx	r7
 8003e8e:	3001      	adds	r0, #1
 8003e90:	f43f af19 	beq.w	8003cc6 <_printf_float+0xc2>
 8003e94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	d102      	bne.n	8003ea2 <_printf_float+0x29e>
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	07d9      	lsls	r1, r3, #31
 8003ea0:	d5d8      	bpl.n	8003e54 <_printf_float+0x250>
 8003ea2:	ee18 3a10 	vmov	r3, s16
 8003ea6:	4652      	mov	r2, sl
 8003ea8:	4631      	mov	r1, r6
 8003eaa:	4628      	mov	r0, r5
 8003eac:	47b8      	blx	r7
 8003eae:	3001      	adds	r0, #1
 8003eb0:	f43f af09 	beq.w	8003cc6 <_printf_float+0xc2>
 8003eb4:	f04f 0900 	mov.w	r9, #0
 8003eb8:	f104 0a1a 	add.w	sl, r4, #26
 8003ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ebe:	425b      	negs	r3, r3
 8003ec0:	454b      	cmp	r3, r9
 8003ec2:	dc01      	bgt.n	8003ec8 <_printf_float+0x2c4>
 8003ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ec6:	e792      	b.n	8003dee <_printf_float+0x1ea>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	4652      	mov	r2, sl
 8003ecc:	4631      	mov	r1, r6
 8003ece:	4628      	mov	r0, r5
 8003ed0:	47b8      	blx	r7
 8003ed2:	3001      	adds	r0, #1
 8003ed4:	f43f aef7 	beq.w	8003cc6 <_printf_float+0xc2>
 8003ed8:	f109 0901 	add.w	r9, r9, #1
 8003edc:	e7ee      	b.n	8003ebc <_printf_float+0x2b8>
 8003ede:	bf00      	nop
 8003ee0:	7fefffff 	.word	0x7fefffff
 8003ee4:	080077ec 	.word	0x080077ec
 8003ee8:	080077f0 	.word	0x080077f0
 8003eec:	080077f8 	.word	0x080077f8
 8003ef0:	080077f4 	.word	0x080077f4
 8003ef4:	080077fc 	.word	0x080077fc
 8003ef8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003efa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003efc:	429a      	cmp	r2, r3
 8003efe:	bfa8      	it	ge
 8003f00:	461a      	movge	r2, r3
 8003f02:	2a00      	cmp	r2, #0
 8003f04:	4691      	mov	r9, r2
 8003f06:	dc37      	bgt.n	8003f78 <_printf_float+0x374>
 8003f08:	f04f 0b00 	mov.w	fp, #0
 8003f0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f10:	f104 021a 	add.w	r2, r4, #26
 8003f14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f16:	9305      	str	r3, [sp, #20]
 8003f18:	eba3 0309 	sub.w	r3, r3, r9
 8003f1c:	455b      	cmp	r3, fp
 8003f1e:	dc33      	bgt.n	8003f88 <_printf_float+0x384>
 8003f20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f24:	429a      	cmp	r2, r3
 8003f26:	db3b      	blt.n	8003fa0 <_printf_float+0x39c>
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	07da      	lsls	r2, r3, #31
 8003f2c:	d438      	bmi.n	8003fa0 <_printf_float+0x39c>
 8003f2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f30:	9b05      	ldr	r3, [sp, #20]
 8003f32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	eba2 0901 	sub.w	r9, r2, r1
 8003f3a:	4599      	cmp	r9, r3
 8003f3c:	bfa8      	it	ge
 8003f3e:	4699      	movge	r9, r3
 8003f40:	f1b9 0f00 	cmp.w	r9, #0
 8003f44:	dc35      	bgt.n	8003fb2 <_printf_float+0x3ae>
 8003f46:	f04f 0800 	mov.w	r8, #0
 8003f4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f4e:	f104 0a1a 	add.w	sl, r4, #26
 8003f52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f56:	1a9b      	subs	r3, r3, r2
 8003f58:	eba3 0309 	sub.w	r3, r3, r9
 8003f5c:	4543      	cmp	r3, r8
 8003f5e:	f77f af79 	ble.w	8003e54 <_printf_float+0x250>
 8003f62:	2301      	movs	r3, #1
 8003f64:	4652      	mov	r2, sl
 8003f66:	4631      	mov	r1, r6
 8003f68:	4628      	mov	r0, r5
 8003f6a:	47b8      	blx	r7
 8003f6c:	3001      	adds	r0, #1
 8003f6e:	f43f aeaa 	beq.w	8003cc6 <_printf_float+0xc2>
 8003f72:	f108 0801 	add.w	r8, r8, #1
 8003f76:	e7ec      	b.n	8003f52 <_printf_float+0x34e>
 8003f78:	4613      	mov	r3, r2
 8003f7a:	4631      	mov	r1, r6
 8003f7c:	4642      	mov	r2, r8
 8003f7e:	4628      	mov	r0, r5
 8003f80:	47b8      	blx	r7
 8003f82:	3001      	adds	r0, #1
 8003f84:	d1c0      	bne.n	8003f08 <_printf_float+0x304>
 8003f86:	e69e      	b.n	8003cc6 <_printf_float+0xc2>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	4631      	mov	r1, r6
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	9205      	str	r2, [sp, #20]
 8003f90:	47b8      	blx	r7
 8003f92:	3001      	adds	r0, #1
 8003f94:	f43f ae97 	beq.w	8003cc6 <_printf_float+0xc2>
 8003f98:	9a05      	ldr	r2, [sp, #20]
 8003f9a:	f10b 0b01 	add.w	fp, fp, #1
 8003f9e:	e7b9      	b.n	8003f14 <_printf_float+0x310>
 8003fa0:	ee18 3a10 	vmov	r3, s16
 8003fa4:	4652      	mov	r2, sl
 8003fa6:	4631      	mov	r1, r6
 8003fa8:	4628      	mov	r0, r5
 8003faa:	47b8      	blx	r7
 8003fac:	3001      	adds	r0, #1
 8003fae:	d1be      	bne.n	8003f2e <_printf_float+0x32a>
 8003fb0:	e689      	b.n	8003cc6 <_printf_float+0xc2>
 8003fb2:	9a05      	ldr	r2, [sp, #20]
 8003fb4:	464b      	mov	r3, r9
 8003fb6:	4442      	add	r2, r8
 8003fb8:	4631      	mov	r1, r6
 8003fba:	4628      	mov	r0, r5
 8003fbc:	47b8      	blx	r7
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	d1c1      	bne.n	8003f46 <_printf_float+0x342>
 8003fc2:	e680      	b.n	8003cc6 <_printf_float+0xc2>
 8003fc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003fc6:	2a01      	cmp	r2, #1
 8003fc8:	dc01      	bgt.n	8003fce <_printf_float+0x3ca>
 8003fca:	07db      	lsls	r3, r3, #31
 8003fcc:	d538      	bpl.n	8004040 <_printf_float+0x43c>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	4642      	mov	r2, r8
 8003fd2:	4631      	mov	r1, r6
 8003fd4:	4628      	mov	r0, r5
 8003fd6:	47b8      	blx	r7
 8003fd8:	3001      	adds	r0, #1
 8003fda:	f43f ae74 	beq.w	8003cc6 <_printf_float+0xc2>
 8003fde:	ee18 3a10 	vmov	r3, s16
 8003fe2:	4652      	mov	r2, sl
 8003fe4:	4631      	mov	r1, r6
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	47b8      	blx	r7
 8003fea:	3001      	adds	r0, #1
 8003fec:	f43f ae6b 	beq.w	8003cc6 <_printf_float+0xc2>
 8003ff0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	f7fc fd66 	bl	8000ac8 <__aeabi_dcmpeq>
 8003ffc:	b9d8      	cbnz	r0, 8004036 <_printf_float+0x432>
 8003ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004000:	f108 0201 	add.w	r2, r8, #1
 8004004:	3b01      	subs	r3, #1
 8004006:	4631      	mov	r1, r6
 8004008:	4628      	mov	r0, r5
 800400a:	47b8      	blx	r7
 800400c:	3001      	adds	r0, #1
 800400e:	d10e      	bne.n	800402e <_printf_float+0x42a>
 8004010:	e659      	b.n	8003cc6 <_printf_float+0xc2>
 8004012:	2301      	movs	r3, #1
 8004014:	4652      	mov	r2, sl
 8004016:	4631      	mov	r1, r6
 8004018:	4628      	mov	r0, r5
 800401a:	47b8      	blx	r7
 800401c:	3001      	adds	r0, #1
 800401e:	f43f ae52 	beq.w	8003cc6 <_printf_float+0xc2>
 8004022:	f108 0801 	add.w	r8, r8, #1
 8004026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004028:	3b01      	subs	r3, #1
 800402a:	4543      	cmp	r3, r8
 800402c:	dcf1      	bgt.n	8004012 <_printf_float+0x40e>
 800402e:	464b      	mov	r3, r9
 8004030:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004034:	e6dc      	b.n	8003df0 <_printf_float+0x1ec>
 8004036:	f04f 0800 	mov.w	r8, #0
 800403a:	f104 0a1a 	add.w	sl, r4, #26
 800403e:	e7f2      	b.n	8004026 <_printf_float+0x422>
 8004040:	2301      	movs	r3, #1
 8004042:	4642      	mov	r2, r8
 8004044:	e7df      	b.n	8004006 <_printf_float+0x402>
 8004046:	2301      	movs	r3, #1
 8004048:	464a      	mov	r2, r9
 800404a:	4631      	mov	r1, r6
 800404c:	4628      	mov	r0, r5
 800404e:	47b8      	blx	r7
 8004050:	3001      	adds	r0, #1
 8004052:	f43f ae38 	beq.w	8003cc6 <_printf_float+0xc2>
 8004056:	f108 0801 	add.w	r8, r8, #1
 800405a:	68e3      	ldr	r3, [r4, #12]
 800405c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800405e:	1a5b      	subs	r3, r3, r1
 8004060:	4543      	cmp	r3, r8
 8004062:	dcf0      	bgt.n	8004046 <_printf_float+0x442>
 8004064:	e6fa      	b.n	8003e5c <_printf_float+0x258>
 8004066:	f04f 0800 	mov.w	r8, #0
 800406a:	f104 0919 	add.w	r9, r4, #25
 800406e:	e7f4      	b.n	800405a <_printf_float+0x456>

08004070 <_printf_common>:
 8004070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004074:	4616      	mov	r6, r2
 8004076:	4699      	mov	r9, r3
 8004078:	688a      	ldr	r2, [r1, #8]
 800407a:	690b      	ldr	r3, [r1, #16]
 800407c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004080:	4293      	cmp	r3, r2
 8004082:	bfb8      	it	lt
 8004084:	4613      	movlt	r3, r2
 8004086:	6033      	str	r3, [r6, #0]
 8004088:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800408c:	4607      	mov	r7, r0
 800408e:	460c      	mov	r4, r1
 8004090:	b10a      	cbz	r2, 8004096 <_printf_common+0x26>
 8004092:	3301      	adds	r3, #1
 8004094:	6033      	str	r3, [r6, #0]
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	0699      	lsls	r1, r3, #26
 800409a:	bf42      	ittt	mi
 800409c:	6833      	ldrmi	r3, [r6, #0]
 800409e:	3302      	addmi	r3, #2
 80040a0:	6033      	strmi	r3, [r6, #0]
 80040a2:	6825      	ldr	r5, [r4, #0]
 80040a4:	f015 0506 	ands.w	r5, r5, #6
 80040a8:	d106      	bne.n	80040b8 <_printf_common+0x48>
 80040aa:	f104 0a19 	add.w	sl, r4, #25
 80040ae:	68e3      	ldr	r3, [r4, #12]
 80040b0:	6832      	ldr	r2, [r6, #0]
 80040b2:	1a9b      	subs	r3, r3, r2
 80040b4:	42ab      	cmp	r3, r5
 80040b6:	dc26      	bgt.n	8004106 <_printf_common+0x96>
 80040b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040bc:	1e13      	subs	r3, r2, #0
 80040be:	6822      	ldr	r2, [r4, #0]
 80040c0:	bf18      	it	ne
 80040c2:	2301      	movne	r3, #1
 80040c4:	0692      	lsls	r2, r2, #26
 80040c6:	d42b      	bmi.n	8004120 <_printf_common+0xb0>
 80040c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040cc:	4649      	mov	r1, r9
 80040ce:	4638      	mov	r0, r7
 80040d0:	47c0      	blx	r8
 80040d2:	3001      	adds	r0, #1
 80040d4:	d01e      	beq.n	8004114 <_printf_common+0xa4>
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	68e5      	ldr	r5, [r4, #12]
 80040da:	6832      	ldr	r2, [r6, #0]
 80040dc:	f003 0306 	and.w	r3, r3, #6
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	bf08      	it	eq
 80040e4:	1aad      	subeq	r5, r5, r2
 80040e6:	68a3      	ldr	r3, [r4, #8]
 80040e8:	6922      	ldr	r2, [r4, #16]
 80040ea:	bf0c      	ite	eq
 80040ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040f0:	2500      	movne	r5, #0
 80040f2:	4293      	cmp	r3, r2
 80040f4:	bfc4      	itt	gt
 80040f6:	1a9b      	subgt	r3, r3, r2
 80040f8:	18ed      	addgt	r5, r5, r3
 80040fa:	2600      	movs	r6, #0
 80040fc:	341a      	adds	r4, #26
 80040fe:	42b5      	cmp	r5, r6
 8004100:	d11a      	bne.n	8004138 <_printf_common+0xc8>
 8004102:	2000      	movs	r0, #0
 8004104:	e008      	b.n	8004118 <_printf_common+0xa8>
 8004106:	2301      	movs	r3, #1
 8004108:	4652      	mov	r2, sl
 800410a:	4649      	mov	r1, r9
 800410c:	4638      	mov	r0, r7
 800410e:	47c0      	blx	r8
 8004110:	3001      	adds	r0, #1
 8004112:	d103      	bne.n	800411c <_printf_common+0xac>
 8004114:	f04f 30ff 	mov.w	r0, #4294967295
 8004118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800411c:	3501      	adds	r5, #1
 800411e:	e7c6      	b.n	80040ae <_printf_common+0x3e>
 8004120:	18e1      	adds	r1, r4, r3
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	2030      	movs	r0, #48	; 0x30
 8004126:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800412a:	4422      	add	r2, r4
 800412c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004130:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004134:	3302      	adds	r3, #2
 8004136:	e7c7      	b.n	80040c8 <_printf_common+0x58>
 8004138:	2301      	movs	r3, #1
 800413a:	4622      	mov	r2, r4
 800413c:	4649      	mov	r1, r9
 800413e:	4638      	mov	r0, r7
 8004140:	47c0      	blx	r8
 8004142:	3001      	adds	r0, #1
 8004144:	d0e6      	beq.n	8004114 <_printf_common+0xa4>
 8004146:	3601      	adds	r6, #1
 8004148:	e7d9      	b.n	80040fe <_printf_common+0x8e>
	...

0800414c <_printf_i>:
 800414c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004150:	460c      	mov	r4, r1
 8004152:	4691      	mov	r9, r2
 8004154:	7e27      	ldrb	r7, [r4, #24]
 8004156:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004158:	2f78      	cmp	r7, #120	; 0x78
 800415a:	4680      	mov	r8, r0
 800415c:	469a      	mov	sl, r3
 800415e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004162:	d807      	bhi.n	8004174 <_printf_i+0x28>
 8004164:	2f62      	cmp	r7, #98	; 0x62
 8004166:	d80a      	bhi.n	800417e <_printf_i+0x32>
 8004168:	2f00      	cmp	r7, #0
 800416a:	f000 80d8 	beq.w	800431e <_printf_i+0x1d2>
 800416e:	2f58      	cmp	r7, #88	; 0x58
 8004170:	f000 80a3 	beq.w	80042ba <_printf_i+0x16e>
 8004174:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004178:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800417c:	e03a      	b.n	80041f4 <_printf_i+0xa8>
 800417e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004182:	2b15      	cmp	r3, #21
 8004184:	d8f6      	bhi.n	8004174 <_printf_i+0x28>
 8004186:	a001      	add	r0, pc, #4	; (adr r0, 800418c <_printf_i+0x40>)
 8004188:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800418c:	080041e5 	.word	0x080041e5
 8004190:	080041f9 	.word	0x080041f9
 8004194:	08004175 	.word	0x08004175
 8004198:	08004175 	.word	0x08004175
 800419c:	08004175 	.word	0x08004175
 80041a0:	08004175 	.word	0x08004175
 80041a4:	080041f9 	.word	0x080041f9
 80041a8:	08004175 	.word	0x08004175
 80041ac:	08004175 	.word	0x08004175
 80041b0:	08004175 	.word	0x08004175
 80041b4:	08004175 	.word	0x08004175
 80041b8:	08004305 	.word	0x08004305
 80041bc:	08004229 	.word	0x08004229
 80041c0:	080042e7 	.word	0x080042e7
 80041c4:	08004175 	.word	0x08004175
 80041c8:	08004175 	.word	0x08004175
 80041cc:	08004327 	.word	0x08004327
 80041d0:	08004175 	.word	0x08004175
 80041d4:	08004229 	.word	0x08004229
 80041d8:	08004175 	.word	0x08004175
 80041dc:	08004175 	.word	0x08004175
 80041e0:	080042ef 	.word	0x080042ef
 80041e4:	680b      	ldr	r3, [r1, #0]
 80041e6:	1d1a      	adds	r2, r3, #4
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	600a      	str	r2, [r1, #0]
 80041ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041f4:	2301      	movs	r3, #1
 80041f6:	e0a3      	b.n	8004340 <_printf_i+0x1f4>
 80041f8:	6825      	ldr	r5, [r4, #0]
 80041fa:	6808      	ldr	r0, [r1, #0]
 80041fc:	062e      	lsls	r6, r5, #24
 80041fe:	f100 0304 	add.w	r3, r0, #4
 8004202:	d50a      	bpl.n	800421a <_printf_i+0xce>
 8004204:	6805      	ldr	r5, [r0, #0]
 8004206:	600b      	str	r3, [r1, #0]
 8004208:	2d00      	cmp	r5, #0
 800420a:	da03      	bge.n	8004214 <_printf_i+0xc8>
 800420c:	232d      	movs	r3, #45	; 0x2d
 800420e:	426d      	negs	r5, r5
 8004210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004214:	485e      	ldr	r0, [pc, #376]	; (8004390 <_printf_i+0x244>)
 8004216:	230a      	movs	r3, #10
 8004218:	e019      	b.n	800424e <_printf_i+0x102>
 800421a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800421e:	6805      	ldr	r5, [r0, #0]
 8004220:	600b      	str	r3, [r1, #0]
 8004222:	bf18      	it	ne
 8004224:	b22d      	sxthne	r5, r5
 8004226:	e7ef      	b.n	8004208 <_printf_i+0xbc>
 8004228:	680b      	ldr	r3, [r1, #0]
 800422a:	6825      	ldr	r5, [r4, #0]
 800422c:	1d18      	adds	r0, r3, #4
 800422e:	6008      	str	r0, [r1, #0]
 8004230:	0628      	lsls	r0, r5, #24
 8004232:	d501      	bpl.n	8004238 <_printf_i+0xec>
 8004234:	681d      	ldr	r5, [r3, #0]
 8004236:	e002      	b.n	800423e <_printf_i+0xf2>
 8004238:	0669      	lsls	r1, r5, #25
 800423a:	d5fb      	bpl.n	8004234 <_printf_i+0xe8>
 800423c:	881d      	ldrh	r5, [r3, #0]
 800423e:	4854      	ldr	r0, [pc, #336]	; (8004390 <_printf_i+0x244>)
 8004240:	2f6f      	cmp	r7, #111	; 0x6f
 8004242:	bf0c      	ite	eq
 8004244:	2308      	moveq	r3, #8
 8004246:	230a      	movne	r3, #10
 8004248:	2100      	movs	r1, #0
 800424a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800424e:	6866      	ldr	r6, [r4, #4]
 8004250:	60a6      	str	r6, [r4, #8]
 8004252:	2e00      	cmp	r6, #0
 8004254:	bfa2      	ittt	ge
 8004256:	6821      	ldrge	r1, [r4, #0]
 8004258:	f021 0104 	bicge.w	r1, r1, #4
 800425c:	6021      	strge	r1, [r4, #0]
 800425e:	b90d      	cbnz	r5, 8004264 <_printf_i+0x118>
 8004260:	2e00      	cmp	r6, #0
 8004262:	d04d      	beq.n	8004300 <_printf_i+0x1b4>
 8004264:	4616      	mov	r6, r2
 8004266:	fbb5 f1f3 	udiv	r1, r5, r3
 800426a:	fb03 5711 	mls	r7, r3, r1, r5
 800426e:	5dc7      	ldrb	r7, [r0, r7]
 8004270:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004274:	462f      	mov	r7, r5
 8004276:	42bb      	cmp	r3, r7
 8004278:	460d      	mov	r5, r1
 800427a:	d9f4      	bls.n	8004266 <_printf_i+0x11a>
 800427c:	2b08      	cmp	r3, #8
 800427e:	d10b      	bne.n	8004298 <_printf_i+0x14c>
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	07df      	lsls	r7, r3, #31
 8004284:	d508      	bpl.n	8004298 <_printf_i+0x14c>
 8004286:	6923      	ldr	r3, [r4, #16]
 8004288:	6861      	ldr	r1, [r4, #4]
 800428a:	4299      	cmp	r1, r3
 800428c:	bfde      	ittt	le
 800428e:	2330      	movle	r3, #48	; 0x30
 8004290:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004294:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004298:	1b92      	subs	r2, r2, r6
 800429a:	6122      	str	r2, [r4, #16]
 800429c:	f8cd a000 	str.w	sl, [sp]
 80042a0:	464b      	mov	r3, r9
 80042a2:	aa03      	add	r2, sp, #12
 80042a4:	4621      	mov	r1, r4
 80042a6:	4640      	mov	r0, r8
 80042a8:	f7ff fee2 	bl	8004070 <_printf_common>
 80042ac:	3001      	adds	r0, #1
 80042ae:	d14c      	bne.n	800434a <_printf_i+0x1fe>
 80042b0:	f04f 30ff 	mov.w	r0, #4294967295
 80042b4:	b004      	add	sp, #16
 80042b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ba:	4835      	ldr	r0, [pc, #212]	; (8004390 <_printf_i+0x244>)
 80042bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	680e      	ldr	r6, [r1, #0]
 80042c4:	061f      	lsls	r7, r3, #24
 80042c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80042ca:	600e      	str	r6, [r1, #0]
 80042cc:	d514      	bpl.n	80042f8 <_printf_i+0x1ac>
 80042ce:	07d9      	lsls	r1, r3, #31
 80042d0:	bf44      	itt	mi
 80042d2:	f043 0320 	orrmi.w	r3, r3, #32
 80042d6:	6023      	strmi	r3, [r4, #0]
 80042d8:	b91d      	cbnz	r5, 80042e2 <_printf_i+0x196>
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	f023 0320 	bic.w	r3, r3, #32
 80042e0:	6023      	str	r3, [r4, #0]
 80042e2:	2310      	movs	r3, #16
 80042e4:	e7b0      	b.n	8004248 <_printf_i+0xfc>
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	f043 0320 	orr.w	r3, r3, #32
 80042ec:	6023      	str	r3, [r4, #0]
 80042ee:	2378      	movs	r3, #120	; 0x78
 80042f0:	4828      	ldr	r0, [pc, #160]	; (8004394 <_printf_i+0x248>)
 80042f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042f6:	e7e3      	b.n	80042c0 <_printf_i+0x174>
 80042f8:	065e      	lsls	r6, r3, #25
 80042fa:	bf48      	it	mi
 80042fc:	b2ad      	uxthmi	r5, r5
 80042fe:	e7e6      	b.n	80042ce <_printf_i+0x182>
 8004300:	4616      	mov	r6, r2
 8004302:	e7bb      	b.n	800427c <_printf_i+0x130>
 8004304:	680b      	ldr	r3, [r1, #0]
 8004306:	6826      	ldr	r6, [r4, #0]
 8004308:	6960      	ldr	r0, [r4, #20]
 800430a:	1d1d      	adds	r5, r3, #4
 800430c:	600d      	str	r5, [r1, #0]
 800430e:	0635      	lsls	r5, r6, #24
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	d501      	bpl.n	8004318 <_printf_i+0x1cc>
 8004314:	6018      	str	r0, [r3, #0]
 8004316:	e002      	b.n	800431e <_printf_i+0x1d2>
 8004318:	0671      	lsls	r1, r6, #25
 800431a:	d5fb      	bpl.n	8004314 <_printf_i+0x1c8>
 800431c:	8018      	strh	r0, [r3, #0]
 800431e:	2300      	movs	r3, #0
 8004320:	6123      	str	r3, [r4, #16]
 8004322:	4616      	mov	r6, r2
 8004324:	e7ba      	b.n	800429c <_printf_i+0x150>
 8004326:	680b      	ldr	r3, [r1, #0]
 8004328:	1d1a      	adds	r2, r3, #4
 800432a:	600a      	str	r2, [r1, #0]
 800432c:	681e      	ldr	r6, [r3, #0]
 800432e:	6862      	ldr	r2, [r4, #4]
 8004330:	2100      	movs	r1, #0
 8004332:	4630      	mov	r0, r6
 8004334:	f7fb ff54 	bl	80001e0 <memchr>
 8004338:	b108      	cbz	r0, 800433e <_printf_i+0x1f2>
 800433a:	1b80      	subs	r0, r0, r6
 800433c:	6060      	str	r0, [r4, #4]
 800433e:	6863      	ldr	r3, [r4, #4]
 8004340:	6123      	str	r3, [r4, #16]
 8004342:	2300      	movs	r3, #0
 8004344:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004348:	e7a8      	b.n	800429c <_printf_i+0x150>
 800434a:	6923      	ldr	r3, [r4, #16]
 800434c:	4632      	mov	r2, r6
 800434e:	4649      	mov	r1, r9
 8004350:	4640      	mov	r0, r8
 8004352:	47d0      	blx	sl
 8004354:	3001      	adds	r0, #1
 8004356:	d0ab      	beq.n	80042b0 <_printf_i+0x164>
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	079b      	lsls	r3, r3, #30
 800435c:	d413      	bmi.n	8004386 <_printf_i+0x23a>
 800435e:	68e0      	ldr	r0, [r4, #12]
 8004360:	9b03      	ldr	r3, [sp, #12]
 8004362:	4298      	cmp	r0, r3
 8004364:	bfb8      	it	lt
 8004366:	4618      	movlt	r0, r3
 8004368:	e7a4      	b.n	80042b4 <_printf_i+0x168>
 800436a:	2301      	movs	r3, #1
 800436c:	4632      	mov	r2, r6
 800436e:	4649      	mov	r1, r9
 8004370:	4640      	mov	r0, r8
 8004372:	47d0      	blx	sl
 8004374:	3001      	adds	r0, #1
 8004376:	d09b      	beq.n	80042b0 <_printf_i+0x164>
 8004378:	3501      	adds	r5, #1
 800437a:	68e3      	ldr	r3, [r4, #12]
 800437c:	9903      	ldr	r1, [sp, #12]
 800437e:	1a5b      	subs	r3, r3, r1
 8004380:	42ab      	cmp	r3, r5
 8004382:	dcf2      	bgt.n	800436a <_printf_i+0x21e>
 8004384:	e7eb      	b.n	800435e <_printf_i+0x212>
 8004386:	2500      	movs	r5, #0
 8004388:	f104 0619 	add.w	r6, r4, #25
 800438c:	e7f5      	b.n	800437a <_printf_i+0x22e>
 800438e:	bf00      	nop
 8004390:	080077fe 	.word	0x080077fe
 8004394:	0800780f 	.word	0x0800780f

08004398 <siprintf>:
 8004398:	b40e      	push	{r1, r2, r3}
 800439a:	b500      	push	{lr}
 800439c:	b09c      	sub	sp, #112	; 0x70
 800439e:	ab1d      	add	r3, sp, #116	; 0x74
 80043a0:	9002      	str	r0, [sp, #8]
 80043a2:	9006      	str	r0, [sp, #24]
 80043a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043a8:	4809      	ldr	r0, [pc, #36]	; (80043d0 <siprintf+0x38>)
 80043aa:	9107      	str	r1, [sp, #28]
 80043ac:	9104      	str	r1, [sp, #16]
 80043ae:	4909      	ldr	r1, [pc, #36]	; (80043d4 <siprintf+0x3c>)
 80043b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80043b4:	9105      	str	r1, [sp, #20]
 80043b6:	6800      	ldr	r0, [r0, #0]
 80043b8:	9301      	str	r3, [sp, #4]
 80043ba:	a902      	add	r1, sp, #8
 80043bc:	f001 fb3a 	bl	8005a34 <_svfiprintf_r>
 80043c0:	9b02      	ldr	r3, [sp, #8]
 80043c2:	2200      	movs	r2, #0
 80043c4:	701a      	strb	r2, [r3, #0]
 80043c6:	b01c      	add	sp, #112	; 0x70
 80043c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80043cc:	b003      	add	sp, #12
 80043ce:	4770      	bx	lr
 80043d0:	20000008 	.word	0x20000008
 80043d4:	ffff0208 	.word	0xffff0208

080043d8 <strcpy>:
 80043d8:	4603      	mov	r3, r0
 80043da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043de:	f803 2b01 	strb.w	r2, [r3], #1
 80043e2:	2a00      	cmp	r2, #0
 80043e4:	d1f9      	bne.n	80043da <strcpy+0x2>
 80043e6:	4770      	bx	lr

080043e8 <quorem>:
 80043e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ec:	6903      	ldr	r3, [r0, #16]
 80043ee:	690c      	ldr	r4, [r1, #16]
 80043f0:	42a3      	cmp	r3, r4
 80043f2:	4607      	mov	r7, r0
 80043f4:	f2c0 8081 	blt.w	80044fa <quorem+0x112>
 80043f8:	3c01      	subs	r4, #1
 80043fa:	f101 0814 	add.w	r8, r1, #20
 80043fe:	f100 0514 	add.w	r5, r0, #20
 8004402:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004406:	9301      	str	r3, [sp, #4]
 8004408:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800440c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004410:	3301      	adds	r3, #1
 8004412:	429a      	cmp	r2, r3
 8004414:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004418:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800441c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004420:	d331      	bcc.n	8004486 <quorem+0x9e>
 8004422:	f04f 0e00 	mov.w	lr, #0
 8004426:	4640      	mov	r0, r8
 8004428:	46ac      	mov	ip, r5
 800442a:	46f2      	mov	sl, lr
 800442c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004430:	b293      	uxth	r3, r2
 8004432:	fb06 e303 	mla	r3, r6, r3, lr
 8004436:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800443a:	b29b      	uxth	r3, r3
 800443c:	ebaa 0303 	sub.w	r3, sl, r3
 8004440:	0c12      	lsrs	r2, r2, #16
 8004442:	f8dc a000 	ldr.w	sl, [ip]
 8004446:	fb06 e202 	mla	r2, r6, r2, lr
 800444a:	fa13 f38a 	uxtah	r3, r3, sl
 800444e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004452:	fa1f fa82 	uxth.w	sl, r2
 8004456:	f8dc 2000 	ldr.w	r2, [ip]
 800445a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800445e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004462:	b29b      	uxth	r3, r3
 8004464:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004468:	4581      	cmp	r9, r0
 800446a:	f84c 3b04 	str.w	r3, [ip], #4
 800446e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004472:	d2db      	bcs.n	800442c <quorem+0x44>
 8004474:	f855 300b 	ldr.w	r3, [r5, fp]
 8004478:	b92b      	cbnz	r3, 8004486 <quorem+0x9e>
 800447a:	9b01      	ldr	r3, [sp, #4]
 800447c:	3b04      	subs	r3, #4
 800447e:	429d      	cmp	r5, r3
 8004480:	461a      	mov	r2, r3
 8004482:	d32e      	bcc.n	80044e2 <quorem+0xfa>
 8004484:	613c      	str	r4, [r7, #16]
 8004486:	4638      	mov	r0, r7
 8004488:	f001 f8be 	bl	8005608 <__mcmp>
 800448c:	2800      	cmp	r0, #0
 800448e:	db24      	blt.n	80044da <quorem+0xf2>
 8004490:	3601      	adds	r6, #1
 8004492:	4628      	mov	r0, r5
 8004494:	f04f 0c00 	mov.w	ip, #0
 8004498:	f858 2b04 	ldr.w	r2, [r8], #4
 800449c:	f8d0 e000 	ldr.w	lr, [r0]
 80044a0:	b293      	uxth	r3, r2
 80044a2:	ebac 0303 	sub.w	r3, ip, r3
 80044a6:	0c12      	lsrs	r2, r2, #16
 80044a8:	fa13 f38e 	uxtah	r3, r3, lr
 80044ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80044b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80044ba:	45c1      	cmp	r9, r8
 80044bc:	f840 3b04 	str.w	r3, [r0], #4
 80044c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80044c4:	d2e8      	bcs.n	8004498 <quorem+0xb0>
 80044c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80044ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80044ce:	b922      	cbnz	r2, 80044da <quorem+0xf2>
 80044d0:	3b04      	subs	r3, #4
 80044d2:	429d      	cmp	r5, r3
 80044d4:	461a      	mov	r2, r3
 80044d6:	d30a      	bcc.n	80044ee <quorem+0x106>
 80044d8:	613c      	str	r4, [r7, #16]
 80044da:	4630      	mov	r0, r6
 80044dc:	b003      	add	sp, #12
 80044de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044e2:	6812      	ldr	r2, [r2, #0]
 80044e4:	3b04      	subs	r3, #4
 80044e6:	2a00      	cmp	r2, #0
 80044e8:	d1cc      	bne.n	8004484 <quorem+0x9c>
 80044ea:	3c01      	subs	r4, #1
 80044ec:	e7c7      	b.n	800447e <quorem+0x96>
 80044ee:	6812      	ldr	r2, [r2, #0]
 80044f0:	3b04      	subs	r3, #4
 80044f2:	2a00      	cmp	r2, #0
 80044f4:	d1f0      	bne.n	80044d8 <quorem+0xf0>
 80044f6:	3c01      	subs	r4, #1
 80044f8:	e7eb      	b.n	80044d2 <quorem+0xea>
 80044fa:	2000      	movs	r0, #0
 80044fc:	e7ee      	b.n	80044dc <quorem+0xf4>
	...

08004500 <_dtoa_r>:
 8004500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004504:	ed2d 8b02 	vpush	{d8}
 8004508:	ec57 6b10 	vmov	r6, r7, d0
 800450c:	b095      	sub	sp, #84	; 0x54
 800450e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004510:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004514:	9105      	str	r1, [sp, #20]
 8004516:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800451a:	4604      	mov	r4, r0
 800451c:	9209      	str	r2, [sp, #36]	; 0x24
 800451e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004520:	b975      	cbnz	r5, 8004540 <_dtoa_r+0x40>
 8004522:	2010      	movs	r0, #16
 8004524:	f000 fddc 	bl	80050e0 <malloc>
 8004528:	4602      	mov	r2, r0
 800452a:	6260      	str	r0, [r4, #36]	; 0x24
 800452c:	b920      	cbnz	r0, 8004538 <_dtoa_r+0x38>
 800452e:	4bb2      	ldr	r3, [pc, #712]	; (80047f8 <_dtoa_r+0x2f8>)
 8004530:	21ea      	movs	r1, #234	; 0xea
 8004532:	48b2      	ldr	r0, [pc, #712]	; (80047fc <_dtoa_r+0x2fc>)
 8004534:	f001 fb8e 	bl	8005c54 <__assert_func>
 8004538:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800453c:	6005      	str	r5, [r0, #0]
 800453e:	60c5      	str	r5, [r0, #12]
 8004540:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004542:	6819      	ldr	r1, [r3, #0]
 8004544:	b151      	cbz	r1, 800455c <_dtoa_r+0x5c>
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	604a      	str	r2, [r1, #4]
 800454a:	2301      	movs	r3, #1
 800454c:	4093      	lsls	r3, r2
 800454e:	608b      	str	r3, [r1, #8]
 8004550:	4620      	mov	r0, r4
 8004552:	f000 fe1b 	bl	800518c <_Bfree>
 8004556:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	1e3b      	subs	r3, r7, #0
 800455e:	bfb9      	ittee	lt
 8004560:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004564:	9303      	strlt	r3, [sp, #12]
 8004566:	2300      	movge	r3, #0
 8004568:	f8c8 3000 	strge.w	r3, [r8]
 800456c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004570:	4ba3      	ldr	r3, [pc, #652]	; (8004800 <_dtoa_r+0x300>)
 8004572:	bfbc      	itt	lt
 8004574:	2201      	movlt	r2, #1
 8004576:	f8c8 2000 	strlt.w	r2, [r8]
 800457a:	ea33 0309 	bics.w	r3, r3, r9
 800457e:	d11b      	bne.n	80045b8 <_dtoa_r+0xb8>
 8004580:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004582:	f242 730f 	movw	r3, #9999	; 0x270f
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800458c:	4333      	orrs	r3, r6
 800458e:	f000 857a 	beq.w	8005086 <_dtoa_r+0xb86>
 8004592:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004594:	b963      	cbnz	r3, 80045b0 <_dtoa_r+0xb0>
 8004596:	4b9b      	ldr	r3, [pc, #620]	; (8004804 <_dtoa_r+0x304>)
 8004598:	e024      	b.n	80045e4 <_dtoa_r+0xe4>
 800459a:	4b9b      	ldr	r3, [pc, #620]	; (8004808 <_dtoa_r+0x308>)
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	3308      	adds	r3, #8
 80045a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	9800      	ldr	r0, [sp, #0]
 80045a6:	b015      	add	sp, #84	; 0x54
 80045a8:	ecbd 8b02 	vpop	{d8}
 80045ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045b0:	4b94      	ldr	r3, [pc, #592]	; (8004804 <_dtoa_r+0x304>)
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	3303      	adds	r3, #3
 80045b6:	e7f3      	b.n	80045a0 <_dtoa_r+0xa0>
 80045b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80045bc:	2200      	movs	r2, #0
 80045be:	ec51 0b17 	vmov	r0, r1, d7
 80045c2:	2300      	movs	r3, #0
 80045c4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80045c8:	f7fc fa7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80045cc:	4680      	mov	r8, r0
 80045ce:	b158      	cbz	r0, 80045e8 <_dtoa_r+0xe8>
 80045d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80045d2:	2301      	movs	r3, #1
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 8551 	beq.w	8005080 <_dtoa_r+0xb80>
 80045de:	488b      	ldr	r0, [pc, #556]	; (800480c <_dtoa_r+0x30c>)
 80045e0:	6018      	str	r0, [r3, #0]
 80045e2:	1e43      	subs	r3, r0, #1
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	e7dd      	b.n	80045a4 <_dtoa_r+0xa4>
 80045e8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80045ec:	aa12      	add	r2, sp, #72	; 0x48
 80045ee:	a913      	add	r1, sp, #76	; 0x4c
 80045f0:	4620      	mov	r0, r4
 80045f2:	f001 f8ad 	bl	8005750 <__d2b>
 80045f6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80045fa:	4683      	mov	fp, r0
 80045fc:	2d00      	cmp	r5, #0
 80045fe:	d07c      	beq.n	80046fa <_dtoa_r+0x1fa>
 8004600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004602:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004606:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800460a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800460e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004612:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004616:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800461a:	4b7d      	ldr	r3, [pc, #500]	; (8004810 <_dtoa_r+0x310>)
 800461c:	2200      	movs	r2, #0
 800461e:	4630      	mov	r0, r6
 8004620:	4639      	mov	r1, r7
 8004622:	f7fb fe31 	bl	8000288 <__aeabi_dsub>
 8004626:	a36e      	add	r3, pc, #440	; (adr r3, 80047e0 <_dtoa_r+0x2e0>)
 8004628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462c:	f7fb ffe4 	bl	80005f8 <__aeabi_dmul>
 8004630:	a36d      	add	r3, pc, #436	; (adr r3, 80047e8 <_dtoa_r+0x2e8>)
 8004632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004636:	f7fb fe29 	bl	800028c <__adddf3>
 800463a:	4606      	mov	r6, r0
 800463c:	4628      	mov	r0, r5
 800463e:	460f      	mov	r7, r1
 8004640:	f7fb ff70 	bl	8000524 <__aeabi_i2d>
 8004644:	a36a      	add	r3, pc, #424	; (adr r3, 80047f0 <_dtoa_r+0x2f0>)
 8004646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464a:	f7fb ffd5 	bl	80005f8 <__aeabi_dmul>
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	4630      	mov	r0, r6
 8004654:	4639      	mov	r1, r7
 8004656:	f7fb fe19 	bl	800028c <__adddf3>
 800465a:	4606      	mov	r6, r0
 800465c:	460f      	mov	r7, r1
 800465e:	f7fc fa7b 	bl	8000b58 <__aeabi_d2iz>
 8004662:	2200      	movs	r2, #0
 8004664:	4682      	mov	sl, r0
 8004666:	2300      	movs	r3, #0
 8004668:	4630      	mov	r0, r6
 800466a:	4639      	mov	r1, r7
 800466c:	f7fc fa36 	bl	8000adc <__aeabi_dcmplt>
 8004670:	b148      	cbz	r0, 8004686 <_dtoa_r+0x186>
 8004672:	4650      	mov	r0, sl
 8004674:	f7fb ff56 	bl	8000524 <__aeabi_i2d>
 8004678:	4632      	mov	r2, r6
 800467a:	463b      	mov	r3, r7
 800467c:	f7fc fa24 	bl	8000ac8 <__aeabi_dcmpeq>
 8004680:	b908      	cbnz	r0, 8004686 <_dtoa_r+0x186>
 8004682:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004686:	f1ba 0f16 	cmp.w	sl, #22
 800468a:	d854      	bhi.n	8004736 <_dtoa_r+0x236>
 800468c:	4b61      	ldr	r3, [pc, #388]	; (8004814 <_dtoa_r+0x314>)
 800468e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004696:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800469a:	f7fc fa1f 	bl	8000adc <__aeabi_dcmplt>
 800469e:	2800      	cmp	r0, #0
 80046a0:	d04b      	beq.n	800473a <_dtoa_r+0x23a>
 80046a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80046a6:	2300      	movs	r3, #0
 80046a8:	930e      	str	r3, [sp, #56]	; 0x38
 80046aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80046ac:	1b5d      	subs	r5, r3, r5
 80046ae:	1e6b      	subs	r3, r5, #1
 80046b0:	9304      	str	r3, [sp, #16]
 80046b2:	bf43      	ittte	mi
 80046b4:	2300      	movmi	r3, #0
 80046b6:	f1c5 0801 	rsbmi	r8, r5, #1
 80046ba:	9304      	strmi	r3, [sp, #16]
 80046bc:	f04f 0800 	movpl.w	r8, #0
 80046c0:	f1ba 0f00 	cmp.w	sl, #0
 80046c4:	db3b      	blt.n	800473e <_dtoa_r+0x23e>
 80046c6:	9b04      	ldr	r3, [sp, #16]
 80046c8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80046cc:	4453      	add	r3, sl
 80046ce:	9304      	str	r3, [sp, #16]
 80046d0:	2300      	movs	r3, #0
 80046d2:	9306      	str	r3, [sp, #24]
 80046d4:	9b05      	ldr	r3, [sp, #20]
 80046d6:	2b09      	cmp	r3, #9
 80046d8:	d869      	bhi.n	80047ae <_dtoa_r+0x2ae>
 80046da:	2b05      	cmp	r3, #5
 80046dc:	bfc4      	itt	gt
 80046de:	3b04      	subgt	r3, #4
 80046e0:	9305      	strgt	r3, [sp, #20]
 80046e2:	9b05      	ldr	r3, [sp, #20]
 80046e4:	f1a3 0302 	sub.w	r3, r3, #2
 80046e8:	bfcc      	ite	gt
 80046ea:	2500      	movgt	r5, #0
 80046ec:	2501      	movle	r5, #1
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d869      	bhi.n	80047c6 <_dtoa_r+0x2c6>
 80046f2:	e8df f003 	tbb	[pc, r3]
 80046f6:	4e2c      	.short	0x4e2c
 80046f8:	5a4c      	.short	0x5a4c
 80046fa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80046fe:	441d      	add	r5, r3
 8004700:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004704:	2b20      	cmp	r3, #32
 8004706:	bfc1      	itttt	gt
 8004708:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800470c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004710:	fa09 f303 	lslgt.w	r3, r9, r3
 8004714:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004718:	bfda      	itte	le
 800471a:	f1c3 0320 	rsble	r3, r3, #32
 800471e:	fa06 f003 	lslle.w	r0, r6, r3
 8004722:	4318      	orrgt	r0, r3
 8004724:	f7fb feee 	bl	8000504 <__aeabi_ui2d>
 8004728:	2301      	movs	r3, #1
 800472a:	4606      	mov	r6, r0
 800472c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004730:	3d01      	subs	r5, #1
 8004732:	9310      	str	r3, [sp, #64]	; 0x40
 8004734:	e771      	b.n	800461a <_dtoa_r+0x11a>
 8004736:	2301      	movs	r3, #1
 8004738:	e7b6      	b.n	80046a8 <_dtoa_r+0x1a8>
 800473a:	900e      	str	r0, [sp, #56]	; 0x38
 800473c:	e7b5      	b.n	80046aa <_dtoa_r+0x1aa>
 800473e:	f1ca 0300 	rsb	r3, sl, #0
 8004742:	9306      	str	r3, [sp, #24]
 8004744:	2300      	movs	r3, #0
 8004746:	eba8 080a 	sub.w	r8, r8, sl
 800474a:	930d      	str	r3, [sp, #52]	; 0x34
 800474c:	e7c2      	b.n	80046d4 <_dtoa_r+0x1d4>
 800474e:	2300      	movs	r3, #0
 8004750:	9308      	str	r3, [sp, #32]
 8004752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004754:	2b00      	cmp	r3, #0
 8004756:	dc39      	bgt.n	80047cc <_dtoa_r+0x2cc>
 8004758:	f04f 0901 	mov.w	r9, #1
 800475c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004760:	464b      	mov	r3, r9
 8004762:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004766:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004768:	2200      	movs	r2, #0
 800476a:	6042      	str	r2, [r0, #4]
 800476c:	2204      	movs	r2, #4
 800476e:	f102 0614 	add.w	r6, r2, #20
 8004772:	429e      	cmp	r6, r3
 8004774:	6841      	ldr	r1, [r0, #4]
 8004776:	d92f      	bls.n	80047d8 <_dtoa_r+0x2d8>
 8004778:	4620      	mov	r0, r4
 800477a:	f000 fcc7 	bl	800510c <_Balloc>
 800477e:	9000      	str	r0, [sp, #0]
 8004780:	2800      	cmp	r0, #0
 8004782:	d14b      	bne.n	800481c <_dtoa_r+0x31c>
 8004784:	4b24      	ldr	r3, [pc, #144]	; (8004818 <_dtoa_r+0x318>)
 8004786:	4602      	mov	r2, r0
 8004788:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800478c:	e6d1      	b.n	8004532 <_dtoa_r+0x32>
 800478e:	2301      	movs	r3, #1
 8004790:	e7de      	b.n	8004750 <_dtoa_r+0x250>
 8004792:	2300      	movs	r3, #0
 8004794:	9308      	str	r3, [sp, #32]
 8004796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004798:	eb0a 0903 	add.w	r9, sl, r3
 800479c:	f109 0301 	add.w	r3, r9, #1
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	9301      	str	r3, [sp, #4]
 80047a4:	bfb8      	it	lt
 80047a6:	2301      	movlt	r3, #1
 80047a8:	e7dd      	b.n	8004766 <_dtoa_r+0x266>
 80047aa:	2301      	movs	r3, #1
 80047ac:	e7f2      	b.n	8004794 <_dtoa_r+0x294>
 80047ae:	2501      	movs	r5, #1
 80047b0:	2300      	movs	r3, #0
 80047b2:	9305      	str	r3, [sp, #20]
 80047b4:	9508      	str	r5, [sp, #32]
 80047b6:	f04f 39ff 	mov.w	r9, #4294967295
 80047ba:	2200      	movs	r2, #0
 80047bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80047c0:	2312      	movs	r3, #18
 80047c2:	9209      	str	r2, [sp, #36]	; 0x24
 80047c4:	e7cf      	b.n	8004766 <_dtoa_r+0x266>
 80047c6:	2301      	movs	r3, #1
 80047c8:	9308      	str	r3, [sp, #32]
 80047ca:	e7f4      	b.n	80047b6 <_dtoa_r+0x2b6>
 80047cc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80047d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80047d4:	464b      	mov	r3, r9
 80047d6:	e7c6      	b.n	8004766 <_dtoa_r+0x266>
 80047d8:	3101      	adds	r1, #1
 80047da:	6041      	str	r1, [r0, #4]
 80047dc:	0052      	lsls	r2, r2, #1
 80047de:	e7c6      	b.n	800476e <_dtoa_r+0x26e>
 80047e0:	636f4361 	.word	0x636f4361
 80047e4:	3fd287a7 	.word	0x3fd287a7
 80047e8:	8b60c8b3 	.word	0x8b60c8b3
 80047ec:	3fc68a28 	.word	0x3fc68a28
 80047f0:	509f79fb 	.word	0x509f79fb
 80047f4:	3fd34413 	.word	0x3fd34413
 80047f8:	0800782d 	.word	0x0800782d
 80047fc:	08007844 	.word	0x08007844
 8004800:	7ff00000 	.word	0x7ff00000
 8004804:	08007829 	.word	0x08007829
 8004808:	08007820 	.word	0x08007820
 800480c:	080077fd 	.word	0x080077fd
 8004810:	3ff80000 	.word	0x3ff80000
 8004814:	08007940 	.word	0x08007940
 8004818:	080078a3 	.word	0x080078a3
 800481c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800481e:	9a00      	ldr	r2, [sp, #0]
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	9b01      	ldr	r3, [sp, #4]
 8004824:	2b0e      	cmp	r3, #14
 8004826:	f200 80ad 	bhi.w	8004984 <_dtoa_r+0x484>
 800482a:	2d00      	cmp	r5, #0
 800482c:	f000 80aa 	beq.w	8004984 <_dtoa_r+0x484>
 8004830:	f1ba 0f00 	cmp.w	sl, #0
 8004834:	dd36      	ble.n	80048a4 <_dtoa_r+0x3a4>
 8004836:	4ac3      	ldr	r2, [pc, #780]	; (8004b44 <_dtoa_r+0x644>)
 8004838:	f00a 030f 	and.w	r3, sl, #15
 800483c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004840:	ed93 7b00 	vldr	d7, [r3]
 8004844:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004848:	ea4f 172a 	mov.w	r7, sl, asr #4
 800484c:	eeb0 8a47 	vmov.f32	s16, s14
 8004850:	eef0 8a67 	vmov.f32	s17, s15
 8004854:	d016      	beq.n	8004884 <_dtoa_r+0x384>
 8004856:	4bbc      	ldr	r3, [pc, #752]	; (8004b48 <_dtoa_r+0x648>)
 8004858:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800485c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004860:	f7fb fff4 	bl	800084c <__aeabi_ddiv>
 8004864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004868:	f007 070f 	and.w	r7, r7, #15
 800486c:	2503      	movs	r5, #3
 800486e:	4eb6      	ldr	r6, [pc, #728]	; (8004b48 <_dtoa_r+0x648>)
 8004870:	b957      	cbnz	r7, 8004888 <_dtoa_r+0x388>
 8004872:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004876:	ec53 2b18 	vmov	r2, r3, d8
 800487a:	f7fb ffe7 	bl	800084c <__aeabi_ddiv>
 800487e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004882:	e029      	b.n	80048d8 <_dtoa_r+0x3d8>
 8004884:	2502      	movs	r5, #2
 8004886:	e7f2      	b.n	800486e <_dtoa_r+0x36e>
 8004888:	07f9      	lsls	r1, r7, #31
 800488a:	d508      	bpl.n	800489e <_dtoa_r+0x39e>
 800488c:	ec51 0b18 	vmov	r0, r1, d8
 8004890:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004894:	f7fb feb0 	bl	80005f8 <__aeabi_dmul>
 8004898:	ec41 0b18 	vmov	d8, r0, r1
 800489c:	3501      	adds	r5, #1
 800489e:	107f      	asrs	r7, r7, #1
 80048a0:	3608      	adds	r6, #8
 80048a2:	e7e5      	b.n	8004870 <_dtoa_r+0x370>
 80048a4:	f000 80a6 	beq.w	80049f4 <_dtoa_r+0x4f4>
 80048a8:	f1ca 0600 	rsb	r6, sl, #0
 80048ac:	4ba5      	ldr	r3, [pc, #660]	; (8004b44 <_dtoa_r+0x644>)
 80048ae:	4fa6      	ldr	r7, [pc, #664]	; (8004b48 <_dtoa_r+0x648>)
 80048b0:	f006 020f 	and.w	r2, r6, #15
 80048b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80048c0:	f7fb fe9a 	bl	80005f8 <__aeabi_dmul>
 80048c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048c8:	1136      	asrs	r6, r6, #4
 80048ca:	2300      	movs	r3, #0
 80048cc:	2502      	movs	r5, #2
 80048ce:	2e00      	cmp	r6, #0
 80048d0:	f040 8085 	bne.w	80049de <_dtoa_r+0x4de>
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1d2      	bne.n	800487e <_dtoa_r+0x37e>
 80048d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 808c 	beq.w	80049f8 <_dtoa_r+0x4f8>
 80048e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80048e4:	4b99      	ldr	r3, [pc, #612]	; (8004b4c <_dtoa_r+0x64c>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	4630      	mov	r0, r6
 80048ea:	4639      	mov	r1, r7
 80048ec:	f7fc f8f6 	bl	8000adc <__aeabi_dcmplt>
 80048f0:	2800      	cmp	r0, #0
 80048f2:	f000 8081 	beq.w	80049f8 <_dtoa_r+0x4f8>
 80048f6:	9b01      	ldr	r3, [sp, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d07d      	beq.n	80049f8 <_dtoa_r+0x4f8>
 80048fc:	f1b9 0f00 	cmp.w	r9, #0
 8004900:	dd3c      	ble.n	800497c <_dtoa_r+0x47c>
 8004902:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004906:	9307      	str	r3, [sp, #28]
 8004908:	2200      	movs	r2, #0
 800490a:	4b91      	ldr	r3, [pc, #580]	; (8004b50 <_dtoa_r+0x650>)
 800490c:	4630      	mov	r0, r6
 800490e:	4639      	mov	r1, r7
 8004910:	f7fb fe72 	bl	80005f8 <__aeabi_dmul>
 8004914:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004918:	3501      	adds	r5, #1
 800491a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800491e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004922:	4628      	mov	r0, r5
 8004924:	f7fb fdfe 	bl	8000524 <__aeabi_i2d>
 8004928:	4632      	mov	r2, r6
 800492a:	463b      	mov	r3, r7
 800492c:	f7fb fe64 	bl	80005f8 <__aeabi_dmul>
 8004930:	4b88      	ldr	r3, [pc, #544]	; (8004b54 <_dtoa_r+0x654>)
 8004932:	2200      	movs	r2, #0
 8004934:	f7fb fcaa 	bl	800028c <__adddf3>
 8004938:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800493c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004940:	9303      	str	r3, [sp, #12]
 8004942:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004944:	2b00      	cmp	r3, #0
 8004946:	d15c      	bne.n	8004a02 <_dtoa_r+0x502>
 8004948:	4b83      	ldr	r3, [pc, #524]	; (8004b58 <_dtoa_r+0x658>)
 800494a:	2200      	movs	r2, #0
 800494c:	4630      	mov	r0, r6
 800494e:	4639      	mov	r1, r7
 8004950:	f7fb fc9a 	bl	8000288 <__aeabi_dsub>
 8004954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004958:	4606      	mov	r6, r0
 800495a:	460f      	mov	r7, r1
 800495c:	f7fc f8dc 	bl	8000b18 <__aeabi_dcmpgt>
 8004960:	2800      	cmp	r0, #0
 8004962:	f040 8296 	bne.w	8004e92 <_dtoa_r+0x992>
 8004966:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800496a:	4630      	mov	r0, r6
 800496c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004970:	4639      	mov	r1, r7
 8004972:	f7fc f8b3 	bl	8000adc <__aeabi_dcmplt>
 8004976:	2800      	cmp	r0, #0
 8004978:	f040 8288 	bne.w	8004e8c <_dtoa_r+0x98c>
 800497c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004980:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004984:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004986:	2b00      	cmp	r3, #0
 8004988:	f2c0 8158 	blt.w	8004c3c <_dtoa_r+0x73c>
 800498c:	f1ba 0f0e 	cmp.w	sl, #14
 8004990:	f300 8154 	bgt.w	8004c3c <_dtoa_r+0x73c>
 8004994:	4b6b      	ldr	r3, [pc, #428]	; (8004b44 <_dtoa_r+0x644>)
 8004996:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800499a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800499e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f280 80e3 	bge.w	8004b6c <_dtoa_r+0x66c>
 80049a6:	9b01      	ldr	r3, [sp, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f300 80df 	bgt.w	8004b6c <_dtoa_r+0x66c>
 80049ae:	f040 826d 	bne.w	8004e8c <_dtoa_r+0x98c>
 80049b2:	4b69      	ldr	r3, [pc, #420]	; (8004b58 <_dtoa_r+0x658>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	4640      	mov	r0, r8
 80049b8:	4649      	mov	r1, r9
 80049ba:	f7fb fe1d 	bl	80005f8 <__aeabi_dmul>
 80049be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049c2:	f7fc f89f 	bl	8000b04 <__aeabi_dcmpge>
 80049c6:	9e01      	ldr	r6, [sp, #4]
 80049c8:	4637      	mov	r7, r6
 80049ca:	2800      	cmp	r0, #0
 80049cc:	f040 8243 	bne.w	8004e56 <_dtoa_r+0x956>
 80049d0:	9d00      	ldr	r5, [sp, #0]
 80049d2:	2331      	movs	r3, #49	; 0x31
 80049d4:	f805 3b01 	strb.w	r3, [r5], #1
 80049d8:	f10a 0a01 	add.w	sl, sl, #1
 80049dc:	e23f      	b.n	8004e5e <_dtoa_r+0x95e>
 80049de:	07f2      	lsls	r2, r6, #31
 80049e0:	d505      	bpl.n	80049ee <_dtoa_r+0x4ee>
 80049e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049e6:	f7fb fe07 	bl	80005f8 <__aeabi_dmul>
 80049ea:	3501      	adds	r5, #1
 80049ec:	2301      	movs	r3, #1
 80049ee:	1076      	asrs	r6, r6, #1
 80049f0:	3708      	adds	r7, #8
 80049f2:	e76c      	b.n	80048ce <_dtoa_r+0x3ce>
 80049f4:	2502      	movs	r5, #2
 80049f6:	e76f      	b.n	80048d8 <_dtoa_r+0x3d8>
 80049f8:	9b01      	ldr	r3, [sp, #4]
 80049fa:	f8cd a01c 	str.w	sl, [sp, #28]
 80049fe:	930c      	str	r3, [sp, #48]	; 0x30
 8004a00:	e78d      	b.n	800491e <_dtoa_r+0x41e>
 8004a02:	9900      	ldr	r1, [sp, #0]
 8004a04:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004a06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a08:	4b4e      	ldr	r3, [pc, #312]	; (8004b44 <_dtoa_r+0x644>)
 8004a0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004a0e:	4401      	add	r1, r0
 8004a10:	9102      	str	r1, [sp, #8]
 8004a12:	9908      	ldr	r1, [sp, #32]
 8004a14:	eeb0 8a47 	vmov.f32	s16, s14
 8004a18:	eef0 8a67 	vmov.f32	s17, s15
 8004a1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004a24:	2900      	cmp	r1, #0
 8004a26:	d045      	beq.n	8004ab4 <_dtoa_r+0x5b4>
 8004a28:	494c      	ldr	r1, [pc, #304]	; (8004b5c <_dtoa_r+0x65c>)
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	f7fb ff0e 	bl	800084c <__aeabi_ddiv>
 8004a30:	ec53 2b18 	vmov	r2, r3, d8
 8004a34:	f7fb fc28 	bl	8000288 <__aeabi_dsub>
 8004a38:	9d00      	ldr	r5, [sp, #0]
 8004a3a:	ec41 0b18 	vmov	d8, r0, r1
 8004a3e:	4639      	mov	r1, r7
 8004a40:	4630      	mov	r0, r6
 8004a42:	f7fc f889 	bl	8000b58 <__aeabi_d2iz>
 8004a46:	900c      	str	r0, [sp, #48]	; 0x30
 8004a48:	f7fb fd6c 	bl	8000524 <__aeabi_i2d>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4630      	mov	r0, r6
 8004a52:	4639      	mov	r1, r7
 8004a54:	f7fb fc18 	bl	8000288 <__aeabi_dsub>
 8004a58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a5a:	3330      	adds	r3, #48	; 0x30
 8004a5c:	f805 3b01 	strb.w	r3, [r5], #1
 8004a60:	ec53 2b18 	vmov	r2, r3, d8
 8004a64:	4606      	mov	r6, r0
 8004a66:	460f      	mov	r7, r1
 8004a68:	f7fc f838 	bl	8000adc <__aeabi_dcmplt>
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	d165      	bne.n	8004b3c <_dtoa_r+0x63c>
 8004a70:	4632      	mov	r2, r6
 8004a72:	463b      	mov	r3, r7
 8004a74:	4935      	ldr	r1, [pc, #212]	; (8004b4c <_dtoa_r+0x64c>)
 8004a76:	2000      	movs	r0, #0
 8004a78:	f7fb fc06 	bl	8000288 <__aeabi_dsub>
 8004a7c:	ec53 2b18 	vmov	r2, r3, d8
 8004a80:	f7fc f82c 	bl	8000adc <__aeabi_dcmplt>
 8004a84:	2800      	cmp	r0, #0
 8004a86:	f040 80b9 	bne.w	8004bfc <_dtoa_r+0x6fc>
 8004a8a:	9b02      	ldr	r3, [sp, #8]
 8004a8c:	429d      	cmp	r5, r3
 8004a8e:	f43f af75 	beq.w	800497c <_dtoa_r+0x47c>
 8004a92:	4b2f      	ldr	r3, [pc, #188]	; (8004b50 <_dtoa_r+0x650>)
 8004a94:	ec51 0b18 	vmov	r0, r1, d8
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f7fb fdad 	bl	80005f8 <__aeabi_dmul>
 8004a9e:	4b2c      	ldr	r3, [pc, #176]	; (8004b50 <_dtoa_r+0x650>)
 8004aa0:	ec41 0b18 	vmov	d8, r0, r1
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	4630      	mov	r0, r6
 8004aa8:	4639      	mov	r1, r7
 8004aaa:	f7fb fda5 	bl	80005f8 <__aeabi_dmul>
 8004aae:	4606      	mov	r6, r0
 8004ab0:	460f      	mov	r7, r1
 8004ab2:	e7c4      	b.n	8004a3e <_dtoa_r+0x53e>
 8004ab4:	ec51 0b17 	vmov	r0, r1, d7
 8004ab8:	f7fb fd9e 	bl	80005f8 <__aeabi_dmul>
 8004abc:	9b02      	ldr	r3, [sp, #8]
 8004abe:	9d00      	ldr	r5, [sp, #0]
 8004ac0:	930c      	str	r3, [sp, #48]	; 0x30
 8004ac2:	ec41 0b18 	vmov	d8, r0, r1
 8004ac6:	4639      	mov	r1, r7
 8004ac8:	4630      	mov	r0, r6
 8004aca:	f7fc f845 	bl	8000b58 <__aeabi_d2iz>
 8004ace:	9011      	str	r0, [sp, #68]	; 0x44
 8004ad0:	f7fb fd28 	bl	8000524 <__aeabi_i2d>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4630      	mov	r0, r6
 8004ada:	4639      	mov	r1, r7
 8004adc:	f7fb fbd4 	bl	8000288 <__aeabi_dsub>
 8004ae0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ae2:	3330      	adds	r3, #48	; 0x30
 8004ae4:	f805 3b01 	strb.w	r3, [r5], #1
 8004ae8:	9b02      	ldr	r3, [sp, #8]
 8004aea:	429d      	cmp	r5, r3
 8004aec:	4606      	mov	r6, r0
 8004aee:	460f      	mov	r7, r1
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	d134      	bne.n	8004b60 <_dtoa_r+0x660>
 8004af6:	4b19      	ldr	r3, [pc, #100]	; (8004b5c <_dtoa_r+0x65c>)
 8004af8:	ec51 0b18 	vmov	r0, r1, d8
 8004afc:	f7fb fbc6 	bl	800028c <__adddf3>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4630      	mov	r0, r6
 8004b06:	4639      	mov	r1, r7
 8004b08:	f7fc f806 	bl	8000b18 <__aeabi_dcmpgt>
 8004b0c:	2800      	cmp	r0, #0
 8004b0e:	d175      	bne.n	8004bfc <_dtoa_r+0x6fc>
 8004b10:	ec53 2b18 	vmov	r2, r3, d8
 8004b14:	4911      	ldr	r1, [pc, #68]	; (8004b5c <_dtoa_r+0x65c>)
 8004b16:	2000      	movs	r0, #0
 8004b18:	f7fb fbb6 	bl	8000288 <__aeabi_dsub>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4630      	mov	r0, r6
 8004b22:	4639      	mov	r1, r7
 8004b24:	f7fb ffda 	bl	8000adc <__aeabi_dcmplt>
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	f43f af27 	beq.w	800497c <_dtoa_r+0x47c>
 8004b2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b30:	1e6b      	subs	r3, r5, #1
 8004b32:	930c      	str	r3, [sp, #48]	; 0x30
 8004b34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004b38:	2b30      	cmp	r3, #48	; 0x30
 8004b3a:	d0f8      	beq.n	8004b2e <_dtoa_r+0x62e>
 8004b3c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004b40:	e04a      	b.n	8004bd8 <_dtoa_r+0x6d8>
 8004b42:	bf00      	nop
 8004b44:	08007940 	.word	0x08007940
 8004b48:	08007918 	.word	0x08007918
 8004b4c:	3ff00000 	.word	0x3ff00000
 8004b50:	40240000 	.word	0x40240000
 8004b54:	401c0000 	.word	0x401c0000
 8004b58:	40140000 	.word	0x40140000
 8004b5c:	3fe00000 	.word	0x3fe00000
 8004b60:	4baf      	ldr	r3, [pc, #700]	; (8004e20 <_dtoa_r+0x920>)
 8004b62:	f7fb fd49 	bl	80005f8 <__aeabi_dmul>
 8004b66:	4606      	mov	r6, r0
 8004b68:	460f      	mov	r7, r1
 8004b6a:	e7ac      	b.n	8004ac6 <_dtoa_r+0x5c6>
 8004b6c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004b70:	9d00      	ldr	r5, [sp, #0]
 8004b72:	4642      	mov	r2, r8
 8004b74:	464b      	mov	r3, r9
 8004b76:	4630      	mov	r0, r6
 8004b78:	4639      	mov	r1, r7
 8004b7a:	f7fb fe67 	bl	800084c <__aeabi_ddiv>
 8004b7e:	f7fb ffeb 	bl	8000b58 <__aeabi_d2iz>
 8004b82:	9002      	str	r0, [sp, #8]
 8004b84:	f7fb fcce 	bl	8000524 <__aeabi_i2d>
 8004b88:	4642      	mov	r2, r8
 8004b8a:	464b      	mov	r3, r9
 8004b8c:	f7fb fd34 	bl	80005f8 <__aeabi_dmul>
 8004b90:	4602      	mov	r2, r0
 8004b92:	460b      	mov	r3, r1
 8004b94:	4630      	mov	r0, r6
 8004b96:	4639      	mov	r1, r7
 8004b98:	f7fb fb76 	bl	8000288 <__aeabi_dsub>
 8004b9c:	9e02      	ldr	r6, [sp, #8]
 8004b9e:	9f01      	ldr	r7, [sp, #4]
 8004ba0:	3630      	adds	r6, #48	; 0x30
 8004ba2:	f805 6b01 	strb.w	r6, [r5], #1
 8004ba6:	9e00      	ldr	r6, [sp, #0]
 8004ba8:	1bae      	subs	r6, r5, r6
 8004baa:	42b7      	cmp	r7, r6
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	d137      	bne.n	8004c22 <_dtoa_r+0x722>
 8004bb2:	f7fb fb6b 	bl	800028c <__adddf3>
 8004bb6:	4642      	mov	r2, r8
 8004bb8:	464b      	mov	r3, r9
 8004bba:	4606      	mov	r6, r0
 8004bbc:	460f      	mov	r7, r1
 8004bbe:	f7fb ffab 	bl	8000b18 <__aeabi_dcmpgt>
 8004bc2:	b9c8      	cbnz	r0, 8004bf8 <_dtoa_r+0x6f8>
 8004bc4:	4642      	mov	r2, r8
 8004bc6:	464b      	mov	r3, r9
 8004bc8:	4630      	mov	r0, r6
 8004bca:	4639      	mov	r1, r7
 8004bcc:	f7fb ff7c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bd0:	b110      	cbz	r0, 8004bd8 <_dtoa_r+0x6d8>
 8004bd2:	9b02      	ldr	r3, [sp, #8]
 8004bd4:	07d9      	lsls	r1, r3, #31
 8004bd6:	d40f      	bmi.n	8004bf8 <_dtoa_r+0x6f8>
 8004bd8:	4620      	mov	r0, r4
 8004bda:	4659      	mov	r1, fp
 8004bdc:	f000 fad6 	bl	800518c <_Bfree>
 8004be0:	2300      	movs	r3, #0
 8004be2:	702b      	strb	r3, [r5, #0]
 8004be4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004be6:	f10a 0001 	add.w	r0, sl, #1
 8004bea:	6018      	str	r0, [r3, #0]
 8004bec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f43f acd8 	beq.w	80045a4 <_dtoa_r+0xa4>
 8004bf4:	601d      	str	r5, [r3, #0]
 8004bf6:	e4d5      	b.n	80045a4 <_dtoa_r+0xa4>
 8004bf8:	f8cd a01c 	str.w	sl, [sp, #28]
 8004bfc:	462b      	mov	r3, r5
 8004bfe:	461d      	mov	r5, r3
 8004c00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004c04:	2a39      	cmp	r2, #57	; 0x39
 8004c06:	d108      	bne.n	8004c1a <_dtoa_r+0x71a>
 8004c08:	9a00      	ldr	r2, [sp, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d1f7      	bne.n	8004bfe <_dtoa_r+0x6fe>
 8004c0e:	9a07      	ldr	r2, [sp, #28]
 8004c10:	9900      	ldr	r1, [sp, #0]
 8004c12:	3201      	adds	r2, #1
 8004c14:	9207      	str	r2, [sp, #28]
 8004c16:	2230      	movs	r2, #48	; 0x30
 8004c18:	700a      	strb	r2, [r1, #0]
 8004c1a:	781a      	ldrb	r2, [r3, #0]
 8004c1c:	3201      	adds	r2, #1
 8004c1e:	701a      	strb	r2, [r3, #0]
 8004c20:	e78c      	b.n	8004b3c <_dtoa_r+0x63c>
 8004c22:	4b7f      	ldr	r3, [pc, #508]	; (8004e20 <_dtoa_r+0x920>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	f7fb fce7 	bl	80005f8 <__aeabi_dmul>
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	4606      	mov	r6, r0
 8004c30:	460f      	mov	r7, r1
 8004c32:	f7fb ff49 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c36:	2800      	cmp	r0, #0
 8004c38:	d09b      	beq.n	8004b72 <_dtoa_r+0x672>
 8004c3a:	e7cd      	b.n	8004bd8 <_dtoa_r+0x6d8>
 8004c3c:	9a08      	ldr	r2, [sp, #32]
 8004c3e:	2a00      	cmp	r2, #0
 8004c40:	f000 80c4 	beq.w	8004dcc <_dtoa_r+0x8cc>
 8004c44:	9a05      	ldr	r2, [sp, #20]
 8004c46:	2a01      	cmp	r2, #1
 8004c48:	f300 80a8 	bgt.w	8004d9c <_dtoa_r+0x89c>
 8004c4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004c4e:	2a00      	cmp	r2, #0
 8004c50:	f000 80a0 	beq.w	8004d94 <_dtoa_r+0x894>
 8004c54:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004c58:	9e06      	ldr	r6, [sp, #24]
 8004c5a:	4645      	mov	r5, r8
 8004c5c:	9a04      	ldr	r2, [sp, #16]
 8004c5e:	2101      	movs	r1, #1
 8004c60:	441a      	add	r2, r3
 8004c62:	4620      	mov	r0, r4
 8004c64:	4498      	add	r8, r3
 8004c66:	9204      	str	r2, [sp, #16]
 8004c68:	f000 fb4c 	bl	8005304 <__i2b>
 8004c6c:	4607      	mov	r7, r0
 8004c6e:	2d00      	cmp	r5, #0
 8004c70:	dd0b      	ble.n	8004c8a <_dtoa_r+0x78a>
 8004c72:	9b04      	ldr	r3, [sp, #16]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	dd08      	ble.n	8004c8a <_dtoa_r+0x78a>
 8004c78:	42ab      	cmp	r3, r5
 8004c7a:	9a04      	ldr	r2, [sp, #16]
 8004c7c:	bfa8      	it	ge
 8004c7e:	462b      	movge	r3, r5
 8004c80:	eba8 0803 	sub.w	r8, r8, r3
 8004c84:	1aed      	subs	r5, r5, r3
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	9304      	str	r3, [sp, #16]
 8004c8a:	9b06      	ldr	r3, [sp, #24]
 8004c8c:	b1fb      	cbz	r3, 8004cce <_dtoa_r+0x7ce>
 8004c8e:	9b08      	ldr	r3, [sp, #32]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 809f 	beq.w	8004dd4 <_dtoa_r+0x8d4>
 8004c96:	2e00      	cmp	r6, #0
 8004c98:	dd11      	ble.n	8004cbe <_dtoa_r+0x7be>
 8004c9a:	4639      	mov	r1, r7
 8004c9c:	4632      	mov	r2, r6
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	f000 fbec 	bl	800547c <__pow5mult>
 8004ca4:	465a      	mov	r2, fp
 8004ca6:	4601      	mov	r1, r0
 8004ca8:	4607      	mov	r7, r0
 8004caa:	4620      	mov	r0, r4
 8004cac:	f000 fb40 	bl	8005330 <__multiply>
 8004cb0:	4659      	mov	r1, fp
 8004cb2:	9007      	str	r0, [sp, #28]
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	f000 fa69 	bl	800518c <_Bfree>
 8004cba:	9b07      	ldr	r3, [sp, #28]
 8004cbc:	469b      	mov	fp, r3
 8004cbe:	9b06      	ldr	r3, [sp, #24]
 8004cc0:	1b9a      	subs	r2, r3, r6
 8004cc2:	d004      	beq.n	8004cce <_dtoa_r+0x7ce>
 8004cc4:	4659      	mov	r1, fp
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	f000 fbd8 	bl	800547c <__pow5mult>
 8004ccc:	4683      	mov	fp, r0
 8004cce:	2101      	movs	r1, #1
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	f000 fb17 	bl	8005304 <__i2b>
 8004cd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	4606      	mov	r6, r0
 8004cdc:	dd7c      	ble.n	8004dd8 <_dtoa_r+0x8d8>
 8004cde:	461a      	mov	r2, r3
 8004ce0:	4601      	mov	r1, r0
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	f000 fbca 	bl	800547c <__pow5mult>
 8004ce8:	9b05      	ldr	r3, [sp, #20]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	4606      	mov	r6, r0
 8004cee:	dd76      	ble.n	8004dde <_dtoa_r+0x8de>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	9306      	str	r3, [sp, #24]
 8004cf4:	6933      	ldr	r3, [r6, #16]
 8004cf6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004cfa:	6918      	ldr	r0, [r3, #16]
 8004cfc:	f000 fab2 	bl	8005264 <__hi0bits>
 8004d00:	f1c0 0020 	rsb	r0, r0, #32
 8004d04:	9b04      	ldr	r3, [sp, #16]
 8004d06:	4418      	add	r0, r3
 8004d08:	f010 001f 	ands.w	r0, r0, #31
 8004d0c:	f000 8086 	beq.w	8004e1c <_dtoa_r+0x91c>
 8004d10:	f1c0 0320 	rsb	r3, r0, #32
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	dd7f      	ble.n	8004e18 <_dtoa_r+0x918>
 8004d18:	f1c0 001c 	rsb	r0, r0, #28
 8004d1c:	9b04      	ldr	r3, [sp, #16]
 8004d1e:	4403      	add	r3, r0
 8004d20:	4480      	add	r8, r0
 8004d22:	4405      	add	r5, r0
 8004d24:	9304      	str	r3, [sp, #16]
 8004d26:	f1b8 0f00 	cmp.w	r8, #0
 8004d2a:	dd05      	ble.n	8004d38 <_dtoa_r+0x838>
 8004d2c:	4659      	mov	r1, fp
 8004d2e:	4642      	mov	r2, r8
 8004d30:	4620      	mov	r0, r4
 8004d32:	f000 fbfd 	bl	8005530 <__lshift>
 8004d36:	4683      	mov	fp, r0
 8004d38:	9b04      	ldr	r3, [sp, #16]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	dd05      	ble.n	8004d4a <_dtoa_r+0x84a>
 8004d3e:	4631      	mov	r1, r6
 8004d40:	461a      	mov	r2, r3
 8004d42:	4620      	mov	r0, r4
 8004d44:	f000 fbf4 	bl	8005530 <__lshift>
 8004d48:	4606      	mov	r6, r0
 8004d4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d069      	beq.n	8004e24 <_dtoa_r+0x924>
 8004d50:	4631      	mov	r1, r6
 8004d52:	4658      	mov	r0, fp
 8004d54:	f000 fc58 	bl	8005608 <__mcmp>
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	da63      	bge.n	8004e24 <_dtoa_r+0x924>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	4659      	mov	r1, fp
 8004d60:	220a      	movs	r2, #10
 8004d62:	4620      	mov	r0, r4
 8004d64:	f000 fa34 	bl	80051d0 <__multadd>
 8004d68:	9b08      	ldr	r3, [sp, #32]
 8004d6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d6e:	4683      	mov	fp, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 818f 	beq.w	8005094 <_dtoa_r+0xb94>
 8004d76:	4639      	mov	r1, r7
 8004d78:	2300      	movs	r3, #0
 8004d7a:	220a      	movs	r2, #10
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	f000 fa27 	bl	80051d0 <__multadd>
 8004d82:	f1b9 0f00 	cmp.w	r9, #0
 8004d86:	4607      	mov	r7, r0
 8004d88:	f300 808e 	bgt.w	8004ea8 <_dtoa_r+0x9a8>
 8004d8c:	9b05      	ldr	r3, [sp, #20]
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	dc50      	bgt.n	8004e34 <_dtoa_r+0x934>
 8004d92:	e089      	b.n	8004ea8 <_dtoa_r+0x9a8>
 8004d94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004d9a:	e75d      	b.n	8004c58 <_dtoa_r+0x758>
 8004d9c:	9b01      	ldr	r3, [sp, #4]
 8004d9e:	1e5e      	subs	r6, r3, #1
 8004da0:	9b06      	ldr	r3, [sp, #24]
 8004da2:	42b3      	cmp	r3, r6
 8004da4:	bfbf      	itttt	lt
 8004da6:	9b06      	ldrlt	r3, [sp, #24]
 8004da8:	9606      	strlt	r6, [sp, #24]
 8004daa:	1af2      	sublt	r2, r6, r3
 8004dac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8004dae:	bfb6      	itet	lt
 8004db0:	189b      	addlt	r3, r3, r2
 8004db2:	1b9e      	subge	r6, r3, r6
 8004db4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8004db6:	9b01      	ldr	r3, [sp, #4]
 8004db8:	bfb8      	it	lt
 8004dba:	2600      	movlt	r6, #0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bfb5      	itete	lt
 8004dc0:	eba8 0503 	sublt.w	r5, r8, r3
 8004dc4:	9b01      	ldrge	r3, [sp, #4]
 8004dc6:	2300      	movlt	r3, #0
 8004dc8:	4645      	movge	r5, r8
 8004dca:	e747      	b.n	8004c5c <_dtoa_r+0x75c>
 8004dcc:	9e06      	ldr	r6, [sp, #24]
 8004dce:	9f08      	ldr	r7, [sp, #32]
 8004dd0:	4645      	mov	r5, r8
 8004dd2:	e74c      	b.n	8004c6e <_dtoa_r+0x76e>
 8004dd4:	9a06      	ldr	r2, [sp, #24]
 8004dd6:	e775      	b.n	8004cc4 <_dtoa_r+0x7c4>
 8004dd8:	9b05      	ldr	r3, [sp, #20]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	dc18      	bgt.n	8004e10 <_dtoa_r+0x910>
 8004dde:	9b02      	ldr	r3, [sp, #8]
 8004de0:	b9b3      	cbnz	r3, 8004e10 <_dtoa_r+0x910>
 8004de2:	9b03      	ldr	r3, [sp, #12]
 8004de4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004de8:	b9a3      	cbnz	r3, 8004e14 <_dtoa_r+0x914>
 8004dea:	9b03      	ldr	r3, [sp, #12]
 8004dec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004df0:	0d1b      	lsrs	r3, r3, #20
 8004df2:	051b      	lsls	r3, r3, #20
 8004df4:	b12b      	cbz	r3, 8004e02 <_dtoa_r+0x902>
 8004df6:	9b04      	ldr	r3, [sp, #16]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	9304      	str	r3, [sp, #16]
 8004dfc:	f108 0801 	add.w	r8, r8, #1
 8004e00:	2301      	movs	r3, #1
 8004e02:	9306      	str	r3, [sp, #24]
 8004e04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f47f af74 	bne.w	8004cf4 <_dtoa_r+0x7f4>
 8004e0c:	2001      	movs	r0, #1
 8004e0e:	e779      	b.n	8004d04 <_dtoa_r+0x804>
 8004e10:	2300      	movs	r3, #0
 8004e12:	e7f6      	b.n	8004e02 <_dtoa_r+0x902>
 8004e14:	9b02      	ldr	r3, [sp, #8]
 8004e16:	e7f4      	b.n	8004e02 <_dtoa_r+0x902>
 8004e18:	d085      	beq.n	8004d26 <_dtoa_r+0x826>
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	301c      	adds	r0, #28
 8004e1e:	e77d      	b.n	8004d1c <_dtoa_r+0x81c>
 8004e20:	40240000 	.word	0x40240000
 8004e24:	9b01      	ldr	r3, [sp, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	dc38      	bgt.n	8004e9c <_dtoa_r+0x99c>
 8004e2a:	9b05      	ldr	r3, [sp, #20]
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	dd35      	ble.n	8004e9c <_dtoa_r+0x99c>
 8004e30:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004e34:	f1b9 0f00 	cmp.w	r9, #0
 8004e38:	d10d      	bne.n	8004e56 <_dtoa_r+0x956>
 8004e3a:	4631      	mov	r1, r6
 8004e3c:	464b      	mov	r3, r9
 8004e3e:	2205      	movs	r2, #5
 8004e40:	4620      	mov	r0, r4
 8004e42:	f000 f9c5 	bl	80051d0 <__multadd>
 8004e46:	4601      	mov	r1, r0
 8004e48:	4606      	mov	r6, r0
 8004e4a:	4658      	mov	r0, fp
 8004e4c:	f000 fbdc 	bl	8005608 <__mcmp>
 8004e50:	2800      	cmp	r0, #0
 8004e52:	f73f adbd 	bgt.w	80049d0 <_dtoa_r+0x4d0>
 8004e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e58:	9d00      	ldr	r5, [sp, #0]
 8004e5a:	ea6f 0a03 	mvn.w	sl, r3
 8004e5e:	f04f 0800 	mov.w	r8, #0
 8004e62:	4631      	mov	r1, r6
 8004e64:	4620      	mov	r0, r4
 8004e66:	f000 f991 	bl	800518c <_Bfree>
 8004e6a:	2f00      	cmp	r7, #0
 8004e6c:	f43f aeb4 	beq.w	8004bd8 <_dtoa_r+0x6d8>
 8004e70:	f1b8 0f00 	cmp.w	r8, #0
 8004e74:	d005      	beq.n	8004e82 <_dtoa_r+0x982>
 8004e76:	45b8      	cmp	r8, r7
 8004e78:	d003      	beq.n	8004e82 <_dtoa_r+0x982>
 8004e7a:	4641      	mov	r1, r8
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	f000 f985 	bl	800518c <_Bfree>
 8004e82:	4639      	mov	r1, r7
 8004e84:	4620      	mov	r0, r4
 8004e86:	f000 f981 	bl	800518c <_Bfree>
 8004e8a:	e6a5      	b.n	8004bd8 <_dtoa_r+0x6d8>
 8004e8c:	2600      	movs	r6, #0
 8004e8e:	4637      	mov	r7, r6
 8004e90:	e7e1      	b.n	8004e56 <_dtoa_r+0x956>
 8004e92:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004e94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004e98:	4637      	mov	r7, r6
 8004e9a:	e599      	b.n	80049d0 <_dtoa_r+0x4d0>
 8004e9c:	9b08      	ldr	r3, [sp, #32]
 8004e9e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 80fd 	beq.w	80050a2 <_dtoa_r+0xba2>
 8004ea8:	2d00      	cmp	r5, #0
 8004eaa:	dd05      	ble.n	8004eb8 <_dtoa_r+0x9b8>
 8004eac:	4639      	mov	r1, r7
 8004eae:	462a      	mov	r2, r5
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	f000 fb3d 	bl	8005530 <__lshift>
 8004eb6:	4607      	mov	r7, r0
 8004eb8:	9b06      	ldr	r3, [sp, #24]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d05c      	beq.n	8004f78 <_dtoa_r+0xa78>
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	f000 f923 	bl	800510c <_Balloc>
 8004ec6:	4605      	mov	r5, r0
 8004ec8:	b928      	cbnz	r0, 8004ed6 <_dtoa_r+0x9d6>
 8004eca:	4b80      	ldr	r3, [pc, #512]	; (80050cc <_dtoa_r+0xbcc>)
 8004ecc:	4602      	mov	r2, r0
 8004ece:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004ed2:	f7ff bb2e 	b.w	8004532 <_dtoa_r+0x32>
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	3202      	adds	r2, #2
 8004eda:	0092      	lsls	r2, r2, #2
 8004edc:	f107 010c 	add.w	r1, r7, #12
 8004ee0:	300c      	adds	r0, #12
 8004ee2:	f000 f905 	bl	80050f0 <memcpy>
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	4629      	mov	r1, r5
 8004eea:	4620      	mov	r0, r4
 8004eec:	f000 fb20 	bl	8005530 <__lshift>
 8004ef0:	9b00      	ldr	r3, [sp, #0]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	9301      	str	r3, [sp, #4]
 8004ef6:	9b00      	ldr	r3, [sp, #0]
 8004ef8:	444b      	add	r3, r9
 8004efa:	9307      	str	r3, [sp, #28]
 8004efc:	9b02      	ldr	r3, [sp, #8]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	46b8      	mov	r8, r7
 8004f04:	9306      	str	r3, [sp, #24]
 8004f06:	4607      	mov	r7, r0
 8004f08:	9b01      	ldr	r3, [sp, #4]
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	4658      	mov	r0, fp
 8004f10:	9302      	str	r3, [sp, #8]
 8004f12:	f7ff fa69 	bl	80043e8 <quorem>
 8004f16:	4603      	mov	r3, r0
 8004f18:	3330      	adds	r3, #48	; 0x30
 8004f1a:	9004      	str	r0, [sp, #16]
 8004f1c:	4641      	mov	r1, r8
 8004f1e:	4658      	mov	r0, fp
 8004f20:	9308      	str	r3, [sp, #32]
 8004f22:	f000 fb71 	bl	8005608 <__mcmp>
 8004f26:	463a      	mov	r2, r7
 8004f28:	4681      	mov	r9, r0
 8004f2a:	4631      	mov	r1, r6
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	f000 fb87 	bl	8005640 <__mdiff>
 8004f32:	68c2      	ldr	r2, [r0, #12]
 8004f34:	9b08      	ldr	r3, [sp, #32]
 8004f36:	4605      	mov	r5, r0
 8004f38:	bb02      	cbnz	r2, 8004f7c <_dtoa_r+0xa7c>
 8004f3a:	4601      	mov	r1, r0
 8004f3c:	4658      	mov	r0, fp
 8004f3e:	f000 fb63 	bl	8005608 <__mcmp>
 8004f42:	9b08      	ldr	r3, [sp, #32]
 8004f44:	4602      	mov	r2, r0
 8004f46:	4629      	mov	r1, r5
 8004f48:	4620      	mov	r0, r4
 8004f4a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8004f4e:	f000 f91d 	bl	800518c <_Bfree>
 8004f52:	9b05      	ldr	r3, [sp, #20]
 8004f54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f56:	9d01      	ldr	r5, [sp, #4]
 8004f58:	ea43 0102 	orr.w	r1, r3, r2
 8004f5c:	9b06      	ldr	r3, [sp, #24]
 8004f5e:	430b      	orrs	r3, r1
 8004f60:	9b08      	ldr	r3, [sp, #32]
 8004f62:	d10d      	bne.n	8004f80 <_dtoa_r+0xa80>
 8004f64:	2b39      	cmp	r3, #57	; 0x39
 8004f66:	d029      	beq.n	8004fbc <_dtoa_r+0xabc>
 8004f68:	f1b9 0f00 	cmp.w	r9, #0
 8004f6c:	dd01      	ble.n	8004f72 <_dtoa_r+0xa72>
 8004f6e:	9b04      	ldr	r3, [sp, #16]
 8004f70:	3331      	adds	r3, #49	; 0x31
 8004f72:	9a02      	ldr	r2, [sp, #8]
 8004f74:	7013      	strb	r3, [r2, #0]
 8004f76:	e774      	b.n	8004e62 <_dtoa_r+0x962>
 8004f78:	4638      	mov	r0, r7
 8004f7a:	e7b9      	b.n	8004ef0 <_dtoa_r+0x9f0>
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	e7e2      	b.n	8004f46 <_dtoa_r+0xa46>
 8004f80:	f1b9 0f00 	cmp.w	r9, #0
 8004f84:	db06      	blt.n	8004f94 <_dtoa_r+0xa94>
 8004f86:	9905      	ldr	r1, [sp, #20]
 8004f88:	ea41 0909 	orr.w	r9, r1, r9
 8004f8c:	9906      	ldr	r1, [sp, #24]
 8004f8e:	ea59 0101 	orrs.w	r1, r9, r1
 8004f92:	d120      	bne.n	8004fd6 <_dtoa_r+0xad6>
 8004f94:	2a00      	cmp	r2, #0
 8004f96:	ddec      	ble.n	8004f72 <_dtoa_r+0xa72>
 8004f98:	4659      	mov	r1, fp
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	9301      	str	r3, [sp, #4]
 8004fa0:	f000 fac6 	bl	8005530 <__lshift>
 8004fa4:	4631      	mov	r1, r6
 8004fa6:	4683      	mov	fp, r0
 8004fa8:	f000 fb2e 	bl	8005608 <__mcmp>
 8004fac:	2800      	cmp	r0, #0
 8004fae:	9b01      	ldr	r3, [sp, #4]
 8004fb0:	dc02      	bgt.n	8004fb8 <_dtoa_r+0xab8>
 8004fb2:	d1de      	bne.n	8004f72 <_dtoa_r+0xa72>
 8004fb4:	07da      	lsls	r2, r3, #31
 8004fb6:	d5dc      	bpl.n	8004f72 <_dtoa_r+0xa72>
 8004fb8:	2b39      	cmp	r3, #57	; 0x39
 8004fba:	d1d8      	bne.n	8004f6e <_dtoa_r+0xa6e>
 8004fbc:	9a02      	ldr	r2, [sp, #8]
 8004fbe:	2339      	movs	r3, #57	; 0x39
 8004fc0:	7013      	strb	r3, [r2, #0]
 8004fc2:	462b      	mov	r3, r5
 8004fc4:	461d      	mov	r5, r3
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004fcc:	2a39      	cmp	r2, #57	; 0x39
 8004fce:	d050      	beq.n	8005072 <_dtoa_r+0xb72>
 8004fd0:	3201      	adds	r2, #1
 8004fd2:	701a      	strb	r2, [r3, #0]
 8004fd4:	e745      	b.n	8004e62 <_dtoa_r+0x962>
 8004fd6:	2a00      	cmp	r2, #0
 8004fd8:	dd03      	ble.n	8004fe2 <_dtoa_r+0xae2>
 8004fda:	2b39      	cmp	r3, #57	; 0x39
 8004fdc:	d0ee      	beq.n	8004fbc <_dtoa_r+0xabc>
 8004fde:	3301      	adds	r3, #1
 8004fe0:	e7c7      	b.n	8004f72 <_dtoa_r+0xa72>
 8004fe2:	9a01      	ldr	r2, [sp, #4]
 8004fe4:	9907      	ldr	r1, [sp, #28]
 8004fe6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004fea:	428a      	cmp	r2, r1
 8004fec:	d02a      	beq.n	8005044 <_dtoa_r+0xb44>
 8004fee:	4659      	mov	r1, fp
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	220a      	movs	r2, #10
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	f000 f8eb 	bl	80051d0 <__multadd>
 8004ffa:	45b8      	cmp	r8, r7
 8004ffc:	4683      	mov	fp, r0
 8004ffe:	f04f 0300 	mov.w	r3, #0
 8005002:	f04f 020a 	mov.w	r2, #10
 8005006:	4641      	mov	r1, r8
 8005008:	4620      	mov	r0, r4
 800500a:	d107      	bne.n	800501c <_dtoa_r+0xb1c>
 800500c:	f000 f8e0 	bl	80051d0 <__multadd>
 8005010:	4680      	mov	r8, r0
 8005012:	4607      	mov	r7, r0
 8005014:	9b01      	ldr	r3, [sp, #4]
 8005016:	3301      	adds	r3, #1
 8005018:	9301      	str	r3, [sp, #4]
 800501a:	e775      	b.n	8004f08 <_dtoa_r+0xa08>
 800501c:	f000 f8d8 	bl	80051d0 <__multadd>
 8005020:	4639      	mov	r1, r7
 8005022:	4680      	mov	r8, r0
 8005024:	2300      	movs	r3, #0
 8005026:	220a      	movs	r2, #10
 8005028:	4620      	mov	r0, r4
 800502a:	f000 f8d1 	bl	80051d0 <__multadd>
 800502e:	4607      	mov	r7, r0
 8005030:	e7f0      	b.n	8005014 <_dtoa_r+0xb14>
 8005032:	f1b9 0f00 	cmp.w	r9, #0
 8005036:	9a00      	ldr	r2, [sp, #0]
 8005038:	bfcc      	ite	gt
 800503a:	464d      	movgt	r5, r9
 800503c:	2501      	movle	r5, #1
 800503e:	4415      	add	r5, r2
 8005040:	f04f 0800 	mov.w	r8, #0
 8005044:	4659      	mov	r1, fp
 8005046:	2201      	movs	r2, #1
 8005048:	4620      	mov	r0, r4
 800504a:	9301      	str	r3, [sp, #4]
 800504c:	f000 fa70 	bl	8005530 <__lshift>
 8005050:	4631      	mov	r1, r6
 8005052:	4683      	mov	fp, r0
 8005054:	f000 fad8 	bl	8005608 <__mcmp>
 8005058:	2800      	cmp	r0, #0
 800505a:	dcb2      	bgt.n	8004fc2 <_dtoa_r+0xac2>
 800505c:	d102      	bne.n	8005064 <_dtoa_r+0xb64>
 800505e:	9b01      	ldr	r3, [sp, #4]
 8005060:	07db      	lsls	r3, r3, #31
 8005062:	d4ae      	bmi.n	8004fc2 <_dtoa_r+0xac2>
 8005064:	462b      	mov	r3, r5
 8005066:	461d      	mov	r5, r3
 8005068:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800506c:	2a30      	cmp	r2, #48	; 0x30
 800506e:	d0fa      	beq.n	8005066 <_dtoa_r+0xb66>
 8005070:	e6f7      	b.n	8004e62 <_dtoa_r+0x962>
 8005072:	9a00      	ldr	r2, [sp, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d1a5      	bne.n	8004fc4 <_dtoa_r+0xac4>
 8005078:	f10a 0a01 	add.w	sl, sl, #1
 800507c:	2331      	movs	r3, #49	; 0x31
 800507e:	e779      	b.n	8004f74 <_dtoa_r+0xa74>
 8005080:	4b13      	ldr	r3, [pc, #76]	; (80050d0 <_dtoa_r+0xbd0>)
 8005082:	f7ff baaf 	b.w	80045e4 <_dtoa_r+0xe4>
 8005086:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005088:	2b00      	cmp	r3, #0
 800508a:	f47f aa86 	bne.w	800459a <_dtoa_r+0x9a>
 800508e:	4b11      	ldr	r3, [pc, #68]	; (80050d4 <_dtoa_r+0xbd4>)
 8005090:	f7ff baa8 	b.w	80045e4 <_dtoa_r+0xe4>
 8005094:	f1b9 0f00 	cmp.w	r9, #0
 8005098:	dc03      	bgt.n	80050a2 <_dtoa_r+0xba2>
 800509a:	9b05      	ldr	r3, [sp, #20]
 800509c:	2b02      	cmp	r3, #2
 800509e:	f73f aec9 	bgt.w	8004e34 <_dtoa_r+0x934>
 80050a2:	9d00      	ldr	r5, [sp, #0]
 80050a4:	4631      	mov	r1, r6
 80050a6:	4658      	mov	r0, fp
 80050a8:	f7ff f99e 	bl	80043e8 <quorem>
 80050ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80050b0:	f805 3b01 	strb.w	r3, [r5], #1
 80050b4:	9a00      	ldr	r2, [sp, #0]
 80050b6:	1aaa      	subs	r2, r5, r2
 80050b8:	4591      	cmp	r9, r2
 80050ba:	ddba      	ble.n	8005032 <_dtoa_r+0xb32>
 80050bc:	4659      	mov	r1, fp
 80050be:	2300      	movs	r3, #0
 80050c0:	220a      	movs	r2, #10
 80050c2:	4620      	mov	r0, r4
 80050c4:	f000 f884 	bl	80051d0 <__multadd>
 80050c8:	4683      	mov	fp, r0
 80050ca:	e7eb      	b.n	80050a4 <_dtoa_r+0xba4>
 80050cc:	080078a3 	.word	0x080078a3
 80050d0:	080077fc 	.word	0x080077fc
 80050d4:	08007820 	.word	0x08007820

080050d8 <_localeconv_r>:
 80050d8:	4800      	ldr	r0, [pc, #0]	; (80050dc <_localeconv_r+0x4>)
 80050da:	4770      	bx	lr
 80050dc:	2000015c 	.word	0x2000015c

080050e0 <malloc>:
 80050e0:	4b02      	ldr	r3, [pc, #8]	; (80050ec <malloc+0xc>)
 80050e2:	4601      	mov	r1, r0
 80050e4:	6818      	ldr	r0, [r3, #0]
 80050e6:	f000 bbef 	b.w	80058c8 <_malloc_r>
 80050ea:	bf00      	nop
 80050ec:	20000008 	.word	0x20000008

080050f0 <memcpy>:
 80050f0:	440a      	add	r2, r1
 80050f2:	4291      	cmp	r1, r2
 80050f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80050f8:	d100      	bne.n	80050fc <memcpy+0xc>
 80050fa:	4770      	bx	lr
 80050fc:	b510      	push	{r4, lr}
 80050fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005102:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005106:	4291      	cmp	r1, r2
 8005108:	d1f9      	bne.n	80050fe <memcpy+0xe>
 800510a:	bd10      	pop	{r4, pc}

0800510c <_Balloc>:
 800510c:	b570      	push	{r4, r5, r6, lr}
 800510e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005110:	4604      	mov	r4, r0
 8005112:	460d      	mov	r5, r1
 8005114:	b976      	cbnz	r6, 8005134 <_Balloc+0x28>
 8005116:	2010      	movs	r0, #16
 8005118:	f7ff ffe2 	bl	80050e0 <malloc>
 800511c:	4602      	mov	r2, r0
 800511e:	6260      	str	r0, [r4, #36]	; 0x24
 8005120:	b920      	cbnz	r0, 800512c <_Balloc+0x20>
 8005122:	4b18      	ldr	r3, [pc, #96]	; (8005184 <_Balloc+0x78>)
 8005124:	4818      	ldr	r0, [pc, #96]	; (8005188 <_Balloc+0x7c>)
 8005126:	2166      	movs	r1, #102	; 0x66
 8005128:	f000 fd94 	bl	8005c54 <__assert_func>
 800512c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005130:	6006      	str	r6, [r0, #0]
 8005132:	60c6      	str	r6, [r0, #12]
 8005134:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005136:	68f3      	ldr	r3, [r6, #12]
 8005138:	b183      	cbz	r3, 800515c <_Balloc+0x50>
 800513a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005142:	b9b8      	cbnz	r0, 8005174 <_Balloc+0x68>
 8005144:	2101      	movs	r1, #1
 8005146:	fa01 f605 	lsl.w	r6, r1, r5
 800514a:	1d72      	adds	r2, r6, #5
 800514c:	0092      	lsls	r2, r2, #2
 800514e:	4620      	mov	r0, r4
 8005150:	f000 fb5a 	bl	8005808 <_calloc_r>
 8005154:	b160      	cbz	r0, 8005170 <_Balloc+0x64>
 8005156:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800515a:	e00e      	b.n	800517a <_Balloc+0x6e>
 800515c:	2221      	movs	r2, #33	; 0x21
 800515e:	2104      	movs	r1, #4
 8005160:	4620      	mov	r0, r4
 8005162:	f000 fb51 	bl	8005808 <_calloc_r>
 8005166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005168:	60f0      	str	r0, [r6, #12]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1e4      	bne.n	800513a <_Balloc+0x2e>
 8005170:	2000      	movs	r0, #0
 8005172:	bd70      	pop	{r4, r5, r6, pc}
 8005174:	6802      	ldr	r2, [r0, #0]
 8005176:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800517a:	2300      	movs	r3, #0
 800517c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005180:	e7f7      	b.n	8005172 <_Balloc+0x66>
 8005182:	bf00      	nop
 8005184:	0800782d 	.word	0x0800782d
 8005188:	080078b4 	.word	0x080078b4

0800518c <_Bfree>:
 800518c:	b570      	push	{r4, r5, r6, lr}
 800518e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005190:	4605      	mov	r5, r0
 8005192:	460c      	mov	r4, r1
 8005194:	b976      	cbnz	r6, 80051b4 <_Bfree+0x28>
 8005196:	2010      	movs	r0, #16
 8005198:	f7ff ffa2 	bl	80050e0 <malloc>
 800519c:	4602      	mov	r2, r0
 800519e:	6268      	str	r0, [r5, #36]	; 0x24
 80051a0:	b920      	cbnz	r0, 80051ac <_Bfree+0x20>
 80051a2:	4b09      	ldr	r3, [pc, #36]	; (80051c8 <_Bfree+0x3c>)
 80051a4:	4809      	ldr	r0, [pc, #36]	; (80051cc <_Bfree+0x40>)
 80051a6:	218a      	movs	r1, #138	; 0x8a
 80051a8:	f000 fd54 	bl	8005c54 <__assert_func>
 80051ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80051b0:	6006      	str	r6, [r0, #0]
 80051b2:	60c6      	str	r6, [r0, #12]
 80051b4:	b13c      	cbz	r4, 80051c6 <_Bfree+0x3a>
 80051b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80051b8:	6862      	ldr	r2, [r4, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051c0:	6021      	str	r1, [r4, #0]
 80051c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80051c6:	bd70      	pop	{r4, r5, r6, pc}
 80051c8:	0800782d 	.word	0x0800782d
 80051cc:	080078b4 	.word	0x080078b4

080051d0 <__multadd>:
 80051d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051d4:	690e      	ldr	r6, [r1, #16]
 80051d6:	4607      	mov	r7, r0
 80051d8:	4698      	mov	r8, r3
 80051da:	460c      	mov	r4, r1
 80051dc:	f101 0014 	add.w	r0, r1, #20
 80051e0:	2300      	movs	r3, #0
 80051e2:	6805      	ldr	r5, [r0, #0]
 80051e4:	b2a9      	uxth	r1, r5
 80051e6:	fb02 8101 	mla	r1, r2, r1, r8
 80051ea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80051ee:	0c2d      	lsrs	r5, r5, #16
 80051f0:	fb02 c505 	mla	r5, r2, r5, ip
 80051f4:	b289      	uxth	r1, r1
 80051f6:	3301      	adds	r3, #1
 80051f8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80051fc:	429e      	cmp	r6, r3
 80051fe:	f840 1b04 	str.w	r1, [r0], #4
 8005202:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005206:	dcec      	bgt.n	80051e2 <__multadd+0x12>
 8005208:	f1b8 0f00 	cmp.w	r8, #0
 800520c:	d022      	beq.n	8005254 <__multadd+0x84>
 800520e:	68a3      	ldr	r3, [r4, #8]
 8005210:	42b3      	cmp	r3, r6
 8005212:	dc19      	bgt.n	8005248 <__multadd+0x78>
 8005214:	6861      	ldr	r1, [r4, #4]
 8005216:	4638      	mov	r0, r7
 8005218:	3101      	adds	r1, #1
 800521a:	f7ff ff77 	bl	800510c <_Balloc>
 800521e:	4605      	mov	r5, r0
 8005220:	b928      	cbnz	r0, 800522e <__multadd+0x5e>
 8005222:	4602      	mov	r2, r0
 8005224:	4b0d      	ldr	r3, [pc, #52]	; (800525c <__multadd+0x8c>)
 8005226:	480e      	ldr	r0, [pc, #56]	; (8005260 <__multadd+0x90>)
 8005228:	21b5      	movs	r1, #181	; 0xb5
 800522a:	f000 fd13 	bl	8005c54 <__assert_func>
 800522e:	6922      	ldr	r2, [r4, #16]
 8005230:	3202      	adds	r2, #2
 8005232:	f104 010c 	add.w	r1, r4, #12
 8005236:	0092      	lsls	r2, r2, #2
 8005238:	300c      	adds	r0, #12
 800523a:	f7ff ff59 	bl	80050f0 <memcpy>
 800523e:	4621      	mov	r1, r4
 8005240:	4638      	mov	r0, r7
 8005242:	f7ff ffa3 	bl	800518c <_Bfree>
 8005246:	462c      	mov	r4, r5
 8005248:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800524c:	3601      	adds	r6, #1
 800524e:	f8c3 8014 	str.w	r8, [r3, #20]
 8005252:	6126      	str	r6, [r4, #16]
 8005254:	4620      	mov	r0, r4
 8005256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800525a:	bf00      	nop
 800525c:	080078a3 	.word	0x080078a3
 8005260:	080078b4 	.word	0x080078b4

08005264 <__hi0bits>:
 8005264:	0c03      	lsrs	r3, r0, #16
 8005266:	041b      	lsls	r3, r3, #16
 8005268:	b9d3      	cbnz	r3, 80052a0 <__hi0bits+0x3c>
 800526a:	0400      	lsls	r0, r0, #16
 800526c:	2310      	movs	r3, #16
 800526e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005272:	bf04      	itt	eq
 8005274:	0200      	lsleq	r0, r0, #8
 8005276:	3308      	addeq	r3, #8
 8005278:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800527c:	bf04      	itt	eq
 800527e:	0100      	lsleq	r0, r0, #4
 8005280:	3304      	addeq	r3, #4
 8005282:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005286:	bf04      	itt	eq
 8005288:	0080      	lsleq	r0, r0, #2
 800528a:	3302      	addeq	r3, #2
 800528c:	2800      	cmp	r0, #0
 800528e:	db05      	blt.n	800529c <__hi0bits+0x38>
 8005290:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005294:	f103 0301 	add.w	r3, r3, #1
 8005298:	bf08      	it	eq
 800529a:	2320      	moveq	r3, #32
 800529c:	4618      	mov	r0, r3
 800529e:	4770      	bx	lr
 80052a0:	2300      	movs	r3, #0
 80052a2:	e7e4      	b.n	800526e <__hi0bits+0xa>

080052a4 <__lo0bits>:
 80052a4:	6803      	ldr	r3, [r0, #0]
 80052a6:	f013 0207 	ands.w	r2, r3, #7
 80052aa:	4601      	mov	r1, r0
 80052ac:	d00b      	beq.n	80052c6 <__lo0bits+0x22>
 80052ae:	07da      	lsls	r2, r3, #31
 80052b0:	d424      	bmi.n	80052fc <__lo0bits+0x58>
 80052b2:	0798      	lsls	r0, r3, #30
 80052b4:	bf49      	itett	mi
 80052b6:	085b      	lsrmi	r3, r3, #1
 80052b8:	089b      	lsrpl	r3, r3, #2
 80052ba:	2001      	movmi	r0, #1
 80052bc:	600b      	strmi	r3, [r1, #0]
 80052be:	bf5c      	itt	pl
 80052c0:	600b      	strpl	r3, [r1, #0]
 80052c2:	2002      	movpl	r0, #2
 80052c4:	4770      	bx	lr
 80052c6:	b298      	uxth	r0, r3
 80052c8:	b9b0      	cbnz	r0, 80052f8 <__lo0bits+0x54>
 80052ca:	0c1b      	lsrs	r3, r3, #16
 80052cc:	2010      	movs	r0, #16
 80052ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80052d2:	bf04      	itt	eq
 80052d4:	0a1b      	lsreq	r3, r3, #8
 80052d6:	3008      	addeq	r0, #8
 80052d8:	071a      	lsls	r2, r3, #28
 80052da:	bf04      	itt	eq
 80052dc:	091b      	lsreq	r3, r3, #4
 80052de:	3004      	addeq	r0, #4
 80052e0:	079a      	lsls	r2, r3, #30
 80052e2:	bf04      	itt	eq
 80052e4:	089b      	lsreq	r3, r3, #2
 80052e6:	3002      	addeq	r0, #2
 80052e8:	07da      	lsls	r2, r3, #31
 80052ea:	d403      	bmi.n	80052f4 <__lo0bits+0x50>
 80052ec:	085b      	lsrs	r3, r3, #1
 80052ee:	f100 0001 	add.w	r0, r0, #1
 80052f2:	d005      	beq.n	8005300 <__lo0bits+0x5c>
 80052f4:	600b      	str	r3, [r1, #0]
 80052f6:	4770      	bx	lr
 80052f8:	4610      	mov	r0, r2
 80052fa:	e7e8      	b.n	80052ce <__lo0bits+0x2a>
 80052fc:	2000      	movs	r0, #0
 80052fe:	4770      	bx	lr
 8005300:	2020      	movs	r0, #32
 8005302:	4770      	bx	lr

08005304 <__i2b>:
 8005304:	b510      	push	{r4, lr}
 8005306:	460c      	mov	r4, r1
 8005308:	2101      	movs	r1, #1
 800530a:	f7ff feff 	bl	800510c <_Balloc>
 800530e:	4602      	mov	r2, r0
 8005310:	b928      	cbnz	r0, 800531e <__i2b+0x1a>
 8005312:	4b05      	ldr	r3, [pc, #20]	; (8005328 <__i2b+0x24>)
 8005314:	4805      	ldr	r0, [pc, #20]	; (800532c <__i2b+0x28>)
 8005316:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800531a:	f000 fc9b 	bl	8005c54 <__assert_func>
 800531e:	2301      	movs	r3, #1
 8005320:	6144      	str	r4, [r0, #20]
 8005322:	6103      	str	r3, [r0, #16]
 8005324:	bd10      	pop	{r4, pc}
 8005326:	bf00      	nop
 8005328:	080078a3 	.word	0x080078a3
 800532c:	080078b4 	.word	0x080078b4

08005330 <__multiply>:
 8005330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005334:	4614      	mov	r4, r2
 8005336:	690a      	ldr	r2, [r1, #16]
 8005338:	6923      	ldr	r3, [r4, #16]
 800533a:	429a      	cmp	r2, r3
 800533c:	bfb8      	it	lt
 800533e:	460b      	movlt	r3, r1
 8005340:	460d      	mov	r5, r1
 8005342:	bfbc      	itt	lt
 8005344:	4625      	movlt	r5, r4
 8005346:	461c      	movlt	r4, r3
 8005348:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800534c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005350:	68ab      	ldr	r3, [r5, #8]
 8005352:	6869      	ldr	r1, [r5, #4]
 8005354:	eb0a 0709 	add.w	r7, sl, r9
 8005358:	42bb      	cmp	r3, r7
 800535a:	b085      	sub	sp, #20
 800535c:	bfb8      	it	lt
 800535e:	3101      	addlt	r1, #1
 8005360:	f7ff fed4 	bl	800510c <_Balloc>
 8005364:	b930      	cbnz	r0, 8005374 <__multiply+0x44>
 8005366:	4602      	mov	r2, r0
 8005368:	4b42      	ldr	r3, [pc, #264]	; (8005474 <__multiply+0x144>)
 800536a:	4843      	ldr	r0, [pc, #268]	; (8005478 <__multiply+0x148>)
 800536c:	f240 115d 	movw	r1, #349	; 0x15d
 8005370:	f000 fc70 	bl	8005c54 <__assert_func>
 8005374:	f100 0614 	add.w	r6, r0, #20
 8005378:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800537c:	4633      	mov	r3, r6
 800537e:	2200      	movs	r2, #0
 8005380:	4543      	cmp	r3, r8
 8005382:	d31e      	bcc.n	80053c2 <__multiply+0x92>
 8005384:	f105 0c14 	add.w	ip, r5, #20
 8005388:	f104 0314 	add.w	r3, r4, #20
 800538c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005390:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005394:	9202      	str	r2, [sp, #8]
 8005396:	ebac 0205 	sub.w	r2, ip, r5
 800539a:	3a15      	subs	r2, #21
 800539c:	f022 0203 	bic.w	r2, r2, #3
 80053a0:	3204      	adds	r2, #4
 80053a2:	f105 0115 	add.w	r1, r5, #21
 80053a6:	458c      	cmp	ip, r1
 80053a8:	bf38      	it	cc
 80053aa:	2204      	movcc	r2, #4
 80053ac:	9201      	str	r2, [sp, #4]
 80053ae:	9a02      	ldr	r2, [sp, #8]
 80053b0:	9303      	str	r3, [sp, #12]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d808      	bhi.n	80053c8 <__multiply+0x98>
 80053b6:	2f00      	cmp	r7, #0
 80053b8:	dc55      	bgt.n	8005466 <__multiply+0x136>
 80053ba:	6107      	str	r7, [r0, #16]
 80053bc:	b005      	add	sp, #20
 80053be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053c2:	f843 2b04 	str.w	r2, [r3], #4
 80053c6:	e7db      	b.n	8005380 <__multiply+0x50>
 80053c8:	f8b3 a000 	ldrh.w	sl, [r3]
 80053cc:	f1ba 0f00 	cmp.w	sl, #0
 80053d0:	d020      	beq.n	8005414 <__multiply+0xe4>
 80053d2:	f105 0e14 	add.w	lr, r5, #20
 80053d6:	46b1      	mov	r9, r6
 80053d8:	2200      	movs	r2, #0
 80053da:	f85e 4b04 	ldr.w	r4, [lr], #4
 80053de:	f8d9 b000 	ldr.w	fp, [r9]
 80053e2:	b2a1      	uxth	r1, r4
 80053e4:	fa1f fb8b 	uxth.w	fp, fp
 80053e8:	fb0a b101 	mla	r1, sl, r1, fp
 80053ec:	4411      	add	r1, r2
 80053ee:	f8d9 2000 	ldr.w	r2, [r9]
 80053f2:	0c24      	lsrs	r4, r4, #16
 80053f4:	0c12      	lsrs	r2, r2, #16
 80053f6:	fb0a 2404 	mla	r4, sl, r4, r2
 80053fa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80053fe:	b289      	uxth	r1, r1
 8005400:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005404:	45f4      	cmp	ip, lr
 8005406:	f849 1b04 	str.w	r1, [r9], #4
 800540a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800540e:	d8e4      	bhi.n	80053da <__multiply+0xaa>
 8005410:	9901      	ldr	r1, [sp, #4]
 8005412:	5072      	str	r2, [r6, r1]
 8005414:	9a03      	ldr	r2, [sp, #12]
 8005416:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800541a:	3304      	adds	r3, #4
 800541c:	f1b9 0f00 	cmp.w	r9, #0
 8005420:	d01f      	beq.n	8005462 <__multiply+0x132>
 8005422:	6834      	ldr	r4, [r6, #0]
 8005424:	f105 0114 	add.w	r1, r5, #20
 8005428:	46b6      	mov	lr, r6
 800542a:	f04f 0a00 	mov.w	sl, #0
 800542e:	880a      	ldrh	r2, [r1, #0]
 8005430:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005434:	fb09 b202 	mla	r2, r9, r2, fp
 8005438:	4492      	add	sl, r2
 800543a:	b2a4      	uxth	r4, r4
 800543c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005440:	f84e 4b04 	str.w	r4, [lr], #4
 8005444:	f851 4b04 	ldr.w	r4, [r1], #4
 8005448:	f8be 2000 	ldrh.w	r2, [lr]
 800544c:	0c24      	lsrs	r4, r4, #16
 800544e:	fb09 2404 	mla	r4, r9, r4, r2
 8005452:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005456:	458c      	cmp	ip, r1
 8005458:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800545c:	d8e7      	bhi.n	800542e <__multiply+0xfe>
 800545e:	9a01      	ldr	r2, [sp, #4]
 8005460:	50b4      	str	r4, [r6, r2]
 8005462:	3604      	adds	r6, #4
 8005464:	e7a3      	b.n	80053ae <__multiply+0x7e>
 8005466:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1a5      	bne.n	80053ba <__multiply+0x8a>
 800546e:	3f01      	subs	r7, #1
 8005470:	e7a1      	b.n	80053b6 <__multiply+0x86>
 8005472:	bf00      	nop
 8005474:	080078a3 	.word	0x080078a3
 8005478:	080078b4 	.word	0x080078b4

0800547c <__pow5mult>:
 800547c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005480:	4615      	mov	r5, r2
 8005482:	f012 0203 	ands.w	r2, r2, #3
 8005486:	4606      	mov	r6, r0
 8005488:	460f      	mov	r7, r1
 800548a:	d007      	beq.n	800549c <__pow5mult+0x20>
 800548c:	4c25      	ldr	r4, [pc, #148]	; (8005524 <__pow5mult+0xa8>)
 800548e:	3a01      	subs	r2, #1
 8005490:	2300      	movs	r3, #0
 8005492:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005496:	f7ff fe9b 	bl	80051d0 <__multadd>
 800549a:	4607      	mov	r7, r0
 800549c:	10ad      	asrs	r5, r5, #2
 800549e:	d03d      	beq.n	800551c <__pow5mult+0xa0>
 80054a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80054a2:	b97c      	cbnz	r4, 80054c4 <__pow5mult+0x48>
 80054a4:	2010      	movs	r0, #16
 80054a6:	f7ff fe1b 	bl	80050e0 <malloc>
 80054aa:	4602      	mov	r2, r0
 80054ac:	6270      	str	r0, [r6, #36]	; 0x24
 80054ae:	b928      	cbnz	r0, 80054bc <__pow5mult+0x40>
 80054b0:	4b1d      	ldr	r3, [pc, #116]	; (8005528 <__pow5mult+0xac>)
 80054b2:	481e      	ldr	r0, [pc, #120]	; (800552c <__pow5mult+0xb0>)
 80054b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80054b8:	f000 fbcc 	bl	8005c54 <__assert_func>
 80054bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80054c0:	6004      	str	r4, [r0, #0]
 80054c2:	60c4      	str	r4, [r0, #12]
 80054c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80054c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80054cc:	b94c      	cbnz	r4, 80054e2 <__pow5mult+0x66>
 80054ce:	f240 2171 	movw	r1, #625	; 0x271
 80054d2:	4630      	mov	r0, r6
 80054d4:	f7ff ff16 	bl	8005304 <__i2b>
 80054d8:	2300      	movs	r3, #0
 80054da:	f8c8 0008 	str.w	r0, [r8, #8]
 80054de:	4604      	mov	r4, r0
 80054e0:	6003      	str	r3, [r0, #0]
 80054e2:	f04f 0900 	mov.w	r9, #0
 80054e6:	07eb      	lsls	r3, r5, #31
 80054e8:	d50a      	bpl.n	8005500 <__pow5mult+0x84>
 80054ea:	4639      	mov	r1, r7
 80054ec:	4622      	mov	r2, r4
 80054ee:	4630      	mov	r0, r6
 80054f0:	f7ff ff1e 	bl	8005330 <__multiply>
 80054f4:	4639      	mov	r1, r7
 80054f6:	4680      	mov	r8, r0
 80054f8:	4630      	mov	r0, r6
 80054fa:	f7ff fe47 	bl	800518c <_Bfree>
 80054fe:	4647      	mov	r7, r8
 8005500:	106d      	asrs	r5, r5, #1
 8005502:	d00b      	beq.n	800551c <__pow5mult+0xa0>
 8005504:	6820      	ldr	r0, [r4, #0]
 8005506:	b938      	cbnz	r0, 8005518 <__pow5mult+0x9c>
 8005508:	4622      	mov	r2, r4
 800550a:	4621      	mov	r1, r4
 800550c:	4630      	mov	r0, r6
 800550e:	f7ff ff0f 	bl	8005330 <__multiply>
 8005512:	6020      	str	r0, [r4, #0]
 8005514:	f8c0 9000 	str.w	r9, [r0]
 8005518:	4604      	mov	r4, r0
 800551a:	e7e4      	b.n	80054e6 <__pow5mult+0x6a>
 800551c:	4638      	mov	r0, r7
 800551e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005522:	bf00      	nop
 8005524:	08007a08 	.word	0x08007a08
 8005528:	0800782d 	.word	0x0800782d
 800552c:	080078b4 	.word	0x080078b4

08005530 <__lshift>:
 8005530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005534:	460c      	mov	r4, r1
 8005536:	6849      	ldr	r1, [r1, #4]
 8005538:	6923      	ldr	r3, [r4, #16]
 800553a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800553e:	68a3      	ldr	r3, [r4, #8]
 8005540:	4607      	mov	r7, r0
 8005542:	4691      	mov	r9, r2
 8005544:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005548:	f108 0601 	add.w	r6, r8, #1
 800554c:	42b3      	cmp	r3, r6
 800554e:	db0b      	blt.n	8005568 <__lshift+0x38>
 8005550:	4638      	mov	r0, r7
 8005552:	f7ff fddb 	bl	800510c <_Balloc>
 8005556:	4605      	mov	r5, r0
 8005558:	b948      	cbnz	r0, 800556e <__lshift+0x3e>
 800555a:	4602      	mov	r2, r0
 800555c:	4b28      	ldr	r3, [pc, #160]	; (8005600 <__lshift+0xd0>)
 800555e:	4829      	ldr	r0, [pc, #164]	; (8005604 <__lshift+0xd4>)
 8005560:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005564:	f000 fb76 	bl	8005c54 <__assert_func>
 8005568:	3101      	adds	r1, #1
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	e7ee      	b.n	800554c <__lshift+0x1c>
 800556e:	2300      	movs	r3, #0
 8005570:	f100 0114 	add.w	r1, r0, #20
 8005574:	f100 0210 	add.w	r2, r0, #16
 8005578:	4618      	mov	r0, r3
 800557a:	4553      	cmp	r3, sl
 800557c:	db33      	blt.n	80055e6 <__lshift+0xb6>
 800557e:	6920      	ldr	r0, [r4, #16]
 8005580:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005584:	f104 0314 	add.w	r3, r4, #20
 8005588:	f019 091f 	ands.w	r9, r9, #31
 800558c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005590:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005594:	d02b      	beq.n	80055ee <__lshift+0xbe>
 8005596:	f1c9 0e20 	rsb	lr, r9, #32
 800559a:	468a      	mov	sl, r1
 800559c:	2200      	movs	r2, #0
 800559e:	6818      	ldr	r0, [r3, #0]
 80055a0:	fa00 f009 	lsl.w	r0, r0, r9
 80055a4:	4302      	orrs	r2, r0
 80055a6:	f84a 2b04 	str.w	r2, [sl], #4
 80055aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80055ae:	459c      	cmp	ip, r3
 80055b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80055b4:	d8f3      	bhi.n	800559e <__lshift+0x6e>
 80055b6:	ebac 0304 	sub.w	r3, ip, r4
 80055ba:	3b15      	subs	r3, #21
 80055bc:	f023 0303 	bic.w	r3, r3, #3
 80055c0:	3304      	adds	r3, #4
 80055c2:	f104 0015 	add.w	r0, r4, #21
 80055c6:	4584      	cmp	ip, r0
 80055c8:	bf38      	it	cc
 80055ca:	2304      	movcc	r3, #4
 80055cc:	50ca      	str	r2, [r1, r3]
 80055ce:	b10a      	cbz	r2, 80055d4 <__lshift+0xa4>
 80055d0:	f108 0602 	add.w	r6, r8, #2
 80055d4:	3e01      	subs	r6, #1
 80055d6:	4638      	mov	r0, r7
 80055d8:	612e      	str	r6, [r5, #16]
 80055da:	4621      	mov	r1, r4
 80055dc:	f7ff fdd6 	bl	800518c <_Bfree>
 80055e0:	4628      	mov	r0, r5
 80055e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80055ea:	3301      	adds	r3, #1
 80055ec:	e7c5      	b.n	800557a <__lshift+0x4a>
 80055ee:	3904      	subs	r1, #4
 80055f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80055f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80055f8:	459c      	cmp	ip, r3
 80055fa:	d8f9      	bhi.n	80055f0 <__lshift+0xc0>
 80055fc:	e7ea      	b.n	80055d4 <__lshift+0xa4>
 80055fe:	bf00      	nop
 8005600:	080078a3 	.word	0x080078a3
 8005604:	080078b4 	.word	0x080078b4

08005608 <__mcmp>:
 8005608:	b530      	push	{r4, r5, lr}
 800560a:	6902      	ldr	r2, [r0, #16]
 800560c:	690c      	ldr	r4, [r1, #16]
 800560e:	1b12      	subs	r2, r2, r4
 8005610:	d10e      	bne.n	8005630 <__mcmp+0x28>
 8005612:	f100 0314 	add.w	r3, r0, #20
 8005616:	3114      	adds	r1, #20
 8005618:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800561c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005620:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005624:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005628:	42a5      	cmp	r5, r4
 800562a:	d003      	beq.n	8005634 <__mcmp+0x2c>
 800562c:	d305      	bcc.n	800563a <__mcmp+0x32>
 800562e:	2201      	movs	r2, #1
 8005630:	4610      	mov	r0, r2
 8005632:	bd30      	pop	{r4, r5, pc}
 8005634:	4283      	cmp	r3, r0
 8005636:	d3f3      	bcc.n	8005620 <__mcmp+0x18>
 8005638:	e7fa      	b.n	8005630 <__mcmp+0x28>
 800563a:	f04f 32ff 	mov.w	r2, #4294967295
 800563e:	e7f7      	b.n	8005630 <__mcmp+0x28>

08005640 <__mdiff>:
 8005640:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005644:	460c      	mov	r4, r1
 8005646:	4606      	mov	r6, r0
 8005648:	4611      	mov	r1, r2
 800564a:	4620      	mov	r0, r4
 800564c:	4617      	mov	r7, r2
 800564e:	f7ff ffdb 	bl	8005608 <__mcmp>
 8005652:	1e05      	subs	r5, r0, #0
 8005654:	d110      	bne.n	8005678 <__mdiff+0x38>
 8005656:	4629      	mov	r1, r5
 8005658:	4630      	mov	r0, r6
 800565a:	f7ff fd57 	bl	800510c <_Balloc>
 800565e:	b930      	cbnz	r0, 800566e <__mdiff+0x2e>
 8005660:	4b39      	ldr	r3, [pc, #228]	; (8005748 <__mdiff+0x108>)
 8005662:	4602      	mov	r2, r0
 8005664:	f240 2132 	movw	r1, #562	; 0x232
 8005668:	4838      	ldr	r0, [pc, #224]	; (800574c <__mdiff+0x10c>)
 800566a:	f000 faf3 	bl	8005c54 <__assert_func>
 800566e:	2301      	movs	r3, #1
 8005670:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005674:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005678:	bfa4      	itt	ge
 800567a:	463b      	movge	r3, r7
 800567c:	4627      	movge	r7, r4
 800567e:	4630      	mov	r0, r6
 8005680:	6879      	ldr	r1, [r7, #4]
 8005682:	bfa6      	itte	ge
 8005684:	461c      	movge	r4, r3
 8005686:	2500      	movge	r5, #0
 8005688:	2501      	movlt	r5, #1
 800568a:	f7ff fd3f 	bl	800510c <_Balloc>
 800568e:	b920      	cbnz	r0, 800569a <__mdiff+0x5a>
 8005690:	4b2d      	ldr	r3, [pc, #180]	; (8005748 <__mdiff+0x108>)
 8005692:	4602      	mov	r2, r0
 8005694:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005698:	e7e6      	b.n	8005668 <__mdiff+0x28>
 800569a:	693e      	ldr	r6, [r7, #16]
 800569c:	60c5      	str	r5, [r0, #12]
 800569e:	6925      	ldr	r5, [r4, #16]
 80056a0:	f107 0114 	add.w	r1, r7, #20
 80056a4:	f104 0914 	add.w	r9, r4, #20
 80056a8:	f100 0e14 	add.w	lr, r0, #20
 80056ac:	f107 0210 	add.w	r2, r7, #16
 80056b0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80056b4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80056b8:	46f2      	mov	sl, lr
 80056ba:	2700      	movs	r7, #0
 80056bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80056c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80056c4:	fa1f f883 	uxth.w	r8, r3
 80056c8:	fa17 f78b 	uxtah	r7, r7, fp
 80056cc:	0c1b      	lsrs	r3, r3, #16
 80056ce:	eba7 0808 	sub.w	r8, r7, r8
 80056d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80056d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80056da:	fa1f f888 	uxth.w	r8, r8
 80056de:	141f      	asrs	r7, r3, #16
 80056e0:	454d      	cmp	r5, r9
 80056e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80056e6:	f84a 3b04 	str.w	r3, [sl], #4
 80056ea:	d8e7      	bhi.n	80056bc <__mdiff+0x7c>
 80056ec:	1b2b      	subs	r3, r5, r4
 80056ee:	3b15      	subs	r3, #21
 80056f0:	f023 0303 	bic.w	r3, r3, #3
 80056f4:	3304      	adds	r3, #4
 80056f6:	3415      	adds	r4, #21
 80056f8:	42a5      	cmp	r5, r4
 80056fa:	bf38      	it	cc
 80056fc:	2304      	movcc	r3, #4
 80056fe:	4419      	add	r1, r3
 8005700:	4473      	add	r3, lr
 8005702:	469e      	mov	lr, r3
 8005704:	460d      	mov	r5, r1
 8005706:	4565      	cmp	r5, ip
 8005708:	d30e      	bcc.n	8005728 <__mdiff+0xe8>
 800570a:	f10c 0203 	add.w	r2, ip, #3
 800570e:	1a52      	subs	r2, r2, r1
 8005710:	f022 0203 	bic.w	r2, r2, #3
 8005714:	3903      	subs	r1, #3
 8005716:	458c      	cmp	ip, r1
 8005718:	bf38      	it	cc
 800571a:	2200      	movcc	r2, #0
 800571c:	441a      	add	r2, r3
 800571e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005722:	b17b      	cbz	r3, 8005744 <__mdiff+0x104>
 8005724:	6106      	str	r6, [r0, #16]
 8005726:	e7a5      	b.n	8005674 <__mdiff+0x34>
 8005728:	f855 8b04 	ldr.w	r8, [r5], #4
 800572c:	fa17 f488 	uxtah	r4, r7, r8
 8005730:	1422      	asrs	r2, r4, #16
 8005732:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8005736:	b2a4      	uxth	r4, r4
 8005738:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800573c:	f84e 4b04 	str.w	r4, [lr], #4
 8005740:	1417      	asrs	r7, r2, #16
 8005742:	e7e0      	b.n	8005706 <__mdiff+0xc6>
 8005744:	3e01      	subs	r6, #1
 8005746:	e7ea      	b.n	800571e <__mdiff+0xde>
 8005748:	080078a3 	.word	0x080078a3
 800574c:	080078b4 	.word	0x080078b4

08005750 <__d2b>:
 8005750:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005754:	4689      	mov	r9, r1
 8005756:	2101      	movs	r1, #1
 8005758:	ec57 6b10 	vmov	r6, r7, d0
 800575c:	4690      	mov	r8, r2
 800575e:	f7ff fcd5 	bl	800510c <_Balloc>
 8005762:	4604      	mov	r4, r0
 8005764:	b930      	cbnz	r0, 8005774 <__d2b+0x24>
 8005766:	4602      	mov	r2, r0
 8005768:	4b25      	ldr	r3, [pc, #148]	; (8005800 <__d2b+0xb0>)
 800576a:	4826      	ldr	r0, [pc, #152]	; (8005804 <__d2b+0xb4>)
 800576c:	f240 310a 	movw	r1, #778	; 0x30a
 8005770:	f000 fa70 	bl	8005c54 <__assert_func>
 8005774:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005778:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800577c:	bb35      	cbnz	r5, 80057cc <__d2b+0x7c>
 800577e:	2e00      	cmp	r6, #0
 8005780:	9301      	str	r3, [sp, #4]
 8005782:	d028      	beq.n	80057d6 <__d2b+0x86>
 8005784:	4668      	mov	r0, sp
 8005786:	9600      	str	r6, [sp, #0]
 8005788:	f7ff fd8c 	bl	80052a4 <__lo0bits>
 800578c:	9900      	ldr	r1, [sp, #0]
 800578e:	b300      	cbz	r0, 80057d2 <__d2b+0x82>
 8005790:	9a01      	ldr	r2, [sp, #4]
 8005792:	f1c0 0320 	rsb	r3, r0, #32
 8005796:	fa02 f303 	lsl.w	r3, r2, r3
 800579a:	430b      	orrs	r3, r1
 800579c:	40c2      	lsrs	r2, r0
 800579e:	6163      	str	r3, [r4, #20]
 80057a0:	9201      	str	r2, [sp, #4]
 80057a2:	9b01      	ldr	r3, [sp, #4]
 80057a4:	61a3      	str	r3, [r4, #24]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	bf14      	ite	ne
 80057aa:	2202      	movne	r2, #2
 80057ac:	2201      	moveq	r2, #1
 80057ae:	6122      	str	r2, [r4, #16]
 80057b0:	b1d5      	cbz	r5, 80057e8 <__d2b+0x98>
 80057b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80057b6:	4405      	add	r5, r0
 80057b8:	f8c9 5000 	str.w	r5, [r9]
 80057bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80057c0:	f8c8 0000 	str.w	r0, [r8]
 80057c4:	4620      	mov	r0, r4
 80057c6:	b003      	add	sp, #12
 80057c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057d0:	e7d5      	b.n	800577e <__d2b+0x2e>
 80057d2:	6161      	str	r1, [r4, #20]
 80057d4:	e7e5      	b.n	80057a2 <__d2b+0x52>
 80057d6:	a801      	add	r0, sp, #4
 80057d8:	f7ff fd64 	bl	80052a4 <__lo0bits>
 80057dc:	9b01      	ldr	r3, [sp, #4]
 80057de:	6163      	str	r3, [r4, #20]
 80057e0:	2201      	movs	r2, #1
 80057e2:	6122      	str	r2, [r4, #16]
 80057e4:	3020      	adds	r0, #32
 80057e6:	e7e3      	b.n	80057b0 <__d2b+0x60>
 80057e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80057ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80057f0:	f8c9 0000 	str.w	r0, [r9]
 80057f4:	6918      	ldr	r0, [r3, #16]
 80057f6:	f7ff fd35 	bl	8005264 <__hi0bits>
 80057fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80057fe:	e7df      	b.n	80057c0 <__d2b+0x70>
 8005800:	080078a3 	.word	0x080078a3
 8005804:	080078b4 	.word	0x080078b4

08005808 <_calloc_r>:
 8005808:	b513      	push	{r0, r1, r4, lr}
 800580a:	434a      	muls	r2, r1
 800580c:	4611      	mov	r1, r2
 800580e:	9201      	str	r2, [sp, #4]
 8005810:	f000 f85a 	bl	80058c8 <_malloc_r>
 8005814:	4604      	mov	r4, r0
 8005816:	b118      	cbz	r0, 8005820 <_calloc_r+0x18>
 8005818:	9a01      	ldr	r2, [sp, #4]
 800581a:	2100      	movs	r1, #0
 800581c:	f7fe f94a 	bl	8003ab4 <memset>
 8005820:	4620      	mov	r0, r4
 8005822:	b002      	add	sp, #8
 8005824:	bd10      	pop	{r4, pc}
	...

08005828 <_free_r>:
 8005828:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800582a:	2900      	cmp	r1, #0
 800582c:	d048      	beq.n	80058c0 <_free_r+0x98>
 800582e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005832:	9001      	str	r0, [sp, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	f1a1 0404 	sub.w	r4, r1, #4
 800583a:	bfb8      	it	lt
 800583c:	18e4      	addlt	r4, r4, r3
 800583e:	f000 fa65 	bl	8005d0c <__malloc_lock>
 8005842:	4a20      	ldr	r2, [pc, #128]	; (80058c4 <_free_r+0x9c>)
 8005844:	9801      	ldr	r0, [sp, #4]
 8005846:	6813      	ldr	r3, [r2, #0]
 8005848:	4615      	mov	r5, r2
 800584a:	b933      	cbnz	r3, 800585a <_free_r+0x32>
 800584c:	6063      	str	r3, [r4, #4]
 800584e:	6014      	str	r4, [r2, #0]
 8005850:	b003      	add	sp, #12
 8005852:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005856:	f000 ba5f 	b.w	8005d18 <__malloc_unlock>
 800585a:	42a3      	cmp	r3, r4
 800585c:	d90b      	bls.n	8005876 <_free_r+0x4e>
 800585e:	6821      	ldr	r1, [r4, #0]
 8005860:	1862      	adds	r2, r4, r1
 8005862:	4293      	cmp	r3, r2
 8005864:	bf04      	itt	eq
 8005866:	681a      	ldreq	r2, [r3, #0]
 8005868:	685b      	ldreq	r3, [r3, #4]
 800586a:	6063      	str	r3, [r4, #4]
 800586c:	bf04      	itt	eq
 800586e:	1852      	addeq	r2, r2, r1
 8005870:	6022      	streq	r2, [r4, #0]
 8005872:	602c      	str	r4, [r5, #0]
 8005874:	e7ec      	b.n	8005850 <_free_r+0x28>
 8005876:	461a      	mov	r2, r3
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	b10b      	cbz	r3, 8005880 <_free_r+0x58>
 800587c:	42a3      	cmp	r3, r4
 800587e:	d9fa      	bls.n	8005876 <_free_r+0x4e>
 8005880:	6811      	ldr	r1, [r2, #0]
 8005882:	1855      	adds	r5, r2, r1
 8005884:	42a5      	cmp	r5, r4
 8005886:	d10b      	bne.n	80058a0 <_free_r+0x78>
 8005888:	6824      	ldr	r4, [r4, #0]
 800588a:	4421      	add	r1, r4
 800588c:	1854      	adds	r4, r2, r1
 800588e:	42a3      	cmp	r3, r4
 8005890:	6011      	str	r1, [r2, #0]
 8005892:	d1dd      	bne.n	8005850 <_free_r+0x28>
 8005894:	681c      	ldr	r4, [r3, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	6053      	str	r3, [r2, #4]
 800589a:	4421      	add	r1, r4
 800589c:	6011      	str	r1, [r2, #0]
 800589e:	e7d7      	b.n	8005850 <_free_r+0x28>
 80058a0:	d902      	bls.n	80058a8 <_free_r+0x80>
 80058a2:	230c      	movs	r3, #12
 80058a4:	6003      	str	r3, [r0, #0]
 80058a6:	e7d3      	b.n	8005850 <_free_r+0x28>
 80058a8:	6825      	ldr	r5, [r4, #0]
 80058aa:	1961      	adds	r1, r4, r5
 80058ac:	428b      	cmp	r3, r1
 80058ae:	bf04      	itt	eq
 80058b0:	6819      	ldreq	r1, [r3, #0]
 80058b2:	685b      	ldreq	r3, [r3, #4]
 80058b4:	6063      	str	r3, [r4, #4]
 80058b6:	bf04      	itt	eq
 80058b8:	1949      	addeq	r1, r1, r5
 80058ba:	6021      	streq	r1, [r4, #0]
 80058bc:	6054      	str	r4, [r2, #4]
 80058be:	e7c7      	b.n	8005850 <_free_r+0x28>
 80058c0:	b003      	add	sp, #12
 80058c2:	bd30      	pop	{r4, r5, pc}
 80058c4:	20000200 	.word	0x20000200

080058c8 <_malloc_r>:
 80058c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ca:	1ccd      	adds	r5, r1, #3
 80058cc:	f025 0503 	bic.w	r5, r5, #3
 80058d0:	3508      	adds	r5, #8
 80058d2:	2d0c      	cmp	r5, #12
 80058d4:	bf38      	it	cc
 80058d6:	250c      	movcc	r5, #12
 80058d8:	2d00      	cmp	r5, #0
 80058da:	4606      	mov	r6, r0
 80058dc:	db01      	blt.n	80058e2 <_malloc_r+0x1a>
 80058de:	42a9      	cmp	r1, r5
 80058e0:	d903      	bls.n	80058ea <_malloc_r+0x22>
 80058e2:	230c      	movs	r3, #12
 80058e4:	6033      	str	r3, [r6, #0]
 80058e6:	2000      	movs	r0, #0
 80058e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058ea:	f000 fa0f 	bl	8005d0c <__malloc_lock>
 80058ee:	4921      	ldr	r1, [pc, #132]	; (8005974 <_malloc_r+0xac>)
 80058f0:	680a      	ldr	r2, [r1, #0]
 80058f2:	4614      	mov	r4, r2
 80058f4:	b99c      	cbnz	r4, 800591e <_malloc_r+0x56>
 80058f6:	4f20      	ldr	r7, [pc, #128]	; (8005978 <_malloc_r+0xb0>)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	b923      	cbnz	r3, 8005906 <_malloc_r+0x3e>
 80058fc:	4621      	mov	r1, r4
 80058fe:	4630      	mov	r0, r6
 8005900:	f000 f998 	bl	8005c34 <_sbrk_r>
 8005904:	6038      	str	r0, [r7, #0]
 8005906:	4629      	mov	r1, r5
 8005908:	4630      	mov	r0, r6
 800590a:	f000 f993 	bl	8005c34 <_sbrk_r>
 800590e:	1c43      	adds	r3, r0, #1
 8005910:	d123      	bne.n	800595a <_malloc_r+0x92>
 8005912:	230c      	movs	r3, #12
 8005914:	6033      	str	r3, [r6, #0]
 8005916:	4630      	mov	r0, r6
 8005918:	f000 f9fe 	bl	8005d18 <__malloc_unlock>
 800591c:	e7e3      	b.n	80058e6 <_malloc_r+0x1e>
 800591e:	6823      	ldr	r3, [r4, #0]
 8005920:	1b5b      	subs	r3, r3, r5
 8005922:	d417      	bmi.n	8005954 <_malloc_r+0x8c>
 8005924:	2b0b      	cmp	r3, #11
 8005926:	d903      	bls.n	8005930 <_malloc_r+0x68>
 8005928:	6023      	str	r3, [r4, #0]
 800592a:	441c      	add	r4, r3
 800592c:	6025      	str	r5, [r4, #0]
 800592e:	e004      	b.n	800593a <_malloc_r+0x72>
 8005930:	6863      	ldr	r3, [r4, #4]
 8005932:	42a2      	cmp	r2, r4
 8005934:	bf0c      	ite	eq
 8005936:	600b      	streq	r3, [r1, #0]
 8005938:	6053      	strne	r3, [r2, #4]
 800593a:	4630      	mov	r0, r6
 800593c:	f000 f9ec 	bl	8005d18 <__malloc_unlock>
 8005940:	f104 000b 	add.w	r0, r4, #11
 8005944:	1d23      	adds	r3, r4, #4
 8005946:	f020 0007 	bic.w	r0, r0, #7
 800594a:	1ac2      	subs	r2, r0, r3
 800594c:	d0cc      	beq.n	80058e8 <_malloc_r+0x20>
 800594e:	1a1b      	subs	r3, r3, r0
 8005950:	50a3      	str	r3, [r4, r2]
 8005952:	e7c9      	b.n	80058e8 <_malloc_r+0x20>
 8005954:	4622      	mov	r2, r4
 8005956:	6864      	ldr	r4, [r4, #4]
 8005958:	e7cc      	b.n	80058f4 <_malloc_r+0x2c>
 800595a:	1cc4      	adds	r4, r0, #3
 800595c:	f024 0403 	bic.w	r4, r4, #3
 8005960:	42a0      	cmp	r0, r4
 8005962:	d0e3      	beq.n	800592c <_malloc_r+0x64>
 8005964:	1a21      	subs	r1, r4, r0
 8005966:	4630      	mov	r0, r6
 8005968:	f000 f964 	bl	8005c34 <_sbrk_r>
 800596c:	3001      	adds	r0, #1
 800596e:	d1dd      	bne.n	800592c <_malloc_r+0x64>
 8005970:	e7cf      	b.n	8005912 <_malloc_r+0x4a>
 8005972:	bf00      	nop
 8005974:	20000200 	.word	0x20000200
 8005978:	20000204 	.word	0x20000204

0800597c <__ssputs_r>:
 800597c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005980:	688e      	ldr	r6, [r1, #8]
 8005982:	429e      	cmp	r6, r3
 8005984:	4682      	mov	sl, r0
 8005986:	460c      	mov	r4, r1
 8005988:	4690      	mov	r8, r2
 800598a:	461f      	mov	r7, r3
 800598c:	d838      	bhi.n	8005a00 <__ssputs_r+0x84>
 800598e:	898a      	ldrh	r2, [r1, #12]
 8005990:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005994:	d032      	beq.n	80059fc <__ssputs_r+0x80>
 8005996:	6825      	ldr	r5, [r4, #0]
 8005998:	6909      	ldr	r1, [r1, #16]
 800599a:	eba5 0901 	sub.w	r9, r5, r1
 800599e:	6965      	ldr	r5, [r4, #20]
 80059a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059a8:	3301      	adds	r3, #1
 80059aa:	444b      	add	r3, r9
 80059ac:	106d      	asrs	r5, r5, #1
 80059ae:	429d      	cmp	r5, r3
 80059b0:	bf38      	it	cc
 80059b2:	461d      	movcc	r5, r3
 80059b4:	0553      	lsls	r3, r2, #21
 80059b6:	d531      	bpl.n	8005a1c <__ssputs_r+0xa0>
 80059b8:	4629      	mov	r1, r5
 80059ba:	f7ff ff85 	bl	80058c8 <_malloc_r>
 80059be:	4606      	mov	r6, r0
 80059c0:	b950      	cbnz	r0, 80059d8 <__ssputs_r+0x5c>
 80059c2:	230c      	movs	r3, #12
 80059c4:	f8ca 3000 	str.w	r3, [sl]
 80059c8:	89a3      	ldrh	r3, [r4, #12]
 80059ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059ce:	81a3      	strh	r3, [r4, #12]
 80059d0:	f04f 30ff 	mov.w	r0, #4294967295
 80059d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059d8:	6921      	ldr	r1, [r4, #16]
 80059da:	464a      	mov	r2, r9
 80059dc:	f7ff fb88 	bl	80050f0 <memcpy>
 80059e0:	89a3      	ldrh	r3, [r4, #12]
 80059e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ea:	81a3      	strh	r3, [r4, #12]
 80059ec:	6126      	str	r6, [r4, #16]
 80059ee:	6165      	str	r5, [r4, #20]
 80059f0:	444e      	add	r6, r9
 80059f2:	eba5 0509 	sub.w	r5, r5, r9
 80059f6:	6026      	str	r6, [r4, #0]
 80059f8:	60a5      	str	r5, [r4, #8]
 80059fa:	463e      	mov	r6, r7
 80059fc:	42be      	cmp	r6, r7
 80059fe:	d900      	bls.n	8005a02 <__ssputs_r+0x86>
 8005a00:	463e      	mov	r6, r7
 8005a02:	4632      	mov	r2, r6
 8005a04:	6820      	ldr	r0, [r4, #0]
 8005a06:	4641      	mov	r1, r8
 8005a08:	f000 f966 	bl	8005cd8 <memmove>
 8005a0c:	68a3      	ldr	r3, [r4, #8]
 8005a0e:	6822      	ldr	r2, [r4, #0]
 8005a10:	1b9b      	subs	r3, r3, r6
 8005a12:	4432      	add	r2, r6
 8005a14:	60a3      	str	r3, [r4, #8]
 8005a16:	6022      	str	r2, [r4, #0]
 8005a18:	2000      	movs	r0, #0
 8005a1a:	e7db      	b.n	80059d4 <__ssputs_r+0x58>
 8005a1c:	462a      	mov	r2, r5
 8005a1e:	f000 f981 	bl	8005d24 <_realloc_r>
 8005a22:	4606      	mov	r6, r0
 8005a24:	2800      	cmp	r0, #0
 8005a26:	d1e1      	bne.n	80059ec <__ssputs_r+0x70>
 8005a28:	6921      	ldr	r1, [r4, #16]
 8005a2a:	4650      	mov	r0, sl
 8005a2c:	f7ff fefc 	bl	8005828 <_free_r>
 8005a30:	e7c7      	b.n	80059c2 <__ssputs_r+0x46>
	...

08005a34 <_svfiprintf_r>:
 8005a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a38:	4698      	mov	r8, r3
 8005a3a:	898b      	ldrh	r3, [r1, #12]
 8005a3c:	061b      	lsls	r3, r3, #24
 8005a3e:	b09d      	sub	sp, #116	; 0x74
 8005a40:	4607      	mov	r7, r0
 8005a42:	460d      	mov	r5, r1
 8005a44:	4614      	mov	r4, r2
 8005a46:	d50e      	bpl.n	8005a66 <_svfiprintf_r+0x32>
 8005a48:	690b      	ldr	r3, [r1, #16]
 8005a4a:	b963      	cbnz	r3, 8005a66 <_svfiprintf_r+0x32>
 8005a4c:	2140      	movs	r1, #64	; 0x40
 8005a4e:	f7ff ff3b 	bl	80058c8 <_malloc_r>
 8005a52:	6028      	str	r0, [r5, #0]
 8005a54:	6128      	str	r0, [r5, #16]
 8005a56:	b920      	cbnz	r0, 8005a62 <_svfiprintf_r+0x2e>
 8005a58:	230c      	movs	r3, #12
 8005a5a:	603b      	str	r3, [r7, #0]
 8005a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a60:	e0d1      	b.n	8005c06 <_svfiprintf_r+0x1d2>
 8005a62:	2340      	movs	r3, #64	; 0x40
 8005a64:	616b      	str	r3, [r5, #20]
 8005a66:	2300      	movs	r3, #0
 8005a68:	9309      	str	r3, [sp, #36]	; 0x24
 8005a6a:	2320      	movs	r3, #32
 8005a6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a70:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a74:	2330      	movs	r3, #48	; 0x30
 8005a76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005c20 <_svfiprintf_r+0x1ec>
 8005a7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a7e:	f04f 0901 	mov.w	r9, #1
 8005a82:	4623      	mov	r3, r4
 8005a84:	469a      	mov	sl, r3
 8005a86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a8a:	b10a      	cbz	r2, 8005a90 <_svfiprintf_r+0x5c>
 8005a8c:	2a25      	cmp	r2, #37	; 0x25
 8005a8e:	d1f9      	bne.n	8005a84 <_svfiprintf_r+0x50>
 8005a90:	ebba 0b04 	subs.w	fp, sl, r4
 8005a94:	d00b      	beq.n	8005aae <_svfiprintf_r+0x7a>
 8005a96:	465b      	mov	r3, fp
 8005a98:	4622      	mov	r2, r4
 8005a9a:	4629      	mov	r1, r5
 8005a9c:	4638      	mov	r0, r7
 8005a9e:	f7ff ff6d 	bl	800597c <__ssputs_r>
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	f000 80aa 	beq.w	8005bfc <_svfiprintf_r+0x1c8>
 8005aa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005aaa:	445a      	add	r2, fp
 8005aac:	9209      	str	r2, [sp, #36]	; 0x24
 8005aae:	f89a 3000 	ldrb.w	r3, [sl]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 80a2 	beq.w	8005bfc <_svfiprintf_r+0x1c8>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f04f 32ff 	mov.w	r2, #4294967295
 8005abe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ac2:	f10a 0a01 	add.w	sl, sl, #1
 8005ac6:	9304      	str	r3, [sp, #16]
 8005ac8:	9307      	str	r3, [sp, #28]
 8005aca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ace:	931a      	str	r3, [sp, #104]	; 0x68
 8005ad0:	4654      	mov	r4, sl
 8005ad2:	2205      	movs	r2, #5
 8005ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ad8:	4851      	ldr	r0, [pc, #324]	; (8005c20 <_svfiprintf_r+0x1ec>)
 8005ada:	f7fa fb81 	bl	80001e0 <memchr>
 8005ade:	9a04      	ldr	r2, [sp, #16]
 8005ae0:	b9d8      	cbnz	r0, 8005b1a <_svfiprintf_r+0xe6>
 8005ae2:	06d0      	lsls	r0, r2, #27
 8005ae4:	bf44      	itt	mi
 8005ae6:	2320      	movmi	r3, #32
 8005ae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005aec:	0711      	lsls	r1, r2, #28
 8005aee:	bf44      	itt	mi
 8005af0:	232b      	movmi	r3, #43	; 0x2b
 8005af2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005af6:	f89a 3000 	ldrb.w	r3, [sl]
 8005afa:	2b2a      	cmp	r3, #42	; 0x2a
 8005afc:	d015      	beq.n	8005b2a <_svfiprintf_r+0xf6>
 8005afe:	9a07      	ldr	r2, [sp, #28]
 8005b00:	4654      	mov	r4, sl
 8005b02:	2000      	movs	r0, #0
 8005b04:	f04f 0c0a 	mov.w	ip, #10
 8005b08:	4621      	mov	r1, r4
 8005b0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b0e:	3b30      	subs	r3, #48	; 0x30
 8005b10:	2b09      	cmp	r3, #9
 8005b12:	d94e      	bls.n	8005bb2 <_svfiprintf_r+0x17e>
 8005b14:	b1b0      	cbz	r0, 8005b44 <_svfiprintf_r+0x110>
 8005b16:	9207      	str	r2, [sp, #28]
 8005b18:	e014      	b.n	8005b44 <_svfiprintf_r+0x110>
 8005b1a:	eba0 0308 	sub.w	r3, r0, r8
 8005b1e:	fa09 f303 	lsl.w	r3, r9, r3
 8005b22:	4313      	orrs	r3, r2
 8005b24:	9304      	str	r3, [sp, #16]
 8005b26:	46a2      	mov	sl, r4
 8005b28:	e7d2      	b.n	8005ad0 <_svfiprintf_r+0x9c>
 8005b2a:	9b03      	ldr	r3, [sp, #12]
 8005b2c:	1d19      	adds	r1, r3, #4
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	9103      	str	r1, [sp, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	bfbb      	ittet	lt
 8005b36:	425b      	neglt	r3, r3
 8005b38:	f042 0202 	orrlt.w	r2, r2, #2
 8005b3c:	9307      	strge	r3, [sp, #28]
 8005b3e:	9307      	strlt	r3, [sp, #28]
 8005b40:	bfb8      	it	lt
 8005b42:	9204      	strlt	r2, [sp, #16]
 8005b44:	7823      	ldrb	r3, [r4, #0]
 8005b46:	2b2e      	cmp	r3, #46	; 0x2e
 8005b48:	d10c      	bne.n	8005b64 <_svfiprintf_r+0x130>
 8005b4a:	7863      	ldrb	r3, [r4, #1]
 8005b4c:	2b2a      	cmp	r3, #42	; 0x2a
 8005b4e:	d135      	bne.n	8005bbc <_svfiprintf_r+0x188>
 8005b50:	9b03      	ldr	r3, [sp, #12]
 8005b52:	1d1a      	adds	r2, r3, #4
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	9203      	str	r2, [sp, #12]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	bfb8      	it	lt
 8005b5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b60:	3402      	adds	r4, #2
 8005b62:	9305      	str	r3, [sp, #20]
 8005b64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005c30 <_svfiprintf_r+0x1fc>
 8005b68:	7821      	ldrb	r1, [r4, #0]
 8005b6a:	2203      	movs	r2, #3
 8005b6c:	4650      	mov	r0, sl
 8005b6e:	f7fa fb37 	bl	80001e0 <memchr>
 8005b72:	b140      	cbz	r0, 8005b86 <_svfiprintf_r+0x152>
 8005b74:	2340      	movs	r3, #64	; 0x40
 8005b76:	eba0 000a 	sub.w	r0, r0, sl
 8005b7a:	fa03 f000 	lsl.w	r0, r3, r0
 8005b7e:	9b04      	ldr	r3, [sp, #16]
 8005b80:	4303      	orrs	r3, r0
 8005b82:	3401      	adds	r4, #1
 8005b84:	9304      	str	r3, [sp, #16]
 8005b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b8a:	4826      	ldr	r0, [pc, #152]	; (8005c24 <_svfiprintf_r+0x1f0>)
 8005b8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b90:	2206      	movs	r2, #6
 8005b92:	f7fa fb25 	bl	80001e0 <memchr>
 8005b96:	2800      	cmp	r0, #0
 8005b98:	d038      	beq.n	8005c0c <_svfiprintf_r+0x1d8>
 8005b9a:	4b23      	ldr	r3, [pc, #140]	; (8005c28 <_svfiprintf_r+0x1f4>)
 8005b9c:	bb1b      	cbnz	r3, 8005be6 <_svfiprintf_r+0x1b2>
 8005b9e:	9b03      	ldr	r3, [sp, #12]
 8005ba0:	3307      	adds	r3, #7
 8005ba2:	f023 0307 	bic.w	r3, r3, #7
 8005ba6:	3308      	adds	r3, #8
 8005ba8:	9303      	str	r3, [sp, #12]
 8005baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bac:	4433      	add	r3, r6
 8005bae:	9309      	str	r3, [sp, #36]	; 0x24
 8005bb0:	e767      	b.n	8005a82 <_svfiprintf_r+0x4e>
 8005bb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bb6:	460c      	mov	r4, r1
 8005bb8:	2001      	movs	r0, #1
 8005bba:	e7a5      	b.n	8005b08 <_svfiprintf_r+0xd4>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	3401      	adds	r4, #1
 8005bc0:	9305      	str	r3, [sp, #20]
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	f04f 0c0a 	mov.w	ip, #10
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bce:	3a30      	subs	r2, #48	; 0x30
 8005bd0:	2a09      	cmp	r2, #9
 8005bd2:	d903      	bls.n	8005bdc <_svfiprintf_r+0x1a8>
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d0c5      	beq.n	8005b64 <_svfiprintf_r+0x130>
 8005bd8:	9105      	str	r1, [sp, #20]
 8005bda:	e7c3      	b.n	8005b64 <_svfiprintf_r+0x130>
 8005bdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005be0:	4604      	mov	r4, r0
 8005be2:	2301      	movs	r3, #1
 8005be4:	e7f0      	b.n	8005bc8 <_svfiprintf_r+0x194>
 8005be6:	ab03      	add	r3, sp, #12
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	462a      	mov	r2, r5
 8005bec:	4b0f      	ldr	r3, [pc, #60]	; (8005c2c <_svfiprintf_r+0x1f8>)
 8005bee:	a904      	add	r1, sp, #16
 8005bf0:	4638      	mov	r0, r7
 8005bf2:	f7fe f807 	bl	8003c04 <_printf_float>
 8005bf6:	1c42      	adds	r2, r0, #1
 8005bf8:	4606      	mov	r6, r0
 8005bfa:	d1d6      	bne.n	8005baa <_svfiprintf_r+0x176>
 8005bfc:	89ab      	ldrh	r3, [r5, #12]
 8005bfe:	065b      	lsls	r3, r3, #25
 8005c00:	f53f af2c 	bmi.w	8005a5c <_svfiprintf_r+0x28>
 8005c04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c06:	b01d      	add	sp, #116	; 0x74
 8005c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c0c:	ab03      	add	r3, sp, #12
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	462a      	mov	r2, r5
 8005c12:	4b06      	ldr	r3, [pc, #24]	; (8005c2c <_svfiprintf_r+0x1f8>)
 8005c14:	a904      	add	r1, sp, #16
 8005c16:	4638      	mov	r0, r7
 8005c18:	f7fe fa98 	bl	800414c <_printf_i>
 8005c1c:	e7eb      	b.n	8005bf6 <_svfiprintf_r+0x1c2>
 8005c1e:	bf00      	nop
 8005c20:	08007a14 	.word	0x08007a14
 8005c24:	08007a1e 	.word	0x08007a1e
 8005c28:	08003c05 	.word	0x08003c05
 8005c2c:	0800597d 	.word	0x0800597d
 8005c30:	08007a1a 	.word	0x08007a1a

08005c34 <_sbrk_r>:
 8005c34:	b538      	push	{r3, r4, r5, lr}
 8005c36:	4d06      	ldr	r5, [pc, #24]	; (8005c50 <_sbrk_r+0x1c>)
 8005c38:	2300      	movs	r3, #0
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	4608      	mov	r0, r1
 8005c3e:	602b      	str	r3, [r5, #0]
 8005c40:	f7fc fc44 	bl	80024cc <_sbrk>
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	d102      	bne.n	8005c4e <_sbrk_r+0x1a>
 8005c48:	682b      	ldr	r3, [r5, #0]
 8005c4a:	b103      	cbz	r3, 8005c4e <_sbrk_r+0x1a>
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	bd38      	pop	{r3, r4, r5, pc}
 8005c50:	2000024c 	.word	0x2000024c

08005c54 <__assert_func>:
 8005c54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c56:	4614      	mov	r4, r2
 8005c58:	461a      	mov	r2, r3
 8005c5a:	4b09      	ldr	r3, [pc, #36]	; (8005c80 <__assert_func+0x2c>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4605      	mov	r5, r0
 8005c60:	68d8      	ldr	r0, [r3, #12]
 8005c62:	b14c      	cbz	r4, 8005c78 <__assert_func+0x24>
 8005c64:	4b07      	ldr	r3, [pc, #28]	; (8005c84 <__assert_func+0x30>)
 8005c66:	9100      	str	r1, [sp, #0]
 8005c68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c6c:	4906      	ldr	r1, [pc, #24]	; (8005c88 <__assert_func+0x34>)
 8005c6e:	462b      	mov	r3, r5
 8005c70:	f000 f80e 	bl	8005c90 <fiprintf>
 8005c74:	f000 faa4 	bl	80061c0 <abort>
 8005c78:	4b04      	ldr	r3, [pc, #16]	; (8005c8c <__assert_func+0x38>)
 8005c7a:	461c      	mov	r4, r3
 8005c7c:	e7f3      	b.n	8005c66 <__assert_func+0x12>
 8005c7e:	bf00      	nop
 8005c80:	20000008 	.word	0x20000008
 8005c84:	08007a25 	.word	0x08007a25
 8005c88:	08007a32 	.word	0x08007a32
 8005c8c:	08007a60 	.word	0x08007a60

08005c90 <fiprintf>:
 8005c90:	b40e      	push	{r1, r2, r3}
 8005c92:	b503      	push	{r0, r1, lr}
 8005c94:	4601      	mov	r1, r0
 8005c96:	ab03      	add	r3, sp, #12
 8005c98:	4805      	ldr	r0, [pc, #20]	; (8005cb0 <fiprintf+0x20>)
 8005c9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c9e:	6800      	ldr	r0, [r0, #0]
 8005ca0:	9301      	str	r3, [sp, #4]
 8005ca2:	f000 f88f 	bl	8005dc4 <_vfiprintf_r>
 8005ca6:	b002      	add	sp, #8
 8005ca8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cac:	b003      	add	sp, #12
 8005cae:	4770      	bx	lr
 8005cb0:	20000008 	.word	0x20000008

08005cb4 <__ascii_mbtowc>:
 8005cb4:	b082      	sub	sp, #8
 8005cb6:	b901      	cbnz	r1, 8005cba <__ascii_mbtowc+0x6>
 8005cb8:	a901      	add	r1, sp, #4
 8005cba:	b142      	cbz	r2, 8005cce <__ascii_mbtowc+0x1a>
 8005cbc:	b14b      	cbz	r3, 8005cd2 <__ascii_mbtowc+0x1e>
 8005cbe:	7813      	ldrb	r3, [r2, #0]
 8005cc0:	600b      	str	r3, [r1, #0]
 8005cc2:	7812      	ldrb	r2, [r2, #0]
 8005cc4:	1e10      	subs	r0, r2, #0
 8005cc6:	bf18      	it	ne
 8005cc8:	2001      	movne	r0, #1
 8005cca:	b002      	add	sp, #8
 8005ccc:	4770      	bx	lr
 8005cce:	4610      	mov	r0, r2
 8005cd0:	e7fb      	b.n	8005cca <__ascii_mbtowc+0x16>
 8005cd2:	f06f 0001 	mvn.w	r0, #1
 8005cd6:	e7f8      	b.n	8005cca <__ascii_mbtowc+0x16>

08005cd8 <memmove>:
 8005cd8:	4288      	cmp	r0, r1
 8005cda:	b510      	push	{r4, lr}
 8005cdc:	eb01 0402 	add.w	r4, r1, r2
 8005ce0:	d902      	bls.n	8005ce8 <memmove+0x10>
 8005ce2:	4284      	cmp	r4, r0
 8005ce4:	4623      	mov	r3, r4
 8005ce6:	d807      	bhi.n	8005cf8 <memmove+0x20>
 8005ce8:	1e43      	subs	r3, r0, #1
 8005cea:	42a1      	cmp	r1, r4
 8005cec:	d008      	beq.n	8005d00 <memmove+0x28>
 8005cee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005cf6:	e7f8      	b.n	8005cea <memmove+0x12>
 8005cf8:	4402      	add	r2, r0
 8005cfa:	4601      	mov	r1, r0
 8005cfc:	428a      	cmp	r2, r1
 8005cfe:	d100      	bne.n	8005d02 <memmove+0x2a>
 8005d00:	bd10      	pop	{r4, pc}
 8005d02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d0a:	e7f7      	b.n	8005cfc <memmove+0x24>

08005d0c <__malloc_lock>:
 8005d0c:	4801      	ldr	r0, [pc, #4]	; (8005d14 <__malloc_lock+0x8>)
 8005d0e:	f000 bc17 	b.w	8006540 <__retarget_lock_acquire_recursive>
 8005d12:	bf00      	nop
 8005d14:	20000254 	.word	0x20000254

08005d18 <__malloc_unlock>:
 8005d18:	4801      	ldr	r0, [pc, #4]	; (8005d20 <__malloc_unlock+0x8>)
 8005d1a:	f000 bc12 	b.w	8006542 <__retarget_lock_release_recursive>
 8005d1e:	bf00      	nop
 8005d20:	20000254 	.word	0x20000254

08005d24 <_realloc_r>:
 8005d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d26:	4607      	mov	r7, r0
 8005d28:	4614      	mov	r4, r2
 8005d2a:	460e      	mov	r6, r1
 8005d2c:	b921      	cbnz	r1, 8005d38 <_realloc_r+0x14>
 8005d2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005d32:	4611      	mov	r1, r2
 8005d34:	f7ff bdc8 	b.w	80058c8 <_malloc_r>
 8005d38:	b922      	cbnz	r2, 8005d44 <_realloc_r+0x20>
 8005d3a:	f7ff fd75 	bl	8005828 <_free_r>
 8005d3e:	4625      	mov	r5, r4
 8005d40:	4628      	mov	r0, r5
 8005d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d44:	f000 fc62 	bl	800660c <_malloc_usable_size_r>
 8005d48:	42a0      	cmp	r0, r4
 8005d4a:	d20f      	bcs.n	8005d6c <_realloc_r+0x48>
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	4638      	mov	r0, r7
 8005d50:	f7ff fdba 	bl	80058c8 <_malloc_r>
 8005d54:	4605      	mov	r5, r0
 8005d56:	2800      	cmp	r0, #0
 8005d58:	d0f2      	beq.n	8005d40 <_realloc_r+0x1c>
 8005d5a:	4631      	mov	r1, r6
 8005d5c:	4622      	mov	r2, r4
 8005d5e:	f7ff f9c7 	bl	80050f0 <memcpy>
 8005d62:	4631      	mov	r1, r6
 8005d64:	4638      	mov	r0, r7
 8005d66:	f7ff fd5f 	bl	8005828 <_free_r>
 8005d6a:	e7e9      	b.n	8005d40 <_realloc_r+0x1c>
 8005d6c:	4635      	mov	r5, r6
 8005d6e:	e7e7      	b.n	8005d40 <_realloc_r+0x1c>

08005d70 <__sfputc_r>:
 8005d70:	6893      	ldr	r3, [r2, #8]
 8005d72:	3b01      	subs	r3, #1
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	b410      	push	{r4}
 8005d78:	6093      	str	r3, [r2, #8]
 8005d7a:	da08      	bge.n	8005d8e <__sfputc_r+0x1e>
 8005d7c:	6994      	ldr	r4, [r2, #24]
 8005d7e:	42a3      	cmp	r3, r4
 8005d80:	db01      	blt.n	8005d86 <__sfputc_r+0x16>
 8005d82:	290a      	cmp	r1, #10
 8005d84:	d103      	bne.n	8005d8e <__sfputc_r+0x1e>
 8005d86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d8a:	f000 b94b 	b.w	8006024 <__swbuf_r>
 8005d8e:	6813      	ldr	r3, [r2, #0]
 8005d90:	1c58      	adds	r0, r3, #1
 8005d92:	6010      	str	r0, [r2, #0]
 8005d94:	7019      	strb	r1, [r3, #0]
 8005d96:	4608      	mov	r0, r1
 8005d98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <__sfputs_r>:
 8005d9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da0:	4606      	mov	r6, r0
 8005da2:	460f      	mov	r7, r1
 8005da4:	4614      	mov	r4, r2
 8005da6:	18d5      	adds	r5, r2, r3
 8005da8:	42ac      	cmp	r4, r5
 8005daa:	d101      	bne.n	8005db0 <__sfputs_r+0x12>
 8005dac:	2000      	movs	r0, #0
 8005dae:	e007      	b.n	8005dc0 <__sfputs_r+0x22>
 8005db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005db4:	463a      	mov	r2, r7
 8005db6:	4630      	mov	r0, r6
 8005db8:	f7ff ffda 	bl	8005d70 <__sfputc_r>
 8005dbc:	1c43      	adds	r3, r0, #1
 8005dbe:	d1f3      	bne.n	8005da8 <__sfputs_r+0xa>
 8005dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005dc4 <_vfiprintf_r>:
 8005dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc8:	460d      	mov	r5, r1
 8005dca:	b09d      	sub	sp, #116	; 0x74
 8005dcc:	4614      	mov	r4, r2
 8005dce:	4698      	mov	r8, r3
 8005dd0:	4606      	mov	r6, r0
 8005dd2:	b118      	cbz	r0, 8005ddc <_vfiprintf_r+0x18>
 8005dd4:	6983      	ldr	r3, [r0, #24]
 8005dd6:	b90b      	cbnz	r3, 8005ddc <_vfiprintf_r+0x18>
 8005dd8:	f000 fb14 	bl	8006404 <__sinit>
 8005ddc:	4b89      	ldr	r3, [pc, #548]	; (8006004 <_vfiprintf_r+0x240>)
 8005dde:	429d      	cmp	r5, r3
 8005de0:	d11b      	bne.n	8005e1a <_vfiprintf_r+0x56>
 8005de2:	6875      	ldr	r5, [r6, #4]
 8005de4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005de6:	07d9      	lsls	r1, r3, #31
 8005de8:	d405      	bmi.n	8005df6 <_vfiprintf_r+0x32>
 8005dea:	89ab      	ldrh	r3, [r5, #12]
 8005dec:	059a      	lsls	r2, r3, #22
 8005dee:	d402      	bmi.n	8005df6 <_vfiprintf_r+0x32>
 8005df0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005df2:	f000 fba5 	bl	8006540 <__retarget_lock_acquire_recursive>
 8005df6:	89ab      	ldrh	r3, [r5, #12]
 8005df8:	071b      	lsls	r3, r3, #28
 8005dfa:	d501      	bpl.n	8005e00 <_vfiprintf_r+0x3c>
 8005dfc:	692b      	ldr	r3, [r5, #16]
 8005dfe:	b9eb      	cbnz	r3, 8005e3c <_vfiprintf_r+0x78>
 8005e00:	4629      	mov	r1, r5
 8005e02:	4630      	mov	r0, r6
 8005e04:	f000 f96e 	bl	80060e4 <__swsetup_r>
 8005e08:	b1c0      	cbz	r0, 8005e3c <_vfiprintf_r+0x78>
 8005e0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e0c:	07dc      	lsls	r4, r3, #31
 8005e0e:	d50e      	bpl.n	8005e2e <_vfiprintf_r+0x6a>
 8005e10:	f04f 30ff 	mov.w	r0, #4294967295
 8005e14:	b01d      	add	sp, #116	; 0x74
 8005e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e1a:	4b7b      	ldr	r3, [pc, #492]	; (8006008 <_vfiprintf_r+0x244>)
 8005e1c:	429d      	cmp	r5, r3
 8005e1e:	d101      	bne.n	8005e24 <_vfiprintf_r+0x60>
 8005e20:	68b5      	ldr	r5, [r6, #8]
 8005e22:	e7df      	b.n	8005de4 <_vfiprintf_r+0x20>
 8005e24:	4b79      	ldr	r3, [pc, #484]	; (800600c <_vfiprintf_r+0x248>)
 8005e26:	429d      	cmp	r5, r3
 8005e28:	bf08      	it	eq
 8005e2a:	68f5      	ldreq	r5, [r6, #12]
 8005e2c:	e7da      	b.n	8005de4 <_vfiprintf_r+0x20>
 8005e2e:	89ab      	ldrh	r3, [r5, #12]
 8005e30:	0598      	lsls	r0, r3, #22
 8005e32:	d4ed      	bmi.n	8005e10 <_vfiprintf_r+0x4c>
 8005e34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e36:	f000 fb84 	bl	8006542 <__retarget_lock_release_recursive>
 8005e3a:	e7e9      	b.n	8005e10 <_vfiprintf_r+0x4c>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e40:	2320      	movs	r3, #32
 8005e42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e46:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e4a:	2330      	movs	r3, #48	; 0x30
 8005e4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006010 <_vfiprintf_r+0x24c>
 8005e50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e54:	f04f 0901 	mov.w	r9, #1
 8005e58:	4623      	mov	r3, r4
 8005e5a:	469a      	mov	sl, r3
 8005e5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e60:	b10a      	cbz	r2, 8005e66 <_vfiprintf_r+0xa2>
 8005e62:	2a25      	cmp	r2, #37	; 0x25
 8005e64:	d1f9      	bne.n	8005e5a <_vfiprintf_r+0x96>
 8005e66:	ebba 0b04 	subs.w	fp, sl, r4
 8005e6a:	d00b      	beq.n	8005e84 <_vfiprintf_r+0xc0>
 8005e6c:	465b      	mov	r3, fp
 8005e6e:	4622      	mov	r2, r4
 8005e70:	4629      	mov	r1, r5
 8005e72:	4630      	mov	r0, r6
 8005e74:	f7ff ff93 	bl	8005d9e <__sfputs_r>
 8005e78:	3001      	adds	r0, #1
 8005e7a:	f000 80aa 	beq.w	8005fd2 <_vfiprintf_r+0x20e>
 8005e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e80:	445a      	add	r2, fp
 8005e82:	9209      	str	r2, [sp, #36]	; 0x24
 8005e84:	f89a 3000 	ldrb.w	r3, [sl]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 80a2 	beq.w	8005fd2 <_vfiprintf_r+0x20e>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	f04f 32ff 	mov.w	r2, #4294967295
 8005e94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e98:	f10a 0a01 	add.w	sl, sl, #1
 8005e9c:	9304      	str	r3, [sp, #16]
 8005e9e:	9307      	str	r3, [sp, #28]
 8005ea0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ea4:	931a      	str	r3, [sp, #104]	; 0x68
 8005ea6:	4654      	mov	r4, sl
 8005ea8:	2205      	movs	r2, #5
 8005eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eae:	4858      	ldr	r0, [pc, #352]	; (8006010 <_vfiprintf_r+0x24c>)
 8005eb0:	f7fa f996 	bl	80001e0 <memchr>
 8005eb4:	9a04      	ldr	r2, [sp, #16]
 8005eb6:	b9d8      	cbnz	r0, 8005ef0 <_vfiprintf_r+0x12c>
 8005eb8:	06d1      	lsls	r1, r2, #27
 8005eba:	bf44      	itt	mi
 8005ebc:	2320      	movmi	r3, #32
 8005ebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ec2:	0713      	lsls	r3, r2, #28
 8005ec4:	bf44      	itt	mi
 8005ec6:	232b      	movmi	r3, #43	; 0x2b
 8005ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8005ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ed2:	d015      	beq.n	8005f00 <_vfiprintf_r+0x13c>
 8005ed4:	9a07      	ldr	r2, [sp, #28]
 8005ed6:	4654      	mov	r4, sl
 8005ed8:	2000      	movs	r0, #0
 8005eda:	f04f 0c0a 	mov.w	ip, #10
 8005ede:	4621      	mov	r1, r4
 8005ee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ee4:	3b30      	subs	r3, #48	; 0x30
 8005ee6:	2b09      	cmp	r3, #9
 8005ee8:	d94e      	bls.n	8005f88 <_vfiprintf_r+0x1c4>
 8005eea:	b1b0      	cbz	r0, 8005f1a <_vfiprintf_r+0x156>
 8005eec:	9207      	str	r2, [sp, #28]
 8005eee:	e014      	b.n	8005f1a <_vfiprintf_r+0x156>
 8005ef0:	eba0 0308 	sub.w	r3, r0, r8
 8005ef4:	fa09 f303 	lsl.w	r3, r9, r3
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	9304      	str	r3, [sp, #16]
 8005efc:	46a2      	mov	sl, r4
 8005efe:	e7d2      	b.n	8005ea6 <_vfiprintf_r+0xe2>
 8005f00:	9b03      	ldr	r3, [sp, #12]
 8005f02:	1d19      	adds	r1, r3, #4
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	9103      	str	r1, [sp, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	bfbb      	ittet	lt
 8005f0c:	425b      	neglt	r3, r3
 8005f0e:	f042 0202 	orrlt.w	r2, r2, #2
 8005f12:	9307      	strge	r3, [sp, #28]
 8005f14:	9307      	strlt	r3, [sp, #28]
 8005f16:	bfb8      	it	lt
 8005f18:	9204      	strlt	r2, [sp, #16]
 8005f1a:	7823      	ldrb	r3, [r4, #0]
 8005f1c:	2b2e      	cmp	r3, #46	; 0x2e
 8005f1e:	d10c      	bne.n	8005f3a <_vfiprintf_r+0x176>
 8005f20:	7863      	ldrb	r3, [r4, #1]
 8005f22:	2b2a      	cmp	r3, #42	; 0x2a
 8005f24:	d135      	bne.n	8005f92 <_vfiprintf_r+0x1ce>
 8005f26:	9b03      	ldr	r3, [sp, #12]
 8005f28:	1d1a      	adds	r2, r3, #4
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	9203      	str	r2, [sp, #12]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	bfb8      	it	lt
 8005f32:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f36:	3402      	adds	r4, #2
 8005f38:	9305      	str	r3, [sp, #20]
 8005f3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006020 <_vfiprintf_r+0x25c>
 8005f3e:	7821      	ldrb	r1, [r4, #0]
 8005f40:	2203      	movs	r2, #3
 8005f42:	4650      	mov	r0, sl
 8005f44:	f7fa f94c 	bl	80001e0 <memchr>
 8005f48:	b140      	cbz	r0, 8005f5c <_vfiprintf_r+0x198>
 8005f4a:	2340      	movs	r3, #64	; 0x40
 8005f4c:	eba0 000a 	sub.w	r0, r0, sl
 8005f50:	fa03 f000 	lsl.w	r0, r3, r0
 8005f54:	9b04      	ldr	r3, [sp, #16]
 8005f56:	4303      	orrs	r3, r0
 8005f58:	3401      	adds	r4, #1
 8005f5a:	9304      	str	r3, [sp, #16]
 8005f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f60:	482c      	ldr	r0, [pc, #176]	; (8006014 <_vfiprintf_r+0x250>)
 8005f62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f66:	2206      	movs	r2, #6
 8005f68:	f7fa f93a 	bl	80001e0 <memchr>
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	d03f      	beq.n	8005ff0 <_vfiprintf_r+0x22c>
 8005f70:	4b29      	ldr	r3, [pc, #164]	; (8006018 <_vfiprintf_r+0x254>)
 8005f72:	bb1b      	cbnz	r3, 8005fbc <_vfiprintf_r+0x1f8>
 8005f74:	9b03      	ldr	r3, [sp, #12]
 8005f76:	3307      	adds	r3, #7
 8005f78:	f023 0307 	bic.w	r3, r3, #7
 8005f7c:	3308      	adds	r3, #8
 8005f7e:	9303      	str	r3, [sp, #12]
 8005f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f82:	443b      	add	r3, r7
 8005f84:	9309      	str	r3, [sp, #36]	; 0x24
 8005f86:	e767      	b.n	8005e58 <_vfiprintf_r+0x94>
 8005f88:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f8c:	460c      	mov	r4, r1
 8005f8e:	2001      	movs	r0, #1
 8005f90:	e7a5      	b.n	8005ede <_vfiprintf_r+0x11a>
 8005f92:	2300      	movs	r3, #0
 8005f94:	3401      	adds	r4, #1
 8005f96:	9305      	str	r3, [sp, #20]
 8005f98:	4619      	mov	r1, r3
 8005f9a:	f04f 0c0a 	mov.w	ip, #10
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fa4:	3a30      	subs	r2, #48	; 0x30
 8005fa6:	2a09      	cmp	r2, #9
 8005fa8:	d903      	bls.n	8005fb2 <_vfiprintf_r+0x1ee>
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0c5      	beq.n	8005f3a <_vfiprintf_r+0x176>
 8005fae:	9105      	str	r1, [sp, #20]
 8005fb0:	e7c3      	b.n	8005f3a <_vfiprintf_r+0x176>
 8005fb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fb6:	4604      	mov	r4, r0
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e7f0      	b.n	8005f9e <_vfiprintf_r+0x1da>
 8005fbc:	ab03      	add	r3, sp, #12
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	462a      	mov	r2, r5
 8005fc2:	4b16      	ldr	r3, [pc, #88]	; (800601c <_vfiprintf_r+0x258>)
 8005fc4:	a904      	add	r1, sp, #16
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	f7fd fe1c 	bl	8003c04 <_printf_float>
 8005fcc:	4607      	mov	r7, r0
 8005fce:	1c78      	adds	r0, r7, #1
 8005fd0:	d1d6      	bne.n	8005f80 <_vfiprintf_r+0x1bc>
 8005fd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fd4:	07d9      	lsls	r1, r3, #31
 8005fd6:	d405      	bmi.n	8005fe4 <_vfiprintf_r+0x220>
 8005fd8:	89ab      	ldrh	r3, [r5, #12]
 8005fda:	059a      	lsls	r2, r3, #22
 8005fdc:	d402      	bmi.n	8005fe4 <_vfiprintf_r+0x220>
 8005fde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fe0:	f000 faaf 	bl	8006542 <__retarget_lock_release_recursive>
 8005fe4:	89ab      	ldrh	r3, [r5, #12]
 8005fe6:	065b      	lsls	r3, r3, #25
 8005fe8:	f53f af12 	bmi.w	8005e10 <_vfiprintf_r+0x4c>
 8005fec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fee:	e711      	b.n	8005e14 <_vfiprintf_r+0x50>
 8005ff0:	ab03      	add	r3, sp, #12
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	462a      	mov	r2, r5
 8005ff6:	4b09      	ldr	r3, [pc, #36]	; (800601c <_vfiprintf_r+0x258>)
 8005ff8:	a904      	add	r1, sp, #16
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	f7fe f8a6 	bl	800414c <_printf_i>
 8006000:	e7e4      	b.n	8005fcc <_vfiprintf_r+0x208>
 8006002:	bf00      	nop
 8006004:	08007b8c 	.word	0x08007b8c
 8006008:	08007bac 	.word	0x08007bac
 800600c:	08007b6c 	.word	0x08007b6c
 8006010:	08007a14 	.word	0x08007a14
 8006014:	08007a1e 	.word	0x08007a1e
 8006018:	08003c05 	.word	0x08003c05
 800601c:	08005d9f 	.word	0x08005d9f
 8006020:	08007a1a 	.word	0x08007a1a

08006024 <__swbuf_r>:
 8006024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006026:	460e      	mov	r6, r1
 8006028:	4614      	mov	r4, r2
 800602a:	4605      	mov	r5, r0
 800602c:	b118      	cbz	r0, 8006036 <__swbuf_r+0x12>
 800602e:	6983      	ldr	r3, [r0, #24]
 8006030:	b90b      	cbnz	r3, 8006036 <__swbuf_r+0x12>
 8006032:	f000 f9e7 	bl	8006404 <__sinit>
 8006036:	4b21      	ldr	r3, [pc, #132]	; (80060bc <__swbuf_r+0x98>)
 8006038:	429c      	cmp	r4, r3
 800603a:	d12b      	bne.n	8006094 <__swbuf_r+0x70>
 800603c:	686c      	ldr	r4, [r5, #4]
 800603e:	69a3      	ldr	r3, [r4, #24]
 8006040:	60a3      	str	r3, [r4, #8]
 8006042:	89a3      	ldrh	r3, [r4, #12]
 8006044:	071a      	lsls	r2, r3, #28
 8006046:	d52f      	bpl.n	80060a8 <__swbuf_r+0x84>
 8006048:	6923      	ldr	r3, [r4, #16]
 800604a:	b36b      	cbz	r3, 80060a8 <__swbuf_r+0x84>
 800604c:	6923      	ldr	r3, [r4, #16]
 800604e:	6820      	ldr	r0, [r4, #0]
 8006050:	1ac0      	subs	r0, r0, r3
 8006052:	6963      	ldr	r3, [r4, #20]
 8006054:	b2f6      	uxtb	r6, r6
 8006056:	4283      	cmp	r3, r0
 8006058:	4637      	mov	r7, r6
 800605a:	dc04      	bgt.n	8006066 <__swbuf_r+0x42>
 800605c:	4621      	mov	r1, r4
 800605e:	4628      	mov	r0, r5
 8006060:	f000 f93c 	bl	80062dc <_fflush_r>
 8006064:	bb30      	cbnz	r0, 80060b4 <__swbuf_r+0x90>
 8006066:	68a3      	ldr	r3, [r4, #8]
 8006068:	3b01      	subs	r3, #1
 800606a:	60a3      	str	r3, [r4, #8]
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	6022      	str	r2, [r4, #0]
 8006072:	701e      	strb	r6, [r3, #0]
 8006074:	6963      	ldr	r3, [r4, #20]
 8006076:	3001      	adds	r0, #1
 8006078:	4283      	cmp	r3, r0
 800607a:	d004      	beq.n	8006086 <__swbuf_r+0x62>
 800607c:	89a3      	ldrh	r3, [r4, #12]
 800607e:	07db      	lsls	r3, r3, #31
 8006080:	d506      	bpl.n	8006090 <__swbuf_r+0x6c>
 8006082:	2e0a      	cmp	r6, #10
 8006084:	d104      	bne.n	8006090 <__swbuf_r+0x6c>
 8006086:	4621      	mov	r1, r4
 8006088:	4628      	mov	r0, r5
 800608a:	f000 f927 	bl	80062dc <_fflush_r>
 800608e:	b988      	cbnz	r0, 80060b4 <__swbuf_r+0x90>
 8006090:	4638      	mov	r0, r7
 8006092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006094:	4b0a      	ldr	r3, [pc, #40]	; (80060c0 <__swbuf_r+0x9c>)
 8006096:	429c      	cmp	r4, r3
 8006098:	d101      	bne.n	800609e <__swbuf_r+0x7a>
 800609a:	68ac      	ldr	r4, [r5, #8]
 800609c:	e7cf      	b.n	800603e <__swbuf_r+0x1a>
 800609e:	4b09      	ldr	r3, [pc, #36]	; (80060c4 <__swbuf_r+0xa0>)
 80060a0:	429c      	cmp	r4, r3
 80060a2:	bf08      	it	eq
 80060a4:	68ec      	ldreq	r4, [r5, #12]
 80060a6:	e7ca      	b.n	800603e <__swbuf_r+0x1a>
 80060a8:	4621      	mov	r1, r4
 80060aa:	4628      	mov	r0, r5
 80060ac:	f000 f81a 	bl	80060e4 <__swsetup_r>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d0cb      	beq.n	800604c <__swbuf_r+0x28>
 80060b4:	f04f 37ff 	mov.w	r7, #4294967295
 80060b8:	e7ea      	b.n	8006090 <__swbuf_r+0x6c>
 80060ba:	bf00      	nop
 80060bc:	08007b8c 	.word	0x08007b8c
 80060c0:	08007bac 	.word	0x08007bac
 80060c4:	08007b6c 	.word	0x08007b6c

080060c8 <__ascii_wctomb>:
 80060c8:	b149      	cbz	r1, 80060de <__ascii_wctomb+0x16>
 80060ca:	2aff      	cmp	r2, #255	; 0xff
 80060cc:	bf85      	ittet	hi
 80060ce:	238a      	movhi	r3, #138	; 0x8a
 80060d0:	6003      	strhi	r3, [r0, #0]
 80060d2:	700a      	strbls	r2, [r1, #0]
 80060d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80060d8:	bf98      	it	ls
 80060da:	2001      	movls	r0, #1
 80060dc:	4770      	bx	lr
 80060de:	4608      	mov	r0, r1
 80060e0:	4770      	bx	lr
	...

080060e4 <__swsetup_r>:
 80060e4:	4b32      	ldr	r3, [pc, #200]	; (80061b0 <__swsetup_r+0xcc>)
 80060e6:	b570      	push	{r4, r5, r6, lr}
 80060e8:	681d      	ldr	r5, [r3, #0]
 80060ea:	4606      	mov	r6, r0
 80060ec:	460c      	mov	r4, r1
 80060ee:	b125      	cbz	r5, 80060fa <__swsetup_r+0x16>
 80060f0:	69ab      	ldr	r3, [r5, #24]
 80060f2:	b913      	cbnz	r3, 80060fa <__swsetup_r+0x16>
 80060f4:	4628      	mov	r0, r5
 80060f6:	f000 f985 	bl	8006404 <__sinit>
 80060fa:	4b2e      	ldr	r3, [pc, #184]	; (80061b4 <__swsetup_r+0xd0>)
 80060fc:	429c      	cmp	r4, r3
 80060fe:	d10f      	bne.n	8006120 <__swsetup_r+0x3c>
 8006100:	686c      	ldr	r4, [r5, #4]
 8006102:	89a3      	ldrh	r3, [r4, #12]
 8006104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006108:	0719      	lsls	r1, r3, #28
 800610a:	d42c      	bmi.n	8006166 <__swsetup_r+0x82>
 800610c:	06dd      	lsls	r5, r3, #27
 800610e:	d411      	bmi.n	8006134 <__swsetup_r+0x50>
 8006110:	2309      	movs	r3, #9
 8006112:	6033      	str	r3, [r6, #0]
 8006114:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006118:	81a3      	strh	r3, [r4, #12]
 800611a:	f04f 30ff 	mov.w	r0, #4294967295
 800611e:	e03e      	b.n	800619e <__swsetup_r+0xba>
 8006120:	4b25      	ldr	r3, [pc, #148]	; (80061b8 <__swsetup_r+0xd4>)
 8006122:	429c      	cmp	r4, r3
 8006124:	d101      	bne.n	800612a <__swsetup_r+0x46>
 8006126:	68ac      	ldr	r4, [r5, #8]
 8006128:	e7eb      	b.n	8006102 <__swsetup_r+0x1e>
 800612a:	4b24      	ldr	r3, [pc, #144]	; (80061bc <__swsetup_r+0xd8>)
 800612c:	429c      	cmp	r4, r3
 800612e:	bf08      	it	eq
 8006130:	68ec      	ldreq	r4, [r5, #12]
 8006132:	e7e6      	b.n	8006102 <__swsetup_r+0x1e>
 8006134:	0758      	lsls	r0, r3, #29
 8006136:	d512      	bpl.n	800615e <__swsetup_r+0x7a>
 8006138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800613a:	b141      	cbz	r1, 800614e <__swsetup_r+0x6a>
 800613c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006140:	4299      	cmp	r1, r3
 8006142:	d002      	beq.n	800614a <__swsetup_r+0x66>
 8006144:	4630      	mov	r0, r6
 8006146:	f7ff fb6f 	bl	8005828 <_free_r>
 800614a:	2300      	movs	r3, #0
 800614c:	6363      	str	r3, [r4, #52]	; 0x34
 800614e:	89a3      	ldrh	r3, [r4, #12]
 8006150:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006154:	81a3      	strh	r3, [r4, #12]
 8006156:	2300      	movs	r3, #0
 8006158:	6063      	str	r3, [r4, #4]
 800615a:	6923      	ldr	r3, [r4, #16]
 800615c:	6023      	str	r3, [r4, #0]
 800615e:	89a3      	ldrh	r3, [r4, #12]
 8006160:	f043 0308 	orr.w	r3, r3, #8
 8006164:	81a3      	strh	r3, [r4, #12]
 8006166:	6923      	ldr	r3, [r4, #16]
 8006168:	b94b      	cbnz	r3, 800617e <__swsetup_r+0x9a>
 800616a:	89a3      	ldrh	r3, [r4, #12]
 800616c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006174:	d003      	beq.n	800617e <__swsetup_r+0x9a>
 8006176:	4621      	mov	r1, r4
 8006178:	4630      	mov	r0, r6
 800617a:	f000 fa07 	bl	800658c <__smakebuf_r>
 800617e:	89a0      	ldrh	r0, [r4, #12]
 8006180:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006184:	f010 0301 	ands.w	r3, r0, #1
 8006188:	d00a      	beq.n	80061a0 <__swsetup_r+0xbc>
 800618a:	2300      	movs	r3, #0
 800618c:	60a3      	str	r3, [r4, #8]
 800618e:	6963      	ldr	r3, [r4, #20]
 8006190:	425b      	negs	r3, r3
 8006192:	61a3      	str	r3, [r4, #24]
 8006194:	6923      	ldr	r3, [r4, #16]
 8006196:	b943      	cbnz	r3, 80061aa <__swsetup_r+0xc6>
 8006198:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800619c:	d1ba      	bne.n	8006114 <__swsetup_r+0x30>
 800619e:	bd70      	pop	{r4, r5, r6, pc}
 80061a0:	0781      	lsls	r1, r0, #30
 80061a2:	bf58      	it	pl
 80061a4:	6963      	ldrpl	r3, [r4, #20]
 80061a6:	60a3      	str	r3, [r4, #8]
 80061a8:	e7f4      	b.n	8006194 <__swsetup_r+0xb0>
 80061aa:	2000      	movs	r0, #0
 80061ac:	e7f7      	b.n	800619e <__swsetup_r+0xba>
 80061ae:	bf00      	nop
 80061b0:	20000008 	.word	0x20000008
 80061b4:	08007b8c 	.word	0x08007b8c
 80061b8:	08007bac 	.word	0x08007bac
 80061bc:	08007b6c 	.word	0x08007b6c

080061c0 <abort>:
 80061c0:	b508      	push	{r3, lr}
 80061c2:	2006      	movs	r0, #6
 80061c4:	f000 fa52 	bl	800666c <raise>
 80061c8:	2001      	movs	r0, #1
 80061ca:	f7fc f907 	bl	80023dc <_exit>
	...

080061d0 <__sflush_r>:
 80061d0:	898a      	ldrh	r2, [r1, #12]
 80061d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061d6:	4605      	mov	r5, r0
 80061d8:	0710      	lsls	r0, r2, #28
 80061da:	460c      	mov	r4, r1
 80061dc:	d458      	bmi.n	8006290 <__sflush_r+0xc0>
 80061de:	684b      	ldr	r3, [r1, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	dc05      	bgt.n	80061f0 <__sflush_r+0x20>
 80061e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	dc02      	bgt.n	80061f0 <__sflush_r+0x20>
 80061ea:	2000      	movs	r0, #0
 80061ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061f2:	2e00      	cmp	r6, #0
 80061f4:	d0f9      	beq.n	80061ea <__sflush_r+0x1a>
 80061f6:	2300      	movs	r3, #0
 80061f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80061fc:	682f      	ldr	r7, [r5, #0]
 80061fe:	602b      	str	r3, [r5, #0]
 8006200:	d032      	beq.n	8006268 <__sflush_r+0x98>
 8006202:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006204:	89a3      	ldrh	r3, [r4, #12]
 8006206:	075a      	lsls	r2, r3, #29
 8006208:	d505      	bpl.n	8006216 <__sflush_r+0x46>
 800620a:	6863      	ldr	r3, [r4, #4]
 800620c:	1ac0      	subs	r0, r0, r3
 800620e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006210:	b10b      	cbz	r3, 8006216 <__sflush_r+0x46>
 8006212:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006214:	1ac0      	subs	r0, r0, r3
 8006216:	2300      	movs	r3, #0
 8006218:	4602      	mov	r2, r0
 800621a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800621c:	6a21      	ldr	r1, [r4, #32]
 800621e:	4628      	mov	r0, r5
 8006220:	47b0      	blx	r6
 8006222:	1c43      	adds	r3, r0, #1
 8006224:	89a3      	ldrh	r3, [r4, #12]
 8006226:	d106      	bne.n	8006236 <__sflush_r+0x66>
 8006228:	6829      	ldr	r1, [r5, #0]
 800622a:	291d      	cmp	r1, #29
 800622c:	d82c      	bhi.n	8006288 <__sflush_r+0xb8>
 800622e:	4a2a      	ldr	r2, [pc, #168]	; (80062d8 <__sflush_r+0x108>)
 8006230:	40ca      	lsrs	r2, r1
 8006232:	07d6      	lsls	r6, r2, #31
 8006234:	d528      	bpl.n	8006288 <__sflush_r+0xb8>
 8006236:	2200      	movs	r2, #0
 8006238:	6062      	str	r2, [r4, #4]
 800623a:	04d9      	lsls	r1, r3, #19
 800623c:	6922      	ldr	r2, [r4, #16]
 800623e:	6022      	str	r2, [r4, #0]
 8006240:	d504      	bpl.n	800624c <__sflush_r+0x7c>
 8006242:	1c42      	adds	r2, r0, #1
 8006244:	d101      	bne.n	800624a <__sflush_r+0x7a>
 8006246:	682b      	ldr	r3, [r5, #0]
 8006248:	b903      	cbnz	r3, 800624c <__sflush_r+0x7c>
 800624a:	6560      	str	r0, [r4, #84]	; 0x54
 800624c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800624e:	602f      	str	r7, [r5, #0]
 8006250:	2900      	cmp	r1, #0
 8006252:	d0ca      	beq.n	80061ea <__sflush_r+0x1a>
 8006254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006258:	4299      	cmp	r1, r3
 800625a:	d002      	beq.n	8006262 <__sflush_r+0x92>
 800625c:	4628      	mov	r0, r5
 800625e:	f7ff fae3 	bl	8005828 <_free_r>
 8006262:	2000      	movs	r0, #0
 8006264:	6360      	str	r0, [r4, #52]	; 0x34
 8006266:	e7c1      	b.n	80061ec <__sflush_r+0x1c>
 8006268:	6a21      	ldr	r1, [r4, #32]
 800626a:	2301      	movs	r3, #1
 800626c:	4628      	mov	r0, r5
 800626e:	47b0      	blx	r6
 8006270:	1c41      	adds	r1, r0, #1
 8006272:	d1c7      	bne.n	8006204 <__sflush_r+0x34>
 8006274:	682b      	ldr	r3, [r5, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d0c4      	beq.n	8006204 <__sflush_r+0x34>
 800627a:	2b1d      	cmp	r3, #29
 800627c:	d001      	beq.n	8006282 <__sflush_r+0xb2>
 800627e:	2b16      	cmp	r3, #22
 8006280:	d101      	bne.n	8006286 <__sflush_r+0xb6>
 8006282:	602f      	str	r7, [r5, #0]
 8006284:	e7b1      	b.n	80061ea <__sflush_r+0x1a>
 8006286:	89a3      	ldrh	r3, [r4, #12]
 8006288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800628c:	81a3      	strh	r3, [r4, #12]
 800628e:	e7ad      	b.n	80061ec <__sflush_r+0x1c>
 8006290:	690f      	ldr	r7, [r1, #16]
 8006292:	2f00      	cmp	r7, #0
 8006294:	d0a9      	beq.n	80061ea <__sflush_r+0x1a>
 8006296:	0793      	lsls	r3, r2, #30
 8006298:	680e      	ldr	r6, [r1, #0]
 800629a:	bf08      	it	eq
 800629c:	694b      	ldreq	r3, [r1, #20]
 800629e:	600f      	str	r7, [r1, #0]
 80062a0:	bf18      	it	ne
 80062a2:	2300      	movne	r3, #0
 80062a4:	eba6 0807 	sub.w	r8, r6, r7
 80062a8:	608b      	str	r3, [r1, #8]
 80062aa:	f1b8 0f00 	cmp.w	r8, #0
 80062ae:	dd9c      	ble.n	80061ea <__sflush_r+0x1a>
 80062b0:	6a21      	ldr	r1, [r4, #32]
 80062b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80062b4:	4643      	mov	r3, r8
 80062b6:	463a      	mov	r2, r7
 80062b8:	4628      	mov	r0, r5
 80062ba:	47b0      	blx	r6
 80062bc:	2800      	cmp	r0, #0
 80062be:	dc06      	bgt.n	80062ce <__sflush_r+0xfe>
 80062c0:	89a3      	ldrh	r3, [r4, #12]
 80062c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062c6:	81a3      	strh	r3, [r4, #12]
 80062c8:	f04f 30ff 	mov.w	r0, #4294967295
 80062cc:	e78e      	b.n	80061ec <__sflush_r+0x1c>
 80062ce:	4407      	add	r7, r0
 80062d0:	eba8 0800 	sub.w	r8, r8, r0
 80062d4:	e7e9      	b.n	80062aa <__sflush_r+0xda>
 80062d6:	bf00      	nop
 80062d8:	20400001 	.word	0x20400001

080062dc <_fflush_r>:
 80062dc:	b538      	push	{r3, r4, r5, lr}
 80062de:	690b      	ldr	r3, [r1, #16]
 80062e0:	4605      	mov	r5, r0
 80062e2:	460c      	mov	r4, r1
 80062e4:	b913      	cbnz	r3, 80062ec <_fflush_r+0x10>
 80062e6:	2500      	movs	r5, #0
 80062e8:	4628      	mov	r0, r5
 80062ea:	bd38      	pop	{r3, r4, r5, pc}
 80062ec:	b118      	cbz	r0, 80062f6 <_fflush_r+0x1a>
 80062ee:	6983      	ldr	r3, [r0, #24]
 80062f0:	b90b      	cbnz	r3, 80062f6 <_fflush_r+0x1a>
 80062f2:	f000 f887 	bl	8006404 <__sinit>
 80062f6:	4b14      	ldr	r3, [pc, #80]	; (8006348 <_fflush_r+0x6c>)
 80062f8:	429c      	cmp	r4, r3
 80062fa:	d11b      	bne.n	8006334 <_fflush_r+0x58>
 80062fc:	686c      	ldr	r4, [r5, #4]
 80062fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d0ef      	beq.n	80062e6 <_fflush_r+0xa>
 8006306:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006308:	07d0      	lsls	r0, r2, #31
 800630a:	d404      	bmi.n	8006316 <_fflush_r+0x3a>
 800630c:	0599      	lsls	r1, r3, #22
 800630e:	d402      	bmi.n	8006316 <_fflush_r+0x3a>
 8006310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006312:	f000 f915 	bl	8006540 <__retarget_lock_acquire_recursive>
 8006316:	4628      	mov	r0, r5
 8006318:	4621      	mov	r1, r4
 800631a:	f7ff ff59 	bl	80061d0 <__sflush_r>
 800631e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006320:	07da      	lsls	r2, r3, #31
 8006322:	4605      	mov	r5, r0
 8006324:	d4e0      	bmi.n	80062e8 <_fflush_r+0xc>
 8006326:	89a3      	ldrh	r3, [r4, #12]
 8006328:	059b      	lsls	r3, r3, #22
 800632a:	d4dd      	bmi.n	80062e8 <_fflush_r+0xc>
 800632c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800632e:	f000 f908 	bl	8006542 <__retarget_lock_release_recursive>
 8006332:	e7d9      	b.n	80062e8 <_fflush_r+0xc>
 8006334:	4b05      	ldr	r3, [pc, #20]	; (800634c <_fflush_r+0x70>)
 8006336:	429c      	cmp	r4, r3
 8006338:	d101      	bne.n	800633e <_fflush_r+0x62>
 800633a:	68ac      	ldr	r4, [r5, #8]
 800633c:	e7df      	b.n	80062fe <_fflush_r+0x22>
 800633e:	4b04      	ldr	r3, [pc, #16]	; (8006350 <_fflush_r+0x74>)
 8006340:	429c      	cmp	r4, r3
 8006342:	bf08      	it	eq
 8006344:	68ec      	ldreq	r4, [r5, #12]
 8006346:	e7da      	b.n	80062fe <_fflush_r+0x22>
 8006348:	08007b8c 	.word	0x08007b8c
 800634c:	08007bac 	.word	0x08007bac
 8006350:	08007b6c 	.word	0x08007b6c

08006354 <std>:
 8006354:	2300      	movs	r3, #0
 8006356:	b510      	push	{r4, lr}
 8006358:	4604      	mov	r4, r0
 800635a:	e9c0 3300 	strd	r3, r3, [r0]
 800635e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006362:	6083      	str	r3, [r0, #8]
 8006364:	8181      	strh	r1, [r0, #12]
 8006366:	6643      	str	r3, [r0, #100]	; 0x64
 8006368:	81c2      	strh	r2, [r0, #14]
 800636a:	6183      	str	r3, [r0, #24]
 800636c:	4619      	mov	r1, r3
 800636e:	2208      	movs	r2, #8
 8006370:	305c      	adds	r0, #92	; 0x5c
 8006372:	f7fd fb9f 	bl	8003ab4 <memset>
 8006376:	4b05      	ldr	r3, [pc, #20]	; (800638c <std+0x38>)
 8006378:	6263      	str	r3, [r4, #36]	; 0x24
 800637a:	4b05      	ldr	r3, [pc, #20]	; (8006390 <std+0x3c>)
 800637c:	62a3      	str	r3, [r4, #40]	; 0x28
 800637e:	4b05      	ldr	r3, [pc, #20]	; (8006394 <std+0x40>)
 8006380:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006382:	4b05      	ldr	r3, [pc, #20]	; (8006398 <std+0x44>)
 8006384:	6224      	str	r4, [r4, #32]
 8006386:	6323      	str	r3, [r4, #48]	; 0x30
 8006388:	bd10      	pop	{r4, pc}
 800638a:	bf00      	nop
 800638c:	080066a5 	.word	0x080066a5
 8006390:	080066c7 	.word	0x080066c7
 8006394:	080066ff 	.word	0x080066ff
 8006398:	08006723 	.word	0x08006723

0800639c <_cleanup_r>:
 800639c:	4901      	ldr	r1, [pc, #4]	; (80063a4 <_cleanup_r+0x8>)
 800639e:	f000 b8af 	b.w	8006500 <_fwalk_reent>
 80063a2:	bf00      	nop
 80063a4:	080062dd 	.word	0x080062dd

080063a8 <__sfmoreglue>:
 80063a8:	b570      	push	{r4, r5, r6, lr}
 80063aa:	1e4a      	subs	r2, r1, #1
 80063ac:	2568      	movs	r5, #104	; 0x68
 80063ae:	4355      	muls	r5, r2
 80063b0:	460e      	mov	r6, r1
 80063b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80063b6:	f7ff fa87 	bl	80058c8 <_malloc_r>
 80063ba:	4604      	mov	r4, r0
 80063bc:	b140      	cbz	r0, 80063d0 <__sfmoreglue+0x28>
 80063be:	2100      	movs	r1, #0
 80063c0:	e9c0 1600 	strd	r1, r6, [r0]
 80063c4:	300c      	adds	r0, #12
 80063c6:	60a0      	str	r0, [r4, #8]
 80063c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80063cc:	f7fd fb72 	bl	8003ab4 <memset>
 80063d0:	4620      	mov	r0, r4
 80063d2:	bd70      	pop	{r4, r5, r6, pc}

080063d4 <__sfp_lock_acquire>:
 80063d4:	4801      	ldr	r0, [pc, #4]	; (80063dc <__sfp_lock_acquire+0x8>)
 80063d6:	f000 b8b3 	b.w	8006540 <__retarget_lock_acquire_recursive>
 80063da:	bf00      	nop
 80063dc:	20000258 	.word	0x20000258

080063e0 <__sfp_lock_release>:
 80063e0:	4801      	ldr	r0, [pc, #4]	; (80063e8 <__sfp_lock_release+0x8>)
 80063e2:	f000 b8ae 	b.w	8006542 <__retarget_lock_release_recursive>
 80063e6:	bf00      	nop
 80063e8:	20000258 	.word	0x20000258

080063ec <__sinit_lock_acquire>:
 80063ec:	4801      	ldr	r0, [pc, #4]	; (80063f4 <__sinit_lock_acquire+0x8>)
 80063ee:	f000 b8a7 	b.w	8006540 <__retarget_lock_acquire_recursive>
 80063f2:	bf00      	nop
 80063f4:	20000253 	.word	0x20000253

080063f8 <__sinit_lock_release>:
 80063f8:	4801      	ldr	r0, [pc, #4]	; (8006400 <__sinit_lock_release+0x8>)
 80063fa:	f000 b8a2 	b.w	8006542 <__retarget_lock_release_recursive>
 80063fe:	bf00      	nop
 8006400:	20000253 	.word	0x20000253

08006404 <__sinit>:
 8006404:	b510      	push	{r4, lr}
 8006406:	4604      	mov	r4, r0
 8006408:	f7ff fff0 	bl	80063ec <__sinit_lock_acquire>
 800640c:	69a3      	ldr	r3, [r4, #24]
 800640e:	b11b      	cbz	r3, 8006418 <__sinit+0x14>
 8006410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006414:	f7ff bff0 	b.w	80063f8 <__sinit_lock_release>
 8006418:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800641c:	6523      	str	r3, [r4, #80]	; 0x50
 800641e:	4b13      	ldr	r3, [pc, #76]	; (800646c <__sinit+0x68>)
 8006420:	4a13      	ldr	r2, [pc, #76]	; (8006470 <__sinit+0x6c>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	62a2      	str	r2, [r4, #40]	; 0x28
 8006426:	42a3      	cmp	r3, r4
 8006428:	bf04      	itt	eq
 800642a:	2301      	moveq	r3, #1
 800642c:	61a3      	streq	r3, [r4, #24]
 800642e:	4620      	mov	r0, r4
 8006430:	f000 f820 	bl	8006474 <__sfp>
 8006434:	6060      	str	r0, [r4, #4]
 8006436:	4620      	mov	r0, r4
 8006438:	f000 f81c 	bl	8006474 <__sfp>
 800643c:	60a0      	str	r0, [r4, #8]
 800643e:	4620      	mov	r0, r4
 8006440:	f000 f818 	bl	8006474 <__sfp>
 8006444:	2200      	movs	r2, #0
 8006446:	60e0      	str	r0, [r4, #12]
 8006448:	2104      	movs	r1, #4
 800644a:	6860      	ldr	r0, [r4, #4]
 800644c:	f7ff ff82 	bl	8006354 <std>
 8006450:	68a0      	ldr	r0, [r4, #8]
 8006452:	2201      	movs	r2, #1
 8006454:	2109      	movs	r1, #9
 8006456:	f7ff ff7d 	bl	8006354 <std>
 800645a:	68e0      	ldr	r0, [r4, #12]
 800645c:	2202      	movs	r2, #2
 800645e:	2112      	movs	r1, #18
 8006460:	f7ff ff78 	bl	8006354 <std>
 8006464:	2301      	movs	r3, #1
 8006466:	61a3      	str	r3, [r4, #24]
 8006468:	e7d2      	b.n	8006410 <__sinit+0xc>
 800646a:	bf00      	nop
 800646c:	080077e8 	.word	0x080077e8
 8006470:	0800639d 	.word	0x0800639d

08006474 <__sfp>:
 8006474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006476:	4607      	mov	r7, r0
 8006478:	f7ff ffac 	bl	80063d4 <__sfp_lock_acquire>
 800647c:	4b1e      	ldr	r3, [pc, #120]	; (80064f8 <__sfp+0x84>)
 800647e:	681e      	ldr	r6, [r3, #0]
 8006480:	69b3      	ldr	r3, [r6, #24]
 8006482:	b913      	cbnz	r3, 800648a <__sfp+0x16>
 8006484:	4630      	mov	r0, r6
 8006486:	f7ff ffbd 	bl	8006404 <__sinit>
 800648a:	3648      	adds	r6, #72	; 0x48
 800648c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006490:	3b01      	subs	r3, #1
 8006492:	d503      	bpl.n	800649c <__sfp+0x28>
 8006494:	6833      	ldr	r3, [r6, #0]
 8006496:	b30b      	cbz	r3, 80064dc <__sfp+0x68>
 8006498:	6836      	ldr	r6, [r6, #0]
 800649a:	e7f7      	b.n	800648c <__sfp+0x18>
 800649c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80064a0:	b9d5      	cbnz	r5, 80064d8 <__sfp+0x64>
 80064a2:	4b16      	ldr	r3, [pc, #88]	; (80064fc <__sfp+0x88>)
 80064a4:	60e3      	str	r3, [r4, #12]
 80064a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80064aa:	6665      	str	r5, [r4, #100]	; 0x64
 80064ac:	f000 f847 	bl	800653e <__retarget_lock_init_recursive>
 80064b0:	f7ff ff96 	bl	80063e0 <__sfp_lock_release>
 80064b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80064b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80064bc:	6025      	str	r5, [r4, #0]
 80064be:	61a5      	str	r5, [r4, #24]
 80064c0:	2208      	movs	r2, #8
 80064c2:	4629      	mov	r1, r5
 80064c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80064c8:	f7fd faf4 	bl	8003ab4 <memset>
 80064cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80064d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80064d4:	4620      	mov	r0, r4
 80064d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064d8:	3468      	adds	r4, #104	; 0x68
 80064da:	e7d9      	b.n	8006490 <__sfp+0x1c>
 80064dc:	2104      	movs	r1, #4
 80064de:	4638      	mov	r0, r7
 80064e0:	f7ff ff62 	bl	80063a8 <__sfmoreglue>
 80064e4:	4604      	mov	r4, r0
 80064e6:	6030      	str	r0, [r6, #0]
 80064e8:	2800      	cmp	r0, #0
 80064ea:	d1d5      	bne.n	8006498 <__sfp+0x24>
 80064ec:	f7ff ff78 	bl	80063e0 <__sfp_lock_release>
 80064f0:	230c      	movs	r3, #12
 80064f2:	603b      	str	r3, [r7, #0]
 80064f4:	e7ee      	b.n	80064d4 <__sfp+0x60>
 80064f6:	bf00      	nop
 80064f8:	080077e8 	.word	0x080077e8
 80064fc:	ffff0001 	.word	0xffff0001

08006500 <_fwalk_reent>:
 8006500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006504:	4606      	mov	r6, r0
 8006506:	4688      	mov	r8, r1
 8006508:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800650c:	2700      	movs	r7, #0
 800650e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006512:	f1b9 0901 	subs.w	r9, r9, #1
 8006516:	d505      	bpl.n	8006524 <_fwalk_reent+0x24>
 8006518:	6824      	ldr	r4, [r4, #0]
 800651a:	2c00      	cmp	r4, #0
 800651c:	d1f7      	bne.n	800650e <_fwalk_reent+0xe>
 800651e:	4638      	mov	r0, r7
 8006520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006524:	89ab      	ldrh	r3, [r5, #12]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d907      	bls.n	800653a <_fwalk_reent+0x3a>
 800652a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800652e:	3301      	adds	r3, #1
 8006530:	d003      	beq.n	800653a <_fwalk_reent+0x3a>
 8006532:	4629      	mov	r1, r5
 8006534:	4630      	mov	r0, r6
 8006536:	47c0      	blx	r8
 8006538:	4307      	orrs	r7, r0
 800653a:	3568      	adds	r5, #104	; 0x68
 800653c:	e7e9      	b.n	8006512 <_fwalk_reent+0x12>

0800653e <__retarget_lock_init_recursive>:
 800653e:	4770      	bx	lr

08006540 <__retarget_lock_acquire_recursive>:
 8006540:	4770      	bx	lr

08006542 <__retarget_lock_release_recursive>:
 8006542:	4770      	bx	lr

08006544 <__swhatbuf_r>:
 8006544:	b570      	push	{r4, r5, r6, lr}
 8006546:	460e      	mov	r6, r1
 8006548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800654c:	2900      	cmp	r1, #0
 800654e:	b096      	sub	sp, #88	; 0x58
 8006550:	4614      	mov	r4, r2
 8006552:	461d      	mov	r5, r3
 8006554:	da07      	bge.n	8006566 <__swhatbuf_r+0x22>
 8006556:	2300      	movs	r3, #0
 8006558:	602b      	str	r3, [r5, #0]
 800655a:	89b3      	ldrh	r3, [r6, #12]
 800655c:	061a      	lsls	r2, r3, #24
 800655e:	d410      	bmi.n	8006582 <__swhatbuf_r+0x3e>
 8006560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006564:	e00e      	b.n	8006584 <__swhatbuf_r+0x40>
 8006566:	466a      	mov	r2, sp
 8006568:	f000 f902 	bl	8006770 <_fstat_r>
 800656c:	2800      	cmp	r0, #0
 800656e:	dbf2      	blt.n	8006556 <__swhatbuf_r+0x12>
 8006570:	9a01      	ldr	r2, [sp, #4]
 8006572:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006576:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800657a:	425a      	negs	r2, r3
 800657c:	415a      	adcs	r2, r3
 800657e:	602a      	str	r2, [r5, #0]
 8006580:	e7ee      	b.n	8006560 <__swhatbuf_r+0x1c>
 8006582:	2340      	movs	r3, #64	; 0x40
 8006584:	2000      	movs	r0, #0
 8006586:	6023      	str	r3, [r4, #0]
 8006588:	b016      	add	sp, #88	; 0x58
 800658a:	bd70      	pop	{r4, r5, r6, pc}

0800658c <__smakebuf_r>:
 800658c:	898b      	ldrh	r3, [r1, #12]
 800658e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006590:	079d      	lsls	r5, r3, #30
 8006592:	4606      	mov	r6, r0
 8006594:	460c      	mov	r4, r1
 8006596:	d507      	bpl.n	80065a8 <__smakebuf_r+0x1c>
 8006598:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800659c:	6023      	str	r3, [r4, #0]
 800659e:	6123      	str	r3, [r4, #16]
 80065a0:	2301      	movs	r3, #1
 80065a2:	6163      	str	r3, [r4, #20]
 80065a4:	b002      	add	sp, #8
 80065a6:	bd70      	pop	{r4, r5, r6, pc}
 80065a8:	ab01      	add	r3, sp, #4
 80065aa:	466a      	mov	r2, sp
 80065ac:	f7ff ffca 	bl	8006544 <__swhatbuf_r>
 80065b0:	9900      	ldr	r1, [sp, #0]
 80065b2:	4605      	mov	r5, r0
 80065b4:	4630      	mov	r0, r6
 80065b6:	f7ff f987 	bl	80058c8 <_malloc_r>
 80065ba:	b948      	cbnz	r0, 80065d0 <__smakebuf_r+0x44>
 80065bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065c0:	059a      	lsls	r2, r3, #22
 80065c2:	d4ef      	bmi.n	80065a4 <__smakebuf_r+0x18>
 80065c4:	f023 0303 	bic.w	r3, r3, #3
 80065c8:	f043 0302 	orr.w	r3, r3, #2
 80065cc:	81a3      	strh	r3, [r4, #12]
 80065ce:	e7e3      	b.n	8006598 <__smakebuf_r+0xc>
 80065d0:	4b0d      	ldr	r3, [pc, #52]	; (8006608 <__smakebuf_r+0x7c>)
 80065d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80065d4:	89a3      	ldrh	r3, [r4, #12]
 80065d6:	6020      	str	r0, [r4, #0]
 80065d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065dc:	81a3      	strh	r3, [r4, #12]
 80065de:	9b00      	ldr	r3, [sp, #0]
 80065e0:	6163      	str	r3, [r4, #20]
 80065e2:	9b01      	ldr	r3, [sp, #4]
 80065e4:	6120      	str	r0, [r4, #16]
 80065e6:	b15b      	cbz	r3, 8006600 <__smakebuf_r+0x74>
 80065e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065ec:	4630      	mov	r0, r6
 80065ee:	f000 f8d1 	bl	8006794 <_isatty_r>
 80065f2:	b128      	cbz	r0, 8006600 <__smakebuf_r+0x74>
 80065f4:	89a3      	ldrh	r3, [r4, #12]
 80065f6:	f023 0303 	bic.w	r3, r3, #3
 80065fa:	f043 0301 	orr.w	r3, r3, #1
 80065fe:	81a3      	strh	r3, [r4, #12]
 8006600:	89a0      	ldrh	r0, [r4, #12]
 8006602:	4305      	orrs	r5, r0
 8006604:	81a5      	strh	r5, [r4, #12]
 8006606:	e7cd      	b.n	80065a4 <__smakebuf_r+0x18>
 8006608:	0800639d 	.word	0x0800639d

0800660c <_malloc_usable_size_r>:
 800660c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006610:	1f18      	subs	r0, r3, #4
 8006612:	2b00      	cmp	r3, #0
 8006614:	bfbc      	itt	lt
 8006616:	580b      	ldrlt	r3, [r1, r0]
 8006618:	18c0      	addlt	r0, r0, r3
 800661a:	4770      	bx	lr

0800661c <_raise_r>:
 800661c:	291f      	cmp	r1, #31
 800661e:	b538      	push	{r3, r4, r5, lr}
 8006620:	4604      	mov	r4, r0
 8006622:	460d      	mov	r5, r1
 8006624:	d904      	bls.n	8006630 <_raise_r+0x14>
 8006626:	2316      	movs	r3, #22
 8006628:	6003      	str	r3, [r0, #0]
 800662a:	f04f 30ff 	mov.w	r0, #4294967295
 800662e:	bd38      	pop	{r3, r4, r5, pc}
 8006630:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006632:	b112      	cbz	r2, 800663a <_raise_r+0x1e>
 8006634:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006638:	b94b      	cbnz	r3, 800664e <_raise_r+0x32>
 800663a:	4620      	mov	r0, r4
 800663c:	f000 f830 	bl	80066a0 <_getpid_r>
 8006640:	462a      	mov	r2, r5
 8006642:	4601      	mov	r1, r0
 8006644:	4620      	mov	r0, r4
 8006646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800664a:	f000 b817 	b.w	800667c <_kill_r>
 800664e:	2b01      	cmp	r3, #1
 8006650:	d00a      	beq.n	8006668 <_raise_r+0x4c>
 8006652:	1c59      	adds	r1, r3, #1
 8006654:	d103      	bne.n	800665e <_raise_r+0x42>
 8006656:	2316      	movs	r3, #22
 8006658:	6003      	str	r3, [r0, #0]
 800665a:	2001      	movs	r0, #1
 800665c:	e7e7      	b.n	800662e <_raise_r+0x12>
 800665e:	2400      	movs	r4, #0
 8006660:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006664:	4628      	mov	r0, r5
 8006666:	4798      	blx	r3
 8006668:	2000      	movs	r0, #0
 800666a:	e7e0      	b.n	800662e <_raise_r+0x12>

0800666c <raise>:
 800666c:	4b02      	ldr	r3, [pc, #8]	; (8006678 <raise+0xc>)
 800666e:	4601      	mov	r1, r0
 8006670:	6818      	ldr	r0, [r3, #0]
 8006672:	f7ff bfd3 	b.w	800661c <_raise_r>
 8006676:	bf00      	nop
 8006678:	20000008 	.word	0x20000008

0800667c <_kill_r>:
 800667c:	b538      	push	{r3, r4, r5, lr}
 800667e:	4d07      	ldr	r5, [pc, #28]	; (800669c <_kill_r+0x20>)
 8006680:	2300      	movs	r3, #0
 8006682:	4604      	mov	r4, r0
 8006684:	4608      	mov	r0, r1
 8006686:	4611      	mov	r1, r2
 8006688:	602b      	str	r3, [r5, #0]
 800668a:	f7fb fe97 	bl	80023bc <_kill>
 800668e:	1c43      	adds	r3, r0, #1
 8006690:	d102      	bne.n	8006698 <_kill_r+0x1c>
 8006692:	682b      	ldr	r3, [r5, #0]
 8006694:	b103      	cbz	r3, 8006698 <_kill_r+0x1c>
 8006696:	6023      	str	r3, [r4, #0]
 8006698:	bd38      	pop	{r3, r4, r5, pc}
 800669a:	bf00      	nop
 800669c:	2000024c 	.word	0x2000024c

080066a0 <_getpid_r>:
 80066a0:	f7fb be84 	b.w	80023ac <_getpid>

080066a4 <__sread>:
 80066a4:	b510      	push	{r4, lr}
 80066a6:	460c      	mov	r4, r1
 80066a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ac:	f000 f894 	bl	80067d8 <_read_r>
 80066b0:	2800      	cmp	r0, #0
 80066b2:	bfab      	itete	ge
 80066b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066b6:	89a3      	ldrhlt	r3, [r4, #12]
 80066b8:	181b      	addge	r3, r3, r0
 80066ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066be:	bfac      	ite	ge
 80066c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80066c2:	81a3      	strhlt	r3, [r4, #12]
 80066c4:	bd10      	pop	{r4, pc}

080066c6 <__swrite>:
 80066c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ca:	461f      	mov	r7, r3
 80066cc:	898b      	ldrh	r3, [r1, #12]
 80066ce:	05db      	lsls	r3, r3, #23
 80066d0:	4605      	mov	r5, r0
 80066d2:	460c      	mov	r4, r1
 80066d4:	4616      	mov	r6, r2
 80066d6:	d505      	bpl.n	80066e4 <__swrite+0x1e>
 80066d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066dc:	2302      	movs	r3, #2
 80066de:	2200      	movs	r2, #0
 80066e0:	f000 f868 	bl	80067b4 <_lseek_r>
 80066e4:	89a3      	ldrh	r3, [r4, #12]
 80066e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066ee:	81a3      	strh	r3, [r4, #12]
 80066f0:	4632      	mov	r2, r6
 80066f2:	463b      	mov	r3, r7
 80066f4:	4628      	mov	r0, r5
 80066f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066fa:	f000 b817 	b.w	800672c <_write_r>

080066fe <__sseek>:
 80066fe:	b510      	push	{r4, lr}
 8006700:	460c      	mov	r4, r1
 8006702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006706:	f000 f855 	bl	80067b4 <_lseek_r>
 800670a:	1c43      	adds	r3, r0, #1
 800670c:	89a3      	ldrh	r3, [r4, #12]
 800670e:	bf15      	itete	ne
 8006710:	6560      	strne	r0, [r4, #84]	; 0x54
 8006712:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006716:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800671a:	81a3      	strheq	r3, [r4, #12]
 800671c:	bf18      	it	ne
 800671e:	81a3      	strhne	r3, [r4, #12]
 8006720:	bd10      	pop	{r4, pc}

08006722 <__sclose>:
 8006722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006726:	f000 b813 	b.w	8006750 <_close_r>
	...

0800672c <_write_r>:
 800672c:	b538      	push	{r3, r4, r5, lr}
 800672e:	4d07      	ldr	r5, [pc, #28]	; (800674c <_write_r+0x20>)
 8006730:	4604      	mov	r4, r0
 8006732:	4608      	mov	r0, r1
 8006734:	4611      	mov	r1, r2
 8006736:	2200      	movs	r2, #0
 8006738:	602a      	str	r2, [r5, #0]
 800673a:	461a      	mov	r2, r3
 800673c:	f7fb fe75 	bl	800242a <_write>
 8006740:	1c43      	adds	r3, r0, #1
 8006742:	d102      	bne.n	800674a <_write_r+0x1e>
 8006744:	682b      	ldr	r3, [r5, #0]
 8006746:	b103      	cbz	r3, 800674a <_write_r+0x1e>
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	bd38      	pop	{r3, r4, r5, pc}
 800674c:	2000024c 	.word	0x2000024c

08006750 <_close_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	4d06      	ldr	r5, [pc, #24]	; (800676c <_close_r+0x1c>)
 8006754:	2300      	movs	r3, #0
 8006756:	4604      	mov	r4, r0
 8006758:	4608      	mov	r0, r1
 800675a:	602b      	str	r3, [r5, #0]
 800675c:	f7fb fe81 	bl	8002462 <_close>
 8006760:	1c43      	adds	r3, r0, #1
 8006762:	d102      	bne.n	800676a <_close_r+0x1a>
 8006764:	682b      	ldr	r3, [r5, #0]
 8006766:	b103      	cbz	r3, 800676a <_close_r+0x1a>
 8006768:	6023      	str	r3, [r4, #0]
 800676a:	bd38      	pop	{r3, r4, r5, pc}
 800676c:	2000024c 	.word	0x2000024c

08006770 <_fstat_r>:
 8006770:	b538      	push	{r3, r4, r5, lr}
 8006772:	4d07      	ldr	r5, [pc, #28]	; (8006790 <_fstat_r+0x20>)
 8006774:	2300      	movs	r3, #0
 8006776:	4604      	mov	r4, r0
 8006778:	4608      	mov	r0, r1
 800677a:	4611      	mov	r1, r2
 800677c:	602b      	str	r3, [r5, #0]
 800677e:	f7fb fe7c 	bl	800247a <_fstat>
 8006782:	1c43      	adds	r3, r0, #1
 8006784:	d102      	bne.n	800678c <_fstat_r+0x1c>
 8006786:	682b      	ldr	r3, [r5, #0]
 8006788:	b103      	cbz	r3, 800678c <_fstat_r+0x1c>
 800678a:	6023      	str	r3, [r4, #0]
 800678c:	bd38      	pop	{r3, r4, r5, pc}
 800678e:	bf00      	nop
 8006790:	2000024c 	.word	0x2000024c

08006794 <_isatty_r>:
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	4d06      	ldr	r5, [pc, #24]	; (80067b0 <_isatty_r+0x1c>)
 8006798:	2300      	movs	r3, #0
 800679a:	4604      	mov	r4, r0
 800679c:	4608      	mov	r0, r1
 800679e:	602b      	str	r3, [r5, #0]
 80067a0:	f7fb fe7b 	bl	800249a <_isatty>
 80067a4:	1c43      	adds	r3, r0, #1
 80067a6:	d102      	bne.n	80067ae <_isatty_r+0x1a>
 80067a8:	682b      	ldr	r3, [r5, #0]
 80067aa:	b103      	cbz	r3, 80067ae <_isatty_r+0x1a>
 80067ac:	6023      	str	r3, [r4, #0]
 80067ae:	bd38      	pop	{r3, r4, r5, pc}
 80067b0:	2000024c 	.word	0x2000024c

080067b4 <_lseek_r>:
 80067b4:	b538      	push	{r3, r4, r5, lr}
 80067b6:	4d07      	ldr	r5, [pc, #28]	; (80067d4 <_lseek_r+0x20>)
 80067b8:	4604      	mov	r4, r0
 80067ba:	4608      	mov	r0, r1
 80067bc:	4611      	mov	r1, r2
 80067be:	2200      	movs	r2, #0
 80067c0:	602a      	str	r2, [r5, #0]
 80067c2:	461a      	mov	r2, r3
 80067c4:	f7fb fe74 	bl	80024b0 <_lseek>
 80067c8:	1c43      	adds	r3, r0, #1
 80067ca:	d102      	bne.n	80067d2 <_lseek_r+0x1e>
 80067cc:	682b      	ldr	r3, [r5, #0]
 80067ce:	b103      	cbz	r3, 80067d2 <_lseek_r+0x1e>
 80067d0:	6023      	str	r3, [r4, #0]
 80067d2:	bd38      	pop	{r3, r4, r5, pc}
 80067d4:	2000024c 	.word	0x2000024c

080067d8 <_read_r>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	4d07      	ldr	r5, [pc, #28]	; (80067f8 <_read_r+0x20>)
 80067dc:	4604      	mov	r4, r0
 80067de:	4608      	mov	r0, r1
 80067e0:	4611      	mov	r1, r2
 80067e2:	2200      	movs	r2, #0
 80067e4:	602a      	str	r2, [r5, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	f7fb fe02 	bl	80023f0 <_read>
 80067ec:	1c43      	adds	r3, r0, #1
 80067ee:	d102      	bne.n	80067f6 <_read_r+0x1e>
 80067f0:	682b      	ldr	r3, [r5, #0]
 80067f2:	b103      	cbz	r3, 80067f6 <_read_r+0x1e>
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	bd38      	pop	{r3, r4, r5, pc}
 80067f8:	2000024c 	.word	0x2000024c

080067fc <pow>:
 80067fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006800:	ec59 8b10 	vmov	r8, r9, d0
 8006804:	ec57 6b11 	vmov	r6, r7, d1
 8006808:	f000 f8a6 	bl	8006958 <__ieee754_pow>
 800680c:	4b4e      	ldr	r3, [pc, #312]	; (8006948 <pow+0x14c>)
 800680e:	f993 3000 	ldrsb.w	r3, [r3]
 8006812:	3301      	adds	r3, #1
 8006814:	ec55 4b10 	vmov	r4, r5, d0
 8006818:	d015      	beq.n	8006846 <pow+0x4a>
 800681a:	4632      	mov	r2, r6
 800681c:	463b      	mov	r3, r7
 800681e:	4630      	mov	r0, r6
 8006820:	4639      	mov	r1, r7
 8006822:	f7fa f983 	bl	8000b2c <__aeabi_dcmpun>
 8006826:	b970      	cbnz	r0, 8006846 <pow+0x4a>
 8006828:	4642      	mov	r2, r8
 800682a:	464b      	mov	r3, r9
 800682c:	4640      	mov	r0, r8
 800682e:	4649      	mov	r1, r9
 8006830:	f7fa f97c 	bl	8000b2c <__aeabi_dcmpun>
 8006834:	2200      	movs	r2, #0
 8006836:	2300      	movs	r3, #0
 8006838:	b148      	cbz	r0, 800684e <pow+0x52>
 800683a:	4630      	mov	r0, r6
 800683c:	4639      	mov	r1, r7
 800683e:	f7fa f943 	bl	8000ac8 <__aeabi_dcmpeq>
 8006842:	2800      	cmp	r0, #0
 8006844:	d17d      	bne.n	8006942 <pow+0x146>
 8006846:	ec45 4b10 	vmov	d0, r4, r5
 800684a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800684e:	4640      	mov	r0, r8
 8006850:	4649      	mov	r1, r9
 8006852:	f7fa f939 	bl	8000ac8 <__aeabi_dcmpeq>
 8006856:	b1e0      	cbz	r0, 8006892 <pow+0x96>
 8006858:	2200      	movs	r2, #0
 800685a:	2300      	movs	r3, #0
 800685c:	4630      	mov	r0, r6
 800685e:	4639      	mov	r1, r7
 8006860:	f7fa f932 	bl	8000ac8 <__aeabi_dcmpeq>
 8006864:	2800      	cmp	r0, #0
 8006866:	d16c      	bne.n	8006942 <pow+0x146>
 8006868:	ec47 6b10 	vmov	d0, r6, r7
 800686c:	f000 fe53 	bl	8007516 <finite>
 8006870:	2800      	cmp	r0, #0
 8006872:	d0e8      	beq.n	8006846 <pow+0x4a>
 8006874:	2200      	movs	r2, #0
 8006876:	2300      	movs	r3, #0
 8006878:	4630      	mov	r0, r6
 800687a:	4639      	mov	r1, r7
 800687c:	f7fa f92e 	bl	8000adc <__aeabi_dcmplt>
 8006880:	2800      	cmp	r0, #0
 8006882:	d0e0      	beq.n	8006846 <pow+0x4a>
 8006884:	f7fd f8ec 	bl	8003a60 <__errno>
 8006888:	2321      	movs	r3, #33	; 0x21
 800688a:	6003      	str	r3, [r0, #0]
 800688c:	2400      	movs	r4, #0
 800688e:	4d2f      	ldr	r5, [pc, #188]	; (800694c <pow+0x150>)
 8006890:	e7d9      	b.n	8006846 <pow+0x4a>
 8006892:	ec45 4b10 	vmov	d0, r4, r5
 8006896:	f000 fe3e 	bl	8007516 <finite>
 800689a:	bbb8      	cbnz	r0, 800690c <pow+0x110>
 800689c:	ec49 8b10 	vmov	d0, r8, r9
 80068a0:	f000 fe39 	bl	8007516 <finite>
 80068a4:	b390      	cbz	r0, 800690c <pow+0x110>
 80068a6:	ec47 6b10 	vmov	d0, r6, r7
 80068aa:	f000 fe34 	bl	8007516 <finite>
 80068ae:	b368      	cbz	r0, 800690c <pow+0x110>
 80068b0:	4622      	mov	r2, r4
 80068b2:	462b      	mov	r3, r5
 80068b4:	4620      	mov	r0, r4
 80068b6:	4629      	mov	r1, r5
 80068b8:	f7fa f938 	bl	8000b2c <__aeabi_dcmpun>
 80068bc:	b160      	cbz	r0, 80068d8 <pow+0xdc>
 80068be:	f7fd f8cf 	bl	8003a60 <__errno>
 80068c2:	2321      	movs	r3, #33	; 0x21
 80068c4:	6003      	str	r3, [r0, #0]
 80068c6:	2200      	movs	r2, #0
 80068c8:	2300      	movs	r3, #0
 80068ca:	4610      	mov	r0, r2
 80068cc:	4619      	mov	r1, r3
 80068ce:	f7f9 ffbd 	bl	800084c <__aeabi_ddiv>
 80068d2:	4604      	mov	r4, r0
 80068d4:	460d      	mov	r5, r1
 80068d6:	e7b6      	b.n	8006846 <pow+0x4a>
 80068d8:	f7fd f8c2 	bl	8003a60 <__errno>
 80068dc:	2322      	movs	r3, #34	; 0x22
 80068de:	6003      	str	r3, [r0, #0]
 80068e0:	2200      	movs	r2, #0
 80068e2:	2300      	movs	r3, #0
 80068e4:	4640      	mov	r0, r8
 80068e6:	4649      	mov	r1, r9
 80068e8:	f7fa f8f8 	bl	8000adc <__aeabi_dcmplt>
 80068ec:	2400      	movs	r4, #0
 80068ee:	b158      	cbz	r0, 8006908 <pow+0x10c>
 80068f0:	ec47 6b10 	vmov	d0, r6, r7
 80068f4:	f000 fe24 	bl	8007540 <rint>
 80068f8:	4632      	mov	r2, r6
 80068fa:	ec51 0b10 	vmov	r0, r1, d0
 80068fe:	463b      	mov	r3, r7
 8006900:	f7fa f8e2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006904:	2800      	cmp	r0, #0
 8006906:	d0c2      	beq.n	800688e <pow+0x92>
 8006908:	4d11      	ldr	r5, [pc, #68]	; (8006950 <pow+0x154>)
 800690a:	e79c      	b.n	8006846 <pow+0x4a>
 800690c:	2200      	movs	r2, #0
 800690e:	2300      	movs	r3, #0
 8006910:	4620      	mov	r0, r4
 8006912:	4629      	mov	r1, r5
 8006914:	f7fa f8d8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006918:	2800      	cmp	r0, #0
 800691a:	d094      	beq.n	8006846 <pow+0x4a>
 800691c:	ec49 8b10 	vmov	d0, r8, r9
 8006920:	f000 fdf9 	bl	8007516 <finite>
 8006924:	2800      	cmp	r0, #0
 8006926:	d08e      	beq.n	8006846 <pow+0x4a>
 8006928:	ec47 6b10 	vmov	d0, r6, r7
 800692c:	f000 fdf3 	bl	8007516 <finite>
 8006930:	2800      	cmp	r0, #0
 8006932:	d088      	beq.n	8006846 <pow+0x4a>
 8006934:	f7fd f894 	bl	8003a60 <__errno>
 8006938:	2322      	movs	r3, #34	; 0x22
 800693a:	6003      	str	r3, [r0, #0]
 800693c:	2400      	movs	r4, #0
 800693e:	2500      	movs	r5, #0
 8006940:	e781      	b.n	8006846 <pow+0x4a>
 8006942:	4d04      	ldr	r5, [pc, #16]	; (8006954 <pow+0x158>)
 8006944:	2400      	movs	r4, #0
 8006946:	e77e      	b.n	8006846 <pow+0x4a>
 8006948:	200001d8 	.word	0x200001d8
 800694c:	fff00000 	.word	0xfff00000
 8006950:	7ff00000 	.word	0x7ff00000
 8006954:	3ff00000 	.word	0x3ff00000

08006958 <__ieee754_pow>:
 8006958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800695c:	ed2d 8b06 	vpush	{d8-d10}
 8006960:	b08d      	sub	sp, #52	; 0x34
 8006962:	ed8d 1b02 	vstr	d1, [sp, #8]
 8006966:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800696a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800696e:	ea56 0100 	orrs.w	r1, r6, r0
 8006972:	ec53 2b10 	vmov	r2, r3, d0
 8006976:	f000 84d1 	beq.w	800731c <__ieee754_pow+0x9c4>
 800697a:	497f      	ldr	r1, [pc, #508]	; (8006b78 <__ieee754_pow+0x220>)
 800697c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8006980:	428c      	cmp	r4, r1
 8006982:	ee10 8a10 	vmov	r8, s0
 8006986:	4699      	mov	r9, r3
 8006988:	dc09      	bgt.n	800699e <__ieee754_pow+0x46>
 800698a:	d103      	bne.n	8006994 <__ieee754_pow+0x3c>
 800698c:	b97a      	cbnz	r2, 80069ae <__ieee754_pow+0x56>
 800698e:	42a6      	cmp	r6, r4
 8006990:	dd02      	ble.n	8006998 <__ieee754_pow+0x40>
 8006992:	e00c      	b.n	80069ae <__ieee754_pow+0x56>
 8006994:	428e      	cmp	r6, r1
 8006996:	dc02      	bgt.n	800699e <__ieee754_pow+0x46>
 8006998:	428e      	cmp	r6, r1
 800699a:	d110      	bne.n	80069be <__ieee754_pow+0x66>
 800699c:	b178      	cbz	r0, 80069be <__ieee754_pow+0x66>
 800699e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80069a2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80069a6:	ea54 0308 	orrs.w	r3, r4, r8
 80069aa:	f000 84b7 	beq.w	800731c <__ieee754_pow+0x9c4>
 80069ae:	4873      	ldr	r0, [pc, #460]	; (8006b7c <__ieee754_pow+0x224>)
 80069b0:	b00d      	add	sp, #52	; 0x34
 80069b2:	ecbd 8b06 	vpop	{d8-d10}
 80069b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ba:	f000 bdb9 	b.w	8007530 <nan>
 80069be:	f1b9 0f00 	cmp.w	r9, #0
 80069c2:	da36      	bge.n	8006a32 <__ieee754_pow+0xda>
 80069c4:	496e      	ldr	r1, [pc, #440]	; (8006b80 <__ieee754_pow+0x228>)
 80069c6:	428e      	cmp	r6, r1
 80069c8:	dc51      	bgt.n	8006a6e <__ieee754_pow+0x116>
 80069ca:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80069ce:	428e      	cmp	r6, r1
 80069d0:	f340 84af 	ble.w	8007332 <__ieee754_pow+0x9da>
 80069d4:	1531      	asrs	r1, r6, #20
 80069d6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80069da:	2914      	cmp	r1, #20
 80069dc:	dd0f      	ble.n	80069fe <__ieee754_pow+0xa6>
 80069de:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80069e2:	fa20 fc01 	lsr.w	ip, r0, r1
 80069e6:	fa0c f101 	lsl.w	r1, ip, r1
 80069ea:	4281      	cmp	r1, r0
 80069ec:	f040 84a1 	bne.w	8007332 <__ieee754_pow+0x9da>
 80069f0:	f00c 0c01 	and.w	ip, ip, #1
 80069f4:	f1cc 0102 	rsb	r1, ip, #2
 80069f8:	9100      	str	r1, [sp, #0]
 80069fa:	b180      	cbz	r0, 8006a1e <__ieee754_pow+0xc6>
 80069fc:	e059      	b.n	8006ab2 <__ieee754_pow+0x15a>
 80069fe:	2800      	cmp	r0, #0
 8006a00:	d155      	bne.n	8006aae <__ieee754_pow+0x156>
 8006a02:	f1c1 0114 	rsb	r1, r1, #20
 8006a06:	fa46 fc01 	asr.w	ip, r6, r1
 8006a0a:	fa0c f101 	lsl.w	r1, ip, r1
 8006a0e:	42b1      	cmp	r1, r6
 8006a10:	f040 848c 	bne.w	800732c <__ieee754_pow+0x9d4>
 8006a14:	f00c 0c01 	and.w	ip, ip, #1
 8006a18:	f1cc 0102 	rsb	r1, ip, #2
 8006a1c:	9100      	str	r1, [sp, #0]
 8006a1e:	4959      	ldr	r1, [pc, #356]	; (8006b84 <__ieee754_pow+0x22c>)
 8006a20:	428e      	cmp	r6, r1
 8006a22:	d12d      	bne.n	8006a80 <__ieee754_pow+0x128>
 8006a24:	2f00      	cmp	r7, #0
 8006a26:	da79      	bge.n	8006b1c <__ieee754_pow+0x1c4>
 8006a28:	4956      	ldr	r1, [pc, #344]	; (8006b84 <__ieee754_pow+0x22c>)
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	f7f9 ff0e 	bl	800084c <__aeabi_ddiv>
 8006a30:	e016      	b.n	8006a60 <__ieee754_pow+0x108>
 8006a32:	2100      	movs	r1, #0
 8006a34:	9100      	str	r1, [sp, #0]
 8006a36:	2800      	cmp	r0, #0
 8006a38:	d13b      	bne.n	8006ab2 <__ieee754_pow+0x15a>
 8006a3a:	494f      	ldr	r1, [pc, #316]	; (8006b78 <__ieee754_pow+0x220>)
 8006a3c:	428e      	cmp	r6, r1
 8006a3e:	d1ee      	bne.n	8006a1e <__ieee754_pow+0xc6>
 8006a40:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006a44:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006a48:	ea53 0308 	orrs.w	r3, r3, r8
 8006a4c:	f000 8466 	beq.w	800731c <__ieee754_pow+0x9c4>
 8006a50:	4b4d      	ldr	r3, [pc, #308]	; (8006b88 <__ieee754_pow+0x230>)
 8006a52:	429c      	cmp	r4, r3
 8006a54:	dd0d      	ble.n	8006a72 <__ieee754_pow+0x11a>
 8006a56:	2f00      	cmp	r7, #0
 8006a58:	f280 8464 	bge.w	8007324 <__ieee754_pow+0x9cc>
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	2100      	movs	r1, #0
 8006a60:	ec41 0b10 	vmov	d0, r0, r1
 8006a64:	b00d      	add	sp, #52	; 0x34
 8006a66:	ecbd 8b06 	vpop	{d8-d10}
 8006a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a6e:	2102      	movs	r1, #2
 8006a70:	e7e0      	b.n	8006a34 <__ieee754_pow+0xdc>
 8006a72:	2f00      	cmp	r7, #0
 8006a74:	daf2      	bge.n	8006a5c <__ieee754_pow+0x104>
 8006a76:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8006a7a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006a7e:	e7ef      	b.n	8006a60 <__ieee754_pow+0x108>
 8006a80:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8006a84:	d104      	bne.n	8006a90 <__ieee754_pow+0x138>
 8006a86:	4610      	mov	r0, r2
 8006a88:	4619      	mov	r1, r3
 8006a8a:	f7f9 fdb5 	bl	80005f8 <__aeabi_dmul>
 8006a8e:	e7e7      	b.n	8006a60 <__ieee754_pow+0x108>
 8006a90:	493e      	ldr	r1, [pc, #248]	; (8006b8c <__ieee754_pow+0x234>)
 8006a92:	428f      	cmp	r7, r1
 8006a94:	d10d      	bne.n	8006ab2 <__ieee754_pow+0x15a>
 8006a96:	f1b9 0f00 	cmp.w	r9, #0
 8006a9a:	db0a      	blt.n	8006ab2 <__ieee754_pow+0x15a>
 8006a9c:	ec43 2b10 	vmov	d0, r2, r3
 8006aa0:	b00d      	add	sp, #52	; 0x34
 8006aa2:	ecbd 8b06 	vpop	{d8-d10}
 8006aa6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aaa:	f000 bc77 	b.w	800739c <__ieee754_sqrt>
 8006aae:	2100      	movs	r1, #0
 8006ab0:	9100      	str	r1, [sp, #0]
 8006ab2:	ec43 2b10 	vmov	d0, r2, r3
 8006ab6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006aba:	f000 fd23 	bl	8007504 <fabs>
 8006abe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ac2:	ec51 0b10 	vmov	r0, r1, d0
 8006ac6:	f1b8 0f00 	cmp.w	r8, #0
 8006aca:	d12a      	bne.n	8006b22 <__ieee754_pow+0x1ca>
 8006acc:	b12c      	cbz	r4, 8006ada <__ieee754_pow+0x182>
 8006ace:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8006b84 <__ieee754_pow+0x22c>
 8006ad2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8006ad6:	45e6      	cmp	lr, ip
 8006ad8:	d123      	bne.n	8006b22 <__ieee754_pow+0x1ca>
 8006ada:	2f00      	cmp	r7, #0
 8006adc:	da05      	bge.n	8006aea <__ieee754_pow+0x192>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	2000      	movs	r0, #0
 8006ae4:	4927      	ldr	r1, [pc, #156]	; (8006b84 <__ieee754_pow+0x22c>)
 8006ae6:	f7f9 feb1 	bl	800084c <__aeabi_ddiv>
 8006aea:	f1b9 0f00 	cmp.w	r9, #0
 8006aee:	dab7      	bge.n	8006a60 <__ieee754_pow+0x108>
 8006af0:	9b00      	ldr	r3, [sp, #0]
 8006af2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006af6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006afa:	4323      	orrs	r3, r4
 8006afc:	d108      	bne.n	8006b10 <__ieee754_pow+0x1b8>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	4610      	mov	r0, r2
 8006b04:	4619      	mov	r1, r3
 8006b06:	f7f9 fbbf 	bl	8000288 <__aeabi_dsub>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	e78d      	b.n	8006a2c <__ieee754_pow+0xd4>
 8006b10:	9b00      	ldr	r3, [sp, #0]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d1a4      	bne.n	8006a60 <__ieee754_pow+0x108>
 8006b16:	4602      	mov	r2, r0
 8006b18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b1c:	4610      	mov	r0, r2
 8006b1e:	4619      	mov	r1, r3
 8006b20:	e79e      	b.n	8006a60 <__ieee754_pow+0x108>
 8006b22:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8006b26:	f10c 35ff 	add.w	r5, ip, #4294967295
 8006b2a:	950a      	str	r5, [sp, #40]	; 0x28
 8006b2c:	9d00      	ldr	r5, [sp, #0]
 8006b2e:	46ac      	mov	ip, r5
 8006b30:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006b32:	ea5c 0505 	orrs.w	r5, ip, r5
 8006b36:	d0e4      	beq.n	8006b02 <__ieee754_pow+0x1aa>
 8006b38:	4b15      	ldr	r3, [pc, #84]	; (8006b90 <__ieee754_pow+0x238>)
 8006b3a:	429e      	cmp	r6, r3
 8006b3c:	f340 80fc 	ble.w	8006d38 <__ieee754_pow+0x3e0>
 8006b40:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006b44:	429e      	cmp	r6, r3
 8006b46:	4b10      	ldr	r3, [pc, #64]	; (8006b88 <__ieee754_pow+0x230>)
 8006b48:	dd07      	ble.n	8006b5a <__ieee754_pow+0x202>
 8006b4a:	429c      	cmp	r4, r3
 8006b4c:	dc0a      	bgt.n	8006b64 <__ieee754_pow+0x20c>
 8006b4e:	2f00      	cmp	r7, #0
 8006b50:	da84      	bge.n	8006a5c <__ieee754_pow+0x104>
 8006b52:	a307      	add	r3, pc, #28	; (adr r3, 8006b70 <__ieee754_pow+0x218>)
 8006b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b58:	e795      	b.n	8006a86 <__ieee754_pow+0x12e>
 8006b5a:	429c      	cmp	r4, r3
 8006b5c:	dbf7      	blt.n	8006b4e <__ieee754_pow+0x1f6>
 8006b5e:	4b09      	ldr	r3, [pc, #36]	; (8006b84 <__ieee754_pow+0x22c>)
 8006b60:	429c      	cmp	r4, r3
 8006b62:	dd17      	ble.n	8006b94 <__ieee754_pow+0x23c>
 8006b64:	2f00      	cmp	r7, #0
 8006b66:	dcf4      	bgt.n	8006b52 <__ieee754_pow+0x1fa>
 8006b68:	e778      	b.n	8006a5c <__ieee754_pow+0x104>
 8006b6a:	bf00      	nop
 8006b6c:	f3af 8000 	nop.w
 8006b70:	8800759c 	.word	0x8800759c
 8006b74:	7e37e43c 	.word	0x7e37e43c
 8006b78:	7ff00000 	.word	0x7ff00000
 8006b7c:	08007a60 	.word	0x08007a60
 8006b80:	433fffff 	.word	0x433fffff
 8006b84:	3ff00000 	.word	0x3ff00000
 8006b88:	3fefffff 	.word	0x3fefffff
 8006b8c:	3fe00000 	.word	0x3fe00000
 8006b90:	41e00000 	.word	0x41e00000
 8006b94:	4b64      	ldr	r3, [pc, #400]	; (8006d28 <__ieee754_pow+0x3d0>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	f7f9 fb76 	bl	8000288 <__aeabi_dsub>
 8006b9c:	a356      	add	r3, pc, #344	; (adr r3, 8006cf8 <__ieee754_pow+0x3a0>)
 8006b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba2:	4604      	mov	r4, r0
 8006ba4:	460d      	mov	r5, r1
 8006ba6:	f7f9 fd27 	bl	80005f8 <__aeabi_dmul>
 8006baa:	a355      	add	r3, pc, #340	; (adr r3, 8006d00 <__ieee754_pow+0x3a8>)
 8006bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb0:	4606      	mov	r6, r0
 8006bb2:	460f      	mov	r7, r1
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	4629      	mov	r1, r5
 8006bb8:	f7f9 fd1e 	bl	80005f8 <__aeabi_dmul>
 8006bbc:	4b5b      	ldr	r3, [pc, #364]	; (8006d2c <__ieee754_pow+0x3d4>)
 8006bbe:	4682      	mov	sl, r0
 8006bc0:	468b      	mov	fp, r1
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	4629      	mov	r1, r5
 8006bc8:	f7f9 fd16 	bl	80005f8 <__aeabi_dmul>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	460b      	mov	r3, r1
 8006bd0:	a14d      	add	r1, pc, #308	; (adr r1, 8006d08 <__ieee754_pow+0x3b0>)
 8006bd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bd6:	f7f9 fb57 	bl	8000288 <__aeabi_dsub>
 8006bda:	4622      	mov	r2, r4
 8006bdc:	462b      	mov	r3, r5
 8006bde:	f7f9 fd0b 	bl	80005f8 <__aeabi_dmul>
 8006be2:	4602      	mov	r2, r0
 8006be4:	460b      	mov	r3, r1
 8006be6:	2000      	movs	r0, #0
 8006be8:	4951      	ldr	r1, [pc, #324]	; (8006d30 <__ieee754_pow+0x3d8>)
 8006bea:	f7f9 fb4d 	bl	8000288 <__aeabi_dsub>
 8006bee:	4622      	mov	r2, r4
 8006bf0:	4680      	mov	r8, r0
 8006bf2:	4689      	mov	r9, r1
 8006bf4:	462b      	mov	r3, r5
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	4629      	mov	r1, r5
 8006bfa:	f7f9 fcfd 	bl	80005f8 <__aeabi_dmul>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	460b      	mov	r3, r1
 8006c02:	4640      	mov	r0, r8
 8006c04:	4649      	mov	r1, r9
 8006c06:	f7f9 fcf7 	bl	80005f8 <__aeabi_dmul>
 8006c0a:	a341      	add	r3, pc, #260	; (adr r3, 8006d10 <__ieee754_pow+0x3b8>)
 8006c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c10:	f7f9 fcf2 	bl	80005f8 <__aeabi_dmul>
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	4650      	mov	r0, sl
 8006c1a:	4659      	mov	r1, fp
 8006c1c:	f7f9 fb34 	bl	8000288 <__aeabi_dsub>
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	4680      	mov	r8, r0
 8006c26:	4689      	mov	r9, r1
 8006c28:	4630      	mov	r0, r6
 8006c2a:	4639      	mov	r1, r7
 8006c2c:	f7f9 fb2e 	bl	800028c <__adddf3>
 8006c30:	2400      	movs	r4, #0
 8006c32:	4632      	mov	r2, r6
 8006c34:	463b      	mov	r3, r7
 8006c36:	4620      	mov	r0, r4
 8006c38:	460d      	mov	r5, r1
 8006c3a:	f7f9 fb25 	bl	8000288 <__aeabi_dsub>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	4640      	mov	r0, r8
 8006c44:	4649      	mov	r1, r9
 8006c46:	f7f9 fb1f 	bl	8000288 <__aeabi_dsub>
 8006c4a:	9b00      	ldr	r3, [sp, #0]
 8006c4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	4313      	orrs	r3, r2
 8006c52:	4682      	mov	sl, r0
 8006c54:	468b      	mov	fp, r1
 8006c56:	f040 81f1 	bne.w	800703c <__ieee754_pow+0x6e4>
 8006c5a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8006d18 <__ieee754_pow+0x3c0>
 8006c5e:	eeb0 8a47 	vmov.f32	s16, s14
 8006c62:	eef0 8a67 	vmov.f32	s17, s15
 8006c66:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c6a:	2600      	movs	r6, #0
 8006c6c:	4632      	mov	r2, r6
 8006c6e:	463b      	mov	r3, r7
 8006c70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c74:	f7f9 fb08 	bl	8000288 <__aeabi_dsub>
 8006c78:	4622      	mov	r2, r4
 8006c7a:	462b      	mov	r3, r5
 8006c7c:	f7f9 fcbc 	bl	80005f8 <__aeabi_dmul>
 8006c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c84:	4680      	mov	r8, r0
 8006c86:	4689      	mov	r9, r1
 8006c88:	4650      	mov	r0, sl
 8006c8a:	4659      	mov	r1, fp
 8006c8c:	f7f9 fcb4 	bl	80005f8 <__aeabi_dmul>
 8006c90:	4602      	mov	r2, r0
 8006c92:	460b      	mov	r3, r1
 8006c94:	4640      	mov	r0, r8
 8006c96:	4649      	mov	r1, r9
 8006c98:	f7f9 faf8 	bl	800028c <__adddf3>
 8006c9c:	4632      	mov	r2, r6
 8006c9e:	463b      	mov	r3, r7
 8006ca0:	4680      	mov	r8, r0
 8006ca2:	4689      	mov	r9, r1
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	f7f9 fca6 	bl	80005f8 <__aeabi_dmul>
 8006cac:	460b      	mov	r3, r1
 8006cae:	4604      	mov	r4, r0
 8006cb0:	460d      	mov	r5, r1
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	4649      	mov	r1, r9
 8006cb6:	4640      	mov	r0, r8
 8006cb8:	f7f9 fae8 	bl	800028c <__adddf3>
 8006cbc:	4b1d      	ldr	r3, [pc, #116]	; (8006d34 <__ieee754_pow+0x3dc>)
 8006cbe:	4299      	cmp	r1, r3
 8006cc0:	ec45 4b19 	vmov	d9, r4, r5
 8006cc4:	4606      	mov	r6, r0
 8006cc6:	460f      	mov	r7, r1
 8006cc8:	468b      	mov	fp, r1
 8006cca:	f340 82fe 	ble.w	80072ca <__ieee754_pow+0x972>
 8006cce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006cd2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006cd6:	4303      	orrs	r3, r0
 8006cd8:	f000 81f0 	beq.w	80070bc <__ieee754_pow+0x764>
 8006cdc:	a310      	add	r3, pc, #64	; (adr r3, 8006d20 <__ieee754_pow+0x3c8>)
 8006cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce2:	ec51 0b18 	vmov	r0, r1, d8
 8006ce6:	f7f9 fc87 	bl	80005f8 <__aeabi_dmul>
 8006cea:	a30d      	add	r3, pc, #52	; (adr r3, 8006d20 <__ieee754_pow+0x3c8>)
 8006cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf0:	e6cb      	b.n	8006a8a <__ieee754_pow+0x132>
 8006cf2:	bf00      	nop
 8006cf4:	f3af 8000 	nop.w
 8006cf8:	60000000 	.word	0x60000000
 8006cfc:	3ff71547 	.word	0x3ff71547
 8006d00:	f85ddf44 	.word	0xf85ddf44
 8006d04:	3e54ae0b 	.word	0x3e54ae0b
 8006d08:	55555555 	.word	0x55555555
 8006d0c:	3fd55555 	.word	0x3fd55555
 8006d10:	652b82fe 	.word	0x652b82fe
 8006d14:	3ff71547 	.word	0x3ff71547
 8006d18:	00000000 	.word	0x00000000
 8006d1c:	bff00000 	.word	0xbff00000
 8006d20:	8800759c 	.word	0x8800759c
 8006d24:	7e37e43c 	.word	0x7e37e43c
 8006d28:	3ff00000 	.word	0x3ff00000
 8006d2c:	3fd00000 	.word	0x3fd00000
 8006d30:	3fe00000 	.word	0x3fe00000
 8006d34:	408fffff 	.word	0x408fffff
 8006d38:	4bd7      	ldr	r3, [pc, #860]	; (8007098 <__ieee754_pow+0x740>)
 8006d3a:	ea03 0309 	and.w	r3, r3, r9
 8006d3e:	2200      	movs	r2, #0
 8006d40:	b92b      	cbnz	r3, 8006d4e <__ieee754_pow+0x3f6>
 8006d42:	4bd6      	ldr	r3, [pc, #856]	; (800709c <__ieee754_pow+0x744>)
 8006d44:	f7f9 fc58 	bl	80005f8 <__aeabi_dmul>
 8006d48:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006d4c:	460c      	mov	r4, r1
 8006d4e:	1523      	asrs	r3, r4, #20
 8006d50:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006d54:	4413      	add	r3, r2
 8006d56:	9309      	str	r3, [sp, #36]	; 0x24
 8006d58:	4bd1      	ldr	r3, [pc, #836]	; (80070a0 <__ieee754_pow+0x748>)
 8006d5a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006d5e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006d62:	429c      	cmp	r4, r3
 8006d64:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006d68:	dd08      	ble.n	8006d7c <__ieee754_pow+0x424>
 8006d6a:	4bce      	ldr	r3, [pc, #824]	; (80070a4 <__ieee754_pow+0x74c>)
 8006d6c:	429c      	cmp	r4, r3
 8006d6e:	f340 8163 	ble.w	8007038 <__ieee754_pow+0x6e0>
 8006d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d74:	3301      	adds	r3, #1
 8006d76:	9309      	str	r3, [sp, #36]	; 0x24
 8006d78:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006d7c:	2400      	movs	r4, #0
 8006d7e:	00e3      	lsls	r3, r4, #3
 8006d80:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d82:	4bc9      	ldr	r3, [pc, #804]	; (80070a8 <__ieee754_pow+0x750>)
 8006d84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d88:	ed93 7b00 	vldr	d7, [r3]
 8006d8c:	4629      	mov	r1, r5
 8006d8e:	ec53 2b17 	vmov	r2, r3, d7
 8006d92:	eeb0 8a47 	vmov.f32	s16, s14
 8006d96:	eef0 8a67 	vmov.f32	s17, s15
 8006d9a:	4682      	mov	sl, r0
 8006d9c:	f7f9 fa74 	bl	8000288 <__aeabi_dsub>
 8006da0:	4652      	mov	r2, sl
 8006da2:	4606      	mov	r6, r0
 8006da4:	460f      	mov	r7, r1
 8006da6:	462b      	mov	r3, r5
 8006da8:	ec51 0b18 	vmov	r0, r1, d8
 8006dac:	f7f9 fa6e 	bl	800028c <__adddf3>
 8006db0:	4602      	mov	r2, r0
 8006db2:	460b      	mov	r3, r1
 8006db4:	2000      	movs	r0, #0
 8006db6:	49bd      	ldr	r1, [pc, #756]	; (80070ac <__ieee754_pow+0x754>)
 8006db8:	f7f9 fd48 	bl	800084c <__aeabi_ddiv>
 8006dbc:	ec41 0b19 	vmov	d9, r0, r1
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	4639      	mov	r1, r7
 8006dc8:	f7f9 fc16 	bl	80005f8 <__aeabi_dmul>
 8006dcc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006dd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006dd4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006dd8:	2300      	movs	r3, #0
 8006dda:	9304      	str	r3, [sp, #16]
 8006ddc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006de0:	46ab      	mov	fp, r5
 8006de2:	106d      	asrs	r5, r5, #1
 8006de4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006de8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006dec:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006df0:	2200      	movs	r2, #0
 8006df2:	4640      	mov	r0, r8
 8006df4:	4649      	mov	r1, r9
 8006df6:	4614      	mov	r4, r2
 8006df8:	461d      	mov	r5, r3
 8006dfa:	f7f9 fbfd 	bl	80005f8 <__aeabi_dmul>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	460b      	mov	r3, r1
 8006e02:	4630      	mov	r0, r6
 8006e04:	4639      	mov	r1, r7
 8006e06:	f7f9 fa3f 	bl	8000288 <__aeabi_dsub>
 8006e0a:	ec53 2b18 	vmov	r2, r3, d8
 8006e0e:	4606      	mov	r6, r0
 8006e10:	460f      	mov	r7, r1
 8006e12:	4620      	mov	r0, r4
 8006e14:	4629      	mov	r1, r5
 8006e16:	f7f9 fa37 	bl	8000288 <__aeabi_dsub>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4650      	mov	r0, sl
 8006e20:	4659      	mov	r1, fp
 8006e22:	f7f9 fa31 	bl	8000288 <__aeabi_dsub>
 8006e26:	4642      	mov	r2, r8
 8006e28:	464b      	mov	r3, r9
 8006e2a:	f7f9 fbe5 	bl	80005f8 <__aeabi_dmul>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	460b      	mov	r3, r1
 8006e32:	4630      	mov	r0, r6
 8006e34:	4639      	mov	r1, r7
 8006e36:	f7f9 fa27 	bl	8000288 <__aeabi_dsub>
 8006e3a:	ec53 2b19 	vmov	r2, r3, d9
 8006e3e:	f7f9 fbdb 	bl	80005f8 <__aeabi_dmul>
 8006e42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e46:	ec41 0b18 	vmov	d8, r0, r1
 8006e4a:	4610      	mov	r0, r2
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	f7f9 fbd3 	bl	80005f8 <__aeabi_dmul>
 8006e52:	a37d      	add	r3, pc, #500	; (adr r3, 8007048 <__ieee754_pow+0x6f0>)
 8006e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e58:	4604      	mov	r4, r0
 8006e5a:	460d      	mov	r5, r1
 8006e5c:	f7f9 fbcc 	bl	80005f8 <__aeabi_dmul>
 8006e60:	a37b      	add	r3, pc, #492	; (adr r3, 8007050 <__ieee754_pow+0x6f8>)
 8006e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e66:	f7f9 fa11 	bl	800028c <__adddf3>
 8006e6a:	4622      	mov	r2, r4
 8006e6c:	462b      	mov	r3, r5
 8006e6e:	f7f9 fbc3 	bl	80005f8 <__aeabi_dmul>
 8006e72:	a379      	add	r3, pc, #484	; (adr r3, 8007058 <__ieee754_pow+0x700>)
 8006e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e78:	f7f9 fa08 	bl	800028c <__adddf3>
 8006e7c:	4622      	mov	r2, r4
 8006e7e:	462b      	mov	r3, r5
 8006e80:	f7f9 fbba 	bl	80005f8 <__aeabi_dmul>
 8006e84:	a376      	add	r3, pc, #472	; (adr r3, 8007060 <__ieee754_pow+0x708>)
 8006e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8a:	f7f9 f9ff 	bl	800028c <__adddf3>
 8006e8e:	4622      	mov	r2, r4
 8006e90:	462b      	mov	r3, r5
 8006e92:	f7f9 fbb1 	bl	80005f8 <__aeabi_dmul>
 8006e96:	a374      	add	r3, pc, #464	; (adr r3, 8007068 <__ieee754_pow+0x710>)
 8006e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9c:	f7f9 f9f6 	bl	800028c <__adddf3>
 8006ea0:	4622      	mov	r2, r4
 8006ea2:	462b      	mov	r3, r5
 8006ea4:	f7f9 fba8 	bl	80005f8 <__aeabi_dmul>
 8006ea8:	a371      	add	r3, pc, #452	; (adr r3, 8007070 <__ieee754_pow+0x718>)
 8006eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eae:	f7f9 f9ed 	bl	800028c <__adddf3>
 8006eb2:	4622      	mov	r2, r4
 8006eb4:	4606      	mov	r6, r0
 8006eb6:	460f      	mov	r7, r1
 8006eb8:	462b      	mov	r3, r5
 8006eba:	4620      	mov	r0, r4
 8006ebc:	4629      	mov	r1, r5
 8006ebe:	f7f9 fb9b 	bl	80005f8 <__aeabi_dmul>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	4630      	mov	r0, r6
 8006ec8:	4639      	mov	r1, r7
 8006eca:	f7f9 fb95 	bl	80005f8 <__aeabi_dmul>
 8006ece:	4642      	mov	r2, r8
 8006ed0:	4604      	mov	r4, r0
 8006ed2:	460d      	mov	r5, r1
 8006ed4:	464b      	mov	r3, r9
 8006ed6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006eda:	f7f9 f9d7 	bl	800028c <__adddf3>
 8006ede:	ec53 2b18 	vmov	r2, r3, d8
 8006ee2:	f7f9 fb89 	bl	80005f8 <__aeabi_dmul>
 8006ee6:	4622      	mov	r2, r4
 8006ee8:	462b      	mov	r3, r5
 8006eea:	f7f9 f9cf 	bl	800028c <__adddf3>
 8006eee:	4642      	mov	r2, r8
 8006ef0:	4682      	mov	sl, r0
 8006ef2:	468b      	mov	fp, r1
 8006ef4:	464b      	mov	r3, r9
 8006ef6:	4640      	mov	r0, r8
 8006ef8:	4649      	mov	r1, r9
 8006efa:	f7f9 fb7d 	bl	80005f8 <__aeabi_dmul>
 8006efe:	4b6c      	ldr	r3, [pc, #432]	; (80070b0 <__ieee754_pow+0x758>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	4606      	mov	r6, r0
 8006f04:	460f      	mov	r7, r1
 8006f06:	f7f9 f9c1 	bl	800028c <__adddf3>
 8006f0a:	4652      	mov	r2, sl
 8006f0c:	465b      	mov	r3, fp
 8006f0e:	f7f9 f9bd 	bl	800028c <__adddf3>
 8006f12:	9c04      	ldr	r4, [sp, #16]
 8006f14:	460d      	mov	r5, r1
 8006f16:	4622      	mov	r2, r4
 8006f18:	460b      	mov	r3, r1
 8006f1a:	4640      	mov	r0, r8
 8006f1c:	4649      	mov	r1, r9
 8006f1e:	f7f9 fb6b 	bl	80005f8 <__aeabi_dmul>
 8006f22:	4b63      	ldr	r3, [pc, #396]	; (80070b0 <__ieee754_pow+0x758>)
 8006f24:	4680      	mov	r8, r0
 8006f26:	4689      	mov	r9, r1
 8006f28:	2200      	movs	r2, #0
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	4629      	mov	r1, r5
 8006f2e:	f7f9 f9ab 	bl	8000288 <__aeabi_dsub>
 8006f32:	4632      	mov	r2, r6
 8006f34:	463b      	mov	r3, r7
 8006f36:	f7f9 f9a7 	bl	8000288 <__aeabi_dsub>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	4650      	mov	r0, sl
 8006f40:	4659      	mov	r1, fp
 8006f42:	f7f9 f9a1 	bl	8000288 <__aeabi_dsub>
 8006f46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f4a:	f7f9 fb55 	bl	80005f8 <__aeabi_dmul>
 8006f4e:	4622      	mov	r2, r4
 8006f50:	4606      	mov	r6, r0
 8006f52:	460f      	mov	r7, r1
 8006f54:	462b      	mov	r3, r5
 8006f56:	ec51 0b18 	vmov	r0, r1, d8
 8006f5a:	f7f9 fb4d 	bl	80005f8 <__aeabi_dmul>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	460b      	mov	r3, r1
 8006f62:	4630      	mov	r0, r6
 8006f64:	4639      	mov	r1, r7
 8006f66:	f7f9 f991 	bl	800028c <__adddf3>
 8006f6a:	4606      	mov	r6, r0
 8006f6c:	460f      	mov	r7, r1
 8006f6e:	4602      	mov	r2, r0
 8006f70:	460b      	mov	r3, r1
 8006f72:	4640      	mov	r0, r8
 8006f74:	4649      	mov	r1, r9
 8006f76:	f7f9 f989 	bl	800028c <__adddf3>
 8006f7a:	9c04      	ldr	r4, [sp, #16]
 8006f7c:	a33e      	add	r3, pc, #248	; (adr r3, 8007078 <__ieee754_pow+0x720>)
 8006f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f82:	4620      	mov	r0, r4
 8006f84:	460d      	mov	r5, r1
 8006f86:	f7f9 fb37 	bl	80005f8 <__aeabi_dmul>
 8006f8a:	4642      	mov	r2, r8
 8006f8c:	ec41 0b18 	vmov	d8, r0, r1
 8006f90:	464b      	mov	r3, r9
 8006f92:	4620      	mov	r0, r4
 8006f94:	4629      	mov	r1, r5
 8006f96:	f7f9 f977 	bl	8000288 <__aeabi_dsub>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	4639      	mov	r1, r7
 8006fa2:	f7f9 f971 	bl	8000288 <__aeabi_dsub>
 8006fa6:	a336      	add	r3, pc, #216	; (adr r3, 8007080 <__ieee754_pow+0x728>)
 8006fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fac:	f7f9 fb24 	bl	80005f8 <__aeabi_dmul>
 8006fb0:	a335      	add	r3, pc, #212	; (adr r3, 8007088 <__ieee754_pow+0x730>)
 8006fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb6:	4606      	mov	r6, r0
 8006fb8:	460f      	mov	r7, r1
 8006fba:	4620      	mov	r0, r4
 8006fbc:	4629      	mov	r1, r5
 8006fbe:	f7f9 fb1b 	bl	80005f8 <__aeabi_dmul>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	4639      	mov	r1, r7
 8006fca:	f7f9 f95f 	bl	800028c <__adddf3>
 8006fce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fd0:	4b38      	ldr	r3, [pc, #224]	; (80070b4 <__ieee754_pow+0x75c>)
 8006fd2:	4413      	add	r3, r2
 8006fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd8:	f7f9 f958 	bl	800028c <__adddf3>
 8006fdc:	4682      	mov	sl, r0
 8006fde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fe0:	468b      	mov	fp, r1
 8006fe2:	f7f9 fa9f 	bl	8000524 <__aeabi_i2d>
 8006fe6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fe8:	4b33      	ldr	r3, [pc, #204]	; (80070b8 <__ieee754_pow+0x760>)
 8006fea:	4413      	add	r3, r2
 8006fec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ff0:	4606      	mov	r6, r0
 8006ff2:	460f      	mov	r7, r1
 8006ff4:	4652      	mov	r2, sl
 8006ff6:	465b      	mov	r3, fp
 8006ff8:	ec51 0b18 	vmov	r0, r1, d8
 8006ffc:	f7f9 f946 	bl	800028c <__adddf3>
 8007000:	4642      	mov	r2, r8
 8007002:	464b      	mov	r3, r9
 8007004:	f7f9 f942 	bl	800028c <__adddf3>
 8007008:	4632      	mov	r2, r6
 800700a:	463b      	mov	r3, r7
 800700c:	f7f9 f93e 	bl	800028c <__adddf3>
 8007010:	9c04      	ldr	r4, [sp, #16]
 8007012:	4632      	mov	r2, r6
 8007014:	463b      	mov	r3, r7
 8007016:	4620      	mov	r0, r4
 8007018:	460d      	mov	r5, r1
 800701a:	f7f9 f935 	bl	8000288 <__aeabi_dsub>
 800701e:	4642      	mov	r2, r8
 8007020:	464b      	mov	r3, r9
 8007022:	f7f9 f931 	bl	8000288 <__aeabi_dsub>
 8007026:	ec53 2b18 	vmov	r2, r3, d8
 800702a:	f7f9 f92d 	bl	8000288 <__aeabi_dsub>
 800702e:	4602      	mov	r2, r0
 8007030:	460b      	mov	r3, r1
 8007032:	4650      	mov	r0, sl
 8007034:	4659      	mov	r1, fp
 8007036:	e606      	b.n	8006c46 <__ieee754_pow+0x2ee>
 8007038:	2401      	movs	r4, #1
 800703a:	e6a0      	b.n	8006d7e <__ieee754_pow+0x426>
 800703c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007090 <__ieee754_pow+0x738>
 8007040:	e60d      	b.n	8006c5e <__ieee754_pow+0x306>
 8007042:	bf00      	nop
 8007044:	f3af 8000 	nop.w
 8007048:	4a454eef 	.word	0x4a454eef
 800704c:	3fca7e28 	.word	0x3fca7e28
 8007050:	93c9db65 	.word	0x93c9db65
 8007054:	3fcd864a 	.word	0x3fcd864a
 8007058:	a91d4101 	.word	0xa91d4101
 800705c:	3fd17460 	.word	0x3fd17460
 8007060:	518f264d 	.word	0x518f264d
 8007064:	3fd55555 	.word	0x3fd55555
 8007068:	db6fabff 	.word	0xdb6fabff
 800706c:	3fdb6db6 	.word	0x3fdb6db6
 8007070:	33333303 	.word	0x33333303
 8007074:	3fe33333 	.word	0x3fe33333
 8007078:	e0000000 	.word	0xe0000000
 800707c:	3feec709 	.word	0x3feec709
 8007080:	dc3a03fd 	.word	0xdc3a03fd
 8007084:	3feec709 	.word	0x3feec709
 8007088:	145b01f5 	.word	0x145b01f5
 800708c:	be3e2fe0 	.word	0xbe3e2fe0
 8007090:	00000000 	.word	0x00000000
 8007094:	3ff00000 	.word	0x3ff00000
 8007098:	7ff00000 	.word	0x7ff00000
 800709c:	43400000 	.word	0x43400000
 80070a0:	0003988e 	.word	0x0003988e
 80070a4:	000bb679 	.word	0x000bb679
 80070a8:	08007bd0 	.word	0x08007bd0
 80070ac:	3ff00000 	.word	0x3ff00000
 80070b0:	40080000 	.word	0x40080000
 80070b4:	08007bf0 	.word	0x08007bf0
 80070b8:	08007be0 	.word	0x08007be0
 80070bc:	a3b5      	add	r3, pc, #724	; (adr r3, 8007394 <__ieee754_pow+0xa3c>)
 80070be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c2:	4640      	mov	r0, r8
 80070c4:	4649      	mov	r1, r9
 80070c6:	f7f9 f8e1 	bl	800028c <__adddf3>
 80070ca:	4622      	mov	r2, r4
 80070cc:	ec41 0b1a 	vmov	d10, r0, r1
 80070d0:	462b      	mov	r3, r5
 80070d2:	4630      	mov	r0, r6
 80070d4:	4639      	mov	r1, r7
 80070d6:	f7f9 f8d7 	bl	8000288 <__aeabi_dsub>
 80070da:	4602      	mov	r2, r0
 80070dc:	460b      	mov	r3, r1
 80070de:	ec51 0b1a 	vmov	r0, r1, d10
 80070e2:	f7f9 fd19 	bl	8000b18 <__aeabi_dcmpgt>
 80070e6:	2800      	cmp	r0, #0
 80070e8:	f47f adf8 	bne.w	8006cdc <__ieee754_pow+0x384>
 80070ec:	4aa4      	ldr	r2, [pc, #656]	; (8007380 <__ieee754_pow+0xa28>)
 80070ee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80070f2:	4293      	cmp	r3, r2
 80070f4:	f340 810b 	ble.w	800730e <__ieee754_pow+0x9b6>
 80070f8:	151b      	asrs	r3, r3, #20
 80070fa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80070fe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007102:	fa4a f303 	asr.w	r3, sl, r3
 8007106:	445b      	add	r3, fp
 8007108:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800710c:	4e9d      	ldr	r6, [pc, #628]	; (8007384 <__ieee754_pow+0xa2c>)
 800710e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007112:	4116      	asrs	r6, r2
 8007114:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007118:	2000      	movs	r0, #0
 800711a:	ea23 0106 	bic.w	r1, r3, r6
 800711e:	f1c2 0214 	rsb	r2, r2, #20
 8007122:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007126:	fa4a fa02 	asr.w	sl, sl, r2
 800712a:	f1bb 0f00 	cmp.w	fp, #0
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	4620      	mov	r0, r4
 8007134:	4629      	mov	r1, r5
 8007136:	bfb8      	it	lt
 8007138:	f1ca 0a00 	rsblt	sl, sl, #0
 800713c:	f7f9 f8a4 	bl	8000288 <__aeabi_dsub>
 8007140:	ec41 0b19 	vmov	d9, r0, r1
 8007144:	4642      	mov	r2, r8
 8007146:	464b      	mov	r3, r9
 8007148:	ec51 0b19 	vmov	r0, r1, d9
 800714c:	f7f9 f89e 	bl	800028c <__adddf3>
 8007150:	2400      	movs	r4, #0
 8007152:	a379      	add	r3, pc, #484	; (adr r3, 8007338 <__ieee754_pow+0x9e0>)
 8007154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007158:	4620      	mov	r0, r4
 800715a:	460d      	mov	r5, r1
 800715c:	f7f9 fa4c 	bl	80005f8 <__aeabi_dmul>
 8007160:	ec53 2b19 	vmov	r2, r3, d9
 8007164:	4606      	mov	r6, r0
 8007166:	460f      	mov	r7, r1
 8007168:	4620      	mov	r0, r4
 800716a:	4629      	mov	r1, r5
 800716c:	f7f9 f88c 	bl	8000288 <__aeabi_dsub>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	4640      	mov	r0, r8
 8007176:	4649      	mov	r1, r9
 8007178:	f7f9 f886 	bl	8000288 <__aeabi_dsub>
 800717c:	a370      	add	r3, pc, #448	; (adr r3, 8007340 <__ieee754_pow+0x9e8>)
 800717e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007182:	f7f9 fa39 	bl	80005f8 <__aeabi_dmul>
 8007186:	a370      	add	r3, pc, #448	; (adr r3, 8007348 <__ieee754_pow+0x9f0>)
 8007188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718c:	4680      	mov	r8, r0
 800718e:	4689      	mov	r9, r1
 8007190:	4620      	mov	r0, r4
 8007192:	4629      	mov	r1, r5
 8007194:	f7f9 fa30 	bl	80005f8 <__aeabi_dmul>
 8007198:	4602      	mov	r2, r0
 800719a:	460b      	mov	r3, r1
 800719c:	4640      	mov	r0, r8
 800719e:	4649      	mov	r1, r9
 80071a0:	f7f9 f874 	bl	800028c <__adddf3>
 80071a4:	4604      	mov	r4, r0
 80071a6:	460d      	mov	r5, r1
 80071a8:	4602      	mov	r2, r0
 80071aa:	460b      	mov	r3, r1
 80071ac:	4630      	mov	r0, r6
 80071ae:	4639      	mov	r1, r7
 80071b0:	f7f9 f86c 	bl	800028c <__adddf3>
 80071b4:	4632      	mov	r2, r6
 80071b6:	463b      	mov	r3, r7
 80071b8:	4680      	mov	r8, r0
 80071ba:	4689      	mov	r9, r1
 80071bc:	f7f9 f864 	bl	8000288 <__aeabi_dsub>
 80071c0:	4602      	mov	r2, r0
 80071c2:	460b      	mov	r3, r1
 80071c4:	4620      	mov	r0, r4
 80071c6:	4629      	mov	r1, r5
 80071c8:	f7f9 f85e 	bl	8000288 <__aeabi_dsub>
 80071cc:	4642      	mov	r2, r8
 80071ce:	4606      	mov	r6, r0
 80071d0:	460f      	mov	r7, r1
 80071d2:	464b      	mov	r3, r9
 80071d4:	4640      	mov	r0, r8
 80071d6:	4649      	mov	r1, r9
 80071d8:	f7f9 fa0e 	bl	80005f8 <__aeabi_dmul>
 80071dc:	a35c      	add	r3, pc, #368	; (adr r3, 8007350 <__ieee754_pow+0x9f8>)
 80071de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e2:	4604      	mov	r4, r0
 80071e4:	460d      	mov	r5, r1
 80071e6:	f7f9 fa07 	bl	80005f8 <__aeabi_dmul>
 80071ea:	a35b      	add	r3, pc, #364	; (adr r3, 8007358 <__ieee754_pow+0xa00>)
 80071ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f0:	f7f9 f84a 	bl	8000288 <__aeabi_dsub>
 80071f4:	4622      	mov	r2, r4
 80071f6:	462b      	mov	r3, r5
 80071f8:	f7f9 f9fe 	bl	80005f8 <__aeabi_dmul>
 80071fc:	a358      	add	r3, pc, #352	; (adr r3, 8007360 <__ieee754_pow+0xa08>)
 80071fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007202:	f7f9 f843 	bl	800028c <__adddf3>
 8007206:	4622      	mov	r2, r4
 8007208:	462b      	mov	r3, r5
 800720a:	f7f9 f9f5 	bl	80005f8 <__aeabi_dmul>
 800720e:	a356      	add	r3, pc, #344	; (adr r3, 8007368 <__ieee754_pow+0xa10>)
 8007210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007214:	f7f9 f838 	bl	8000288 <__aeabi_dsub>
 8007218:	4622      	mov	r2, r4
 800721a:	462b      	mov	r3, r5
 800721c:	f7f9 f9ec 	bl	80005f8 <__aeabi_dmul>
 8007220:	a353      	add	r3, pc, #332	; (adr r3, 8007370 <__ieee754_pow+0xa18>)
 8007222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007226:	f7f9 f831 	bl	800028c <__adddf3>
 800722a:	4622      	mov	r2, r4
 800722c:	462b      	mov	r3, r5
 800722e:	f7f9 f9e3 	bl	80005f8 <__aeabi_dmul>
 8007232:	4602      	mov	r2, r0
 8007234:	460b      	mov	r3, r1
 8007236:	4640      	mov	r0, r8
 8007238:	4649      	mov	r1, r9
 800723a:	f7f9 f825 	bl	8000288 <__aeabi_dsub>
 800723e:	4604      	mov	r4, r0
 8007240:	460d      	mov	r5, r1
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	4640      	mov	r0, r8
 8007248:	4649      	mov	r1, r9
 800724a:	f7f9 f9d5 	bl	80005f8 <__aeabi_dmul>
 800724e:	2200      	movs	r2, #0
 8007250:	ec41 0b19 	vmov	d9, r0, r1
 8007254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007258:	4620      	mov	r0, r4
 800725a:	4629      	mov	r1, r5
 800725c:	f7f9 f814 	bl	8000288 <__aeabi_dsub>
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	ec51 0b19 	vmov	r0, r1, d9
 8007268:	f7f9 faf0 	bl	800084c <__aeabi_ddiv>
 800726c:	4632      	mov	r2, r6
 800726e:	4604      	mov	r4, r0
 8007270:	460d      	mov	r5, r1
 8007272:	463b      	mov	r3, r7
 8007274:	4640      	mov	r0, r8
 8007276:	4649      	mov	r1, r9
 8007278:	f7f9 f9be 	bl	80005f8 <__aeabi_dmul>
 800727c:	4632      	mov	r2, r6
 800727e:	463b      	mov	r3, r7
 8007280:	f7f9 f804 	bl	800028c <__adddf3>
 8007284:	4602      	mov	r2, r0
 8007286:	460b      	mov	r3, r1
 8007288:	4620      	mov	r0, r4
 800728a:	4629      	mov	r1, r5
 800728c:	f7f8 fffc 	bl	8000288 <__aeabi_dsub>
 8007290:	4642      	mov	r2, r8
 8007292:	464b      	mov	r3, r9
 8007294:	f7f8 fff8 	bl	8000288 <__aeabi_dsub>
 8007298:	460b      	mov	r3, r1
 800729a:	4602      	mov	r2, r0
 800729c:	493a      	ldr	r1, [pc, #232]	; (8007388 <__ieee754_pow+0xa30>)
 800729e:	2000      	movs	r0, #0
 80072a0:	f7f8 fff2 	bl	8000288 <__aeabi_dsub>
 80072a4:	e9cd 0100 	strd	r0, r1, [sp]
 80072a8:	9b01      	ldr	r3, [sp, #4]
 80072aa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80072ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072b2:	da2f      	bge.n	8007314 <__ieee754_pow+0x9bc>
 80072b4:	4650      	mov	r0, sl
 80072b6:	ed9d 0b00 	vldr	d0, [sp]
 80072ba:	f000 f9cd 	bl	8007658 <scalbn>
 80072be:	ec51 0b10 	vmov	r0, r1, d0
 80072c2:	ec53 2b18 	vmov	r2, r3, d8
 80072c6:	f7ff bbe0 	b.w	8006a8a <__ieee754_pow+0x132>
 80072ca:	4b30      	ldr	r3, [pc, #192]	; (800738c <__ieee754_pow+0xa34>)
 80072cc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80072d0:	429e      	cmp	r6, r3
 80072d2:	f77f af0b 	ble.w	80070ec <__ieee754_pow+0x794>
 80072d6:	4b2e      	ldr	r3, [pc, #184]	; (8007390 <__ieee754_pow+0xa38>)
 80072d8:	440b      	add	r3, r1
 80072da:	4303      	orrs	r3, r0
 80072dc:	d00b      	beq.n	80072f6 <__ieee754_pow+0x99e>
 80072de:	a326      	add	r3, pc, #152	; (adr r3, 8007378 <__ieee754_pow+0xa20>)
 80072e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e4:	ec51 0b18 	vmov	r0, r1, d8
 80072e8:	f7f9 f986 	bl	80005f8 <__aeabi_dmul>
 80072ec:	a322      	add	r3, pc, #136	; (adr r3, 8007378 <__ieee754_pow+0xa20>)
 80072ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f2:	f7ff bbca 	b.w	8006a8a <__ieee754_pow+0x132>
 80072f6:	4622      	mov	r2, r4
 80072f8:	462b      	mov	r3, r5
 80072fa:	f7f8 ffc5 	bl	8000288 <__aeabi_dsub>
 80072fe:	4642      	mov	r2, r8
 8007300:	464b      	mov	r3, r9
 8007302:	f7f9 fbff 	bl	8000b04 <__aeabi_dcmpge>
 8007306:	2800      	cmp	r0, #0
 8007308:	f43f aef0 	beq.w	80070ec <__ieee754_pow+0x794>
 800730c:	e7e7      	b.n	80072de <__ieee754_pow+0x986>
 800730e:	f04f 0a00 	mov.w	sl, #0
 8007312:	e717      	b.n	8007144 <__ieee754_pow+0x7ec>
 8007314:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007318:	4619      	mov	r1, r3
 800731a:	e7d2      	b.n	80072c2 <__ieee754_pow+0x96a>
 800731c:	491a      	ldr	r1, [pc, #104]	; (8007388 <__ieee754_pow+0xa30>)
 800731e:	2000      	movs	r0, #0
 8007320:	f7ff bb9e 	b.w	8006a60 <__ieee754_pow+0x108>
 8007324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007328:	f7ff bb9a 	b.w	8006a60 <__ieee754_pow+0x108>
 800732c:	9000      	str	r0, [sp, #0]
 800732e:	f7ff bb76 	b.w	8006a1e <__ieee754_pow+0xc6>
 8007332:	2100      	movs	r1, #0
 8007334:	f7ff bb60 	b.w	80069f8 <__ieee754_pow+0xa0>
 8007338:	00000000 	.word	0x00000000
 800733c:	3fe62e43 	.word	0x3fe62e43
 8007340:	fefa39ef 	.word	0xfefa39ef
 8007344:	3fe62e42 	.word	0x3fe62e42
 8007348:	0ca86c39 	.word	0x0ca86c39
 800734c:	be205c61 	.word	0xbe205c61
 8007350:	72bea4d0 	.word	0x72bea4d0
 8007354:	3e663769 	.word	0x3e663769
 8007358:	c5d26bf1 	.word	0xc5d26bf1
 800735c:	3ebbbd41 	.word	0x3ebbbd41
 8007360:	af25de2c 	.word	0xaf25de2c
 8007364:	3f11566a 	.word	0x3f11566a
 8007368:	16bebd93 	.word	0x16bebd93
 800736c:	3f66c16c 	.word	0x3f66c16c
 8007370:	5555553e 	.word	0x5555553e
 8007374:	3fc55555 	.word	0x3fc55555
 8007378:	c2f8f359 	.word	0xc2f8f359
 800737c:	01a56e1f 	.word	0x01a56e1f
 8007380:	3fe00000 	.word	0x3fe00000
 8007384:	000fffff 	.word	0x000fffff
 8007388:	3ff00000 	.word	0x3ff00000
 800738c:	4090cbff 	.word	0x4090cbff
 8007390:	3f6f3400 	.word	0x3f6f3400
 8007394:	652b82fe 	.word	0x652b82fe
 8007398:	3c971547 	.word	0x3c971547

0800739c <__ieee754_sqrt>:
 800739c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073a0:	ec55 4b10 	vmov	r4, r5, d0
 80073a4:	4e56      	ldr	r6, [pc, #344]	; (8007500 <__ieee754_sqrt+0x164>)
 80073a6:	43ae      	bics	r6, r5
 80073a8:	ee10 0a10 	vmov	r0, s0
 80073ac:	ee10 3a10 	vmov	r3, s0
 80073b0:	4629      	mov	r1, r5
 80073b2:	462a      	mov	r2, r5
 80073b4:	d110      	bne.n	80073d8 <__ieee754_sqrt+0x3c>
 80073b6:	ee10 2a10 	vmov	r2, s0
 80073ba:	462b      	mov	r3, r5
 80073bc:	f7f9 f91c 	bl	80005f8 <__aeabi_dmul>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4620      	mov	r0, r4
 80073c6:	4629      	mov	r1, r5
 80073c8:	f7f8 ff60 	bl	800028c <__adddf3>
 80073cc:	4604      	mov	r4, r0
 80073ce:	460d      	mov	r5, r1
 80073d0:	ec45 4b10 	vmov	d0, r4, r5
 80073d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073d8:	2d00      	cmp	r5, #0
 80073da:	dc10      	bgt.n	80073fe <__ieee754_sqrt+0x62>
 80073dc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80073e0:	4330      	orrs	r0, r6
 80073e2:	d0f5      	beq.n	80073d0 <__ieee754_sqrt+0x34>
 80073e4:	b15d      	cbz	r5, 80073fe <__ieee754_sqrt+0x62>
 80073e6:	ee10 2a10 	vmov	r2, s0
 80073ea:	462b      	mov	r3, r5
 80073ec:	ee10 0a10 	vmov	r0, s0
 80073f0:	f7f8 ff4a 	bl	8000288 <__aeabi_dsub>
 80073f4:	4602      	mov	r2, r0
 80073f6:	460b      	mov	r3, r1
 80073f8:	f7f9 fa28 	bl	800084c <__aeabi_ddiv>
 80073fc:	e7e6      	b.n	80073cc <__ieee754_sqrt+0x30>
 80073fe:	1509      	asrs	r1, r1, #20
 8007400:	d076      	beq.n	80074f0 <__ieee754_sqrt+0x154>
 8007402:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007406:	07ce      	lsls	r6, r1, #31
 8007408:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800740c:	bf5e      	ittt	pl
 800740e:	0fda      	lsrpl	r2, r3, #31
 8007410:	005b      	lslpl	r3, r3, #1
 8007412:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007416:	0fda      	lsrs	r2, r3, #31
 8007418:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800741c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007420:	2000      	movs	r0, #0
 8007422:	106d      	asrs	r5, r5, #1
 8007424:	005b      	lsls	r3, r3, #1
 8007426:	f04f 0e16 	mov.w	lr, #22
 800742a:	4684      	mov	ip, r0
 800742c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007430:	eb0c 0401 	add.w	r4, ip, r1
 8007434:	4294      	cmp	r4, r2
 8007436:	bfde      	ittt	le
 8007438:	1b12      	suble	r2, r2, r4
 800743a:	eb04 0c01 	addle.w	ip, r4, r1
 800743e:	1840      	addle	r0, r0, r1
 8007440:	0052      	lsls	r2, r2, #1
 8007442:	f1be 0e01 	subs.w	lr, lr, #1
 8007446:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800744a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800744e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007452:	d1ed      	bne.n	8007430 <__ieee754_sqrt+0x94>
 8007454:	4671      	mov	r1, lr
 8007456:	2720      	movs	r7, #32
 8007458:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800745c:	4562      	cmp	r2, ip
 800745e:	eb04 060e 	add.w	r6, r4, lr
 8007462:	dc02      	bgt.n	800746a <__ieee754_sqrt+0xce>
 8007464:	d113      	bne.n	800748e <__ieee754_sqrt+0xf2>
 8007466:	429e      	cmp	r6, r3
 8007468:	d811      	bhi.n	800748e <__ieee754_sqrt+0xf2>
 800746a:	2e00      	cmp	r6, #0
 800746c:	eb06 0e04 	add.w	lr, r6, r4
 8007470:	da43      	bge.n	80074fa <__ieee754_sqrt+0x15e>
 8007472:	f1be 0f00 	cmp.w	lr, #0
 8007476:	db40      	blt.n	80074fa <__ieee754_sqrt+0x15e>
 8007478:	f10c 0801 	add.w	r8, ip, #1
 800747c:	eba2 020c 	sub.w	r2, r2, ip
 8007480:	429e      	cmp	r6, r3
 8007482:	bf88      	it	hi
 8007484:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007488:	1b9b      	subs	r3, r3, r6
 800748a:	4421      	add	r1, r4
 800748c:	46c4      	mov	ip, r8
 800748e:	0052      	lsls	r2, r2, #1
 8007490:	3f01      	subs	r7, #1
 8007492:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007496:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800749a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800749e:	d1dd      	bne.n	800745c <__ieee754_sqrt+0xc0>
 80074a0:	4313      	orrs	r3, r2
 80074a2:	d006      	beq.n	80074b2 <__ieee754_sqrt+0x116>
 80074a4:	1c4c      	adds	r4, r1, #1
 80074a6:	bf13      	iteet	ne
 80074a8:	3101      	addne	r1, #1
 80074aa:	3001      	addeq	r0, #1
 80074ac:	4639      	moveq	r1, r7
 80074ae:	f021 0101 	bicne.w	r1, r1, #1
 80074b2:	1043      	asrs	r3, r0, #1
 80074b4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80074b8:	0849      	lsrs	r1, r1, #1
 80074ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80074be:	07c2      	lsls	r2, r0, #31
 80074c0:	bf48      	it	mi
 80074c2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80074c6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80074ca:	460c      	mov	r4, r1
 80074cc:	463d      	mov	r5, r7
 80074ce:	e77f      	b.n	80073d0 <__ieee754_sqrt+0x34>
 80074d0:	0ada      	lsrs	r2, r3, #11
 80074d2:	3815      	subs	r0, #21
 80074d4:	055b      	lsls	r3, r3, #21
 80074d6:	2a00      	cmp	r2, #0
 80074d8:	d0fa      	beq.n	80074d0 <__ieee754_sqrt+0x134>
 80074da:	02d7      	lsls	r7, r2, #11
 80074dc:	d50a      	bpl.n	80074f4 <__ieee754_sqrt+0x158>
 80074de:	f1c1 0420 	rsb	r4, r1, #32
 80074e2:	fa23 f404 	lsr.w	r4, r3, r4
 80074e6:	1e4d      	subs	r5, r1, #1
 80074e8:	408b      	lsls	r3, r1
 80074ea:	4322      	orrs	r2, r4
 80074ec:	1b41      	subs	r1, r0, r5
 80074ee:	e788      	b.n	8007402 <__ieee754_sqrt+0x66>
 80074f0:	4608      	mov	r0, r1
 80074f2:	e7f0      	b.n	80074d6 <__ieee754_sqrt+0x13a>
 80074f4:	0052      	lsls	r2, r2, #1
 80074f6:	3101      	adds	r1, #1
 80074f8:	e7ef      	b.n	80074da <__ieee754_sqrt+0x13e>
 80074fa:	46e0      	mov	r8, ip
 80074fc:	e7be      	b.n	800747c <__ieee754_sqrt+0xe0>
 80074fe:	bf00      	nop
 8007500:	7ff00000 	.word	0x7ff00000

08007504 <fabs>:
 8007504:	ec51 0b10 	vmov	r0, r1, d0
 8007508:	ee10 2a10 	vmov	r2, s0
 800750c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007510:	ec43 2b10 	vmov	d0, r2, r3
 8007514:	4770      	bx	lr

08007516 <finite>:
 8007516:	b082      	sub	sp, #8
 8007518:	ed8d 0b00 	vstr	d0, [sp]
 800751c:	9801      	ldr	r0, [sp, #4]
 800751e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007522:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007526:	0fc0      	lsrs	r0, r0, #31
 8007528:	b002      	add	sp, #8
 800752a:	4770      	bx	lr
 800752c:	0000      	movs	r0, r0
	...

08007530 <nan>:
 8007530:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007538 <nan+0x8>
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	00000000 	.word	0x00000000
 800753c:	7ff80000 	.word	0x7ff80000

08007540 <rint>:
 8007540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007542:	ec51 0b10 	vmov	r0, r1, d0
 8007546:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800754a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800754e:	2e13      	cmp	r6, #19
 8007550:	ee10 4a10 	vmov	r4, s0
 8007554:	460b      	mov	r3, r1
 8007556:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800755a:	dc58      	bgt.n	800760e <rint+0xce>
 800755c:	2e00      	cmp	r6, #0
 800755e:	da2b      	bge.n	80075b8 <rint+0x78>
 8007560:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007564:	4302      	orrs	r2, r0
 8007566:	d023      	beq.n	80075b0 <rint+0x70>
 8007568:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800756c:	4302      	orrs	r2, r0
 800756e:	4254      	negs	r4, r2
 8007570:	4314      	orrs	r4, r2
 8007572:	0c4b      	lsrs	r3, r1, #17
 8007574:	0b24      	lsrs	r4, r4, #12
 8007576:	045b      	lsls	r3, r3, #17
 8007578:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800757c:	ea44 0103 	orr.w	r1, r4, r3
 8007580:	4b32      	ldr	r3, [pc, #200]	; (800764c <rint+0x10c>)
 8007582:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007586:	e9d3 6700 	ldrd	r6, r7, [r3]
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	4630      	mov	r0, r6
 8007590:	4639      	mov	r1, r7
 8007592:	f7f8 fe7b 	bl	800028c <__adddf3>
 8007596:	e9cd 0100 	strd	r0, r1, [sp]
 800759a:	463b      	mov	r3, r7
 800759c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075a0:	4632      	mov	r2, r6
 80075a2:	f7f8 fe71 	bl	8000288 <__aeabi_dsub>
 80075a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80075aa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80075ae:	4639      	mov	r1, r7
 80075b0:	ec41 0b10 	vmov	d0, r0, r1
 80075b4:	b003      	add	sp, #12
 80075b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075b8:	4a25      	ldr	r2, [pc, #148]	; (8007650 <rint+0x110>)
 80075ba:	4132      	asrs	r2, r6
 80075bc:	ea01 0702 	and.w	r7, r1, r2
 80075c0:	4307      	orrs	r7, r0
 80075c2:	d0f5      	beq.n	80075b0 <rint+0x70>
 80075c4:	0851      	lsrs	r1, r2, #1
 80075c6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80075ca:	4314      	orrs	r4, r2
 80075cc:	d00c      	beq.n	80075e8 <rint+0xa8>
 80075ce:	ea23 0201 	bic.w	r2, r3, r1
 80075d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80075d6:	2e13      	cmp	r6, #19
 80075d8:	fa43 f606 	asr.w	r6, r3, r6
 80075dc:	bf0c      	ite	eq
 80075de:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80075e2:	2400      	movne	r4, #0
 80075e4:	ea42 0306 	orr.w	r3, r2, r6
 80075e8:	4918      	ldr	r1, [pc, #96]	; (800764c <rint+0x10c>)
 80075ea:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80075ee:	4622      	mov	r2, r4
 80075f0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80075f4:	4620      	mov	r0, r4
 80075f6:	4629      	mov	r1, r5
 80075f8:	f7f8 fe48 	bl	800028c <__adddf3>
 80075fc:	e9cd 0100 	strd	r0, r1, [sp]
 8007600:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007604:	4622      	mov	r2, r4
 8007606:	462b      	mov	r3, r5
 8007608:	f7f8 fe3e 	bl	8000288 <__aeabi_dsub>
 800760c:	e7d0      	b.n	80075b0 <rint+0x70>
 800760e:	2e33      	cmp	r6, #51	; 0x33
 8007610:	dd07      	ble.n	8007622 <rint+0xe2>
 8007612:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007616:	d1cb      	bne.n	80075b0 <rint+0x70>
 8007618:	ee10 2a10 	vmov	r2, s0
 800761c:	f7f8 fe36 	bl	800028c <__adddf3>
 8007620:	e7c6      	b.n	80075b0 <rint+0x70>
 8007622:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8007626:	f04f 36ff 	mov.w	r6, #4294967295
 800762a:	40d6      	lsrs	r6, r2
 800762c:	4230      	tst	r0, r6
 800762e:	d0bf      	beq.n	80075b0 <rint+0x70>
 8007630:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8007634:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8007638:	bf1f      	itttt	ne
 800763a:	ea24 0101 	bicne.w	r1, r4, r1
 800763e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8007642:	fa44 f202 	asrne.w	r2, r4, r2
 8007646:	ea41 0402 	orrne.w	r4, r1, r2
 800764a:	e7cd      	b.n	80075e8 <rint+0xa8>
 800764c:	08007c00 	.word	0x08007c00
 8007650:	000fffff 	.word	0x000fffff
 8007654:	00000000 	.word	0x00000000

08007658 <scalbn>:
 8007658:	b570      	push	{r4, r5, r6, lr}
 800765a:	ec55 4b10 	vmov	r4, r5, d0
 800765e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007662:	4606      	mov	r6, r0
 8007664:	462b      	mov	r3, r5
 8007666:	b99a      	cbnz	r2, 8007690 <scalbn+0x38>
 8007668:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800766c:	4323      	orrs	r3, r4
 800766e:	d036      	beq.n	80076de <scalbn+0x86>
 8007670:	4b39      	ldr	r3, [pc, #228]	; (8007758 <scalbn+0x100>)
 8007672:	4629      	mov	r1, r5
 8007674:	ee10 0a10 	vmov	r0, s0
 8007678:	2200      	movs	r2, #0
 800767a:	f7f8 ffbd 	bl	80005f8 <__aeabi_dmul>
 800767e:	4b37      	ldr	r3, [pc, #220]	; (800775c <scalbn+0x104>)
 8007680:	429e      	cmp	r6, r3
 8007682:	4604      	mov	r4, r0
 8007684:	460d      	mov	r5, r1
 8007686:	da10      	bge.n	80076aa <scalbn+0x52>
 8007688:	a32b      	add	r3, pc, #172	; (adr r3, 8007738 <scalbn+0xe0>)
 800768a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768e:	e03a      	b.n	8007706 <scalbn+0xae>
 8007690:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007694:	428a      	cmp	r2, r1
 8007696:	d10c      	bne.n	80076b2 <scalbn+0x5a>
 8007698:	ee10 2a10 	vmov	r2, s0
 800769c:	4620      	mov	r0, r4
 800769e:	4629      	mov	r1, r5
 80076a0:	f7f8 fdf4 	bl	800028c <__adddf3>
 80076a4:	4604      	mov	r4, r0
 80076a6:	460d      	mov	r5, r1
 80076a8:	e019      	b.n	80076de <scalbn+0x86>
 80076aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80076ae:	460b      	mov	r3, r1
 80076b0:	3a36      	subs	r2, #54	; 0x36
 80076b2:	4432      	add	r2, r6
 80076b4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80076b8:	428a      	cmp	r2, r1
 80076ba:	dd08      	ble.n	80076ce <scalbn+0x76>
 80076bc:	2d00      	cmp	r5, #0
 80076be:	a120      	add	r1, pc, #128	; (adr r1, 8007740 <scalbn+0xe8>)
 80076c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076c4:	da1c      	bge.n	8007700 <scalbn+0xa8>
 80076c6:	a120      	add	r1, pc, #128	; (adr r1, 8007748 <scalbn+0xf0>)
 80076c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076cc:	e018      	b.n	8007700 <scalbn+0xa8>
 80076ce:	2a00      	cmp	r2, #0
 80076d0:	dd08      	ble.n	80076e4 <scalbn+0x8c>
 80076d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80076d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80076da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80076de:	ec45 4b10 	vmov	d0, r4, r5
 80076e2:	bd70      	pop	{r4, r5, r6, pc}
 80076e4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80076e8:	da19      	bge.n	800771e <scalbn+0xc6>
 80076ea:	f24c 3350 	movw	r3, #50000	; 0xc350
 80076ee:	429e      	cmp	r6, r3
 80076f0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80076f4:	dd0a      	ble.n	800770c <scalbn+0xb4>
 80076f6:	a112      	add	r1, pc, #72	; (adr r1, 8007740 <scalbn+0xe8>)
 80076f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1e2      	bne.n	80076c6 <scalbn+0x6e>
 8007700:	a30f      	add	r3, pc, #60	; (adr r3, 8007740 <scalbn+0xe8>)
 8007702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007706:	f7f8 ff77 	bl	80005f8 <__aeabi_dmul>
 800770a:	e7cb      	b.n	80076a4 <scalbn+0x4c>
 800770c:	a10a      	add	r1, pc, #40	; (adr r1, 8007738 <scalbn+0xe0>)
 800770e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d0b8      	beq.n	8007688 <scalbn+0x30>
 8007716:	a10e      	add	r1, pc, #56	; (adr r1, 8007750 <scalbn+0xf8>)
 8007718:	e9d1 0100 	ldrd	r0, r1, [r1]
 800771c:	e7b4      	b.n	8007688 <scalbn+0x30>
 800771e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007722:	3236      	adds	r2, #54	; 0x36
 8007724:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007728:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800772c:	4620      	mov	r0, r4
 800772e:	4b0c      	ldr	r3, [pc, #48]	; (8007760 <scalbn+0x108>)
 8007730:	2200      	movs	r2, #0
 8007732:	e7e8      	b.n	8007706 <scalbn+0xae>
 8007734:	f3af 8000 	nop.w
 8007738:	c2f8f359 	.word	0xc2f8f359
 800773c:	01a56e1f 	.word	0x01a56e1f
 8007740:	8800759c 	.word	0x8800759c
 8007744:	7e37e43c 	.word	0x7e37e43c
 8007748:	8800759c 	.word	0x8800759c
 800774c:	fe37e43c 	.word	0xfe37e43c
 8007750:	c2f8f359 	.word	0xc2f8f359
 8007754:	81a56e1f 	.word	0x81a56e1f
 8007758:	43500000 	.word	0x43500000
 800775c:	ffff3cb0 	.word	0xffff3cb0
 8007760:	3c900000 	.word	0x3c900000

08007764 <_init>:
 8007764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007766:	bf00      	nop
 8007768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776a:	bc08      	pop	{r3}
 800776c:	469e      	mov	lr, r3
 800776e:	4770      	bx	lr

08007770 <_fini>:
 8007770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007772:	bf00      	nop
 8007774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007776:	bc08      	pop	{r3}
 8007778:	469e      	mov	lr, r3
 800777a:	4770      	bx	lr
